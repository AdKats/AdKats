/*
 * AdKats - Advanced In-Game Admin and Ban Enforcer for Procon Frostbite.
 * 
 * Copyright 2014 A Different Kind, LLC
 * 
 * AdKats was inspired by the gaming community A Different Kind (ADK). Visit http://www.ADKGamers.com/ for more information.
 *
 * The AdKats Frostbite Plugin is free software: You can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version. AdKats is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. To view this license, visit http://www.gnu.org/licenses/.
 * 
 * Code Credit:
 * Modded Levenshtein Distance algorithm and Tag Parsing from Micovery's InsaneLimits
 * Email System adapted from MorpheusX(AUT)'s "Notify Me!"
 * TeamSpeak Integration by Imisnew2
 * Metabans Integration by Phogue
 * 
 * Development by Daniel J. Gradinjan (ColColonCleaner)
 * 
 * AdKats.cs
 * Version 6.9.0.0
 * 4-NOV-2016
 * 
 * Automatic Update Information
 * <version_code>6.9.0.0</version_code>
 */

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

using Microsoft.CSharp;

using MySql.Data.MySqlClient;

using PRoCon.Core;
using PRoCon.Core.Players;
using PRoCon.Core.Players.Items;
using PRoCon.Core.Plugin;
using PRoCon.Core.Plugin.Commands;
using PRoCon.Core.Maps;

namespace PRoConEvents
{
    public class AdKats : PRoConPluginAPI, IPRoConPluginInterface
    {
        //Current Plugin Version
        private const String PluginVersion = "6.9.0.0";

        public enum GameVersion
        {
            BF3,
            BF4,
            BFHL
        };

        //Metabans Ref
        internal enum SupportedGames
        {
            BF_3,
            BF_4,
            BF_H
        }

        public enum RoundState
        {
            Loaded,
            Playing,
            Ended
        }

        public enum PopulationState
        {
            Unknown,
            Low,
            Medium,
            High,
        }

        public enum PlayerType
        {
            Player,
            Spectator,
            CommanderPC,
            CommanderMobile
        }

        public enum VersionStatus
        {
            OutdatedBuild,
            StableBuild,
            TestBuild,
            UnknownBuild,
            UnfetchedBuild
        }

        public enum AutoSurrenderAction
        {
            None,
            Surrender,
            Nuke,
            Vote
        }

        //State
        public static String[] _SquadNames = new String[] {
            "None",
            "Alpha",
            "Bravo",
            "Charlie",
            "Delta",
            "Echo",
            "Foxtrot",
            "Golf",
            "Hotel",
            "India",
            "Juliet",
            "Kilo",
            "Lima",
            "Mike",
            "November",
            "Oscar",
            "Papa"/*,
            "Quebec",
            "Romeo",
            "Sierra",
            "Tango",
            "Uniform",
            "Victor",
            "Whiskey",
            "Xray",
            "Yankee",
            "Zulu",
            "Haggard",
            "Sweetwater",
            "Preston",
            "Redford",
            "Faith",
            "Celeste"*/
        };
        private const Boolean FullDebug = false;
        private const Boolean SlowMoOnException = false;
        private Boolean _slowmo;
        private volatile String _pluginChangelog;
        private volatile String _pluginDescription;
        private volatile String _pluginLinks;
        private volatile Boolean _pluginEnabled;
        private volatile Boolean _pluginRebootOnDisable;
        private volatile String _pluginRebootOnDisableSource;
        private volatile Boolean _threadsReady;
        private volatile String _latestPluginVersion;
        private Int64 _latestPluginVersionInt;
        private Int64 _currentPluginVersionInt;
        private volatile String _pluginVersionStatusString;
        private volatile VersionStatus _pluginVersionStatus = VersionStatus.UnfetchedBuild;
        private volatile Boolean _pluginUpdateServerInfoChecked;
        private volatile Boolean _pluginUpdatePatched;
        private volatile String _pluginPatchedVersion;
        private Int64 _pluginPatchedVersionInt;
        private volatile String _pluginUpdateProgress = "NotStarted";
        private volatile String _pluginDescFetchProgress = "NotStarted";
        private AdKatsRecord _pluginUpdateCaller;
        private volatile Boolean _useKeepAlive;
        private readonly Dictionary<Int32, Thread> _aliveThreads = new Dictionary<Int32, Thread>();
        private Int32 _startingTicketCount = -1;
        private RoundState _roundState = RoundState.Loaded;
        private Int32 _highestTicketCount;
        private Int32 _lowestTicketCount = 500000;
        private volatile Boolean _fetchedPluginInformation;
        private Boolean _firstUserListComplete;
        private Boolean _firstPlayerListStarted;
        private Boolean _firstPlayerListComplete;
        private Boolean _enforceSingleInstance = true;
        private GameVersion _gameVersion = GameVersion.BF3;
        private Boolean _isTestingAuthorized;
        private Boolean _endingRound;
        private readonly AdKatsServer _serverInfo;
        private TimeSpan _previousRoundDuration = TimeSpan.Zero;
        private Int32 _soldierHealth = 100;
        private Int64 _settingImportID = -1;
        private Boolean _settingsFetched;
        private Boolean _settingsLocked;
        private String _settingsPassword;
        private Int32 _pingKicksThisRound;
        private Int32 _mapBenefitIndex;
        private Int32 _mapDetrimentIndex;
        private Int32 _pingKicksTotal;
        private Int32 _roundID;
        private Boolean _versionTrackingDisabled;
        private Boolean _automaticUpdatesDisabled;
        private String _currentFlagMessage;
        private Boolean _populationPopulating;
        private readonly Dictionary<String, AdKatsPlayer> _populationPopulatingPlayers = new Dictionary<String, AdKatsPlayer>();
        private String _AdKatsLRTExtensionToken = String.Empty;
        private List<CPlayerInfo> _roundOverPlayers = null; 

        //Debug
        private String _debugSoldierName = "ColColonCleaner";
        private Boolean _toldCol;

        //Timing
        private readonly DateTime _proconStartTime = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _AdKatsStartTime = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _AdKatsRunningTime = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _commandStartTime = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastBanListCall = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastDbBanFetch = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastGUIDBanCountFetch = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastIPBanCountFetch = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastNameBanCountFetch = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastStatLoggerStatusUpdateTime = DateTime.UtcNow - TimeSpan.FromMinutes(60);
        private DateTime _lastSuccessfulBanList = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _populationTransitionTime = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _populationUpdateTime = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastDatabaseTimeout = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastDbActionFetch = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastDbSettingFetch = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastSuccessfulPlayerList = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastSettingPageUpdate = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastSettingPageUpdateRequest = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _lastUserFetch = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _LastPlayerMoveIssued = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _LastPluginDescFetch = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private DateTime _LastVersionTrackingUpdate = DateTime.UtcNow - TimeSpan.FromHours(1);
        private DateTime _LastWeaponCodePost = DateTime.UtcNow - TimeSpan.FromHours(1);
        private Boolean _PostedWeaponCodes;
        private DateTime _LastTicketRateDisplay = DateTime.UtcNow - TimeSpan.FromSeconds(30);
        private DateTime _lastAutoSurrenderTriggerTime = DateTime.UtcNow - TimeSpan.FromSeconds(10);
        private DateTime _LastBattlelogAction = DateTime.UtcNow - TimeSpan.FromSeconds(2);
        private DateTime _LastBattlelogIssue = DateTime.UtcNow - TimeSpan.FromSeconds(30);
        private DateTime _LastServerInfoFire = DateTime.UtcNow - TimeSpan.FromSeconds(30);
        private DateTime _LastPlayerListFire = DateTime.UtcNow - TimeSpan.FromSeconds(30);
        private Object _battlelogLocker = new Object();
        private readonly TimeSpan _BattlelogWaitDuration = TimeSpan.FromSeconds(2.5);
        private DateTime _LastIPAPIAction = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private readonly TimeSpan _IPAPIWaitDuration = TimeSpan.FromSeconds(6);
        private Object _IPAPILocker = new Object();
        private DateTime _LastGoogleAction = DateTime.UtcNow - TimeSpan.FromSeconds(0.3);
        private readonly TimeSpan _GoogleWaitDuration = TimeSpan.FromSeconds(0.3);
        private DateTime _lastGlitchedPlayerNotification = DateTime.UtcNow;
        private DateTime _lastInvalidPlayerNameNotification = DateTime.UtcNow;
        private DateTime _lastIPAPIError = DateTime.UtcNow;
        private DateTime _lastBattlelogFrequencyMessage = DateTime.UtcNow - TimeSpan.FromSeconds(5);
        private Queue<DateTime> _BattlelogActionTimes = new Queue<DateTime>();
        private Queue<TimeSpan> _startupDurations = new Queue<TimeSpan>();

        //Server
        private PopulationState _populationStatus = PopulationState.Unknown;
        private readonly Dictionary<PopulationState, TimeSpan> _populationDurations = new Dictionary<PopulationState, TimeSpan>();
        private Int32 _lowPopulationPlayerCount = 20;
        private Int32 _highPopulationPlayerCount = 40;
        private Dictionary<String, String> ReadableMaps = new Dictionary<string, string>();
        private Dictionary<String, String> ReadableModes = new Dictionary<string, string>();

        //MySQL connection
        private String _mySqlSchemaName = "";
        private String _mySqlHostname = "";
        private String _mySqlPassword = "";
        private String _mySqlPort = "";
        private String _mySqlUsername = "";
        private readonly MySqlConnectionStringBuilder _dbCommStringBuilder = new MySqlConnectionStringBuilder();
        private Boolean _fetchActionsFromDb = true;
        private const Boolean UseConnectionPooling = true;
        private const Int32 MinConnectionPoolSize = 0;
        private const Int32 MaxConnectionPoolSize = 20;
        private const Boolean UseCompressedConnection = false;
        private const Int32 DatabaseTimeoutThreshold = 15;
        private const Int32 DatabaseSuccessThreshold = 5;
        private Boolean _databaseConnectionCriticalState;
        private Int32 _databaseSuccess;
        private Int32 _databaseTimeouts;
        private readonly List<Double> _DatabaseReaderDurations = new List<Double>();
        private Double _DatabaseReadAverageDuration = 100;
        private readonly List<Double> _DatabaseNonQueryDurations = new List<Double>();
        private Double _DatabaseWriteAverageDuration = 100;
        private volatile Boolean _dbSettingsChanged = true;
        private Boolean _dbTimingChecked;
        private Boolean _dbTimingValid;
        private TimeSpan _dbTimingOffset = TimeSpan.Zero;
        private Boolean _globalTimingChecked;
        private Boolean _globalTimingValid;
        private TimeSpan _globalTimingOffset = TimeSpan.Zero;
        private Boolean _timingValidOverride;
        private Hashtable _lastStatLoggerStatusUpdate;
        private String _statLoggerVersion = "BF3";

        //Action fetching
        private const Int32 DbActionFetchFrequency = 10;
        private const Int32 DbSettingFetchFrequency = 300;
        private const Int32 DbBanFetchFrequency = 60;

        //Event trigger dictionaries
        private readonly Dictionary<String, AdKatsRecord> _ActOnIsAliveDictionary = new Dictionary<String, AdKatsRecord>();
        private readonly Dictionary<String, AdKatsRecord> _ActOnSpawnDictionary = new Dictionary<String, AdKatsRecord>();
        private readonly Dictionary<String, AdKatsRecord> _LoadoutConfirmDictionary = new Dictionary<String, AdKatsRecord>();
        private readonly Dictionary<String, AdKatsRecord> _ActionConfirmDic = new Dictionary<String, AdKatsRecord>();
        private readonly Dictionary<String, Int32> _RoundMutedPlayers = new Dictionary<String, Int32>();
        private readonly Dictionary<String, AdKatsRecord> _RoundReports = new Dictionary<String, AdKatsRecord>();
        private readonly HashSet<String> _RoundReportHistory = new HashSet<String>();
        private readonly HashSet<String> _PlayersRequestingCommands = new HashSet<String>();

        //Threads
        private Thread _Activator;
        private Thread _Finalizer;
        private Thread _DatabaseCommunicationThread;
        private Thread _MessageProcessingThread;
        private Thread _CommandParsingThread;
        private Thread _PlayerListingThread;
        private Thread _TeamSwapThread;
        private Thread _BanEnforcerThread;
        private Thread _RoundTimerThread;
        private Thread _KillProcessingThread;
        private Thread _HackerCheckerThread;
        private Thread _DisconnectHandlingThread;
        private Thread _AccessFetchingThread;
        private Thread _ActionHandlingThread;
        private Thread _BattlelogCommThread;
        private Thread _IPAPICommThread;

        //Threading queues
        private readonly Queue<AdKatsPlayer> _BanEnforcerCheckingQueue = new Queue<AdKatsPlayer>();
        private readonly Queue<AdKatsBan> _BanEnforcerProcessingQueue = new Queue<AdKatsBan>();
        private readonly Queue<CBanInfo> _CBanProcessingQueue = new Queue<CBanInfo>();
        private readonly Queue<AdKatsCommand> _CommandRemovalQueue = new Queue<AdKatsCommand>();
        private readonly Queue<AdKatsCommand> _CommandUploadQueue = new Queue<AdKatsCommand>();
        private readonly Queue<AdKatsPlayer> _HackerCheckerQueue = new Queue<AdKatsPlayer>();
        private readonly Queue<Kill> _KillProcessingQueue = new Queue<Kill>();
        private readonly Queue<List<CPlayerInfo>> _PlayerListProcessingQueue = new Queue<List<CPlayerInfo>>();
        private readonly Queue<CPlayerInfo> _PlayerRemovalProcessingQueue = new Queue<CPlayerInfo>();
        private readonly Queue<AdKatsRole> _RoleRemovalQueue = new Queue<AdKatsRole>();
        private readonly Queue<AdKatsRole> _RoleUploadQueue = new Queue<AdKatsRole>();
        private readonly Queue<CPluginVariable> _SettingUploadQueue = new Queue<CPluginVariable>();
        private readonly Queue<AdKatsChatMessage> _UnparsedCommandQueue = new Queue<AdKatsChatMessage>();
        private readonly Queue<AdKatsChatMessage> _UnparsedMessageQueue = new Queue<AdKatsChatMessage>();
        private readonly Queue<AdKatsRecord> _UnprocessedActionQueue = new Queue<AdKatsRecord>();
        private readonly Queue<AdKatsRecord> _UnprocessedRecordQueue = new Queue<AdKatsRecord>();
        private readonly Queue<AdKatsStatistic> _UnprocessedStatisticQueue = new Queue<AdKatsStatistic>();
        private readonly Queue<AdKatsUser> _UserRemovalQueue = new Queue<AdKatsUser>();
        private readonly Queue<AdKatsUser> _UserUploadQueue = new Queue<AdKatsUser>();
        private readonly Queue<AdKatsPlayer> _BattlelogFetchQueue = new Queue<AdKatsPlayer>();
        private readonly Queue<AdKatsPlayer> _IPInfoFetchQueue = new Queue<AdKatsPlayer>();

        //Threading wait handles
        private EventWaitHandle _threadMasterWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _WeaponStatsWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _AccessFetchWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _TeamswapWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _StatLoggerStatusWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _ServerInfoWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _RoundEndingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _PlayerListUpdateWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _MessageParsingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _KillProcessingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _HackerCheckerWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _DbCommunicationWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _CommandParsingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _BanEnforcerWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _ActionHandlingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _PlayerProcessingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _PluginDescriptionWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private EventWaitHandle _BattlelogCommWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        private readonly EventWaitHandle _IPInfoWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);

        //Procon MatchCommand
        private readonly MatchCommand _PluginEnabledMatchCommand;
        private readonly MatchCommand _fetchAuthorizedSoldiersMatchCommand;
        private readonly MatchCommand _subscribeAsClientMatchCommand;
        private readonly MatchCommand _issueCommandMatchCommand;

        //Commands global
        private readonly Dictionary<long, AdKatsCommand> _CommandIDDictionary = new Dictionary<long, AdKatsCommand>();
        private readonly Dictionary<String, AdKatsCommand> _CommandKeyDictionary = new Dictionary<String, AdKatsCommand>();
        private readonly Dictionary<String, AdKatsCommand> _CommandNameDictionary = new Dictionary<String, AdKatsCommand>();
        private readonly Dictionary<String, AdKatsCommand> _CommandTextDictionary = new Dictionary<String, AdKatsCommand>();
        private readonly Dictionary<String, String> _CommandDescriptionDictionary = new Dictionary<string, string>();
        private readonly Dictionary<String, Func<AdKats, Double>> _commandTimeoutDictionary = new Dictionary<string, Func<AdKats, double>>();
        private readonly Dictionary<String, DateTime> _commandUsageTimes = new Dictionary<string, DateTime>();
        private Boolean _AllowAdminSayCommands = true;
        private Boolean _bypassCommandConfirmation = false;
        private List<String> _ExternalPlayerCommands = new List<string>();
        private List<String> _ExternalAdminCommands = new List<string>();
        private List<String> _CommandTargetWhitelistCommands = new List<string>();
        private Int32 _RequiredReasonLength = 4;
        //Commands specific
        private String _ServerVoipAddress = "(TS3) TS.ADKGamers.com:3796";
        //Dynamic access
        public Func<AdKats, AdKatsPlayer, Boolean> AAPerkFunc = ((plugin, aPlayer) => ((plugin._EnableAdminAssistantPerk && aPlayer.player_aa) || (aPlayer.player_reputation > _reputationThresholdGood)));
        public Func<AdKats, AdKatsPlayer, Boolean> TeamSwapFunc = ((plugin, aPlayer) => ((plugin._EnableAdminAssistantPerk && aPlayer.player_aa) || plugin.GetMatchingVerboseASPlayersOfGroup("whitelist_teamswap", aPlayer).Any()));

        //Roles
        private readonly Dictionary<long, AdKatsRole> _RoleIDDictionary = new Dictionary<long, AdKatsRole>();
        private readonly Dictionary<String, AdKatsRole> _RoleKeyDictionary = new Dictionary<String, AdKatsRole>();
        private readonly Dictionary<String, AdKatsRole> _RoleNameDictionary = new Dictionary<String, AdKatsRole>();
        private Boolean _PlayerRoleRefetch;

        //Users
        private const Int32 DbUserFetchFrequency = 300;
        private readonly Dictionary<long, AdKatsUser> _userCache = new Dictionary<long, AdKatsUser>();
        private readonly Dictionary<Int64, AdKatsSpecialGroup> _specialPlayerGroupIDDictionary = new Dictionary<Int64, AdKatsSpecialGroup>();
        private readonly Dictionary<String, AdKatsSpecialGroup> _specialPlayerGroupKeyDictionary = new Dictionary<String, AdKatsSpecialGroup>();
        private readonly Dictionary<Int64, AdKatsSpecialPlayer> _baseSpecialPlayerCache = new Dictionary<Int64, AdKatsSpecialPlayer>();
        private readonly Dictionary<String, AdKatsSpecialPlayer> _verboseSpecialPlayerCache = new Dictionary<String, AdKatsSpecialPlayer>();

        //Games and teams
        private readonly Dictionary<Int64, GameVersion> _gameIDDictionary = new Dictionary<Int64, GameVersion>();
        private readonly Dictionary<Int32, AdKatsTeam> _teamDictionary = new Dictionary<Int32, AdKatsTeam>();
        private Boolean _acceptingTeamUpdates;
        private readonly Dictionary<String, Int32> _unmatchedRoundDeathCounts = new Dictionary<String, Int32>();
        private readonly HashSet<String> _unmatchedRoundDeaths = new HashSet<String>();
        private readonly Dictionary<String, AdKatsRecord> _roundAssists = new Dictionary<String, AdKatsRecord>();

        //Players
        private readonly Dictionary<String, AdKatsPlayer> _PlayerDictionary = new Dictionary<String, AdKatsPlayer>();
        private readonly Dictionary<String, List<AdKatsPlayer>> _RoundOverSquads = new Dictionary<String, List<AdKatsPlayer>>();
        private readonly Dictionary<String, AdKatsPlayer> _PlayerLeftDictionary = new Dictionary<String, AdKatsPlayer>();
        private readonly Dictionary<Int64, AdKatsPlayer> _FetchedPlayers = new Dictionary<Int64, AdKatsPlayer>();
        private readonly Dictionary<Int64, HashSet<Int64>> _RoundPlayerIDs = new Dictionary<Int64, HashSet<Int64>>();

        //Punishment settings
        private readonly List<String> _PunishmentSeverityIndex;
        private Boolean _CombineServerPunishments;
        private Boolean _AutomaticForgives;
        private Int32 _AutomaticForgiveLastPunishDays = 30;
        private Int32 _AutomaticForgiveLastForgiveDays = 14;
        private Boolean _IROActive = true;
        private Boolean _IROOverridesLowPop;
        private Int32 _IROTimeout = 10;
        private Boolean _OnlyKillOnLowPop = true;
        private String[] _PunishmentHierarchy = { "warn", "kill", "kick", "tban60", "tban120", "tbanday", "tban2days", "tban3days", "tbanweek", "tban2weeks", "tbanmonth", "ban" };

        //Teamswap
        private Int32 _TeamSwapTicketWindowHigh = 500000;
        private Int32 _TeamSwapTicketWindowLow;
        private Queue<CPlayerInfo> _Team1MoveQueue = new Queue<CPlayerInfo>();
        private Queue<CPlayerInfo> _Team2MoveQueue = new Queue<CPlayerInfo>();
        private Queue<CPlayerInfo> _TeamswapForceMoveQueue = new Queue<CPlayerInfo>();
        private Queue<CPlayerInfo> _TeamswapOnDeathCheckingQueue = new Queue<CPlayerInfo>();
        private readonly Dictionary<String, CPlayerInfo> _TeamswapOnDeathMoveDic = new Dictionary<String, CPlayerInfo>();

        //AFK manager
        private Boolean _AFKManagerEnable;
        private Boolean _AFKAutoKickEnable;
        private Double _AFKTriggerDurationMinutes = 5;
        private Int32 _AFKTriggerMinimumPlayers = 20;
        private Boolean _AFKIgnoreUserList = true;
        private String[] _AFKIgnoreRoles = { };
        private Boolean _AFKIgnoreChat;

        //Ping enforcer
        private Boolean _pingEnforcerEnable;
        private Int32 _pingEnforcerTriggerMinimumPlayers = 50;
        private Double _pingEnforcerLowTriggerMS = 300;
        private Int32[] _pingEnforcerLowTimeModifier = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        private Double _pingEnforcerMedTriggerMS = 300;
        private Int32[] _pingEnforcerMedTimeModifier = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        private Double _pingEnforcerHighTriggerMS = 300;
        private Int32[] _pingEnforcerHighTimeModifier = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        private Double _pingEnforcerFullTriggerMS = 300;
        private Int32[] _pingEnforcerFullTimeModifier = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        private Double _pingMovingAverageDurationSeconds = 180;
        private Boolean _pingEnforcerKickMissingPings = true;
        private Boolean _pingEnforcerIgnoreUserList = true;
        private String _pingEnforcerMessagePrefix = "Please fix your ping and join us again.";
        private String[] _pingEnforcerIgnoreRoles = { };
        private Boolean _attemptManualPingWhenMissing = false;

        //Commander manager
        private Boolean _CMDRManagerEnable = false;
        private Int32 _CMDRMinimumPlayers = 40;

        //Ban enforcer
        private Boolean _UseBanAppend;
        private String _BanAppend = "Appeal at your_site.com";
        private Boolean _UseBanEnforcer;
        private Boolean _UseBanEnforcerPreviousState;
        private List<AdKatsBan> _BanEnforcerSearchResults = new List<AdKatsBan>();
        private Boolean _BansQueuing;
        private String _CBanAdminName = "BanEnforcer";
        private Boolean _DefaultEnforceGUID = true;
        private Boolean _DefaultEnforceIP = false;
        private Boolean _DefaultEnforceName = false;
        private Int64 _GUIDBanCount = -1;
        private Int64 _IPBanCount = -1;
        private Int64 _NameBanCount = -1;
        private TimeSpan _MaxTempBanDuration = TimeSpan.FromDays(3650);
        //Metabans
        private Boolean _useMetabans = false;
        private String _metabansAPIKey = "";
        private String _metabansUsername = "";
        private String[] _metabansFilterStrings = { };

        //Reports
        public String[] _AutoReportHandleStrings = { };
        private Boolean _InformReportedPlayers;
        private String[] _PlayerInformExclusionStrings = { };
        private Int32 _MinimumReportHandleSeconds;

        //Email
        private Boolean _UseEmail;

        //PushBullet
        private Boolean _UsePushBullet;

        //Muting
        private Int32 _MutedPlayerChances = 5;
        private String _MutedPlayerKickMessage = "Talking excessively while muted.";
        private String _MutedPlayerKillMessage = "Do not talk while muted. You can speak again next round.";
        private String _MutedPlayerMuteMessage = "You have been muted by an admin, talking will cause punishment. You can speak again next round.";
        private Boolean _MutedPlayerIgnoreCommands = true;

        //Surrender
        private Boolean _surrenderVoteEnable;
        private Double _surrenderVoteMinimumPlayerPercentage = 30;
        private Int32 _surrenderVoteMinimumPlayerCount = 16;
        private Int32 _surrenderVoteMinimumTicketGap = 250;
        private Boolean _surrenderVoteTicketRateGapEnable;
        private Double _surrenderVoteMinimumTicketRateGap = 10;
        private Boolean _surrenderVoteTimeoutEnable;
        private Double _surrenderVoteTimeoutMinutes = 5;
        private Boolean _surrenderVoteActive;
        private Boolean _surrenderVoteSucceeded;
        private DateTime _surrenderVoteStartTime = DateTime.UtcNow;
        private readonly HashSet<String> _surrenderVoteList = new HashSet<String>();
        private readonly HashSet<String> _nosurrenderVoteList = new HashSet<String>();
        //Auto-Surrender
        private Boolean _surrenderAutoEnable;
        private Boolean _surrenderAutoSucceeded;
        private Boolean _surrenderAutoUseMetroValues;
        private Boolean _surrenderAutoUseLockerValues;
        private Int32 _surrenderAutoMinimumTicketGap = 100;
        private Int32 _surrenderAutoMinimumTicketCount = 100;
        private Int32 _surrenderAutoMaximumTicketCount = 999;
        private Double _surrenderAutoLosingRateMax = 999;
        private Double _surrenderAutoLosingRateMin = 999;
        private Double _surrenderAutoWinningRateMax = 999;
        private Double _surrenderAutoWinningRateMin = 999;
        private Int32 _surrenderAutoTriggerCountToSurrender = 10;
        private Boolean _surrenderAutoResetTriggerCountOnCancel = true;
        private Boolean _surrenderAutoResetTriggerCountOnFire = true;
        private Int32 _surrenderAutoTriggerCountCurrent;
        private Int32 _surrenderAutoTriggerCountPause;
        private Int32 _surrenderAutoMinimumPlayers = 10;
        private String _surrenderAutoMessage = "Auto-Resolving Round. %WinnerName% Wins!";
        private Boolean _surrenderAutoNukeInstead;
        private Boolean _autoNukeActive = false;
        private Int32 _surrenderAutoNukeDurationHigh = 0;
        private Int32 _surrenderAutoNukeDurationMed = 0;
        private Int32 _surrenderAutoNukeDurationLow = 0;
        private Int32 _autoNukeDuration = 0;
        private Int32 _surrenderAutoNukeDurationIncrease = 0;
        private Int32 _surrenderAutoNukeMinBetween = 60;
        private DateTime _surrenderAutoNukeLast = DateTime.UtcNow - TimeSpan.FromMinutes(10);
        private AdKatsTeam _surrenderAutoNukeLastTeam;
        private Boolean _surrenderAutoAnnounceNukePrep = true;
        private Boolean _surrenderAutoNukeLosingTeams = false;
        private Int32 _surrenderAutoNukeLosingMaxDiff = 200;
        private Boolean _surrenderAutoNukeResolveAfterMax = false;
        private Int32 _surrenderAutoMaxNukesEachRound = 4;
        private Int32 _autoNukesThisRound = 0;
        private Boolean _surrenderAutoTriggerVote;
        private String _surrenderAutoNukeMessage = "Nuking %WinnerName% for baserape!";
        private Int32 _NukeCountdownDurationSeconds = 0;
        private Int32 _NukeWinningTeamUpTicketCount = 9999;

        //EmailHandler
        private EmailHandler _EmailHandler;
        private Boolean _EmailReportsOnlyWhenAdminless;

        //PushBullet
        private PushBulletHandler _PushBulletHandler;
        private Boolean _PushBulletReportsOnlyWhenAdminless;

        //Perks
        private String[] _PerkSpecialPlayerGroups = {
            "slot_reserved",
            "slot_spectator",
            "whitelist_report",
            "whitelist_spambot",
            "whitelist_adminassistant",
            "whitelist_ping",
            "whitelist_hackerchecker",
            "whitelist_multibalancer",
            "whitelist_populator",
            "whitelist_teamkill"
        };
        private Boolean _UsePerkExpirationNotify = false;
        private Int32 _PerkExpirationNotifyDays = 7;
        //Orchestration
        private List<String> _CurrentReservedSlotPlayers;
        private List<String> _CurrentSpectatorListPlayers;
        private Boolean _FeedMultiBalancerWhitelist;
        private Boolean _FeedMultiBalancerWhitelist_Admins = true;
        private Boolean _FeedMultiBalancerDisperseList;
        private Boolean _FeedTeamKillTrackerWhitelist;
        private Boolean _FeedTeamKillTrackerWhitelist_Admins;
        private Boolean _FeedServerReservedSlots;
        private Boolean _FeedServerReservedSlots_Admins = true;
        private Boolean _FeedServerReservedSlots_Admins_Online = false;
        private Boolean _FeedServerSpectatorList;
        private Boolean _FeedServerSpectatorList_Admins;
        private Boolean _FeedStatLoggerSettings;
        private Boolean _PostStatLoggerChatManually;
        private Boolean _PostStatLoggerChatManually_PostServerChatSpam = true;
        private Boolean _PostStatLoggerChatManually_IgnoreCommands;
        private Boolean _PostMapBenefitStatistics;
        private Boolean _MULTIBalancerUnswitcherDisabled;
        public readonly String[] _subscriptionGroups = { "OnlineSoldiers" };
        private readonly List<AdKatsClient> _subscribedClients = new List<AdKatsClient>();
        private String[] _BannedTags = { };
        //Top Players
        private Boolean _UseTopPlayerMonitor;
        private Boolean currentStartingTeam1 = true;
        private Boolean _PlayersAutoAssistedThisRound = false;
        private Int32 _TopPlayersTeamConfirmationDuration = 5;
        private String _TopPlayersAffected = "Good And Above";
        private readonly Dictionary<String, AdKatsPlayer> _topPlayers = new Dictionary<String, AdKatsPlayer>();
        //Populators
        private Boolean _PopulatorMonitor;
        private Boolean _PopulatorUseSpecifiedPopulatorsOnly;
        private Boolean _PopulatorPopulatingThisServerOnly;
        private Int32 _PopulatorMinimumPopulationCountPastWeek = 5;
        private Int32 _PopulatorMinimumPopulationCountPast2Weeks = 10;
        private readonly Dictionary<String, AdKatsPlayer> _populatorPlayers = new Dictionary<String, AdKatsPlayer>();
        private Boolean _PopulatorPerksEnable;
        private Boolean _PopulatorPerksReservedSlot;
        private Boolean _PopulatorPerksBalanceWhitelist;
        private Boolean _PopulatorPerksPingWhitelist;
        private Boolean _PopulatorPerksTeamKillTrackerWhitelist;
        //Teamspeak
        private readonly TeamSpeakClientViewer _tsViewer;
        private Boolean _TeamspeakPlayerMonitorView;
        private Boolean _TeamspeakPlayerMonitorEnable;
        private readonly Dictionary<String, AdKatsPlayer> _tsPlayers = new Dictionary<String, AdKatsPlayer>();
        private Boolean _TeamspeakPlayerPerksEnable;
        private Boolean _TeamspeakPlayerPerksVIPKickWhitelist;
        private Boolean _TeamspeakPlayerPerksBalanceWhitelist;
        private Boolean _TeamspeakPlayerPerksPingWhitelist;
        private Boolean _TeamspeakPlayerPerksTeamKillTrackerWhitelist;


        //Hacker-checker
        private Boolean _useHackerCheckerLIVESystem = true;
        private Boolean _UseHskChecker;
        private Boolean _UseKpmChecker;
        private Double _HskTriggerLevel = 60.0;
        private Double _KpmTriggerLevel = 5.0;
        private String _HackerCheckerDPSBanMessage = "DPS Automatic Ban";
        private String _HackerCheckerHSKBanMessage = "HSK Automatic Ban";
        private String _HackerCheckerKPMBanMessage = "KPM Automatic Ban";

        //External commands
        private readonly String _instanceKey = GetRandom32BitHashCode();

        //Admin assistants
        public Boolean _EnableAdminAssistantPerk = false;
        public Boolean _EnableAdminAssistants = false;
        public Int32 _MinimumRequiredMonthlyReports = 10;
        public Boolean _UseAAReportAutoHandler = false;

        //Messaging
        private List<String> _PreMessageList;
        private Boolean _RequirePreMessageUse;
        private Boolean _ShowAdminNameInAnnouncement;
        private Boolean _ShowNewPlayerAnnouncement = true;
        private Boolean _ShowPlayerNameChangeAnnouncement = true;
        private Boolean _ShowTargetedPlayerLeftNotification = true;
        private Int32 _YellDuration = 5;
        private Boolean _UseFirstSpawnMessage;
        private Boolean _useFirstSpawnRepMessage;
        private String _FirstSpawnMessage = "FIRST SPAWN MESSAGE";
        private Boolean _DisplayTicketRatesInProconChat;
        private Boolean _InformReputablePlayersOfAdminJoins = false;
        private Boolean _InformAdminsOfAdminJoins = true;

        //SpamBot
        private Boolean _spamBotEnabled;
        private List<String> _spamBotSayList;
        private readonly Queue<String> _spamBotSayQueue = new Queue<String>();
        private Int32 _spamBotSayDelaySeconds = 300;
        private DateTime _spamBotSayLastPost = DateTime.UtcNow - TimeSpan.FromSeconds(300);
        private List<String> _spamBotYellList;
        private readonly Queue<String> _spamBotYellQueue = new Queue<String>();
        private Int32 _spamBotYellDelaySeconds = 600;
        private DateTime _spamBotYellLastPost = DateTime.UtcNow - TimeSpan.FromSeconds(600);
        private List<String> _spamBotTellList;
        private readonly Queue<String> _spamBotTellQueue = new Queue<String>();
        private Int32 _spamBotTellDelaySeconds = 900;
        private DateTime _spamBotTellLastPost = DateTime.UtcNow - TimeSpan.FromSeconds(900);
        private Boolean _spamBotExcludeAdminsAndWhitelist;
        //Rules
        private Double _ServerRulesDelay = 0.5;
        private Double _ServerRulesInterval = 5;
        private String[] _ServerRulesList = { "This server has not set rules yet." };
        private Boolean _ServerRulesNumbers = true;
        private Boolean _ServerRulesYell;

        //Locking
        private Double _playerLockingManualDuration = 10;
        private Boolean _playerLockingAutomaticLock;
        private Double _playerLockingAutomaticDuration = 2.5;

        //Round monitor
        private Boolean _useRoundTimer;
        private Double _maxRoundTimeMinutes = 30;

        //Reputation
        private Dictionary<String, Double> _commandSourceReputationDictionary;
        private Dictionary<String, Double> _commandTargetReputationDictionary;
        private const Double _reputationThresholdGood = 75;
        private const Double _reputationThresholdBad = 0;

        //Battlecries
        public enum BattlecryVolume
        {
            Say,
            Yell,
            Tell,
            Disabled
        }
        private BattlecryVolume _battlecryVolume = BattlecryVolume.Disabled;
        private Int32 _battlecryMaxLength = 100;
        private String[] _battlecryDeniedWords = { };

        //Faction randomizer
        public enum FactionRandomizerRestriction
        {
            NoRestriction,
            NeverSameFaction,
            AlwaysSameFaction,
            AlwaysSwapUSvsRU,
            AlwaysSwapUSvsCN,
            AlwaysSwapRUvsCN,
            AlwaysBothUS,
            AlwaysBothRU,
            AlwaysBothCN,
            AlwaysUSvsX,
            AlwaysRUvsX,
            AlwaysCNvsX,
            NeverUSvsX,
            NeverRUvsX,
            NeverCNvsX
        }
        private Boolean _factionRandomizerEnable = false;
        private FactionRandomizerRestriction _factionRandomizerRestriction = FactionRandomizerRestriction.NoRestriction;
        private Boolean _factionRandomizerAllowRepeatSelection = true;
        private Int32 _factionRandomizerCurrentTeam1 = 0;
        private Int32 _factionRandomizerCurrentTeam2 = 1;

        //Weapon stats
        private readonly Dictionary<String, AdKatsWeaponName> _weaponNames = new Dictionary<String, AdKatsWeaponName>();
        private StatLibrary _StatLibrary;
        HashSet<String> _hackerCheckedPlayers = new HashSet<String>();
        HashSet<String> _hackerCheckedPlayersStats = new HashSet<String>();

        //Experimental
        private Boolean _useExperimentalTools;
        private readonly Ping _pingProcessor = new Ping();
        private Boolean _WeaponCodesTableTested;
        private Boolean _WeaponCodesTableConfirmed;
        private Boolean _UseGrenadeCookCatcher;
        private Dictionary<String, AdKatsPlayer> _RoundCookers = new Dictionary<String, AdKatsPlayer>();
        private Boolean _UseWeaponLimiter;
        private String _WeaponLimiterExceptionString = "_Flechette|_Slug";
        private String _WeaponLimiterString = "M320|RPG|SMAW|C4|M67|Claymore|FGM-148|FIM92|ROADKILL|Death|_LVG|_HE|_Frag|_XM25|_FLASH|_V40|_M34|_Flashbang|_SMK|_Smoke|_FGM148|_Grenade|_SLAM|_NLAW|_RPG7|_C4|_Claymore|_FIM92|_M67|_SMAW|_SRAW|_Sa18IGLA|_Tomahawk";
        private readonly HashSet<String> _DetectedWeaponCodes = new HashSet<String>();
        public Dictionary<String, DamageTypes> WeaponTypeDictionary = null;

        //Settings display
        private Dictionary<String, String> _SettingSections = new Dictionary<String, String>();
        private String _SettingSectionEnum;
        private String _CurrentSettingSection;
        private const String _AllSettingSections = "All Settings .*";

        public readonly Logger Log;

        public AdKats()
        {
            Log = new Logger(this);
            //Create the server reference
            _serverInfo = new AdKatsServer(this);

            //Set defaults for webclient
            ServicePointManager.Expect100Continue = false;

            //By default plugin is not enabled or ready
            _pluginEnabled = false;
            _threadsReady = false;
            //Assign the match commands
            _PluginEnabledMatchCommand = new MatchCommand("AdKats", "PluginEnabled", new List<String>(), "AdKats_PluginEnabled", new List<MatchArgumentFormat>(), new ExecutionRequirements(ExecutionScope.None), "Useable by other plugins to check if AdKats is enabled or in process of starting up.");
            _issueCommandMatchCommand = new MatchCommand("AdKats", "IssueCommand", new List<String>(), "AdKats_IssueCommand", new List<MatchArgumentFormat>(), new ExecutionRequirements(ExecutionScope.None), "Useable by other plugins to call AdKats commands.");
            _fetchAuthorizedSoldiersMatchCommand = new MatchCommand("AdKats", "FetchAuthorizedSoldiers", new List<String>(), "AdKats_FetchAuthorizedSoldiers", new List<MatchArgumentFormat>(), new ExecutionRequirements(ExecutionScope.None), "Useable by other plugins to fetch authorized soldiers.");
            _subscribeAsClientMatchCommand = new MatchCommand("AdKats", "SubscribeAsClient", new List<String>(), "AdKats_SubscribeAsClient", new List<MatchArgumentFormat>(), new ExecutionRequirements(ExecutionScope.None), "Useable by other plugins to subscribe to group events.");
            //Debug level is 0 by default
            Log.DebugLevel = 0;

            //Setting Sections
            AddSettingSection("*", _AllSettingSections);
            AddSettingSection("0", "Instance Settings");
            AddSettingSection("1", "Server Settings");
            AddSettingSection("2", "MySQL Settings");
            AddSettingSection("3", "User Settings");
            AddSettingSection("3-2", "Special Player Display");
            AddSettingSection("3-3", "Verbose Special Player Display");
            AddSettingSection("4", "Role Settings");
            AddSettingSection("4-2", "Role Group Settings");
            AddSettingSection("5", "Command Settings");
            AddSettingSection("6", "Command List");
            AddSettingSection("7", "Punishment Settings");
            AddSettingSection("8", "Email Settings");
            AddSettingSection("8-2", "PushBullet Settings");
            AddSettingSection("9", "TeamSwap Settings");
            AddSettingSection("A10", "Admin Assistant Settings");
            AddSettingSection("A11", "Player Mute Settings");
            AddSettingSection("A12", "Messaging Settings");
            AddSettingSection("A12-2", "SpamBot Settings");
            AddSettingSection("A12-3", "Battlecry Settings - Thanks WDF");
            AddSettingSection("A13", "Banning Settings");
            AddSettingSection("A13-2", "Ban Enforcer Settings");
            AddSettingSection("A13-3", "Mini Ban Management");
            AddSettingSection("A14", "External Command Settings");
            AddSettingSection("A15", "VOIP Settings");
            AddSettingSection("A16", "Orchestration Settings");
            AddSettingSection("A17", "Round Settings");
            AddSettingSection("A17-2", "Round Faction Randomizer Settings - Thanks FPSG");
            AddSettingSection("A18", "Internal Hacker-Checker Settings");
            AddSettingSection("A19", "Server Rules Settings");
            AddSettingSection("B20", "AFK Settings");
            AddSettingSection("B21", "Ping Enforcer Settings");
            AddSettingSection("B22", "Commander Manager Settings");
            AddSettingSection("B23", "Player Locking Settings");
            AddSettingSection("B24", "Surrender Vote Settings");
            AddSettingSection("B25", "Auto-Surrender Settings");
            AddSettingSection("B25-2", "Auto-Nuke Settings");
            AddSettingSection("B26", "Statistics Settings");
            AddSettingSection("B27", "Player Monitor Settings");
            AddSettingSection("B27-2", "Populator Monitor Settings - Thanks CMWGaming");
            AddSettingSection("B27-3", "Teamspeak Player Monitor Settings - Thanks CMWGaming");
            AddSettingSection("B27-4", "Top Player Monitor Settings");
            AddSettingSection("D98", "Database Timing Mismatch");
            AddSettingSection("D99", "Debugging");
            AddSettingSection("X99", "Experimental");
            //Build setting section enum
            _SettingSectionEnum = String.Empty;
            Random random = new Random();
            var sections = _SettingSections.Keys.ToList();
            sections.Sort();
            foreach (String sectionKey in sections) {
                if (String.IsNullOrEmpty(_SettingSectionEnum)) {
                    _SettingSectionEnum += "enum.SettingSectionEnum_" + random.Next(100000, 999999) + "(";
                } else {
                    _SettingSectionEnum += "|";
                }
                _SettingSectionEnum += GetSettingSection(sectionKey);
            }
            _SettingSectionEnum += ")";
            //Set default setting section
            _CurrentSettingSection = GetSettingSection("*");

            //Init the punishment severity index
            _PunishmentSeverityIndex = new List<String> {
                "warn",
                "kill",
                "kick",
                "tban60",
                "tban120",
                "tbanday",
                "tban2days",
                "tban3days",
                "tbanweek",
                "tban2weeks",
                "tbanmonth",
                "ban"
            };

            //Init the pre-message list
            _PreMessageList = new List<String> {
                "US TEAM: DO NOT BASERAPE, YOU WILL BE PUNISHED.",
                "RU TEAM: DO NOT BASERAPE, YOU WILL BE PUNISHED.",
                "US TEAM: DO NOT ENTER THE STREETS BEYOND 'A', YOU WILL BE PUNISHED.",
                "RU TEAM: DO NOT GO BEYOND THE BLACK LINE ON CEILING BY 'C' FLAG, YOU WILL BE PUNISHED.",
                "THIS SERVER IS NO EXPLOSIVES, YOU WILL BE PUNISHED FOR INFRACTIONS.",
                "JOIN OUR TEAMSPEAK AT TS.ADKGAMERS.COM:3796"
            };

            //Init the spam message lists
            _spamBotSayList = new List<String> {
                "AdminSay1",
                "AdminSay2",
                "AdminSay3"
            };
            foreach (String line in _spamBotSayList)
            {
                _spamBotSayQueue.Enqueue(line);
            }
            _spamBotYellList = new List<String> {
                "AdminYell1",
                "AdminYell2",
                "AdminYell3"
            };
            foreach (String line in _spamBotYellList)
            {
                _spamBotYellQueue.Enqueue(line);
            }
            _spamBotTellList = new List<String> {
                "AdminTell1",
                "AdminTell2",
                "AdminTell3"
            };
            foreach (String line in _spamBotTellList)
            {
                _spamBotTellQueue.Enqueue(line);
            }

            //Fill the population durations
            foreach (PopulationState popState in Enum.GetValues(typeof(PopulationState)).Cast<PopulationState>())
            {
                _populationDurations[popState] = TimeSpan.Zero;
            }

            //Fetch the plugin description and changelog
            FetchPluginDocumentation();

            //Fill command descriptions
            FillCommandDescDictionary();

            //Prepare the keep-alive
            SetupStatusMonitor();

            //Start up TeamSpeakClientViewer
            _tsViewer = new TeamSpeakClientViewer(this);

            FillReadableMapModeDictionaries();

            //Events
            FillEvents();
        }

        public String GetPluginName()
        {
            return "AdKats - Advanced In-Game Admin";
        }

        public String GetPluginVersion()
        {
            return PluginVersion;
        }

        public String GetPluginAuthor()
        {
            return "[ADK]ColColonCleaner";
        }

        public String GetPluginWebsite()
        {
            return "https://github.com/AdKats/";
        }

        public String GetPluginDescription()
        {
            String concat = @"
            <p>
                <a href='https://github.com/AdKats/AdKats' name=adkats>
                    <img src='https://raw.githubusercontent.com/AdKats/AdKats/master/images/AdKats.jpg' alt='AdKats Advanced In-Game Admin Tools'>
                </a>
            </p>";
            try
            {
                if (!_fetchedPluginInformation)
                {
                    //Wait up to 10 seconds for the description to fetch
                    Log.Debug(() => "Waiting for plugin information...", 1);
                    _PluginDescriptionWaitHandle.WaitOne(10000);
                }

                //Parse out the descriptions
                if (!String.IsNullOrEmpty(_pluginVersionStatusString))
                {
                    concat += _pluginVersionStatusString;
                }
                if (!String.IsNullOrEmpty(_pluginLinks))
                {
                    concat += _pluginLinks;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching plugin information.", e));
            }
            return concat;
        }

        private String AddSettingSection(String number, String desc) {
            _SettingSections[number] = desc;
            return GetSettingSection(number);
        }

        private String GetSettingSection(String number) {
            return number + ". " + _SettingSections[number];
        }

        private Boolean IsActiveSettingSection(String number) {
            return _CurrentSettingSection == GetSettingSection("*") || _CurrentSettingSection == GetSettingSection(number);
        }

        public List<CPluginVariable> GetDisplayPluginVariables()
        {
            try {
                Log.Debug(() => "Updating Setting Page [" + ((String.IsNullOrEmpty(Thread.CurrentThread.Name)) ? ("Main") : (Thread.CurrentThread.Name)) + "]: " + (UtcNow() - _lastSettingPageUpdate).TotalSeconds + " seconds since last update.", 4);
                _lastSettingPageUpdate = UtcNow();
                Stopwatch timer = new Stopwatch();
                timer.Start();
                List<CPluginVariable> lstReturn = new List<CPluginVariable>();
                const string s = " | ";
                const string t = "|";

                if (_settingsLocked)
                {
                    lstReturn.Add(new CPluginVariable(GetSettingSection("0") + t + "Unlock Settings", typeof(String), ""));
                }
                else
                {
                    lstReturn.Add(new CPluginVariable(String.IsNullOrEmpty(_settingsPassword) ? (GetSettingSection("0") + t + "Lock Settings - Create Password") : (GetSettingSection("0") + t + "Lock Settings"), typeof(String), ""));
                }

                //Only fetch the following settings when plugin disabled
                if (!_threadsReady)
                {
                    if (!_settingsLocked)
                    {
                        if (_useKeepAlive)
                        {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("0") + t + "Auto-Enable/Keep-Alive", typeof(Boolean), true));
                        }

                        lstReturn.Add(new CPluginVariable("Complete these settings before enabling.", typeof(String), "Once enabled, more settings will appear."));
                        //SQL Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Hostname", typeof(String), _mySqlHostname));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Port", typeof(String), _mySqlPort));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Database", typeof(String), _mySqlSchemaName));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Username", typeof(String), _mySqlUsername));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Password", typeof(String), _mySqlPassword));
                    }
                    //Debugging Settings
                    lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Debug level", typeof(Int32), Log.DebugLevel));
                    //Database Timing
                    if (_dbTimingChecked && !_dbTimingValid)
                    {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D98") + t + "Override Timing Confirmation", typeof(Boolean), _timingValidOverride));
                    }
                }
                else
                {
                    if (_settingsLocked)
                    {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("1") + t + "Server ID (Display)", typeof(int), _serverInfo.ServerID));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("1") + t + "Server IP (Display)", typeof(String), _serverInfo.ServerIP));
                        if (_UseBanEnforcer)
                        {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-3") + t + "NAME Ban Count", typeof(int), _NameBanCount));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-3") + t + "GUID Ban Count", typeof(int), _GUIDBanCount));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-3") + t + "IP Ban Count", typeof(int), _IPBanCount));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-3") + t + "Ban Search", typeof(String), ""));
                            lstReturn.AddRange(_BanEnforcerSearchResults.Select(aBan => new CPluginVariable(GetSettingSection("A13-3") + t + "BAN" + aBan.ban_id + s + aBan.ban_record.target_player.player_name + s + aBan.ban_record.source_name + s + aBan.ban_record.record_message, "enum.commandActiveEnum(Active|Disabled|Expired)", aBan.ban_status)));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Debug level", typeof(int), Log.DebugLevel));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Debug Soldier Name", typeof(String), _debugSoldierName));
                        timer.Stop();
                        return lstReturn;
                    }

                    lstReturn.Add(new CPluginVariable("* AdKats *|Current Setting Section", _SettingSectionEnum, _CurrentSettingSection));

                    //Auto-Enable Settings
                    lstReturn.Add(new CPluginVariable(GetSettingSection("0") + t + "Auto-Enable/Keep-Alive", typeof(Boolean), _useKeepAlive));

                    if (IsActiveSettingSection("1")) {
                        //Server Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("1") + t + "Setting Import", typeof(String), _serverInfo.ServerID));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("1") + t + "Server ID (Display)", typeof(Int32), _serverInfo.ServerID));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("1") + t + "Server IP (Display)", typeof(String), _serverInfo.ServerIP));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("1") + t + "Low Population Value", typeof(Int32), _lowPopulationPlayerCount));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("1") + t + "High Population Value", typeof(Int32), _highPopulationPlayerCount));
                    }

                    if (IsActiveSettingSection("2")) {
                        //SQL Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Hostname", typeof(String), _mySqlHostname));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Port", typeof(String), _mySqlPort));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Database", typeof(String), _mySqlSchemaName));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Username", typeof(String), _mySqlUsername));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("2") + t + "MySQL Password", typeof(String), _mySqlPassword));
                    }

                    if (IsActiveSettingSection("7")) {
                        //Punishment Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "Punishment Hierarchy", typeof(String[]), _PunishmentHierarchy));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "Combine Server Punishments", typeof(Boolean), _CombineServerPunishments));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "Automatic Forgives", typeof(Boolean), _AutomaticForgives));
                        if (_AutomaticForgives) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "Automatic Forgive Days Since Punished", typeof(Int32), _AutomaticForgiveLastPunishDays));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "Automatic Forgive Days Since Forgiven", typeof(Int32), _AutomaticForgiveLastForgiveDays));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "Only Kill Players when Server in low population", typeof(Boolean), _OnlyKillOnLowPop));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "Use IRO Punishment", typeof(Boolean), _IROActive));
                        if (_IROActive) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "IRO Timeout Minutes", typeof(Int32), _IROTimeout));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("7") + t + "IRO Punishment Overrides Low Pop", typeof(Boolean), _IROOverridesLowPop));
                        }
                    }

                    if (IsActiveSettingSection("8")) {
                        //Email Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "Send Emails", typeof(Boolean), _UseEmail));
                        if (_UseEmail) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "Use SSL?", typeof(Boolean), _EmailHandler.UseSSL));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "SMTP-Server address", typeof(String), _EmailHandler.SMTPServer));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "SMTP-Server port", typeof(int), _EmailHandler.SMTPPort));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "Sender address", typeof(String), _EmailHandler.SenderEmail));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "SMTP-Server username", typeof(String), _EmailHandler.SMTPUser));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "SMTP-Server password", typeof(String), _EmailHandler.SMTPPassword));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "Custom HTML Addition", typeof(String), _EmailHandler.CustomHTMLAddition));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "Extra Recipient Email Addresses", typeof(String[]), _EmailHandler.RecipientEmails.ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8") + t + "Only Send Report Emails When Admins Offline", typeof(Boolean), _EmailReportsOnlyWhenAdminless));
                        }
                    }

                    if (IsActiveSettingSection("8-2")) {
                        //PushBullet Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("8-2") + t + "Send PushBullet Reports", typeof(Boolean), _UsePushBullet));
                        if (_UsePushBullet) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8-2") + t + "PushBullet Access Token", typeof(String), _PushBulletHandler.AccessToken));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8-2") + t + "PushBullet Note Target", "enum.pushBulletTargetEnum(Private|Channel)", _PushBulletHandler.DefaultTarget.ToString()));
                            if (_PushBulletHandler.DefaultTarget == PushBulletHandler.Target.Channel) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("8-2") + t + "PushBullet Channel Tag", typeof(String), _PushBulletHandler.DefaultChannelTag));
                            }
                            lstReturn.Add(new CPluginVariable(GetSettingSection("8-2") + t + "Only Send PushBullet Reports When Admins Offline", typeof(Boolean), _PushBulletReportsOnlyWhenAdminless));
                        }
                    }

                    if (IsActiveSettingSection("9")) {
                        //TeamSwap Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("9") + t + "Ticket Window High", typeof(int), _TeamSwapTicketWindowHigh));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("9") + t + "Ticket Window Low", typeof(int), _TeamSwapTicketWindowLow));
                    }

                    if (IsActiveSettingSection("A10")) {
                        //Admin Assistant Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A10") + t + "Enable Admin Assistants", typeof(Boolean), _EnableAdminAssistants));
                        if (_EnableAdminAssistants) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A10") + t + "Minimum Confirmed Reports Per Month", typeof(int), _MinimumRequiredMonthlyReports));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A10") + t + "Enable Admin Assistant Perk", typeof(Boolean), _EnableAdminAssistantPerk));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A10") + t + "Use AA Report Auto Handler", typeof(Boolean), _UseAAReportAutoHandler));
                            if (_UseAAReportAutoHandler) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("A10") + t + "Auto-Report-Handler Strings", typeof(String[]), _AutoReportHandleStrings));
                            }
                        }
                    }

                    if (IsActiveSettingSection("A11")) {
                        //Muting Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A11") + t + "On-Player-Muted Message", typeof(String), _MutedPlayerMuteMessage));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A11") + t + "On-Player-Killed Message", typeof(String), _MutedPlayerKillMessage));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A11") + t + "On-Player-Kicked Message", typeof(String), _MutedPlayerKickMessage));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A11") + t + "# Chances to give player before kicking", typeof(int), _MutedPlayerChances));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A11") + t + "Ignore commands for mute enforcement", typeof(Boolean), _MutedPlayerIgnoreCommands));
                    }

                    if (IsActiveSettingSection("A12")) {
                        //Message Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Display Admin Name in Kick and Ban Announcement", typeof(Boolean), _ShowAdminNameInAnnouncement));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Display New Player Announcement", typeof(Boolean), _ShowNewPlayerAnnouncement));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Display Player Name Change Announcement", typeof(Boolean), _ShowPlayerNameChangeAnnouncement));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Display Targeted Player Left Notification", typeof(Boolean), _ShowTargetedPlayerLeftNotification));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Display Ticket Rates in Procon Chat", typeof(Boolean), _DisplayTicketRatesInProconChat));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Inform players of reports against them", typeof(Boolean), _InformReportedPlayers));
                        if (_InformReportedPlayers) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Player Inform Exclusion Strings", typeof(String[]), _PlayerInformExclusionStrings));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Inform reputable players of admin joins", typeof(Boolean), _InformReputablePlayersOfAdminJoins));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Inform admins of admin joins", typeof(Boolean), _InformAdminsOfAdminJoins));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Yell display time seconds", typeof(int), _YellDuration));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Pre-Message List", typeof(String[]), _PreMessageList.ToArray()));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Require Use of Pre-Messages", typeof(Boolean), _RequirePreMessageUse));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Use first spawn message", typeof(Boolean), _UseFirstSpawnMessage));
                        if (_UseFirstSpawnMessage) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "First spawn message text", typeof(String), _FirstSpawnMessage));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Use First Spawn Reputation and Infraction Message", typeof(Boolean), _useFirstSpawnRepMessage));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Use Perk Expiration Notification", typeof(Boolean), _UsePerkExpirationNotify));
                        if (_UsePerkExpirationNotify)
                        {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A12") + t + "Perk Expiration Notify Days Remaining", typeof(Int32), _PerkExpirationNotifyDays));
                        }
                    }

                    if (IsActiveSettingSection("A12-2"))
                    {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-2") + t + "SpamBot Enable", typeof(Boolean), _spamBotEnabled));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-2") + t + "SpamBot Say List", typeof(String[]), _spamBotSayList.ToArray()));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-2") + t + "SpamBot Say Delay Seconds", typeof(Int32), _spamBotSayDelaySeconds));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-2") + t + "SpamBot Yell List", typeof(String[]), _spamBotYellList.ToArray()));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-2") + t + "SpamBot Yell Delay Seconds", typeof(Int32), _spamBotYellDelaySeconds));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-2") + t + "SpamBot Tell List", typeof(String[]), _spamBotTellList.ToArray()));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-2") + t + "SpamBot Tell Delay Seconds", typeof(Int32), _spamBotTellDelaySeconds));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-2") + t + "Exclude Admins and Whitelist from Spam", typeof(Boolean), _spamBotExcludeAdminsAndWhitelist));
                    }

                    if (IsActiveSettingSection("A12-3"))
                    {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-3") + t + "Player Battlecry Volume", "enum.battlecryVolumeEnum(Disabled|Say|Yell|Tell)", _battlecryVolume.ToString()));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-3") + t + "Player Battlecry Max Length", typeof(Int32), _battlecryMaxLength));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A12-3") + t + "Player Battlecry Denied Words", typeof(String[]), _battlecryDeniedWords));
                    }

                    if (IsActiveSettingSection("A13")) {
                        //Ban Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A13") + t + "Use Additional Ban Message", typeof(Boolean), _UseBanAppend));
                        if (_UseBanAppend) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13") + t + "Additional Ban Message", typeof(String), _BanAppend));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A13") + t + "Procon Ban Admin Name", typeof(String), _CBanAdminName));
                    }

                    if (IsActiveSettingSection("A13-2")) {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A13-2") + t + "Use Ban Enforcer", typeof(Boolean), _UseBanEnforcer));
                        if (_UseBanEnforcer) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-2") + t + "Enforce New Bans by NAME", typeof(Boolean), _DefaultEnforceName));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-2") + t + "Enforce New Bans by GUID", typeof(Boolean), _DefaultEnforceGUID));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-2") + t + "Enforce New Bans by IP", typeof(Boolean), _DefaultEnforceIP));

                            //Metabans Settings
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-2") + t + "Use Metabans?", typeof(bool), _useMetabans));
                            if (_useMetabans) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("A13-2") + t + "Metabans Username", typeof(String), _metabansUsername));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("A13-2") + t + "Metabans API Key", typeof(String), _metabansAPIKey));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("A13-2") + t + "Metabans Filter Strings", typeof(String[]), _metabansFilterStrings));
                            }
                        }
                    }

                    if (IsActiveSettingSection("A14")) {
                        //External Command Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A14") + t + "AdkatsLRT Extension Token", typeof(String), _AdKatsLRTExtensionToken));
                        if (!_UseBanEnforcer) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A14") + t + "Fetch Actions from Database", typeof(Boolean), _fetchActionsFromDb));
                        }
                    }

                    if (IsActiveSettingSection("A15")) {
                        //VOIP
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A15") + t + "Server VOIP Address", typeof(String), _ServerVoipAddress));
                    }

                    if (IsActiveSettingSection("A16")) {
                        //MULTIBalancer
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Feed MULTIBalancer Whitelist", typeof(Boolean), _FeedMultiBalancerWhitelist));
                        if (_FeedMultiBalancerWhitelist) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Automatic MULTIBalancer Whitelist for Admins", typeof(Boolean), _FeedMultiBalancerWhitelist_Admins));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Feed MULTIBalancer Even Dispersion List", typeof(Boolean), _FeedMultiBalancerDisperseList));
                        //TeamKillTracker
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Feed TeamKillTracker Whitelist", typeof(Boolean), _FeedTeamKillTrackerWhitelist));
                        if (_FeedTeamKillTrackerWhitelist) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Automatic TeamKillTracker Whitelist for Admins", typeof(Boolean), _FeedTeamKillTrackerWhitelist_Admins));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Feed Server Reserved Slots", typeof(Boolean), _FeedServerReservedSlots));
                        if (_FeedServerReservedSlots) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Automatic Reserved Slot for Admins", typeof(Boolean), _FeedServerReservedSlots_Admins));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Automatic VIP Kick Whitelist for Admins", typeof(Boolean), _FeedServerReservedSlots_Admins_Online));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Feed Server Spectator List", typeof(Boolean), _FeedServerSpectatorList));
                        if (_FeedServerSpectatorList) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Automatic Spectator Slot for Admins", typeof(Boolean), _FeedServerSpectatorList_Admins));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Feed Stat Logger Settings", typeof(Boolean), _FeedStatLoggerSettings));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Post Stat Logger Chat Manually", typeof(Boolean), _PostStatLoggerChatManually));
                        if (_PostStatLoggerChatManually) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Post Server Chat Spam", typeof(Boolean), _PostStatLoggerChatManually_PostServerChatSpam));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Exclude Commands from Chat Logs", typeof(Boolean), _PostStatLoggerChatManually_IgnoreCommands));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A16") + t + "Banned Tags", typeof(String[]), _BannedTags));
                    }

                    if (IsActiveSettingSection("A17")) {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A17") + t + "Round Timer: Enable", typeof(Boolean), _useRoundTimer));
                        if (_useRoundTimer) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A17") + t + "Round Timer: Round Duration Minutes", typeof(Double), _maxRoundTimeMinutes));
                        }
                    }

                    if (IsActiveSettingSection("A17-2") && _gameVersion == GameVersion.BF4)
                    {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A17-2") + t + "Faction Randomizer: Enable", typeof(Boolean), _factionRandomizerEnable));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A17-2") + t + "Faction Randomizer: Restriction", "enum.factionRandomizerRestriction2Enum(NoRestriction|NeverSameFaction|AlwaysSameFaction|AlwaysSwapUSvsRU|AlwaysSwapUSvsCN|AlwaysSwapRUvsCN|AlwaysBothUS|AlwaysBothRU|AlwaysBothCN|AlwaysUSvsX|AlwaysRUvsX|AlwaysCNvsX|NeverUSvsX|NeverRUvsX|NeverCNvsX)", _factionRandomizerRestriction.ToString()));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A17-2") + t + "Faction Randomizer: Allow Repeat Team Selections", typeof(Boolean), _factionRandomizerAllowRepeatSelection));
                    }

                    if (IsActiveSettingSection("A18")) {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A18") + t + "HackerChecker: Use LIVE Anti Cheat System", typeof(Boolean), _useHackerCheckerLIVESystem));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A18") + t + "HackerChecker: DPS Checker: Ban Message", typeof(String), _HackerCheckerDPSBanMessage));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A18") + t + "HackerChecker: HSK Checker: Enable", typeof(Boolean), _UseHskChecker));
                        if (_UseHskChecker) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A18") + t + "HackerChecker: HSK Checker: Trigger Level", typeof(Double), _HskTriggerLevel));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A18") + t + "HackerChecker: HSK Checker: Ban Message", typeof(String), _HackerCheckerHSKBanMessage));
                        }
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A18") + t + "HackerChecker: KPM Checker: Enable", typeof(Boolean), _UseKpmChecker));
                        if (_UseKpmChecker) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A18") + t + "HackerChecker: KPM Checker: Trigger Level", typeof(Double), _KpmTriggerLevel));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A18") + t + "HackerChecker: KPM Checker: Ban Message", typeof(String), _HackerCheckerKPMBanMessage));
                        }
                    }

                    if (IsActiveSettingSection("A19")) {
                        //Server rules settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A19") + t + "Rule Print Delay", typeof(Double), _ServerRulesDelay));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A19") + t + "Rule Print Interval", typeof(Double), _ServerRulesInterval));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A19") + t + "Server Rule List", typeof(String[]), _ServerRulesList));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A19") + t + "Server Rule Numbers", typeof(Boolean), _ServerRulesNumbers));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("A19") + t + "Yell Server Rules", typeof(Boolean), _ServerRulesYell));
                    }

                    if (IsActiveSettingSection("B20")) {
                        //AFK manager settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B20") + t + "AFK System Enable", typeof(Boolean), _AFKManagerEnable));
                        if (_AFKManagerEnable) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B20") + t + "AFK Ignore Chat", typeof(Boolean), _AFKIgnoreChat));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B20") + t + "AFK Auto-Kick Enable", typeof(Boolean), _AFKAutoKickEnable));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B20") + t + "AFK Trigger Minutes", typeof(Double), _AFKTriggerDurationMinutes));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B20") + t + "AFK Minimum Players", typeof(Int32), _AFKTriggerMinimumPlayers));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B20") + t + "AFK Ignore User List", typeof(Boolean), _AFKIgnoreUserList));
                            if (!_AFKIgnoreUserList) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B20") + t + "AFK Ignore Roles", typeof(String[]), _AFKIgnoreRoles));
                            }
                        }
                    }

                    if (IsActiveSettingSection("B21")) {
                        //Ping enforcer settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Enforcer Enable", typeof(Boolean), _pingEnforcerEnable));
                        if (_pingEnforcerEnable) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Current Pint Limit (Display)", typeof(String), GetPingLimitStatus()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Moving Average Duration sec", typeof(Double), _pingMovingAverageDurationSeconds));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Low Population Trigger ms", typeof(Double), _pingEnforcerLowTriggerMS));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Low Population Time Modifier", typeof(String[]), _pingEnforcerLowTimeModifier.Select(x => x.ToString()).ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Medium Population Trigger ms", typeof(Double), _pingEnforcerMedTriggerMS));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Medium Population Time Modifier", typeof(String[]), _pingEnforcerMedTimeModifier.Select(x => x.ToString()).ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick High Population Trigger ms", typeof(Double), _pingEnforcerHighTriggerMS));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick High Population Time Modifier", typeof(String[]), _pingEnforcerHighTimeModifier.Select(x => x.ToString()).ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Full Population Trigger ms", typeof(Double), _pingEnforcerFullTriggerMS));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Full Population Time Modifier", typeof(String[]), _pingEnforcerFullTimeModifier.Select(x => x.ToString()).ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Minimum Players", typeof(Int32), _pingEnforcerTriggerMinimumPlayers));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Kick Missing Pings", typeof(Boolean), _pingEnforcerKickMissingPings));
                            if (_pingEnforcerKickMissingPings) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Attempt Manual Ping when Missing", typeof(Boolean), _attemptManualPingWhenMissing));
                            }
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Ignore User List", typeof(Boolean), _pingEnforcerIgnoreUserList));
                            if (!_pingEnforcerIgnoreUserList) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Ignore Roles", typeof(String[]), _pingEnforcerIgnoreRoles));
                            }
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B21") + t + "Ping Kick Message Prefix", typeof(String), _pingEnforcerMessagePrefix));
                        }
                    }

                    if (IsActiveSettingSection("B22")) {
                        //Commander manager settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B22") + t + "Commander Manager Enable", typeof(Boolean), _CMDRManagerEnable));
                        if (_CMDRManagerEnable) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B22") + t + "Minimum Players to Allow Commanders", typeof(Int32), _CMDRMinimumPlayers));
                        }
                    }

                    if (IsActiveSettingSection("B23")) {
                        //Player locking settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B23") + t + "Player Lock Manual Duration Minutes", typeof(Double), _playerLockingManualDuration));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B23") + t + "Automatically Lock Players on Admin Action", typeof(Boolean), _playerLockingAutomaticLock));
                        if (_playerLockingAutomaticLock) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B23") + t + "Player Lock Automatic Duration Minutes", typeof(Double), _playerLockingAutomaticDuration));
                        }
                    }

                    if (IsActiveSettingSection("B24")) {
                        //Surrender Vote settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B24") + t + "Surrender Vote Enable", typeof(Boolean), _surrenderVoteEnable));
                        if (_surrenderVoteEnable) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B24") + t + "Percentage Votes Needed for Surrender", typeof(Double), _surrenderVoteMinimumPlayerPercentage));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B24") + t + "Minimum Player Count to Enable Surrender", typeof(Int32), _surrenderVoteMinimumPlayerCount));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B24") + t + "Minimum Ticket Gap to Surrender", typeof(Int32), _surrenderVoteMinimumTicketGap));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B24") + t + "Enable Required Ticket Rate Gap to Surrender", typeof(Boolean), _surrenderVoteTicketRateGapEnable));
                            if (_surrenderVoteTicketRateGapEnable) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B24") + t + "Minimum Ticket Rate Gap to Surrender", typeof(Double), _surrenderVoteMinimumTicketRateGap));
                            }
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B24") + t + "Surrender Vote Timeout Enable", typeof(Boolean), _surrenderVoteTimeoutEnable));
                            if (_surrenderVoteTimeoutEnable) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B24") + t + "Surrender Vote Timeout Minutes", typeof(Double), _surrenderVoteTimeoutMinutes));
                            }
                        }
                    }

                    if (IsActiveSettingSection("B25") || IsActiveSettingSection("B25-2")) {
                        //Auto-Surrender Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Enable", typeof(Boolean), _surrenderAutoEnable));
                        if (_surrenderAutoEnable) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Use Optimal Values for Metro Conquest", typeof(Boolean), _surrenderAutoUseMetroValues));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Use Optimal Values for Locker Conquest", typeof(Boolean), _surrenderAutoUseLockerValues));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Minimum Ticket Count", typeof(Int32), _surrenderAutoMinimumTicketCount));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Maximum Ticket Count", typeof(Int32), _surrenderAutoMaximumTicketCount));
                            if (!_surrenderAutoUseMetroValues && !_surrenderAutoUseLockerValues) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Minimum Ticket Gap", typeof(Int32), _surrenderAutoMinimumTicketGap));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Losing Team Rate Window Max", typeof(Double), _surrenderAutoLosingRateMax));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Losing Team Rate Window Min", typeof(Double), _surrenderAutoLosingRateMin));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Winning Team Rate Window Max", typeof(Double), _surrenderAutoWinningRateMax));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Winning Team Rate Window Min", typeof(Double), _surrenderAutoWinningRateMin));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Trigger Count to Surrender", typeof(Int32), _surrenderAutoTriggerCountToSurrender));
                            }
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Reset Trigger Count on Cancel", typeof(Boolean), _surrenderAutoResetTriggerCountOnCancel));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Minimum Players", typeof(Int32), _surrenderAutoMinimumPlayers));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Nuke Winning Team Instead of Surrendering Losing Team", typeof(Boolean), _surrenderAutoNukeInstead));
                            if (_surrenderAutoNukeInstead)
                            {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Maximum Auto-Nukes Each Round", typeof(Int32), _surrenderAutoMaxNukesEachRound));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Reset Auto-Nuke Trigger Count on Fire", typeof(Boolean), _surrenderAutoResetTriggerCountOnFire));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Switch to surrender after max nukes", typeof(Boolean), _surrenderAutoNukeResolveAfterMax));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Minimum Seconds Between Nukes", typeof(Int32), _surrenderAutoNukeMinBetween));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Countdown Duration before a Nuke is fired", typeof(Int32), _NukeCountdownDurationSeconds));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Fire Nuke Triggers if Winning Team up by X Tickets", typeof(Int32), _NukeWinningTeamUpTicketCount));
                                if (_isTestingAuthorized)
                                {
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Announce Nuke Preparation to Players", typeof(Boolean), _surrenderAutoAnnounceNukePrep));
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Allow Auto-Nuke to fire on losing teams", typeof(Boolean), _surrenderAutoNukeLosingTeams));
                                    if (_surrenderAutoNukeLosingTeams)
                                    {
                                        lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Maximum Nuke Ticket Difference for Losing Team", typeof(Int32), _surrenderAutoNukeLosingMaxDiff));
                                    }
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Auto-Nuke High Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationHigh));
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Auto-Nuke Medium Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationMed));
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Auto-Nuke Low Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationLow));
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Auto-Nuke Consecutive Duration Increase", typeof(Int32), _surrenderAutoNukeDurationIncrease));
                                }
                            }
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Start Surrender Vote Instead of Surrendering Losing Team", typeof(Boolean), _surrenderAutoTriggerVote));
                            if (!_surrenderAutoTriggerVote) {
                                if (!_surrenderAutoNukeInstead) {
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("B25") + t + "Auto-Surrender Message", typeof(String), _surrenderAutoMessage));
                                } else {
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("B25-2") + t + "Auto-Nuke Message", typeof(String), _surrenderAutoNukeMessage));
                                }
                            }
                        }
                    }

                    if (IsActiveSettingSection("B26")) {
                        //Statistics Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B26") + t + "Post Map Benefit/Detriment Statistics", typeof(Boolean), _PostMapBenefitStatistics));
                    }

                    if (IsActiveSettingSection("B27")) {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B27") + t + "Monitor Populator Players - Thanks CMWGaming", typeof(Boolean), _PopulatorMonitor));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B27") + t + "Monitor Teamspeak Players - Thanks CMWGaming", typeof(Boolean), _TeamspeakPlayerMonitorView));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("B27") + t + "Monitor/Disperse Top Players", typeof(Boolean), _UseTopPlayerMonitor));
                    }

                    if (IsActiveSettingSection("B27-2")) {
                        if (_PopulatorMonitor) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "[" + _populatorPlayers.Count() + "] Populator Players (Display)", typeof(String[]), _populatorPlayers.Values.Select(aPlayer => aPlayer.player_name).ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Monitor Specified Populators Only", typeof(Boolean), _PopulatorUseSpecifiedPopulatorsOnly));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Monitor Populators of This Server Only", typeof(Boolean), _PopulatorPopulatingThisServerOnly));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Count to Consider Populator Past Week", typeof(Int32), _PopulatorMinimumPopulationCountPastWeek));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Count to Consider Populator Past 2 Weeks", typeof(Int32), _PopulatorMinimumPopulationCountPast2Weeks));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Enable Populator Perks", typeof(Boolean), _PopulatorPerksEnable));
                            if (_PopulatorPerksEnable) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Populator Perks - Reserved Slot", typeof(Boolean), _PopulatorPerksReservedSlot));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Populator Perks - Autobalance Whitelist", typeof(Boolean), _PopulatorPerksBalanceWhitelist));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Populator Perks - Ping Whitelist", typeof(Boolean), _PopulatorPerksPingWhitelist));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Populator Perks - TeamKillTracker Whitelist", typeof(Boolean), _PopulatorPerksTeamKillTrackerWhitelist));
                            }
                        }
                        else
                        {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-2") + t + "Populator monitor must be enabled in section B27 to view these settings.", typeof(String), ""));
                        }
                    }

                    if (IsActiveSettingSection("B27-3")) {
                        if (_TeamspeakPlayerMonitorView) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "[" + _tsPlayers.Count() + "] Teamspeak Players (Display)", typeof(String[]), _tsPlayers.Values.Select(aPlayer => aPlayer.player_name).ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Enable Teamspeak Player Monitor", typeof(Boolean), _TeamspeakPlayerMonitorEnable));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Use Custom Teamspeak Web Service", typeof(Boolean), _tsViewer.UseWebService));
                            if (_tsViewer.UseWebService)
                            {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Web Service URL", typeof(String), _tsViewer.WebServiceURL));
                            } 
                            else
                            {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Server IP", typeof(String), _tsViewer.Ts3ServerIp));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Server Port", typeof(Int32), _tsViewer.Ts3ServerPort));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Server Query Port", typeof(Int32), _tsViewer.Ts3QueryPort));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Server Query Username", typeof(String), _tsViewer.Ts3QueryUsername));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Server Query Password", typeof(String), _tsViewer.Ts3QueryPassword));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Server Query Nickname", typeof(String), _tsViewer.Ts3QueryNickname));
                            }
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Main Channel Name", typeof(String), _tsViewer.Ts3MainChannelName));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Secondary Channel Names", typeof(String[]), _tsViewer.Ts3SubChannelNames));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Debug Display Teamspeak Clients", typeof(Boolean), _tsViewer.DbgClients));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t +
                                "TeamSpeak Player Join Announcement",
                                "enum.tsAnnounceEnum(Disabled|Say|Yell|Tell)",
                                _tsViewer.JoinDisplay.ToString()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t +
                                "TeamSpeak Player Join Message",
                                typeof(String),
                                _tsViewer.JoinDisplayMessage));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t +
                                "TeamSpeak Player Update Seconds",
                                typeof(Int32),
                                _tsViewer.UpdateIntervalSeconds));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Enable Teamspeak Player Perks", typeof(Boolean), _TeamspeakPlayerPerksEnable));
                            if (_TeamspeakPlayerPerksEnable) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Player Perks - VIP Kick Whitelist", typeof(Boolean), _TeamspeakPlayerPerksVIPKickWhitelist));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Player Perks - Autobalance Whitelist", typeof(Boolean), _TeamspeakPlayerPerksBalanceWhitelist));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Player Perks - Ping Whitelist", typeof(Boolean), _TeamspeakPlayerPerksPingWhitelist));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak Player Perks - TeamKillTracker Whitelist", typeof(Boolean), _TeamspeakPlayerPerksTeamKillTrackerWhitelist));
                            }
                        }
                        else
                        {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-3") + t + "Teamspeak monitor must be enabled in section B27 to view these settings.", typeof(String), ""));
                        }
                    }

                    if (IsActiveSettingSection("B27-4")) {
                        if (_UseTopPlayerMonitor) {
                            var onlineTopPlayers = _PlayerDictionary.Values.ToList()
                                .Where(aPlayer =>
                                    _topPlayers.ContainsKey(aPlayer.player_name));
                            var onlineTopPLayerListing = onlineTopPlayers.Select(aPlayer =>
                                    ((aPlayer.RequiredTeam != null) ? ("(" + ((aPlayer.RequiredTeam.TeamID != aPlayer.frostbitePlayerInfo.TeamID && _roundState == RoundState.Playing) ? (_teamDictionary[aPlayer.frostbitePlayerInfo.TeamID].TeamKey + " -> ") : ("")) + aPlayer.RequiredTeam.TeamKey + ") ") : ("(+) ")) + "(" + Math.Round(aPlayer.TopStats.TopRoundRatio, 2) + "|" + aPlayer.TopStats.TopCount + ") " + aPlayer.GetVerboseName())
                                .OrderByDescending(item => item);
                            AdKatsTeam t1, t2;
                            String teamPower = "Unknown";
                            if (_previousRoundDuration != TimeSpan.Zero && _roundState != RoundState.Loaded && GetTeamByID(1, out t1) && GetTeamByID(2, out t2)) {
                                teamPower = t1.TeamKey + ": (" + t1.getTeamPower() + ") / " + t2.TeamKey + ": (" + t2.getTeamPower() + ")";
                            }
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-4") + t + "Team Power (Display)", typeof(String), teamPower));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-4") + t + "[" + onlineTopPlayers.Count() + "] Online Top Players (Display)", typeof(String[]), onlineTopPLayerListing.ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-4") + t + "[" + _topPlayers.Count() + "] Top Players (Display)", typeof(String[]), _topPlayers.Values
                                .Select(aPlayer =>
                                    ((aPlayer.RequiredTeam != null) ? ("(" + aPlayer.RequiredTeam.TeamKey + ") ") : ("(-) ")) + "(" + Math.Round(aPlayer.TopStats.TopRoundRatio, 2) + "|" + aPlayer.TopStats.TopCount + ") " + aPlayer.GetVerboseName())
                                .OrderBy(item => item)
                                .ToArray()));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-4") + t + "Affected Top Players", "enum.AffectedTopPlayersEnum(Best Only|Good And Above|Ok And Above|Marginal and Above|Most Players)", _TopPlayersAffected));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-4") + t + "Top player team confirmation duration", typeof(Int32), _TopPlayersTeamConfirmationDuration));
                        }
                        else
                        {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("B27-4") + t + "Top player monitor must be enabled in section B27 to view these settings.", typeof(String), ""));
                        }
                    }


                    if (IsActiveSettingSection("D99")) {
                        //Debug settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Debug level", typeof(int), Log.DebugLevel));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Debug Soldier Name", typeof(String), _debugSoldierName));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Enforce Single Instance", typeof(Boolean), _enforceSingleInstance));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Disable Automatic Updates", typeof(Boolean), _automaticUpdatesDisabled));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Disable Version Tracking - Required For TEST Builds", typeof(Boolean), _versionTrackingDisabled));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + t + "Command Entry", typeof(String), ""));
                    }


                    if (IsActiveSettingSection("X99")) {
                        //Experimental tools
                        if (_isTestingAuthorized) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("X99") + t + "Use Experimental Tools", typeof(Boolean), _useExperimentalTools));
                            if (_useExperimentalTools) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("X99") + t + "Send Query", typeof(String), ""));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("X99") + t + "Send Non-Query", typeof(String), ""));
                                lstReturn.Add(new CPluginVariable(GetSettingSection("X99") + t + "Use NO EXPLOSIVES Limiter", typeof(Boolean), _UseWeaponLimiter));
                                if (_UseWeaponLimiter) {
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("X99") + t + "NO EXPLOSIVES Weapon String", typeof(String), _WeaponLimiterString));
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("X99") + t + "NO EXPLOSIVES Exception String", typeof(String), _WeaponLimiterExceptionString));
                                }
                                lstReturn.Add(new CPluginVariable(GetSettingSection("X99") + t + "Use Grenade Cook Catcher", typeof(Boolean), _UseGrenadeCookCatcher));
                            }
                        }
                    }

                    if (IsActiveSettingSection("3")) {
                        //User Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("3") + t + "Add User", typeof(String), ""));
                        if (_userCache.Count > 0) {
                            //Sort access list by access level, then by id
                            List<AdKatsUser> tempAccess = _userCache.Values.ToList();
                            tempAccess.Sort((a1, a2) => (a1.user_role.role_powerLevel == a2.user_role.role_powerLevel) ? (String.CompareOrdinal(a1.user_name.ToLower(), a2.user_name.ToLower())) : ((a1.user_role.role_powerLevel > a2.user_role.role_powerLevel) ? (-1) : (1)));
                            String roleEnum = String.Empty;
                            if (_RoleKeyDictionary.Count > 0) {
                                Random random = new Random();
                                foreach (AdKatsRole role in _RoleKeyDictionary.Values.ToList()) {
                                    if (String.IsNullOrEmpty(roleEnum)) {
                                        roleEnum += "enum.RoleEnum_" + random.Next(100000, 999999) + "(";
                                    } else {
                                        roleEnum += "" + t + "";
                                    }
                                    roleEnum += role.role_name;
                                }
                                roleEnum += ")";
                            }
                            foreach (AdKatsUser user in tempAccess) {
                                String userPrefix = GetSettingSection("3") + t + "USR" + user.user_id + s + user.user_name + s;
                                if (_UseEmail) {
                                    lstReturn.Add(new CPluginVariable(userPrefix + "User Email", typeof(String), user.user_email));
                                }
                                lstReturn.Add(new CPluginVariable(userPrefix + "User Expiration", typeof(String), user.user_expiration.ToShortDateString()));
                                lstReturn.Add(new CPluginVariable(userPrefix + "User Notes", typeof(String), user.user_notes));
                                //Do not display phone input until that operation is available for use
                                //lstReturn.Add(new CPluginVariable(userPrefix + "User Phone", typeof(String), user.user_phone));
                                lstReturn.Add(new CPluginVariable(userPrefix + "User Role", roleEnum, user.user_role.role_name));
                                lstReturn.Add(new CPluginVariable(userPrefix + "Delete User?", typeof(String), ""));
                                lstReturn.Add(new CPluginVariable(userPrefix + "Add Soldier?", typeof(String), ""));
                                String soldierPrefix = userPrefix + "Soldiers" + s;

                                lstReturn.AddRange(user.soldierDictionary.Values.Select(aPlayer => 
                                    new CPluginVariable(soldierPrefix + aPlayer.player_id + s + 
                                        (_gameIDDictionary.ContainsKey(aPlayer.game_id) ? (_gameIDDictionary[aPlayer.game_id].ToString()) : ("INVALID GAME ID [" + aPlayer.game_id + "]")) + s + 
                                        aPlayer.player_name + s + "Delete Soldier?", typeof(String), "")));
                            }
                        } else {
                            if (_firstUserListComplete) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("3") + t + "No Users in User List", typeof(String), "Add Users with 'Add User'."));
                            } else {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("3") + t + "Please Wait, Fetching User List.", typeof(String), "Please Wait, Fetching User List."));
                            }
                        }
                    }

                    if (_firstUserListComplete) {
                        if (IsActiveSettingSection("3-2")) {
                            //Special Player Settings
                            Boolean anyList = false;
                            foreach (AdKatsSpecialGroup asGroup in _specialPlayerGroupIDDictionary.Values.OrderBy(aGroup => aGroup.group_name)) {
                                List<String> groupList = new List<String>();
                                foreach (AdKatsSpecialPlayer asPlayer in GetASPlayersOfGroup(asGroup.group_key).OrderBy(asPlayer => asPlayer.player_object != null ? (asPlayer.player_object.GetVerboseName()) : (asPlayer.player_identifier))) {
                                    String playerIdentifier = null;
                                    if (asPlayer.player_object != null && !String.IsNullOrEmpty(asPlayer.player_object.player_name)) {
                                        playerIdentifier = asPlayer.player_object.player_name;
                                    } else {
                                        playerIdentifier = asPlayer.player_identifier;
                                    }
                                    if (String.IsNullOrEmpty(playerIdentifier)) {
                                        continue;
                                    }
                                    TimeSpan duration = (asPlayer.player_expiration - UtcNow()).Duration();
                                    if (duration.TotalDays > 3650) {
                                        playerIdentifier += " | Permanent";
                                    } else {
                                        playerIdentifier += " | " + FormatTimeString(duration, 3);
                                    }
                                    if (!groupList.Contains(playerIdentifier)) {
                                        groupList.Add(playerIdentifier);
                                    }
                                }
                                if (groupList.Any()) {
                                    anyList = true;
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("3-2") + t + "[" + groupList.Count + "] " + asGroup.group_name + " (Display)", typeof(String[]), groupList.ToArray()));
                                }
                            }
                            if (!anyList) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("3-2") + t + "All Groups Empty", typeof(String), "All Groups Empty"));
                            }
                        }

                        if (IsActiveSettingSection("3-3")) {
                            //Verbose Special Player Settings
                            Boolean anyVerbostList = false;
                            foreach (AdKatsSpecialGroup asGroup in _specialPlayerGroupIDDictionary.Values.OrderBy(aGroup => aGroup.group_name)) {
                                List<String> groupList = new List<String>();
                                foreach (AdKatsSpecialPlayer asPlayer in GetVerboseASPlayersOfGroup(asGroup.group_key).OrderBy(asPlayer => asPlayer.player_object != null ? (asPlayer.player_object.GetVerboseName()): (asPlayer.player_identifier))) {
                                    String playerIdentifier = null;
                                    if (asPlayer.player_object != null && !String.IsNullOrEmpty(asPlayer.player_object.player_name)) {
                                        playerIdentifier = asPlayer.player_object.player_name;
                                    } else {
                                        playerIdentifier = asPlayer.player_identifier;
                                    }
                                    if (String.IsNullOrEmpty(playerIdentifier)) {
                                        continue;
                                    }
                                    if (!groupList.Contains(playerIdentifier)) {
                                        groupList.Add(playerIdentifier);
                                    }
                                }
                                if (groupList.Any()) {
                                    anyVerbostList = true;
                                    lstReturn.Add(new CPluginVariable(GetSettingSection("3-3") + t + "[" + groupList.Count + "] Verbose " + asGroup.group_name + " (Display)", typeof(String[]), groupList.ToArray()));
                                }
                            }
                            if (!anyVerbostList) {
                                lstReturn.Add(new CPluginVariable(GetSettingSection("3-3") + t + "All Verbose Groups Empty", typeof(String), "All Verbose Groups Empty"));
                            }
                        }
                        }

                    if (IsActiveSettingSection("4")) {
                        //Role Settings
                        lstReturn.Add(new CPluginVariable(GetSettingSection("4") + t + "Add Role", typeof(String), ""));
                        if (_RoleIDDictionary.Count > 0) {
                            lock (_RoleIDDictionary) {
                                foreach (AdKatsRole aRole in _RoleKeyDictionary.Values.ToList()) {
                                    lock (_CommandIDDictionary) {
                                        Random random = new Random();
                                        String rolePrefix = GetSettingSection("4") + t + "RLE" + aRole.role_id + s + ((RoleIsAdmin(aRole)) ? ("[A]") : ("")) + aRole.role_name + s;
                                        lstReturn.AddRange(from aCommand in _CommandNameDictionary.Values
                                                           where 
                                                           aCommand.command_active == AdKatsCommand.CommandActive.Active && 
                                                           aCommand.command_key != "command_confirm" && 
                                                           aCommand.command_key != "command_cancel"
                                                           where 
                                                           aRole.role_key != "guest_default" || 
                                                           !aCommand.command_playerInteraction
                                                           let allowed = aRole.RoleAllowedCommands.ContainsKey(aCommand.command_key)
                                                           let display = rolePrefix + "CDE" + aCommand.command_id + s + aCommand.command_name + ((aCommand.command_playerInteraction) ? (" [ADMIN]") : ("")) + ((aCommand.command_playerInteraction && allowed) ? (" <---") : (""))
                                                           select new CPluginVariable(display, "enum.roleAllowCommandEnum(Allow|Deny)", allowed ? ("Allow") : ("Deny")));
                                        //Do not display the delete option for default guest
                                        if (aRole.role_key != "guest_default") {
                                            lstReturn.Add(new CPluginVariable(rolePrefix + "Delete Role? (All assignments will be removed)", typeof(String), ""));
                                        }
                                    }
                                }
                            }
                        } else {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("4") + t + "Role List Empty", typeof(String), "No valid roles found in database."));
                        }
                    }

                    if (IsActiveSettingSection("4-2")) {
                        //Role Group Settings
                        if (_RoleIDDictionary.Count > 0) {
                            lock (_RoleIDDictionary) {
                                foreach (AdKatsRole aRole in _RoleKeyDictionary.Values.ToList()) {
                                    lock (_specialPlayerGroupKeyDictionary) {
                                        Random random = new Random();
                                        String rolePrefix = GetSettingSection("4-2") + t + "RLE" + aRole.role_id + s + ((RoleIsAdmin(aRole)) ? ("[A]") : ("")) + aRole.role_name + s;
                                        lstReturn.AddRange(from aGroup in _specialPlayerGroupKeyDictionary.Values let allowed = 
                                                           aRole.RoleSetGroups.ContainsKey(aGroup.group_key) || 
                                                           (aGroup.group_key == "slot_reserved" && _FeedServerReservedSlots && _FeedServerReservedSlots_Admins && RoleIsAdmin(aRole)) || 
                                                           (aGroup.group_key == "slot_spectator" && _FeedServerSpectatorList && _FeedServerSpectatorList_Admins && RoleIsAdmin(aRole)) || 
                                                           (aGroup.group_key == "whitelist_multibalancer" && _FeedMultiBalancerWhitelist && _FeedMultiBalancerWhitelist_Admins && RoleIsAdmin(aRole)) || 
                                                           (aGroup.group_key == "whitelist_teamkill" && _FeedTeamKillTrackerWhitelist && _FeedTeamKillTrackerWhitelist_Admins && RoleIsAdmin(aRole)) || 
                                                           (aGroup.group_key == "whitelist_spambot" && _spamBotExcludeAdminsAndWhitelist && RoleIsAdmin(aRole))
                                                           let display = rolePrefix + "GPE" + aGroup.group_id + s + aGroup.group_name
                                                           select new CPluginVariable(display, "enum.roleSetGroupEnum(Assign|Ignore)", allowed ? ("Assign") : ("Ignore")));
                                    }
                                }
                            }
                        } else {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("4-2") + t + "Role List Empty", typeof(String), "No valid roles found in database."));
                        }
                    }

                    if (IsActiveSettingSection("5")) {
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "Minimum Required Reason Length", typeof(int), _RequiredReasonLength));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "Minimum Report Handle Seconds", typeof(int), _MinimumReportHandleSeconds));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "Maximum Temp-Ban Duration Minutes", typeof(Double), _MaxTempBanDuration.TotalMinutes));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "Countdown Duration before a Nuke is fired", typeof(int), _NukeCountdownDurationSeconds));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "Allow Commands from Admin Say", typeof(Boolean), _AllowAdminSayCommands));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "Bypass all command confirmation -DO NOT USE-", typeof(Boolean), _bypassCommandConfirmation));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "External plugin player commands", typeof(String[]), _ExternalPlayerCommands.ToArray()));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "External plugin admin commands", typeof(String[]), _ExternalAdminCommands.ToArray()));
                        lstReturn.Add(new CPluginVariable(GetSettingSection("5") + t + "Command Target Whitelist Commands", typeof(String[]), _CommandTargetWhitelistCommands.ToArray()));
                    }

                    if (IsActiveSettingSection("6")) {
                        //Command Settings
                        if (_CommandNameDictionary.Count > 0) {
                            lock (_CommandIDDictionary) {
                                foreach (AdKatsCommand command in _CommandIDDictionary.Values.ToList()) {
                                    if (command.command_active != AdKatsCommand.CommandActive.Invisible) {
                                        String commandPrefix = GetSettingSection("6") + t + "CDE" + command.command_id + s + command.command_name + s;
                                        lstReturn.Add(new CPluginVariable(commandPrefix + "Active", "enum.commandActiveEnum(Active|Disabled)", command.command_active.ToString()));
                                        if (command.command_active != AdKatsCommand.CommandActive.Disabled) {
                                            if (command.command_logging != AdKatsCommand.CommandLogging.Mandatory && command.command_logging != AdKatsCommand.CommandLogging.Unable) {
                                                lstReturn.Add(new CPluginVariable(commandPrefix + "Logging", "enum.commandLoggingEnum(Log|Ignore)", command.command_logging.ToString()));
                                            }
                                            lstReturn.Add(new CPluginVariable(commandPrefix + "Text", typeof(String), command.command_text));
                                            lstReturn.Add(new CPluginVariable(commandPrefix + "Access Method", CreateEnumString(typeof(AdKatsCommand.CommandAccess)), command.command_access.ToString()));
                                        }
                                    }
                                }
                            }
                        } else {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("6") + t + "Command List Empty", typeof(String), "No valid commands found in database."));
                        }
                    }

                    if (IsActiveSettingSection("A13-3")) {
                        if (_UseBanEnforcer) {
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-3") + t + "NAME Ban Count", typeof(int), _NameBanCount));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-3") + t + "GUID Ban Count", typeof(int), _GUIDBanCount));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-3") + t + "IP Ban Count", typeof(int), _IPBanCount));
                            lstReturn.Add(new CPluginVariable(GetSettingSection("A13-3") + t + "Ban Search", typeof(String), ""));
                            lstReturn.AddRange(_BanEnforcerSearchResults.Select(aBan => new CPluginVariable(GetSettingSection("A13-3") + t + "BAN" + aBan.ban_id + s + aBan.ban_record.target_player.player_name + s + aBan.ban_record.source_name + s + aBan.ban_record.record_message, "enum.commandActiveEnum(Active|Disabled|Expired)", aBan.ban_status)));
                        }
                    }
                }
                timer.Stop();
                if (_isTestingAuthorized) {
                    Log.Info("Setting render took " + timer.ElapsedMilliseconds + "ms");
                }
                return lstReturn;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching display vars.", e));
                return new List<CPluginVariable>();
            }
        }

        public List<CPluginVariable> GetPluginVariables()
        {
            List<CPluginVariable> lstReturn = new List<CPluginVariable>();
            const string sep = " | ";
            const string sept = "|";

            lstReturn.Add(new CPluginVariable(GetSettingSection("0") + sept + "Auto-Enable/Keep-Alive", typeof(Boolean), _useKeepAlive));

            lstReturn.Add(new CPluginVariable(GetSettingSection("1") + sept + "Settings Locked", typeof(Boolean), _settingsLocked, true));
            lstReturn.Add(new CPluginVariable(GetSettingSection("1") + sept + "Settings Password", typeof(String), _settingsPassword));

            lstReturn.Add(new CPluginVariable(GetSettingSection("2") + sept + "MySQL Hostname", typeof(String), _mySqlHostname));
            lstReturn.Add(new CPluginVariable(GetSettingSection("2") + sept + "MySQL Port", typeof(String), _mySqlPort));
            lstReturn.Add(new CPluginVariable(GetSettingSection("2") + sept + "MySQL Database", typeof(String), _mySqlSchemaName));
            lstReturn.Add(new CPluginVariable(GetSettingSection("2") + sept + "MySQL Username", typeof(String), _mySqlUsername));
            lstReturn.Add(new CPluginVariable(GetSettingSection("2") + sept + "MySQL Password", typeof(String), _mySqlPassword));

            lstReturn.Add(new CPluginVariable(GetSettingSection("D98") + sept + "Override Timing Confirmation", typeof(Boolean), _timingValidOverride));

            lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + sept + "Enforce Single Instance", typeof(Boolean), _enforceSingleInstance));
            lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + sept + "Debug level", typeof(Int32), Log.DebugLevel));
            lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + sept + "Disable Automatic Updates", typeof(Boolean), _automaticUpdatesDisabled));
            lstReturn.Add(new CPluginVariable(GetSettingSection("D99") + sept + "Disable Version Tracking - Required For TEST Builds", typeof(Boolean), _versionTrackingDisabled));
            lstReturn.Add(new CPluginVariable("startup_durations", typeof(String[]), _startupDurations.Select(duration => ((int)duration.TotalSeconds).ToString()).ToArray()));

            return lstReturn;
        }

        public void SetPluginVariable(String strVariable, String strValue)
        {
            if (strValue == null)
            {
                return;
            }
            try
            {
                if (strVariable == "UpdateSettings")
                {
                    //Do nothing. Settings page will be updated after return.
                }
                else if (strVariable == "startup_durations")
                {
                    var stringDurations = CPluginVariable.DecodeStringArray(strValue);
                    _startupDurations.Clear();
                    foreach(String stringDuration in stringDurations)
                    {
                        _startupDurations.Enqueue(TimeSpan.FromSeconds(Int32.Parse(stringDuration)));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Enable/Keep-Alive").Success)
                {
                    Boolean autoEnable = Boolean.Parse(strValue);
                    if (autoEnable != _useKeepAlive)
                    {
                        if (autoEnable)
                        {
                            Enable();
                        }
                        _useKeepAlive = autoEnable;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Enable/Keep-Alive", typeof(Boolean), _useKeepAlive));
                    }
                } 
                else if (Regex.Match(strVariable, @"Current Setting Section").Success) {
                    _CurrentSettingSection = strValue;
                }
                else if (Regex.Match(strVariable, @"Override Timing Confirmation").Success)
                {
                    Boolean dbTimingValidOverride = Boolean.Parse(strValue);
                    if (dbTimingValidOverride != _timingValidOverride)
                    {
                        _timingValidOverride = dbTimingValidOverride;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Override Timing Confirmation", typeof(Boolean), _timingValidOverride));
                    }
                }
                else if (Regex.Match(strVariable, @"Unlock Settings").Success)
                {
                    if (String.IsNullOrEmpty(strValue) || strValue.Length < 5)
                    {
                        return;
                    }
                    if (strValue != _settingsPassword)
                    {
                        Log.Error("Password incorrect.");
                        return;
                    }
                    _settingsLocked = false;
                    Log.Success("Settings unlocked.");
                    QueueSettingForUpload(new CPluginVariable(@"Settings Locked", typeof(Boolean), _settingsLocked));
                }
                else if (Regex.Match(strVariable, @"Lock Settings - Create Password").Success)
                {
                    if (String.IsNullOrEmpty(strValue) || strValue.Length < 5)
                    {
                        Log.Error("Password had invalid format/length, unable to submit.");
                        return;
                    }
                    _settingsPassword = strValue;
                    _settingsLocked = true;
                    Log.Success("Password created. Settings Locked.");
                    QueueSettingForUpload(new CPluginVariable(@"Settings Password", typeof(String), _settingsPassword));
                    QueueSettingForUpload(new CPluginVariable(@"Settings Locked", typeof(Boolean), _settingsLocked));
                }
                else if (Regex.Match(strVariable, @"Lock Settings").Success)
                {
                    if (String.IsNullOrEmpty(strValue) || strValue.Length < 5)
                    {
                        return;
                    }
                    if (strValue != _settingsPassword)
                    {
                        Log.Error("Password incorrect.");
                        return;
                    }
                    _settingsLocked = true;
                    Log.Success("Settings locked.");
                    QueueSettingForUpload(new CPluginVariable(@"Settings Locked", typeof(Boolean), _settingsLocked));
                }
                else if (Regex.Match(strVariable, @"Settings Password").Success)
                {
                    if (String.IsNullOrEmpty(strValue) || strValue.Length < 5)
                    {
                        return;
                    }
                    _settingsPassword = strValue;
                }
                else if (Regex.Match(strVariable, @"Settings Locked").Success)
                {
                    _settingsLocked = Boolean.Parse(strValue);
                }
                else if (Regex.Match(strVariable, @"Send Query").Success)
                {
                    if (_databaseConnectionCriticalState)
                    {
                        return;
                    }
                    SendQuery(strValue, true);
                }
                else if (Regex.Match(strVariable, @"Send Non-Query").Success)
                {
                    if (_databaseConnectionCriticalState)
                    {
                        return;
                    }
                    SendNonQuery("Experimental Query", strValue, true);
                }
                else if (Regex.Match(strVariable, @"Setting Import").Success)
                {
                    Int32 tmp = -1;
                    if (int.TryParse(strValue, out tmp))
                    {
                        if (tmp != -1)
                        {
                            QueueSettingImport(tmp);
                        }
                    }
                    else
                    {
                        Log.Error("Invalid Input for Setting Import");
                    }
                }
                else if (Regex.Match(strVariable, @"Command Entry").Success)
                {
                    if (String.IsNullOrEmpty(strValue))
                    {
                        return;
                    }
                    //Check if the message is a command
                    if (strValue.StartsWith("@") || strValue.StartsWith("!") || strValue.StartsWith("."))
                    {
                        strValue = strValue.Substring(1);
                    }
                    else if (strValue.StartsWith("/@") || strValue.StartsWith("/!") || strValue.StartsWith("/."))
                    {
                        strValue = strValue.Substring(2);
                    }
                    else if (strValue.StartsWith("/"))
                    {
                        strValue = strValue.Substring(1);
                    }
                    else
                    {
                        Log.Error("Invalid command format.");
                        return;
                    }
                    AdKatsRecord record = new AdKatsRecord
                    {
                        record_source = AdKatsRecord.Sources.Settings,
                        record_access = AdKatsRecord.AccessMethod.HiddenExternal,
                        source_name = "SettingsAdmin",
                        record_time = UtcNow()
                    };
                    CompleteRecordInformation(record, strValue);
                }
                else if (Regex.Match(strVariable, @"Debug level").Success)
                {
                    Int32 tmp;
                    if (int.TryParse(strValue, out tmp))
                    {
                        if (tmp == 8345)
                        {
                            _FetchedPlayers.Clear();
                            _PlayerLeftDictionary.Clear();
                        }
                        else if (tmp == 3958)
                        {
                            Log.Info("Avg Read: " + _DatabaseReadAverageDuration + " | Avg Write: " + _DatabaseWriteAverageDuration);
                        } 
                        else if (tmp == 4533) 
                        {
                            Environment.Exit(4533);
                        }
                        else if (tmp == 5837) 
                        {
                            Log.Info("Server Round: " + _serverInfo.InfoObject.CurrentRound);
                        }
                        else if (tmp == 23548)
                        {
                            Boolean wasAuth = _isTestingAuthorized;
                            _isTestingAuthorized = true;
                            if (!wasAuth)
                            {
                                Log.Write("Server is priviledged for testing during this instance.");
                            }
                        }
                        else if (tmp != Log.DebugLevel)
                        {
                            Log.DebugLevel = tmp;
                            //Once setting has been changed, upload the change to database
                            QueueSettingForUpload(new CPluginVariable(@"Debug level", typeof(int), Log.DebugLevel));
                        }
                    }
                }
                else if (Regex.Match(strVariable, @"Debug Soldier Name").Success)
                {
                    if (IsSoldierNameValid(strValue))
                    {
                        if (strValue != _debugSoldierName)
                        {
                            _debugSoldierName = strValue;
                            //Once setting has been changed, upload the change to database
                            QueueSettingForUpload(new CPluginVariable(@"Debug Soldier Name", typeof(String), _debugSoldierName));
                        }
                    }
                }
                else if (Regex.Match(strVariable, @"Maximum Temp-Ban Duration Minutes").Success)
                {
                    Double maxDuration;
                    if (!Double.TryParse(strValue, out maxDuration))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (maxDuration <= 0)
                    {
                        Log.Error("Max duration cannot be negative.");
                        return;
                    }
                    TimeSpan tempMaxDur = TimeSpan.FromMinutes(maxDuration);
                    if (tempMaxDur.TotalDays > 3650)
                    {
                        Log.Error("Max duration cannot be longer than 10 years.");
                        return;
                    }
                    _MaxTempBanDuration = tempMaxDur;
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Maximum Temp-Ban Duration Minutes", typeof(Double), _MaxTempBanDuration.TotalMinutes));
                }
                else if (Regex.Match(strVariable, @"Server VOIP Address").Success)
                {
                    if (strValue != _ServerVoipAddress)
                    {
                        _ServerVoipAddress = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Server VOIP Address", typeof(String), _ServerVoipAddress));
                    }
                }
                else if (Regex.Match(strVariable, @"Rule Print Delay").Success)
                {
                    Double delay;
                    if (!Double.TryParse(strValue, out delay))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_ServerRulesDelay != delay)
                    {
                        if (delay <= 0)
                        {
                            Log.Error("Delay cannot be negative.");
                            delay = 1.0;
                        }
                        _ServerRulesDelay = delay;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Rule Print Delay", typeof(Double), _ServerRulesDelay));
                    }
                }
                else if (Regex.Match(strVariable, @"Rule Print Interval").Success)
                {
                    Double interval;
                    if (!Double.TryParse(strValue, out interval))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_ServerRulesInterval != interval)
                    {
                        if (interval <= 0)
                        {
                            Log.Error("Interval cannot be negative.");
                            interval = 5.0;
                        }
                        _ServerRulesInterval = interval;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Rule Print Interval", typeof(Double), _ServerRulesInterval));
                    }
                }
                else if (Regex.Match(strVariable, @"Server Rule List").Success)
                {
                    _ServerRulesList = CPluginVariable.DecodeStringArray(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Server Rule List", typeof(String), CPluginVariable.EncodeStringArray(_ServerRulesList)));
                }
                else if (Regex.Match(strVariable, @"Server Rule Numbers").Success)
                {
                    Boolean ruleNumbers = Boolean.Parse(strValue);
                    if (ruleNumbers != _ServerRulesNumbers)
                    {
                        _ServerRulesNumbers = ruleNumbers;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Server Rule Numbers", typeof(Boolean), _ServerRulesNumbers));
                    }
                }
                else if (Regex.Match(strVariable, @"Yell Server Rules").Success)
                {
                    Boolean ruleYell = Boolean.Parse(strValue);
                    if (ruleYell != _ServerRulesYell)
                    {
                        _ServerRulesYell = ruleYell;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Yell Server Rules", typeof(Boolean), _ServerRulesYell));
                    }
                }
                else if (Regex.Match(strVariable, @"Disable Automatic Updates").Success)
                {
                    Boolean disableAutomaticUpdates = Boolean.Parse(strValue);
                    if (disableAutomaticUpdates != _automaticUpdatesDisabled)
                    {
                        _automaticUpdatesDisabled = disableAutomaticUpdates;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Disable Automatic Updates", typeof(Boolean), _automaticUpdatesDisabled));
                    }
                }
                else if (Regex.Match(strVariable, @"Enforce Single Instance").Success)
                {
                    Boolean enforceSingleInstance = Boolean.Parse(strValue);
                    if (enforceSingleInstance != _enforceSingleInstance)
                    {
                        _enforceSingleInstance = enforceSingleInstance;
                        if (!_enforceSingleInstance)
                        {
                            var message = "Running multiple instances of AdKats on the same server is a very bad idea. If you are sure this won't happen, it's safe to disable this setting.";
                            Log.Warn(message);
                            Log.Warn(message);
                            Log.Warn(message);
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Enforce Single Instance", typeof(Boolean), _enforceSingleInstance));
                    }
                }
                else if (Regex.Match(strVariable, @"Disable Version Tracking - Required For TEST Builds").Success)
                {
                    Boolean disableUpdatePosts = Boolean.Parse(strValue);
                    if (disableUpdatePosts != _versionTrackingDisabled)
                    {
                        _versionTrackingDisabled = disableUpdatePosts;
                        if (_versionTrackingDisabled)
                        {
                            if (_threadsReady)
                            {
                                PostVersionTracking();
                            }
                        }
                        else
                        {
                            PostVersionTracking();
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Disable Version Tracking - Required For TEST Builds", typeof(Boolean), _versionTrackingDisabled));
                    }
                }
                else if (Regex.Match(strVariable, @"AFK System Enable").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean afkSystemEnable = Boolean.Parse(strValue);
                    if (afkSystemEnable != _AFKManagerEnable)
                    {
                        _AFKManagerEnable = afkSystemEnable;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"AFK System Enable", typeof(Boolean), _AFKManagerEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"AFK Ignore Chat").Success)
                {
                    Boolean afkIgnoreChat = Boolean.Parse(strValue);
                    if (afkIgnoreChat != _AFKIgnoreChat)
                    {
                        _AFKIgnoreChat = afkIgnoreChat;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"AFK Ignore Chat", typeof(Boolean), _AFKIgnoreChat));
                    }
                }
                else if (Regex.Match(strVariable, @"AFK Auto-Kick Enable").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean afkAutoKickEnable = Boolean.Parse(strValue);
                    if (afkAutoKickEnable != _AFKAutoKickEnable)
                    {
                        _AFKAutoKickEnable = afkAutoKickEnable;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"AFK Auto-Kick Enable", typeof(Boolean), _AFKAutoKickEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"AFK Trigger Minutes").Success)
                {
                    Double afkAutoKickDurationMinutes;
                    if (!Double.TryParse(strValue, out afkAutoKickDurationMinutes))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_AFKTriggerDurationMinutes != afkAutoKickDurationMinutes)
                    {
                        if (afkAutoKickDurationMinutes < 0)
                        {
                            Log.Error("Duration cannot be negative.");
                            return;
                        }
                        _AFKTriggerDurationMinutes = afkAutoKickDurationMinutes;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"AFK Trigger Minutes", typeof(Double), _AFKTriggerDurationMinutes));
                    }
                }
                else if (Regex.Match(strVariable, @"AFK Minimum Players").Success)
                {
                    Int32 afkAutoKickMinimumPlayers = Int32.Parse(strValue);
                    if (_AFKTriggerMinimumPlayers != afkAutoKickMinimumPlayers)
                    {
                        if (afkAutoKickMinimumPlayers < 0)
                        {
                            Log.Error("Minimum players cannot be negative.");
                            return;
                        }
                        _AFKTriggerMinimumPlayers = afkAutoKickMinimumPlayers;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"AFK Minimum Players", typeof(Int32), _AFKTriggerMinimumPlayers));
                    }
                }
                else if (Regex.Match(strVariable, @"AFK Ignore User List").Success)
                {
                    Boolean afkIgnoreUserList = Boolean.Parse(strValue);
                    if (afkIgnoreUserList != _AFKIgnoreUserList)
                    {
                        _AFKIgnoreUserList = afkIgnoreUserList;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"AFK Ignore User List", typeof(Boolean), _AFKIgnoreUserList));
                    }
                }
                else if (Regex.Match(strVariable, @"AFK Ignore Roles").Success)
                {
                    _AFKIgnoreRoles = CPluginVariable.DecodeStringArray(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"AFK Ignore Roles", typeof(String), CPluginVariable.EncodeStringArray(_AFKIgnoreRoles)));
                }
                else if (Regex.Match(strVariable, @"Ping Enforcer Enable").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean PingSystemEnable = Boolean.Parse(strValue);
                    if (PingSystemEnable != _pingEnforcerEnable)
                    {
                        _pingEnforcerEnable = PingSystemEnable;
                        //Once setting has been changed, upload the change to database
                        if (_pingEnforcerEnable)
                        {
                            //Disable latency manager
                            ExecuteCommand("procon.protected.plugins.enable", "CLatencyManager", "False");
                        }
                        QueueSettingForUpload(new CPluginVariable(@"Ping Enforcer Enable", typeof(Boolean), _pingEnforcerEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Ping Moving Average Duration sec").Success)
                {
                    Double pingMovingAverageDurationSeconds;
                    if (!Double.TryParse(strValue, out pingMovingAverageDurationSeconds))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_pingMovingAverageDurationSeconds != pingMovingAverageDurationSeconds)
                    {
                        if (pingMovingAverageDurationSeconds < 30)
                        {
                            Log.Error("Duration cannot be less than 30 seconds.");
                            return;
                        }
                        _pingMovingAverageDurationSeconds = pingMovingAverageDurationSeconds;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ping Moving Average Duration sec", typeof(Double), _pingMovingAverageDurationSeconds));
                    }
                }
                else if (Regex.Match(strVariable, @"Ping Kick Low Population Trigger ms").Success)
                {
                    Double pingEnforcerLowTriggerMS;
                    if (!Double.TryParse(strValue, out pingEnforcerLowTriggerMS))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_pingEnforcerLowTriggerMS != pingEnforcerLowTriggerMS)
                    {
                        if (pingEnforcerLowTriggerMS < 10)
                        {
                            Log.Error("Trigger ms cannot be less than 10.");
                            return;
                        }
                        _pingEnforcerLowTriggerMS = pingEnforcerLowTriggerMS;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ping Kick Low Population Trigger ms", typeof(Double), _pingEnforcerLowTriggerMS));
                    }
                } else if (Regex.Match(strVariable, @"Ping Kick Low Population Time Modifier").Success) {
                    Int32 parser;
                    var timeModifiers = CPluginVariable.DecodeStringArray(strValue)
                        .Select((modifier, index) => ((Int32.TryParse(modifier.Trim(), out parser))?(parser):(0)))
                        .Take(24).ToList();
                    while (timeModifiers.Count() < 24) {
                        Log.Error("Not all hours accounted for, adding 0 for low hour " + (timeModifiers.Count() - 1));
                        timeModifiers.Add(0);
                    }
                    _pingEnforcerLowTimeModifier = timeModifiers.ToArray();
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Ping Kick Low Population Time Modifier", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerLowTimeModifier.Select(x => x.ToString()).ToArray())));
                }
                else if (Regex.Match(strVariable, @"Ping Kick Medium Population Trigger ms").Success)
                {
                    Double pingEnforcerMedTriggerMS;
                    if (!Double.TryParse(strValue, out pingEnforcerMedTriggerMS))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_pingEnforcerMedTriggerMS != pingEnforcerMedTriggerMS)
                    {
                        if (pingEnforcerMedTriggerMS < 10)
                        {
                            Log.Error("Trigger ms cannot be less than 10.");
                            return;
                        }
                        _pingEnforcerMedTriggerMS = pingEnforcerMedTriggerMS;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ping Kick Medium Population Trigger ms", typeof(Double), _pingEnforcerMedTriggerMS));
                    }
                } else if (Regex.Match(strVariable, @"Ping Kick Medium Population Time Modifier").Success) {
                    Int32 parser;
                    var timeModifiers = CPluginVariable.DecodeStringArray(strValue)
                        .Select((modifier, index) => ((Int32.TryParse(modifier.Trim(), out parser)) ? (parser) : (0)))
                        .Take(24).ToList();
                    while (timeModifiers.Count() < 24) {
                        Log.Error("Not all hours accounted for, adding 0 for medium hour " + (timeModifiers.Count() - 1));
                        timeModifiers.Add(0);
                    }
                    _pingEnforcerMedTimeModifier = timeModifiers.ToArray();
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Ping Kick Medium Population Time Modifier", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerMedTimeModifier.Select(x => x.ToString()).ToArray())));
                }
                else if (Regex.Match(strVariable, @"Ping Kick High Population Trigger ms").Success)
                {
                    Double pingEnforcerHighTriggerMS;
                    if (!Double.TryParse(strValue, out pingEnforcerHighTriggerMS))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_pingEnforcerHighTriggerMS != pingEnforcerHighTriggerMS)
                    {
                        if (pingEnforcerHighTriggerMS < 10)
                        {
                            Log.Error("Trigger ms cannot be less than 10.");
                            return;
                        }
                        _pingEnforcerHighTriggerMS = pingEnforcerHighTriggerMS;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ping Kick High Population Trigger ms", typeof(Double), _pingEnforcerHighTriggerMS));
                    }
                } else if (Regex.Match(strVariable, @"Ping Kick High Population Time Modifier").Success) {
                    Int32 parser;
                    var timeModifiers = CPluginVariable.DecodeStringArray(strValue)
                        .Select((modifier, index) => ((Int32.TryParse(modifier.Trim(), out parser)) ? (parser) : (0)))
                        .Take(24).ToList();
                    while (timeModifiers.Count() < 24) {
                        Log.Error("Not all hours accounted for, adding 0 for high hour " + (timeModifiers.Count() - 1));
                        timeModifiers.Add(0);
                    }
                    _pingEnforcerHighTimeModifier = timeModifiers.ToArray();
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Ping Kick High Population Time Modifier", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerHighTimeModifier.Select(x => x.ToString()).ToArray())));
                }
                else if (Regex.Match(strVariable, @"Ping Kick Full Population Trigger ms").Success)
                {
                    Double pingEnforcerFullTriggerMS;
                    if (!Double.TryParse(strValue, out pingEnforcerFullTriggerMS))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_pingEnforcerFullTriggerMS != pingEnforcerFullTriggerMS)
                    {
                        if (pingEnforcerFullTriggerMS < 10)
                        {
                            Log.Error("Trigger ms cannot be less than 10.");
                            return;
                        }
                        _pingEnforcerFullTriggerMS = pingEnforcerFullTriggerMS;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ping Kick Full Population Trigger ms", typeof(Double), _pingEnforcerFullTriggerMS));
                    }
                } else if (Regex.Match(strVariable, @"Ping Kick Full Population Time Modifier").Success) {
                    Int32 parser;
                    var timeModifiers = CPluginVariable.DecodeStringArray(strValue)
                        .Select((modifier, index) => ((Int32.TryParse(modifier.Trim(), out parser)) ? (parser) : (0)))
                        .Take(24).ToList();
                    while (timeModifiers.Count() < 24) {
                        Log.Error("Not all hours accounted for, adding 0 for full hour " + (timeModifiers.Count() - 1));
                        timeModifiers.Add(0);
                    }
                    _pingEnforcerFullTimeModifier = timeModifiers.ToArray();
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Ping Kick Full Population Time Modifier", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerFullTimeModifier.Select(x => x.ToString()).ToArray())));
                }
                else if (Regex.Match(strVariable, @"Ping Kick Minimum Players").Success)
                {
                    Int32 pingEnforcerTriggerMinimumPlayers = Int32.Parse(strValue);
                    if (_pingEnforcerTriggerMinimumPlayers != pingEnforcerTriggerMinimumPlayers)
                    {
                        if (pingEnforcerTriggerMinimumPlayers < 0)
                        {
                            Log.Error("Minimum players cannot be negative.");
                            return;
                        }
                        _pingEnforcerTriggerMinimumPlayers = pingEnforcerTriggerMinimumPlayers;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ping Kick Minimum Players", typeof(Int32), _pingEnforcerTriggerMinimumPlayers));
                    }
                }
                else if (Regex.Match(strVariable, @"Kick Missing Pings").Success)
                {
                    Boolean pingEnforcerKickMissingPings = Boolean.Parse(strValue);
                    if (pingEnforcerKickMissingPings != _pingEnforcerKickMissingPings)
                    {
                        _pingEnforcerKickMissingPings = pingEnforcerKickMissingPings;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Kick Missing Pings", typeof(Boolean), _pingEnforcerKickMissingPings));
                    }
                }
                else if (Regex.Match(strVariable, @"Attempt Manual Ping when Missing").Success)
                {
                    Boolean attemptManualPingWhenMissing = Boolean.Parse(strValue);
                    if (attemptManualPingWhenMissing != _attemptManualPingWhenMissing)
                    {
                        _attemptManualPingWhenMissing = attemptManualPingWhenMissing;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Attempt Manual Ping when Missing", typeof(Boolean), _attemptManualPingWhenMissing));
                    }
                }
                else if (Regex.Match(strVariable, @"Ping Kick Ignore User List").Success)
                {
                    Boolean pingEnforcerIgnoreUserList = Boolean.Parse(strValue);
                    if (pingEnforcerIgnoreUserList != _pingEnforcerIgnoreUserList)
                    {
                        _pingEnforcerIgnoreUserList = pingEnforcerIgnoreUserList;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ping Kick Ignore User List", typeof(Boolean), _pingEnforcerIgnoreUserList));
                    }
                }
                else if (Regex.Match(strVariable, @"Ping Kick Ignore Roles").Success)
                {
                    _pingEnforcerIgnoreRoles = CPluginVariable.DecodeStringArray(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Ping Kick Ignore Roles", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerIgnoreRoles)));
                }
                else if (Regex.Match(strVariable, @"Ping Kick Message Prefix").Success)
                {
                    if (strValue != _pingEnforcerMessagePrefix)
                    {
                        _pingEnforcerMessagePrefix = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ping Kick Message Prefix", typeof(String), _pingEnforcerMessagePrefix));
                    }
                }
                else if (Regex.Match(strVariable, @"Commander Manager Enable").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean CMDRManagerEnable = Boolean.Parse(strValue);
                    if (CMDRManagerEnable != _CMDRManagerEnable)
                    {
                        if (_gameVersion == GameVersion.BF3 && CMDRManagerEnable)
                        {
                            Log.Error("Commander manager cannot be enabled in BF3");
                            _CMDRManagerEnable = false;
                        }
                        else
                        {
                            _CMDRManagerEnable = CMDRManagerEnable;
                            //Once setting has been changed, upload the change to database
                            QueueSettingForUpload(new CPluginVariable(@"Commander Manager Enable", typeof(Boolean), _CMDRManagerEnable));
                        }
                    }
                }
                else if (Regex.Match(strVariable, @"Minimum Players to Allow Commanders").Success)
                {
                    Int32 CMDRMinimumPlayers = Int32.Parse(strValue);
                    if (_CMDRMinimumPlayers != CMDRMinimumPlayers)
                    {
                        if (CMDRMinimumPlayers < 0)
                        {
                            Log.Error("Minimum players cannot be negative.");
                            return;
                        }
                        _CMDRMinimumPlayers = CMDRMinimumPlayers;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Minimum Players to Allow Commanders", typeof(Int32), _CMDRMinimumPlayers));
                    }
                }
                else if (Regex.Match(strVariable, @"Surrender Vote Enable").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean surrenderVoteEnable = Boolean.Parse(strValue);
                    if (surrenderVoteEnable != _surrenderVoteEnable)
                    {
                        _surrenderVoteEnable = surrenderVoteEnable;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Surrender Vote Enable", typeof(Boolean), _surrenderVoteEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Percentage Votes Needed for Surrender").Success)
                {
                    Double surrenderVoteMinimumPlayerPercentage;
                    if (!Double.TryParse(strValue, out surrenderVoteMinimumPlayerPercentage))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_surrenderVoteMinimumPlayerPercentage != surrenderVoteMinimumPlayerPercentage)
                    {
                        if (surrenderVoteMinimumPlayerPercentage < 0)
                        {
                            Log.Error("Minimum player percentage cannot be negative.");
                            return;
                        }
                        if (surrenderVoteMinimumPlayerPercentage > 100)
                        {
                            Log.Error("Minimum player percentage cannot be greater than 100.");
                            return;
                        }
                        _surrenderVoteMinimumPlayerPercentage = surrenderVoteMinimumPlayerPercentage;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Percentage Votes Needed for Surrender", typeof(Double), _surrenderVoteMinimumPlayerPercentage));
                    }
                }
                else if (Regex.Match(strVariable, @"Minimum Player Count to Enable Surrender").Success)
                {
                    Int32 surrenderVoteMinimumPlayerCount = Int32.Parse(strValue);
                    if (_surrenderVoteMinimumPlayerCount != surrenderVoteMinimumPlayerCount)
                    {
                        if (surrenderVoteMinimumPlayerCount < 0)
                        {
                            Log.Error("Minimum player count cannot be negative.");
                            return;
                        }
                        _surrenderVoteMinimumPlayerCount = surrenderVoteMinimumPlayerCount;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Minimum Player Count to Enable Surrender", typeof(Int32), _surrenderVoteMinimumPlayerCount));
                    }
                }
                else if (Regex.Match(strVariable, @"Minimum Ticket Gap to Surrender").Success)
                {
                    Int32 surrenderVoteMinimumTicketGap = Int32.Parse(strValue);
                    if (_surrenderVoteMinimumTicketGap != surrenderVoteMinimumTicketGap)
                    {
                        if (surrenderVoteMinimumTicketGap < 0)
                        {
                            Log.Error("Minimum ticket gap cannot be negative.");
                            return;
                        }
                        _surrenderVoteMinimumTicketGap = surrenderVoteMinimumTicketGap;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Minimum Ticket Gap to Surrender", typeof(Int32), _surrenderVoteMinimumTicketGap));
                    }
                }
                else if (Regex.Match(strVariable, @"Enable Required Ticket Rate Gap to Surrender").Success)
                {
                    Boolean surrenderVoteTicketRateGapEnable = Boolean.Parse(strValue);
                    if (surrenderVoteTicketRateGapEnable != _surrenderVoteTicketRateGapEnable)
                    {
                        _surrenderVoteTicketRateGapEnable = surrenderVoteTicketRateGapEnable;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Enable Required Ticket Rate Gap to Surrender", typeof(Boolean), _surrenderVoteTicketRateGapEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Minimum Ticket Rate Gap to Surrender").Success)
                {
                    Double surrenderVoteMinimumTicketRateGap;
                    if (!Double.TryParse(strValue, out surrenderVoteMinimumTicketRateGap))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_surrenderVoteMinimumTicketRateGap != surrenderVoteMinimumTicketRateGap)
                    {
                        if (surrenderVoteMinimumTicketRateGap < 0)
                        {
                            Log.Error("Minimum ticket rate gap cannot be negative.");
                            return;
                        }
                        _surrenderVoteMinimumTicketRateGap = surrenderVoteMinimumTicketRateGap;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Minimum Ticket Rate Gap to Surrender", typeof(Double), _surrenderVoteMinimumTicketRateGap));
                    }
                }
                else if (Regex.Match(strVariable, @"Surrender Vote Timeout Enable").Success)
                {
                    Boolean surrenderVoteTimeoutEnable = Boolean.Parse(strValue);
                    if (surrenderVoteTimeoutEnable != _surrenderVoteTimeoutEnable)
                    {
                        _surrenderVoteTimeoutEnable = surrenderVoteTimeoutEnable;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Surrender Vote Timeout Enable", typeof(Boolean), _surrenderVoteTimeoutEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Surrender Vote Timeout Minutes").Success)
                {
                    Int32 surrenderVoteTimeoutMinutes = Int32.Parse(strValue);
                    if (_surrenderVoteTimeoutMinutes != surrenderVoteTimeoutMinutes)
                    {
                        if (surrenderVoteTimeoutMinutes < 0)
                        {
                            Log.Error("Timeout cannot be negative.");
                            return;
                        }
                        _surrenderVoteTimeoutMinutes = surrenderVoteTimeoutMinutes;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Surrender Vote Timeout Minutes", typeof(Int32), _surrenderVoteTimeoutMinutes));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Enable").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean surrenderAutoEnable = Boolean.Parse(strValue);
                    if (surrenderAutoEnable != _surrenderAutoEnable)
                    {
                        _surrenderAutoEnable = surrenderAutoEnable;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Enable", typeof(Boolean), _surrenderAutoEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Use Optimal Values for Metro").Success)
                {
                    Boolean surrenderAutoUseMetroValues = Boolean.Parse(strValue);
                    if (surrenderAutoUseMetroValues != _surrenderAutoUseMetroValues)
                    {
                        _surrenderAutoUseMetroValues = surrenderAutoUseMetroValues;
                        if (_surrenderAutoUseMetroValues)
                        {
                            _surrenderAutoUseLockerValues = false;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Use Optimal Values for Metro Conquest", typeof(Boolean), _surrenderAutoUseMetroValues));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Use Optimal Values for Locker").Success)
                {
                    Boolean surrenderAutoUseLockerValues = Boolean.Parse(strValue);
                    if (surrenderAutoUseLockerValues != _surrenderAutoUseLockerValues)
                    {
                        _surrenderAutoUseLockerValues = surrenderAutoUseLockerValues;
                        if (_surrenderAutoUseLockerValues)
                        {
                            _surrenderAutoUseMetroValues = false;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Use Optimal Values for Locker Conquest", typeof(Boolean), _surrenderAutoUseLockerValues));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Reset Trigger Count on Cancel").Success)
                {
                    Boolean surrenderAutoResetTriggerCountOnCancel = Boolean.Parse(strValue);
                    if (surrenderAutoResetTriggerCountOnCancel != _surrenderAutoResetTriggerCountOnCancel)
                    {
                        _surrenderAutoResetTriggerCountOnCancel = surrenderAutoResetTriggerCountOnCancel;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Reset Trigger Count on Cancel", typeof(Boolean), _surrenderAutoResetTriggerCountOnCancel));
                    }
                }
                else if (Regex.Match(strVariable, @"Reset Auto-Nuke Trigger Count on Fire").Success)
                {
                    Boolean surrenderAutoResetTriggerCountOnFire = Boolean.Parse(strValue);
                    if (surrenderAutoResetTriggerCountOnFire != _surrenderAutoResetTriggerCountOnFire)
                    {
                        _surrenderAutoResetTriggerCountOnFire = surrenderAutoResetTriggerCountOnFire;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Reset Auto-Nuke Trigger Count on Fire", typeof(Boolean), _surrenderAutoResetTriggerCountOnFire));
                    }
                }
                else if (Regex.Match(strVariable, @"Nuke Winning Team Instead of Surrendering Losing Team").Success)
                {
                    Boolean surrenderAutoNukeWinning = Boolean.Parse(strValue);
                    if (surrenderAutoNukeWinning != _surrenderAutoNukeInstead)
                    {
                        _surrenderAutoNukeInstead = surrenderAutoNukeWinning;
                        if (_surrenderAutoNukeInstead)
                        {
                            _surrenderAutoTriggerVote = false;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Nuke Winning Team Instead of Surrendering Losing Team", typeof(Boolean), _surrenderAutoNukeInstead));
                    }
                }
                else if (Regex.Match(strVariable, @"Fire Nuke Triggers if Winning Team up by X Tickets").Success)
                {
                    Int32 ticketCount = Int32.Parse(strValue);
                    if (_NukeWinningTeamUpTicketCount != ticketCount)
                    {
                        _NukeWinningTeamUpTicketCount = ticketCount;
                        if (_NukeWinningTeamUpTicketCount < 1)
                        {
                            _NukeWinningTeamUpTicketCount = 1;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Fire Nuke Triggers if Winning Team up by X Tickets", typeof(Int32), _NukeWinningTeamUpTicketCount));
                    }
                }
                else if (Regex.Match(strVariable, @"Maximum Auto-Nukes Each Round").Success)
                {
                    Int32 surrenderAutoMaxNukesEachRound = Int32.Parse(strValue);
                    if (_surrenderAutoMaxNukesEachRound != surrenderAutoMaxNukesEachRound)
                    {
                        if (surrenderAutoMaxNukesEachRound < 0)
                        {
                            Log.Error("Maxumim nuke count each round cannot be negative.");
                            return;
                        }
                        _surrenderAutoMaxNukesEachRound = surrenderAutoMaxNukesEachRound;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Maximum Auto-Nukes Each Round", typeof(Int32), _surrenderAutoMaxNukesEachRound));
                    }
                }
                else if (Regex.Match(strVariable, @"Minimum Seconds Between Nukes").Success)
                {
                    Int32 surrenderAutoNukeMinBetween = Int32.Parse(strValue);
                    if (_surrenderAutoNukeMinBetween != surrenderAutoNukeMinBetween)
                    {
                        if (surrenderAutoNukeMinBetween < 0)
                        {
                            Log.Error("Minimum seconds between nukes must be positive.");
                            surrenderAutoNukeMinBetween = 1;
                        }
                        if (surrenderAutoNukeMinBetween > 120)
                        {
                            Log.Error("Minimum seconds between nukes cannot be longer than 120 seconds.");
                            surrenderAutoNukeMinBetween = 120;
                        }
                        _surrenderAutoNukeMinBetween = surrenderAutoNukeMinBetween;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Minimum Seconds Between Nukes", typeof(Int32), _surrenderAutoNukeMinBetween));
                    }
                }
                else if (Regex.Match(strVariable, @"Switch to surrender after max nukes").Success)
                {
                    Boolean surrenderAutoNukeResolveAfterMax = Boolean.Parse(strValue);
                    if (surrenderAutoNukeResolveAfterMax != _surrenderAutoNukeResolveAfterMax)
                    {
                        _surrenderAutoNukeResolveAfterMax = surrenderAutoNukeResolveAfterMax;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Switch to surrender after max nukes", typeof(Boolean), _surrenderAutoNukeResolveAfterMax));
                    }
                }
                else if (Regex.Match(strVariable, @"Announce Nuke Preparation to Players").Success)
                {
                    Boolean surrenderAutoAnnounceNukePrep = Boolean.Parse(strValue);
                    if (surrenderAutoAnnounceNukePrep != _surrenderAutoAnnounceNukePrep)
                    {
                        _surrenderAutoAnnounceNukePrep = surrenderAutoAnnounceNukePrep;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Announce Nuke Preparation to Players", typeof(Boolean), _surrenderAutoAnnounceNukePrep));
                    }
                }
                else if (Regex.Match(strVariable, @"Allow Auto-Nuke to fire on losing teams").Success)
                {
                    Boolean surrenderAutoNukeLosingTeams = Boolean.Parse(strValue);
                    if (surrenderAutoNukeLosingTeams != _surrenderAutoNukeLosingTeams)
                    {
                        _surrenderAutoNukeLosingTeams = surrenderAutoNukeLosingTeams;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Allow Auto-Nuke to fire on losing teams", typeof(Boolean), _surrenderAutoNukeLosingTeams));
                    }
                }
                else if (Regex.Match(strVariable, @"Start Surrender Vote Instead of Surrendering Losing Team").Success)
                {
                    Boolean surrenderAutoTriggerVote = Boolean.Parse(strValue);
                    if (surrenderAutoTriggerVote != _surrenderAutoTriggerVote)
                    {
                        _surrenderAutoTriggerVote = surrenderAutoTriggerVote;
                        if (surrenderAutoTriggerVote)
                        {
                            _surrenderAutoNukeInstead = false;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Start Surrender Vote Instead of Surrendering Losing Team", typeof(Boolean), _surrenderAutoTriggerVote));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Minimum Ticket Gap").Success)
                {
                    Int32 surrenderAutoMinimumTicketGap = Int32.Parse(strValue);
                    if (_surrenderAutoMinimumTicketGap != surrenderAutoMinimumTicketGap) 
                    {
                        if (_surrenderAutoMinimumTicketGap < 0) {
                            Log.Error("Minimum ticket gap cannot be negative.");
                            return;
                        }
                        _surrenderAutoMinimumTicketGap = surrenderAutoMinimumTicketGap;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Minimum Ticket Gap", typeof(Int32), _surrenderAutoMinimumTicketGap));
                    }
                } else if (Regex.Match(strVariable, @"Auto-Surrender Minimum Ticket Count").Success) {
                    Int32 surrenderAutoMinimumTicketCount = Int32.Parse(strValue);
                    if (_surrenderAutoMinimumTicketCount != surrenderAutoMinimumTicketCount) {
                        if (surrenderAutoMinimumTicketCount < 0) {
                            Log.Error("Minimum ticket count cannot be negative.");
                            return;
                        }
                        _surrenderAutoMinimumTicketCount = surrenderAutoMinimumTicketCount;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Minimum Ticket Count", typeof(Int32), _surrenderAutoMinimumTicketCount));
                    }
                } else if (Regex.Match(strVariable, @"Auto-Surrender Maximum Ticket Count").Success) {
                    Int32 surrenderAutoMaximumTicketCount = Int32.Parse(strValue);
                    if (_surrenderAutoMaximumTicketCount != surrenderAutoMaximumTicketCount) {
                        if (surrenderAutoMaximumTicketCount < 0) {
                            Log.Error("Maximum ticket count cannot be negative.");
                            return;
                        }
                        _surrenderAutoMaximumTicketCount = surrenderAutoMaximumTicketCount;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Maximum Ticket Count", typeof(Int32), _surrenderAutoMaximumTicketCount));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Losing Team Rate Window Max").Success)
                {
                    Double surrenderAutoLosingRateMax;
                    if (!Double.TryParse(strValue, out surrenderAutoLosingRateMax))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_surrenderAutoLosingRateMax != surrenderAutoLosingRateMax)
                    {
                        _surrenderAutoLosingRateMax = surrenderAutoLosingRateMax;

                        if (_surrenderAutoLosingRateMin > _surrenderAutoLosingRateMax) {
                            Log.Info("Min ticket rate cannot be greater than max. Swapping values.");
                            var pivot = _surrenderAutoLosingRateMin;
                            _surrenderAutoLosingRateMin = _surrenderAutoLosingRateMax;
                            _surrenderAutoLosingRateMax = pivot;
                        }
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Losing Team Rate Window Max", typeof(Double), _surrenderAutoLosingRateMax));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Losing Team Rate Window Min").Success)
                {
                    Double surrenderAutoLosingRateMin;
                    if (!Double.TryParse(strValue, out surrenderAutoLosingRateMin))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_surrenderAutoLosingRateMin != surrenderAutoLosingRateMin)
                    {
                        _surrenderAutoLosingRateMin = surrenderAutoLosingRateMin;

                        if (_surrenderAutoLosingRateMin > _surrenderAutoLosingRateMax) {
                            Log.Info("Min ticket rate cannot be greater than max. Swapping values.");
                            var pivot = _surrenderAutoLosingRateMin;
                            _surrenderAutoLosingRateMin = _surrenderAutoLosingRateMax;
                            _surrenderAutoLosingRateMax = pivot;
                        }
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Losing Team Rate Window Min", typeof(Double), _surrenderAutoLosingRateMin));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Winning Team Rate Window Max").Success)
                {
                    Double surrenderAutoWinningRateMax;
                    if (!Double.TryParse(strValue, out surrenderAutoWinningRateMax))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_surrenderAutoWinningRateMax != surrenderAutoWinningRateMax)
                    {
                        _surrenderAutoWinningRateMax = surrenderAutoWinningRateMax;

                        if (_surrenderAutoWinningRateMin > _surrenderAutoWinningRateMax) {
                            Log.Info("Min ticket rate cannot be greater than max. Swapping values.");
                            var pivot = _surrenderAutoWinningRateMin;
                            _surrenderAutoWinningRateMin = _surrenderAutoWinningRateMax;
                            _surrenderAutoWinningRateMax = pivot;
                        }
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Winning Team Rate Window Max", typeof(Double), _surrenderAutoWinningRateMax));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Winning Team Rate Window Min").Success)
                {
                    Double surrenderAutoWinningRateMin;
                    if (!Double.TryParse(strValue, out surrenderAutoWinningRateMin))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_surrenderAutoWinningRateMin != surrenderAutoWinningRateMin)
                    {
                        _surrenderAutoWinningRateMin = surrenderAutoWinningRateMin;

                        if (_surrenderAutoWinningRateMin > _surrenderAutoWinningRateMax) {
                            Log.Info("Min ticket rate cannot be greater than max. Swapping values.");
                            var pivot = _surrenderAutoWinningRateMin;
                            _surrenderAutoWinningRateMin = _surrenderAutoWinningRateMax;
                            _surrenderAutoWinningRateMax = pivot;
                        }
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Winning Team Rate Window Min", typeof(Double), _surrenderAutoWinningRateMin));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Message").Success)
                {
                    if (strValue != _surrenderAutoMessage)
                    {
                        _surrenderAutoMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Message", typeof(String), _surrenderAutoMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Nuke Message").Success)
                {
                    if (strValue != _surrenderAutoNukeMessage)
                    {
                        _surrenderAutoNukeMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke Message", typeof(String), _surrenderAutoNukeMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Trigger Count to Surrender").Success)
                {
                    Int32 surrenderAutoTriggerCountToSurrender = Int32.Parse(strValue);
                    if (_surrenderAutoTriggerCountToSurrender != surrenderAutoTriggerCountToSurrender)
                    {
                        _surrenderAutoTriggerCountToSurrender = surrenderAutoTriggerCountToSurrender;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Trigger Count to Surrender", typeof(Int32), _surrenderAutoTriggerCountToSurrender));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Surrender Minimum Players").Success)
                {
                    Int32 surrenderAutoMinimumPlayers = Int32.Parse(strValue);
                    if (_surrenderAutoMinimumPlayers != surrenderAutoMinimumPlayers)
                    {
                        if (surrenderAutoMinimumPlayers < 0)
                        {
                            Log.Error("Minimum player count cannot be negative.");
                            surrenderAutoMinimumPlayers = 0;
                        }
                        _surrenderAutoMinimumPlayers = surrenderAutoMinimumPlayers;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Minimum Players", typeof(Int32), _surrenderAutoMinimumPlayers));
                    }
                }
                else if (Regex.Match(strVariable, @"Maximum Nuke Ticket Difference for Losing Team").Success)
                {
                    Int32 losingTeamTicketDiff = Int32.Parse(strValue);
                    if (_surrenderAutoNukeLosingMaxDiff != losingTeamTicketDiff)
                    {
                        if (losingTeamTicketDiff < 0)
                        {
                            Log.Error("Max ticket difference must be non-negative.");
                            losingTeamTicketDiff = 0;
                        }
                        _surrenderAutoNukeLosingMaxDiff = losingTeamTicketDiff;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Maximum Nuke Ticket Difference for Losing Team", typeof(Int32), _surrenderAutoNukeLosingMaxDiff));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Nuke High Pop Duration Seconds").Success)
                {
                    Int32 surrenderAutoNukeDuration = Int32.Parse(strValue);
                    if (_surrenderAutoNukeDurationHigh != surrenderAutoNukeDuration)
                    {
                        if (surrenderAutoNukeDuration < 0)
                        {
                            Log.Error("Auto-nuke duration must be non-negative.");
                            surrenderAutoNukeDuration = 0;
                        }
                        if (surrenderAutoNukeDuration > 120)
                        {
                            Log.Error("Auto-nuke duration cannot be longer than 120 seconds.");
                            surrenderAutoNukeDuration = 120;
                        }
                        _surrenderAutoNukeDurationHigh = surrenderAutoNukeDuration;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke High Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationHigh));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Nuke Medium Pop Duration Seconds").Success)
                {
                    Int32 surrenderAutoNukeDuration = Int32.Parse(strValue);
                    if (_surrenderAutoNukeDurationMed != surrenderAutoNukeDuration)
                    {
                        if (surrenderAutoNukeDuration < 0)
                        {
                            Log.Error("Auto-nuke duration must be non-negative.");
                            surrenderAutoNukeDuration = 0;
                        }
                        if (surrenderAutoNukeDuration > 120)
                        {
                            Log.Error("Auto-nuke duration cannot be longer than 120 seconds.");
                            surrenderAutoNukeDuration = 120;
                        }
                        _surrenderAutoNukeDurationMed = surrenderAutoNukeDuration;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke Medium Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationMed));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Nuke Low Pop Duration Seconds").Success)
                {
                    Int32 surrenderAutoNukeDuration = Int32.Parse(strValue);
                    if (_surrenderAutoNukeDurationLow != surrenderAutoNukeDuration)
                    {
                        if (surrenderAutoNukeDuration < 0)
                        {
                            Log.Error("Auto-nuke duration must be non-negative.");
                            surrenderAutoNukeDuration = 0;
                        }
                        if (surrenderAutoNukeDuration > 120)
                        {
                            Log.Error("Auto-nuke duration cannot be longer than 120 seconds.");
                            surrenderAutoNukeDuration = 120;
                        }
                        _surrenderAutoNukeDurationLow = surrenderAutoNukeDuration;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke Low Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationLow));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Nuke Consecutive Duration Increase").Success)
                {
                    Int32 surrenderAutoNukeDurationIncrease = Int32.Parse(strValue);
                    if (_surrenderAutoNukeDurationIncrease != surrenderAutoNukeDurationIncrease)
                    {
                        if (surrenderAutoNukeDurationIncrease < 0)
                        {
                            Log.Error("Auto-nuke consecutive duration increase must be non-negative.");
                            surrenderAutoNukeDurationIncrease = 0;
                        }
                        if (surrenderAutoNukeDurationIncrease > 60)
                        {
                            Log.Error("Auto-nuke duration cannot be longer than 60 seconds.");
                            surrenderAutoNukeDurationIncrease = 60;
                        }
                        _surrenderAutoNukeDurationIncrease = surrenderAutoNukeDurationIncrease;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke Consecutive Duration Increase", typeof(Int32), _surrenderAutoNukeDurationIncrease));
                    }
                }
                else if (Regex.Match(strVariable, @"Player Lock Manual Duration Minutes").Success)
                {
                    Double playerLockingManualDuration;
                    if (!Double.TryParse(strValue, out playerLockingManualDuration))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_playerLockingManualDuration != playerLockingManualDuration)
                    {
                        if (playerLockingManualDuration < 0)
                        {
                            Log.Error("Duration cannot be negative.");
                            return;
                        }
                        _playerLockingManualDuration = playerLockingManualDuration;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Player Lock Manual Duration Minutes", typeof(Double), _playerLockingManualDuration));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatically Lock Players on Admin Action").Success)
                {
                    Boolean playerLockingAutomaticLock = Boolean.Parse(strValue);
                    if (playerLockingAutomaticLock != _playerLockingAutomaticLock)
                    {
                        _playerLockingAutomaticLock = playerLockingAutomaticLock;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatically Lock Players on Admin Action", typeof(Boolean), _playerLockingAutomaticLock));
                    }
                }
                else if (Regex.Match(strVariable, @"Player Lock Automatic Duration Minutes").Success)
                {
                    Double playerLockingAutomaticDuration;
                    if (!Double.TryParse(strValue, out playerLockingAutomaticDuration))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_playerLockingAutomaticDuration != playerLockingAutomaticDuration)
                    {
                        if (playerLockingAutomaticDuration < 0)
                        {
                            Log.Error("Duration cannot be negative.");
                            return;
                        }
                        _playerLockingAutomaticDuration = playerLockingAutomaticDuration;
                        //Once setting has been changed, upload the change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Player Lock Automatic Duration Minutes", typeof(Double), _playerLockingAutomaticDuration));
                    }
                }
                else if (Regex.Match(strVariable, @"Feed MULTIBalancer Whitelist").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean feedMTBWhite = Boolean.Parse(strValue);
                    if (feedMTBWhite != _FeedMultiBalancerWhitelist)
                    {
                        _FeedMultiBalancerWhitelist = feedMTBWhite;
                        if (_FeedMultiBalancerWhitelist)
                        {
                            SetExternalPluginSetting("MULTIbalancer", "2 - Exclusions|On Whitelist", "True");
                        }
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Feed MULTIBalancer Whitelist", typeof(Boolean), _FeedMultiBalancerWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatic MULTIBalancer Whitelist for Admins").Success)
                {
                    Boolean feedMTBWhiteUser = Boolean.Parse(strValue);
                    if (feedMTBWhiteUser != _FeedMultiBalancerWhitelist_Admins)
                    {
                        _FeedMultiBalancerWhitelist_Admins = feedMTBWhiteUser;
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatic MULTIBalancer Whitelist for Admins", typeof(Boolean), _FeedMultiBalancerWhitelist_Admins));
                    }
                }
                else if (Regex.Match(strVariable, @"Feed TeamKillTracker Whitelist").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean FeedTeamKillTrackerWhitelist = Boolean.Parse(strValue);
                    if (FeedTeamKillTrackerWhitelist != _FeedTeamKillTrackerWhitelist)
                    {
                        _FeedTeamKillTrackerWhitelist = FeedTeamKillTrackerWhitelist;
                        if (_FeedTeamKillTrackerWhitelist)
                        {
                            SetExternalPluginSetting("TeamKillTracker", "Who should be protected?", "Whitelist");
                        }
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Feed TeamKillTracker Whitelist", typeof(Boolean), _FeedTeamKillTrackerWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatic TeamKillTracker Whitelist for Admins").Success)
                {
                    Boolean FeedTeamKillTrackerWhitelist_Admins = Boolean.Parse(strValue);
                    if (FeedTeamKillTrackerWhitelist_Admins != _FeedTeamKillTrackerWhitelist_Admins)
                    {
                        _FeedTeamKillTrackerWhitelist_Admins = FeedTeamKillTrackerWhitelist_Admins;
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatic TeamKillTracker Whitelist for Admins", typeof(Boolean), _FeedTeamKillTrackerWhitelist_Admins));
                    }
                }
                else if (Regex.Match(strVariable, @"Feed MULTIBalancer Even Dispersion List").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean feedMTBBlack = Boolean.Parse(strValue);
                    if (feedMTBBlack != _FeedMultiBalancerDisperseList)
                    {
                        _FeedMultiBalancerDisperseList = feedMTBBlack;
                        if (_FeedMultiBalancerDisperseList)
                        {
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Conquest Large|Conquest Large: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Conquest Small|Conquest Small: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Defuse|Defuse: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Domination|Domination: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Obliteration|Obliteration: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Rush|Rush: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Squad Deathmatch|Squad Deathmatch: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Superiority|Superiority: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Team Deathmatch|Team Deathmatch: Enable Disperse Evenly List", "True");
                            SetExternalPluginSetting("MULTIbalancer", "8 - Settings for Unknown or New Mode|Unknown or New Mode: Enable Disperse Evenly List", "True");
                        }
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Feed MULTIBalancer Even Dispersion List", typeof(Boolean), _FeedMultiBalancerDisperseList));
                    }
                }
                else if (Regex.Match(strVariable, @"Feed Server Reserved Slots").Success)
                {
                    Boolean feedSRS = Boolean.Parse(strValue);
                    if (feedSRS != _FeedServerReservedSlots)
                    {
                        _FeedServerReservedSlots = feedSRS;
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Feed Server Reserved Slots", typeof(Boolean), _FeedServerReservedSlots));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatic Reserved Slot for Admins").Success)
                {
                    Boolean feedSRSUser = Boolean.Parse(strValue);
                    if (feedSRSUser != _FeedServerReservedSlots_Admins)
                    {
                        _FeedServerReservedSlots_Admins = feedSRSUser;
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatic Reserved Slot for Admins", typeof(Boolean), _FeedServerReservedSlots_Admins));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatic VIP Kick Whitelist for Admins").Success)
                {
                    Boolean feedSRSUser = Boolean.Parse(strValue);
                    if (feedSRSUser != _FeedServerReservedSlots_Admins_Online)
                    {
                        _FeedServerReservedSlots_Admins_Online = feedSRSUser;
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatic VIP Kick Whitelist for Admins", typeof(Boolean), _FeedServerReservedSlots_Admins_Online));
                    }
                }
                else if (Regex.Match(strVariable, @"Feed Server Spectator List").Success)
                {
                    Boolean feedSSL = Boolean.Parse(strValue);
                    if (feedSSL != _FeedServerSpectatorList)
                    {
                        if (_gameVersion == GameVersion.BF3)
                        {
                            Log.Error("This feature cannot be enabled on BF3 servers.");
                            return;
                        }
                        _FeedServerSpectatorList = feedSSL;
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Feed Server Spectator List", typeof(Boolean), _FeedServerSpectatorList));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatic Spectator Slot for Admins").Success)
                {
                    Boolean feedSSLUser = Boolean.Parse(strValue);
                    if (feedSSLUser != _FeedServerSpectatorList_Admins)
                    {
                        _FeedServerSpectatorList_Admins = feedSSLUser;
                        FetchAllAccess(true);
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatic Spectator Slot for Admins", typeof(Boolean), _FeedServerSpectatorList_Admins));
                    }
                }
                else if (Regex.Match(strVariable, @"Feed Stat Logger Settings").Success)
                {
                    Boolean feedSLS = Boolean.Parse(strValue);
                    if (feedSLS != _FeedStatLoggerSettings)
                    {
                        _FeedStatLoggerSettings = feedSLS;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Feed Stat Logger Settings", typeof(Boolean), _FeedStatLoggerSettings));
                    }
                }
                else if (Regex.Match(strVariable, @"Post Stat Logger Chat Manually").Success)
                {
                    Boolean PostStatLoggerChatManually = Boolean.Parse(strValue);
                    if (PostStatLoggerChatManually != _PostStatLoggerChatManually)
                    {
                        _PostStatLoggerChatManually = PostStatLoggerChatManually;
                        if (_PostStatLoggerChatManually)
                        {
                            SetExternalPluginSetting("CChatGUIDStatsLogger", "Enable Chatlogging?", "No");
                            SetExternalPluginSetting("CChatGUIDStatsLogger", "Instant Logging of Chat Messages?", "No");
                            SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Enable Chatlogging?", "No");
                            SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Instant Logging of Chat Messages?", "No");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Post Stat Logger Chat Manually", typeof(Boolean), _PostStatLoggerChatManually));
                    }
                }
                else if (Regex.Match(strVariable, @"Post Server Chat Spam").Success)
                {
                    Boolean PostServerChatSpam = Boolean.Parse(strValue);
                    if (PostServerChatSpam != _PostStatLoggerChatManually_PostServerChatSpam)
                    {
                        _PostStatLoggerChatManually_PostServerChatSpam = PostServerChatSpam;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Post Server Chat Spam", typeof(Boolean), _PostStatLoggerChatManually_PostServerChatSpam));
                    }
                }
                else if (Regex.Match(strVariable, @"Exclude Commands from Chat Logs").Success)
                {
                    Boolean PostStatLoggerChatManually_IgnoreCommands = Boolean.Parse(strValue);
                    if (PostStatLoggerChatManually_IgnoreCommands != _PostStatLoggerChatManually_IgnoreCommands)
                    {
                        _PostStatLoggerChatManually_IgnoreCommands = PostStatLoggerChatManually_IgnoreCommands;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Exclude Commands from Chat Logs", typeof(Boolean), _PostStatLoggerChatManually_IgnoreCommands));
                    }
                }
                else if (Regex.Match(strVariable, @"Post Map Benefit/Detriment Statistics").Success)
                {
                    Boolean PostMapBenefitStatistics = Boolean.Parse(strValue);
                    if (PostMapBenefitStatistics != _PostMapBenefitStatistics)
                    {
                        _PostMapBenefitStatistics = PostMapBenefitStatistics;
                        if (_threadsReady)
                        {
                            if (_PostMapBenefitStatistics)
                            {
                                Log.Info("Statistics for map benefit/detriment to the server will now be logged.");
                            }
                            else
                            {
                                Log.Info("Statistics for map benefit/detriment to the server will no longer be logged.");
                            }
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Post Map Benefit/Detriment Statistics", typeof(Boolean), _PostMapBenefitStatistics));
                    }
                }
                else if (Regex.Match(strVariable, @"Monitor/Disperse Top Players").Success)
                {
                    //Initial parse
                    Boolean UseTopPlayerMonitor = Boolean.Parse(strValue);
                    //Check for changed value
                    if (UseTopPlayerMonitor != _UseTopPlayerMonitor) {
                        //Rejection cases
                        if (_threadsReady && !_FeedMultiBalancerWhitelist && UseTopPlayerMonitor) {
                            Log.Error("'Monitor/Disperse Top Players' cannot be enabled when 'Feed MULTIBalancer Whitelist' is disabled.");
                            return;
                        }
                        //Assignment
                        _UseTopPlayerMonitor = UseTopPlayerMonitor;
                        //Notification
                        if (_threadsReady) {
                            if (_UseTopPlayerMonitor) {
                                Log.Info("Top players now being automatically controlled between rounds.");
                                UpdateTopPlayers();
                            } else {
                                Log.Info("Top players no longer being dispersed.");
                            }
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Monitor/Disperse Top Players", typeof(Boolean), _UseTopPlayerMonitor));
                    }
                } else if (Regex.Match(strVariable, @"Affected Top Players").Success) {
                    if (strValue != _TopPlayersAffected) {
                        _TopPlayersAffected = strValue;
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Affected Top Players", typeof(String), _TopPlayersAffected));
                    }
                }
                else if (Regex.Match(strVariable, @"Top player team confirmation duration").Success)
                {
                    //Initial parse
                    Int32 TopPlayersTeamConfirmationDuration = Int32.Parse(strValue);
                    //Check for changed value
                    if (_TopPlayersTeamConfirmationDuration != TopPlayersTeamConfirmationDuration)
                    {
                        //Assignment
                        _TopPlayersTeamConfirmationDuration = TopPlayersTeamConfirmationDuration;
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Top player team confirmation duration", typeof(Int32), _TopPlayersTeamConfirmationDuration));
                    }
                }
                else if (Regex.Match(strVariable, @"Monitor Populator Players").Success)
                {
                    //Initial parse
                    Boolean PopulatorMonitor = Boolean.Parse(strValue);
                    //Check for changed value
                    if (PopulatorMonitor != _PopulatorMonitor)
                    {
                        //Assignment
                        _PopulatorMonitor = PopulatorMonitor;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_PopulatorMonitor)
                            {
                                Log.Info("Populator players are now being monitored.");
                                UpdatePopulatorPlayers();
                            }
                            else
                            {
                                Log.Info("Populator players are no longer being monitored.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Monitor Populator Players", typeof(Boolean), _PopulatorMonitor));
                    }
                }
                else if (Regex.Match(strVariable, @"Monitor Specified Populators Only").Success)
                {
                    //Initial parse
                    Boolean PopulatorUseSpecifiedPopulatorsOnly = Boolean.Parse(strValue);
                    //Check for changed value
                    if (PopulatorUseSpecifiedPopulatorsOnly != _PopulatorUseSpecifiedPopulatorsOnly)
                    {
                        //Assignment
                        _PopulatorUseSpecifiedPopulatorsOnly = PopulatorUseSpecifiedPopulatorsOnly;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_PopulatorUseSpecifiedPopulatorsOnly)
                            {
                                Log.Info("Only players under whitelist_populator specialplayer group can be considered populators now.");
                            }
                            else
                            {
                                Log.Info("All players can be considered populators now.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Monitor Specified Populators Only", typeof(Boolean), _PopulatorUseSpecifiedPopulatorsOnly));
                    }
                }
                else if (Regex.Match(strVariable, @"Monitor Populators of This Server Only").Success)
                {
                    //Initial parse
                    Boolean PopulatorPopulatingThisServerOnly = Boolean.Parse(strValue);
                    //Check for changed value
                    if (PopulatorPopulatingThisServerOnly != _PopulatorPopulatingThisServerOnly)
                    {
                        //Assignment
                        _PopulatorPopulatingThisServerOnly = PopulatorPopulatingThisServerOnly;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_PopulatorPopulatingThisServerOnly)
                            {
                                Log.Info("Only populations of this server will be considered toward a player's populator status on this server.");
                            }
                            else
                            {
                                Log.Info("Populations of all servers will be considered toward a player's population status on this server.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Monitor Populators of This Server Only", typeof(Boolean), _PopulatorPopulatingThisServerOnly));
                    }
                }
                else if (Regex.Match(strVariable, @"Count to Consider Populator Past Week").Success)
                {
                    //Initial parse
                    Int32 PopulatorMinimumPopulationCountPastWeek = Int32.Parse(strValue);
                    //Check for changed value
                    if (_PopulatorMinimumPopulationCountPastWeek != PopulatorMinimumPopulationCountPastWeek)
                    {
                        //Rejection cases
                        if (PopulatorMinimumPopulationCountPastWeek < 1)
                        {
                            Log.Error("'Count to Consider Populator Past Week' cannot be less than 1.");
                            PopulatorMinimumPopulationCountPastWeek = 1;
                        }
                        //Assignment
                        _PopulatorMinimumPopulationCountPastWeek = PopulatorMinimumPopulationCountPastWeek;
                        //Notification
                        if (_threadsReady)
                        {
                            Log.Info("Players are now considered populator if they contribute to " + _PopulatorMinimumPopulationCountPastWeek + " populations in the past week, or " + _PopulatorMinimumPopulationCountPast2Weeks + " populations in the past 2 weeks.");

                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Count to Consider Populator Past Week", typeof(Int32), _PopulatorMinimumPopulationCountPastWeek));
                    }
                }
                else if (Regex.Match(strVariable, @"Count to Consider Populator Past 2 Weeks").Success)
                {
                    //Initial parse
                    Int32 PopulatorMinimumPopulationCountPast2Weeks = Int32.Parse(strValue);
                    //Check for changed value
                    if (_PopulatorMinimumPopulationCountPast2Weeks != PopulatorMinimumPopulationCountPast2Weeks)
                    {
                        //Rejection cases
                        if (PopulatorMinimumPopulationCountPast2Weeks < 1)
                        {
                            Log.Error("'Count to Consider Populator Past 2 Weeks' cannot be less than 1.");
                            PopulatorMinimumPopulationCountPast2Weeks = 1;
                        }
                        //Assignment
                        _PopulatorMinimumPopulationCountPast2Weeks = PopulatorMinimumPopulationCountPast2Weeks;
                        //Notification
                        if (_threadsReady)
                        {
                            Log.Info("Players are now considered populator if they contribute to " + _PopulatorMinimumPopulationCountPastWeek + " populations in the past week, or " + _PopulatorMinimumPopulationCountPast2Weeks + " populations in the past 2 weeks.");

                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Count to Consider Populator Past 2 Weeks", typeof(Int32), _PopulatorMinimumPopulationCountPast2Weeks));
                    }
                }
                else if (Regex.Match(strVariable, @"Enable Populator Perks").Success)
                {
                    //Initial parse
                    Boolean PopulatorPerksEnable = Boolean.Parse(strValue);
                    //Check for changed value
                    if (PopulatorPerksEnable != _PopulatorPerksEnable)
                    {
                        //Assignment
                        _PopulatorPerksEnable = PopulatorPerksEnable;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_PopulatorPerksEnable)
                            {
                                Log.Info("Populator perks are now enabled.");
                            }
                            else
                            {
                                Log.Info("Populator perks are now disabled.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Enable Populator Perks", typeof(Boolean), _PopulatorPerksEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Populator Perks - Reserved Slot").Success)
                {
                    //Initial parse
                    Boolean PopulatorPerksReservedSlot = Boolean.Parse(strValue);
                    //Check for changed value
                    if (PopulatorPerksReservedSlot != _PopulatorPerksReservedSlot)
                    {
                        //Rejection cases
                        if (_threadsReady && !_FeedServerReservedSlots && PopulatorPerksReservedSlot)
                        {
                            Log.Error("'Populator Perks - Reserved Slot' cannot be enabled when 'Feed Server Reserved Slots' is disabled.");
                            return;
                        }
                        //Assignment
                        _PopulatorPerksReservedSlot = PopulatorPerksReservedSlot;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_PopulatorPerksReservedSlot)
                            {
                                Log.Info("Populator perks now include reserved slot.");
                            }
                            else
                            {
                                Log.Info("Populator perks no longer include reserved slot.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Populator Perks - Reserved Slot", typeof(Boolean), _PopulatorPerksReservedSlot));
                    }
                }
                else if (Regex.Match(strVariable, @"Populator Perks - Autobalance Whitelist").Success)
                {
                    //Initial parse
                    Boolean PopulatorPerksBalanceWhitelist = Boolean.Parse(strValue);
                    //Check for changed value
                    if (PopulatorPerksBalanceWhitelist != _PopulatorPerksBalanceWhitelist)
                    {
                        //Rejection cases
                        if (_threadsReady && !_FeedMultiBalancerWhitelist && PopulatorPerksBalanceWhitelist)
                        {
                            Log.Error("'Populator Perks - Autobalance Whitelist' cannot be enabled when 'Feed MULTIBalancer Whitelist' is disabled.");
                            return;
                        }
                        //Assignment
                        _PopulatorPerksBalanceWhitelist = PopulatorPerksBalanceWhitelist;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_PopulatorPerksBalanceWhitelist)
                            {
                                Log.Info("Populator perks now include autobalance whitelist.");
                            }
                            else
                            {
                                Log.Info("Populator perks no longer include autobalance whitelist.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Populator Perks - Autobalance Whitelist", typeof(Boolean), _PopulatorPerksBalanceWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Populator Perks - Ping Whitelist").Success)
                {
                    //Initial parse
                    Boolean PopulatorPerksPingWhitelist = Boolean.Parse(strValue);
                    //Check for changed value
                    if (PopulatorPerksPingWhitelist != _PopulatorPerksPingWhitelist)
                    {
                        //Rejection cases
                        if (_threadsReady && !_pingEnforcerEnable && PopulatorPerksPingWhitelist)
                        {
                            Log.Error("'Populator Perks - Ping Whitelist' cannot be enabled when Ping Enforcer is disabled.");
                            return;
                        }
                        //Assignment
                        _PopulatorPerksPingWhitelist = PopulatorPerksPingWhitelist;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_PopulatorPerksPingWhitelist)
                            {
                                Log.Info("Populator perks now include ping whitelist.");
                            }
                            else
                            {
                                Log.Info("Populator perks no longer include ping whitelist.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Populator Perks - Ping Whitelist", typeof(Boolean), _PopulatorPerksPingWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Populator Perks - TeamKillTracker Whitelist").Success)
                {
                    //Initial parse
                    Boolean PopulatorPerksTeamKillTrackerWhitelist = Boolean.Parse(strValue);
                    //Check for changed value
                    if (PopulatorPerksTeamKillTrackerWhitelist != _PopulatorPerksTeamKillTrackerWhitelist)
                    {
                        //Rejection cases
                        if (_threadsReady && !_FeedTeamKillTrackerWhitelist && PopulatorPerksTeamKillTrackerWhitelist)
                        {
                            Log.Error("'Populator Perks - TeamKillTracker Whitelist' cannot be enabled when 'Feed TeamKillTracker Whitelist' is disabled.");
                            return;
                        }
                        //Assignment
                        _PopulatorPerksTeamKillTrackerWhitelist = PopulatorPerksTeamKillTrackerWhitelist;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_PopulatorPerksTeamKillTrackerWhitelist)
                            {
                                Log.Info("Populator perks now include TeamKillTracker whitelist.");
                            }
                            else
                            {
                                Log.Info("Populator perks no longer include TeamKillTracker whitelist.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Populator Perks - TeamKillTracker Whitelist", typeof(Boolean), _PopulatorPerksTeamKillTrackerWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Monitor Teamspeak Players").Success)
                {
                    //Initial parse
                    Boolean TeamspeakPlayerMonitorView = Boolean.Parse(strValue);
                    //Check for changed value
                    if (TeamspeakPlayerMonitorView != _TeamspeakPlayerMonitorView)
                    {
                        //Assignment
                        _TeamspeakPlayerMonitorView = TeamspeakPlayerMonitorView;
                        //No Notification
                        //Upload change to database
                        QueueSettingForUpload(new CPluginVariable(@"Monitor Teamspeak Players", typeof(Boolean), _TeamspeakPlayerMonitorView));
                    }
                }
                else if (Regex.Match(strVariable, @"Enable Teamspeak Player Monitor").Success)
                {
                    //Initial parse
                    Boolean TeamspeakPlayerMonitorEnable = Boolean.Parse(strValue);
                    //Check for changed value
                    if (TeamspeakPlayerMonitorEnable != _TeamspeakPlayerMonitorEnable)
                    {
                        //Assignment
                        _TeamspeakPlayerMonitorEnable = TeamspeakPlayerMonitorEnable;
                        if (_threadsReady)
                        {
                            if (TeamspeakPlayerMonitorEnable)
                            {
                                _tsViewer.Enable();
                            }
                            else
                            {
                                _tsViewer.Disable();
                            }
                        }
                        //No Notification
                        //Upload change to database
                        QueueSettingForUpload(new CPluginVariable(@"Enable Teamspeak Player Monitor", typeof(Boolean), _TeamspeakPlayerMonitorEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Use Custom Teamspeak Web Service").Success)
                {
                    //Initial parse
                    Boolean UseWebService = Boolean.Parse(strValue);
                    //Check for changed value
                    if (UseWebService != _tsViewer.UseWebService)
                    {
                        if (_threadsReady && !UseWebService && _tsViewer.UseWebService && _tsViewer.Enabled())
                        {
                            Log.Warn("Switching TS monitor modes, it must be re-enabled manually.");
                            _TeamspeakPlayerMonitorEnable = false;
                            _tsViewer.Disable();
                        }
                        //Assignment
                        _tsViewer.UseWebService = UseWebService;
                        //Upload change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use Custom Teamspeak Web Service", typeof(Boolean), _tsViewer.UseWebService));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Web Service URL").Success)
                {
                    if (_tsViewer.WebServiceURL != strValue)
                    {
                        _tsViewer.WebServiceURL = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Web Service URL", typeof(String), _tsViewer.WebServiceURL));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Server IP").Success)
                {
                    if (_tsViewer.Ts3ServerIp != strValue)
                    {
                        _tsViewer.Ts3ServerIp = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server IP", typeof(String), _tsViewer.Ts3ServerIp));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Server Port").Success)
                {
                    //Initial parse
                    Int32 Ts3ServerPort = Int32.Parse(strValue);
                    //Check for changed value
                    if (_tsViewer.Ts3ServerPort != Ts3ServerPort)
                    {
                        //Assignment
                        _tsViewer.Ts3ServerPort = (ushort)Ts3ServerPort;
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Port", typeof(Int32), _tsViewer.Ts3ServerPort));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Server Query Port").Success)
                {
                    //Initial parse
                    Int32 Ts3QueryPort = Int32.Parse(strValue);
                    //Check for changed value
                    if (_tsViewer.Ts3QueryPort != Ts3QueryPort)
                    {
                        //Assignment
                        _tsViewer.Ts3QueryPort = (ushort)Ts3QueryPort;
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Query Port", typeof(Int32), _tsViewer.Ts3QueryPort));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Server Query Username").Success)
                {
                    if (_tsViewer.Ts3QueryUsername != strValue)
                    {
                        _tsViewer.Ts3QueryUsername = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Query Username", typeof(String), _tsViewer.Ts3QueryUsername));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Server Query Password").Success)
                {
                    if (_tsViewer.Ts3QueryPassword != strValue)
                    {
                        _tsViewer.Ts3QueryPassword = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Query Password", typeof(String), _tsViewer.Ts3QueryPassword));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Server Query Nickname").Success)
                {
                    if (_tsViewer.Ts3QueryNickname != strValue)
                    {
                        _tsViewer.Ts3QueryNickname = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Query Nickname", typeof(String), _tsViewer.Ts3QueryNickname));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Main Channel Name").Success)
                {
                    if (_tsViewer.Ts3MainChannelName != strValue)
                    {
                        _tsViewer.Ts3MainChannelName = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Main Channel Name", typeof(String), _tsViewer.Ts3MainChannelName));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Secondary Channel Names").Success)
                {
                    _tsViewer.Ts3SubChannelNames = CPluginVariable.DecodeStringArray(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Teamspeak Secondary Channel Names", typeof(String), CPluginVariable.EncodeStringArray(_tsViewer.Ts3SubChannelNames)));
                }
                else if (Regex.Match(strVariable, @"Debug Display Teamspeak Clients").Success)
                {
                    //Initial parse
                    Boolean DbgClients = Boolean.Parse(strValue);
                    //Check for changed value
                    if (DbgClients != _tsViewer.DbgClients)
                    {
                        //Assignment
                        _tsViewer.DbgClients = DbgClients;
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Debug Display Teamspeak Clients", typeof(Boolean), _tsViewer.DbgClients));
                    }
                } 
                else if (Regex.Match(strVariable, @"TeamSpeak Player Join Announcement").Success) {
                    switch (strValue) {
                        case "Disabled":
                            _tsViewer.JoinDisplay = TeamSpeakClientViewer.JoinDisplayType.Disabled;
                            break;
                        case "Say":
                            _tsViewer.JoinDisplay = TeamSpeakClientViewer.JoinDisplayType.Say;
                            break;
                        case "Yell":
                            _tsViewer.JoinDisplay = TeamSpeakClientViewer.JoinDisplayType.Yell;
                            break;
                        case "Tell":
                            _tsViewer.JoinDisplay = TeamSpeakClientViewer.JoinDisplayType.Tell;
                            break;
                        default:
                            Log.Error("Unknown setting when setting teamspeak player announcement.");
                            return;
                    }
                    QueueSettingForUpload(new CPluginVariable(@"TeamSpeak Player Join Announcement", typeof(String), _tsViewer.JoinDisplay.ToString()));
                } 
                else if (Regex.Match(strVariable, @"TeamSpeak Player Join Message").Success) {
                    if (_tsViewer.JoinDisplayMessage != strValue && strValue.Contains("%player%")) {
                        _tsViewer.JoinDisplayMessage = strValue;
                        QueueSettingForUpload(new CPluginVariable(@"TeamSpeak Player Join Message", typeof(String), _tsViewer.JoinDisplayMessage));
                    }
                } 
                else if (Regex.Match(strVariable, @"TeamSpeak Player Update Seconds").Success) {
                    //Initial parse
                    Int32 UpdateIntervalSeconds = Int32.Parse(strValue);
                    //Check for changed value
                    if (_tsViewer.UpdateIntervalSeconds != UpdateIntervalSeconds) {
                        if (UpdateIntervalSeconds < 5) {
                            UpdateIntervalSeconds = 5;
                        }
                        //Assignment
                        _tsViewer.UpdateIntervalSeconds = UpdateIntervalSeconds;
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"TeamSpeak Player Update Seconds", typeof(Int32), _tsViewer.UpdateIntervalSeconds));
                    }
                }
                else if (Regex.Match(strVariable, @"Enable Teamspeak Player Perks").Success)
                {
                    //Initial parse
                    Boolean TeamspeakPlayerPerksEnable = Boolean.Parse(strValue);
                    //Check for changed value
                    if (TeamspeakPlayerPerksEnable != _TeamspeakPlayerPerksEnable)
                    {
                        //Assignment
                        _TeamspeakPlayerPerksEnable = TeamspeakPlayerPerksEnable;
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Enable Teamspeak Player Perks", typeof(Boolean), _TeamspeakPlayerPerksEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Player Perks - VIP Kick Whitelist").Success)
                {
                    //Initial parse
                    Boolean TeamspeakPlayerPerksReservedSlot = Boolean.Parse(strValue);
                    //Check for changed value
                    if (TeamspeakPlayerPerksReservedSlot != _TeamspeakPlayerPerksVIPKickWhitelist)
                    {
                        //Rejection cases
                        if (_threadsReady && !_FeedServerReservedSlots && TeamspeakPlayerPerksReservedSlot)
                        {
                            Log.Error("'Teamspeak Player Perks - VIP Kick Whitelist' cannot be enabled when 'Feed Server Reserved Slots' is disabled.");
                            return;
                        }
                        //Assignment
                        _TeamspeakPlayerPerksVIPKickWhitelist = TeamspeakPlayerPerksReservedSlot;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_TeamspeakPlayerPerksVIPKickWhitelist)
                            {
                                Log.Info("Teamspeak Player perks now include VIP Kick Whitelist.");
                            }
                            else
                            {
                                Log.Info("Teamspeak Player perks no longer include VIP Kick Whitelist.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Player Perks - VIP Kick Whitelist", typeof(Boolean), _TeamspeakPlayerPerksVIPKickWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Player Perks - Autobalance Whitelist").Success)
                {
                    //Initial parse
                    Boolean TeamspeakPlayerPerksBalanceWhitelist = Boolean.Parse(strValue);
                    //Check for changed value
                    if (TeamspeakPlayerPerksBalanceWhitelist != _TeamspeakPlayerPerksBalanceWhitelist)
                    {
                        //Rejection cases
                        if (_threadsReady && !_FeedMultiBalancerWhitelist && TeamspeakPlayerPerksBalanceWhitelist)
                        {
                            Log.Error("'Teamspeak Player Perks - Autobalance Whitelist' cannot be enabled when 'Feed MULTIBalancer Whitelist' is disabled.");
                            return;
                        }
                        //Assignment
                        _TeamspeakPlayerPerksBalanceWhitelist = TeamspeakPlayerPerksBalanceWhitelist;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_TeamspeakPlayerPerksBalanceWhitelist)
                            {
                                Log.Info("Teamspeak Player perks now include autobalance whitelist.");
                            }
                            else
                            {
                                Log.Info("Teamspeak Player perks no longer include autobalance whitelist.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Player Perks - Autobalance Whitelist", typeof(Boolean), _TeamspeakPlayerPerksBalanceWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Player Perks - Ping Whitelist").Success)
                {
                    //Initial parse
                    Boolean TeamspeakPlayerPerksPingWhitelist = Boolean.Parse(strValue);
                    //Check for changed value
                    if (TeamspeakPlayerPerksPingWhitelist != _TeamspeakPlayerPerksPingWhitelist)
                    {
                        //Rejection cases
                        if (_threadsReady && !_pingEnforcerEnable && TeamspeakPlayerPerksPingWhitelist)
                        {
                            Log.Error("'Teamspeak Player Perks - Ping Whitelist' cannot be enabled when Ping Enforcer is disabled.");
                            return;
                        }
                        //Assignment
                        _TeamspeakPlayerPerksPingWhitelist = TeamspeakPlayerPerksPingWhitelist;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_TeamspeakPlayerPerksPingWhitelist)
                            {
                                Log.Info("Teamspeak Player perks now include ping whitelist.");
                            }
                            else
                            {
                                Log.Info("Teamspeak Player perks no longer include ping whitelist.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Player Perks - Ping Whitelist", typeof(Boolean), _TeamspeakPlayerPerksPingWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Teamspeak Player Perks - TeamKillTracker Whitelist").Success)
                {
                    //Initial parse
                    Boolean TeamspeakPlayerPerksTeamKillTrackerWhitelist = Boolean.Parse(strValue);
                    //Check for changed value
                    if (TeamspeakPlayerPerksTeamKillTrackerWhitelist != _TeamspeakPlayerPerksTeamKillTrackerWhitelist)
                    {
                        //Rejection cases
                        if (_threadsReady && !_FeedTeamKillTrackerWhitelist && TeamspeakPlayerPerksTeamKillTrackerWhitelist)
                        {
                            Log.Error("'Teamspeak Player Perks - TeamKillTracker Whitelist' cannot be enabled when 'Feed TeamKillTracker Whitelist' is disabled.");
                            return;
                        }
                        //Assignment
                        _TeamspeakPlayerPerksTeamKillTrackerWhitelist = TeamspeakPlayerPerksTeamKillTrackerWhitelist;
                        //Notification
                        if (_threadsReady)
                        {
                            if (_TeamspeakPlayerPerksTeamKillTrackerWhitelist)
                            {
                                Log.Info("Teamspeak Player perks now include TeamKillTracker whitelist.");
                            }
                            else
                            {
                                Log.Info("Teamspeak Player perks no longer include TeamKillTracker whitelist.");
                            }
                            FetchAllAccess(true);
                        }
                        //Upload change to database  
                        QueueSettingForUpload(new CPluginVariable(@"Teamspeak Player Perks - TeamKillTracker Whitelist", typeof(Boolean), _TeamspeakPlayerPerksTeamKillTrackerWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Use Experimental Tools").Success)
                {
                    Boolean useEXP = Boolean.Parse(strValue);
                    if (useEXP != _useExperimentalTools)
                    {
                        _useExperimentalTools = useEXP;
                        if (_useExperimentalTools)
                        {
                            if (_threadsReady)
                            {
                                Log.Warn("Using experimental tools. Take caution.");
                            }
                        }
                        else
                        {
                            Log.Info("Experimental tools disabled.");
                            _UseWeaponLimiter = false;
                            _UseGrenadeCookCatcher = false;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use Experimental Tools", typeof(Boolean), _useExperimentalTools));
                        QueueSettingForUpload(new CPluginVariable(@"Use NO EXPLOSIVES Limiter", typeof(Boolean), _UseWeaponLimiter));
                    }
                }
                else if (Regex.Match(strVariable, @"Round Timer: Enable").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean useTimer = Boolean.Parse(strValue);
                    if (useTimer != _useRoundTimer)
                    {
                        _useRoundTimer = useTimer;
                        if (_useRoundTimer)
                        {
                            if (_threadsReady)
                            {
                                Log.Info("Internal Round Timer activated, will enable on next round.");
                            }
                        }
                        else
                        {
                            Log.Info("Internal Round Timer disabled.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Round Timer: Enable", typeof(Boolean), _useRoundTimer));
                    }
                }
                else if (Regex.Match(strVariable, @"Round Timer: Round Duration Minutes").Success)
                {
                    Double duration;
                    if (!Double.TryParse(strValue, out duration))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_maxRoundTimeMinutes != duration)
                    {
                        if (duration <= 0)
                        {
                            duration = 30.0;
                        }
                        _maxRoundTimeMinutes = duration;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Round Timer: Round Duration Minutes", typeof(Double), _maxRoundTimeMinutes));
                    }
                }
                else if (Regex.Match(strVariable, @"Faction Randomizer: Enable").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("Faction Randomizer cannot be enabled on official servers.");
                        return;
                    }
                    Boolean useRandomizer = Boolean.Parse(strValue);
                    if (useRandomizer != _factionRandomizerEnable)
                    {
                        _factionRandomizerEnable = useRandomizer;
                        if (_factionRandomizerEnable)
                        {
                            if (_threadsReady)
                            {
                                Log.Info("Faction randomizer enabled, will activate on next round.");
                            }
                        }
                        else
                        {
                            Log.Info("Faction randomizer disabled.");
                        }
                        QueueSettingForUpload(new CPluginVariable(@"Faction Randomizer: Enable", typeof(Boolean), _factionRandomizerEnable));
                    }
                }
                else if (Regex.Match(strVariable, @"Faction Randomizer: Restriction").Success)
                {
                    switch (strValue)
                    {
                        case "NoRestriction":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.NoRestriction;
                            break;
                        case "NeverSameFaction":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.NeverSameFaction;
                            break;
                        case "AlwaysSameFaction":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysSameFaction;
                            break;
                        case "AlwaysSwapUSvsRU":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysSwapUSvsRU;
                            break;
                        case "AlwaysSwapUSvsCN":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysSwapUSvsCN;
                            break;
                        case "AlwaysSwapRUvsCN":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysSwapRUvsCN;
                            break;
                        case "AlwaysBothUS":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysBothUS;
                            break;
                        case "AlwaysBothRU":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysBothRU;
                            break;
                        case "AlwaysBothCN":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysBothCN;
                            break;
                        case "AlwaysUSvsX":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysUSvsX;
                            break;
                        case "AlwaysRUvsX":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysRUvsX;
                            break;
                        case "AlwaysCNvsX":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.AlwaysCNvsX;
                            break;
                        case "NeverUSvsX":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.NeverUSvsX;
                            break;
                        case "NeverRUvsX":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.NeverRUvsX;
                            break;
                        case "NeverCNvsX":
                            _factionRandomizerRestriction = FactionRandomizerRestriction.NeverCNvsX;
                            break;
                    }
                    QueueSettingForUpload(new CPluginVariable(@"Faction Randomizer: Restriction", typeof(String), _factionRandomizerRestriction.ToString()));
                }
                else if (Regex.Match(strVariable, @"Faction Randomizer: Allow Repeat Team Selections").Success)
                {
                    Boolean allowRepeatSelections = Boolean.Parse(strValue);
                    if (allowRepeatSelections != _factionRandomizerAllowRepeatSelection)
                    {
                        _factionRandomizerAllowRepeatSelection = allowRepeatSelections;
                        QueueSettingForUpload(new CPluginVariable(@"Faction Randomizer: Allow Repeat Team Selections", typeof(Boolean), _factionRandomizerAllowRepeatSelection));
                    }
                }
                else if (Regex.Match(strVariable, @"Use NO EXPLOSIVES Limiter").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean useLimiter = Boolean.Parse(strValue);
                    if (useLimiter != _UseWeaponLimiter)
                    {
                        _UseWeaponLimiter = useLimiter;
                        if (_UseWeaponLimiter)
                        {
                            if (_threadsReady)
                            {
                                Log.Info("Internal NO EXPLOSIVES punish limit activated.");
                            }
                        }
                        else
                        {
                            Log.Info("Internal NO EXPLOSIVES punish limit disabled.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use NO EXPLOSIVES Limiter", typeof(Boolean), _UseWeaponLimiter));
                    }
                }
                else if (Regex.Match(strVariable, @"NO EXPLOSIVES Weapon String").Success)
                {
                    if (_WeaponLimiterString != strValue)
                    {
                        if (!String.IsNullOrEmpty(strValue))
                        {
                            _WeaponLimiterString = strValue;
                        }
                        else
                        {
                            Log.Error("Weapon String cannot be empty.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"NO EXPLOSIVES Weapon String", typeof(String), _WeaponLimiterString));
                    }
                }
                else if (Regex.Match(strVariable, @"NO EXPLOSIVES Exception String").Success)
                {
                    if (_WeaponLimiterExceptionString != strValue)
                    {
                        if (!String.IsNullOrEmpty(strValue))
                        {
                            _WeaponLimiterExceptionString = strValue;
                        }
                        else
                        {
                            Log.Error("Weapon exception String cannot be empty.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"NO EXPLOSIVES Exception String", typeof(String), _WeaponLimiterExceptionString));
                    }
                }
                else if (Regex.Match(strVariable, @"Use Grenade Cook Catcher").Success)
                {
                    Boolean useCookCatcher = Boolean.Parse(strValue);
                    if (useCookCatcher != _UseGrenadeCookCatcher)
                    {
                        _UseGrenadeCookCatcher = useCookCatcher;
                        if (_UseGrenadeCookCatcher)
                        {
                            if (_threadsReady)
                            {
                                Log.Info("Internal Grenade Cook Catcher activated.");
                            }
                        }
                        else
                        {
                            Log.Info("Internal Grenade Cook Catcher disabled.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use Grenade Cook Catcher", typeof(Boolean), _UseGrenadeCookCatcher));
                    }
                }
                else if (Regex.Match(strVariable, @"HackerChecker: Whitelist").Success)
                {
                    //_HackerCheckerWhitelist = CPluginVariable.DecodeStringArray(strValue);
                    //Once setting has been changed, upload the change to database
                    //QueueSettingForUpload(new CPluginVariable(@"HackerChecker: Whitelist", typeof (String), CPluginVariable.EncodeStringArray(_HackerCheckerWhitelist)));
                } else if (Regex.Match(strVariable, @"HackerChecker: Use LIVE Anti Cheat System").Success) {
                    Boolean useLIVESystem = Boolean.Parse(strValue);
                    if (useLIVESystem != _useHackerCheckerLIVESystem) {
                        _useHackerCheckerLIVESystem = useLIVESystem;
                        if (_useHackerCheckerLIVESystem) {
                            if (_threadsReady) {
                                Log.Info("HackerChecker now using the LIVE Anti-Cheat System.");
                            }
                        } else {
                            Log.Info("HackerChecker LIVE Anti-Cheat system disabled. This should ONLY be disabled if you are seeing 'Issue connecting to Battlelog' warnings.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"HackerChecker: Use LIVE Anti Cheat System", typeof(Boolean), _useHackerCheckerLIVESystem));
                    }
                }
                else if (Regex.Match(strVariable, @"HackerChecker: DPS Checker: Ban Message").Success)
                {
                    if (_HackerCheckerDPSBanMessage != strValue)
                    {
                        _HackerCheckerDPSBanMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"HackerChecker: DPS Checker: Ban Message", typeof(String), _HackerCheckerDPSBanMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"HackerChecker: HSK Checker: Enable").Success)
                {
                    Boolean useAimbotChecker = Boolean.Parse(strValue);
                    if (useAimbotChecker != _UseHskChecker)
                    {
                        _UseHskChecker = useAimbotChecker;
                        if (_UseHskChecker)
                        {
                            if (_threadsReady)
                            {
                                Log.Info("Internal Aimbot Checker activated.");
                            }
                        }
                        else
                        {
                            Log.Info("Internal Aimbot Checker disabled.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"HackerChecker: HSK Checker: Enable", typeof(Boolean), _UseHskChecker));
                    }
                }
                else if (Regex.Match(strVariable, @"HackerChecker: HSK Checker: Trigger Level").Success)
                {
                    Double triggerLevel;
                    if (!Double.TryParse(strValue, out triggerLevel))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_HskTriggerLevel != triggerLevel) 
                    {
                        if (triggerLevel < 45) {
                            triggerLevel = 45;
                        } else if (triggerLevel > 100) {
                            triggerLevel = 100;
                        }
                        _HskTriggerLevel = triggerLevel;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"HackerChecker: HSK Checker: Trigger Level", typeof(Double), _HskTriggerLevel));
                    }
                }
                else if (Regex.Match(strVariable, @"HackerChecker: HSK Checker: Ban Message").Success)
                {
                    if (_HackerCheckerHSKBanMessage != strValue)
                    {
                        _HackerCheckerHSKBanMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"HackerChecker: HSK Checker: Ban Message", typeof(String), _HackerCheckerHSKBanMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"HackerChecker: KPM Checker: Enable").Success)
                {
                    Boolean useKPMChecker = Boolean.Parse(strValue);
                    if (useKPMChecker != _UseKpmChecker)
                    {
                        _UseKpmChecker = useKPMChecker;
                        if (_UseKpmChecker)
                        {
                            if (_threadsReady)
                            {
                                Log.Info("Internal KPM Checker activated.");
                            }
                        }
                        else
                        {
                            Log.Info("Internal KPM Checker disabled.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"HackerChecker: KPM Checker: Enable", typeof(Boolean), _UseKpmChecker));
                    }
                }
                else if (Regex.Match(strVariable, @"HackerChecker: KPM Checker: Trigger Level").Success)
                {
                    Double triggerLevel;
                    if (!Double.TryParse(strValue, out triggerLevel))
                    {
                        HandleException(new AdKatsException("Error parsing double value for setting '" + strVariable + "'"));
                        return;
                    }
                    if (_KpmTriggerLevel != triggerLevel) 
                    {
                        if (triggerLevel < 4) {
                            triggerLevel = 4;
                        } else if (triggerLevel > 10) {
                            triggerLevel = 10;
                        }
                        _KpmTriggerLevel = triggerLevel;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"HackerChecker: KPM Checker: Trigger Level", typeof(Double), _KpmTriggerLevel));
                    }
                }
                else if (Regex.Match(strVariable, @"HackerChecker: KPM Checker: Ban Message").Success)
                {
                    if (_HackerCheckerKPMBanMessage != strValue)
                    {
                        _HackerCheckerKPMBanMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"HackerChecker: KPM Checker: Ban Message", typeof(String), _HackerCheckerKPMBanMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"Fetch Actions from Database").Success)
                {
                    Boolean fetch = Boolean.Parse(strValue);
                    if (fetch != _fetchActionsFromDb)
                    {
                        _fetchActionsFromDb = fetch;
                        _DbCommunicationWaitHandle.Set();
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Fetch Actions from Database", typeof(Boolean), _fetchActionsFromDb));
                    }
                }
                else if (Regex.Match(strVariable, @"AdkatsLRT Extension Token").Success)
                {
                    if (_AdKatsLRTExtensionToken != strValue)
                    {
                        _AdKatsLRTExtensionToken = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"AdkatsLRT Extension Token", typeof(String), _AdKatsLRTExtensionToken));
                        CheckForPluginUpdates(true);
                    }
                }
                else if (Regex.Match(strVariable, @"Use Additional Ban Message").Success)
                {
                    Boolean use = Boolean.Parse(strValue);
                    if (_UseBanAppend != use)
                    {
                        _UseBanAppend = use;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use Additional Ban Message", typeof(Boolean), _UseBanAppend));
                    }
                }
                else if (Regex.Match(strVariable, @"Additional Ban Message").Success)
                {
                    if (strValue.Length > 30)
                    {
                        strValue = strValue.Substring(0, 30);
                        Log.Error("Ban append cannot be more than 30 characters.");
                    }
                    if (_BanAppend != strValue)
                    {
                        _BanAppend = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Additional Ban Message", typeof(String), _BanAppend));
                    }
                }
                else if (Regex.Match(strVariable, @"Procon Ban Admin Name").Success)
                {
                    if (strValue.Length > 16)
                    {
                        strValue = strValue.Substring(0, 16);
                        Log.Error("Procon ban admin id cannot be more than 16 characters.");
                    }
                    if (_CBanAdminName != strValue)
                    {
                        _CBanAdminName = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Procon Ban Admin Name", typeof(String), _CBanAdminName));
                    }
                }
                else if (Regex.Match(strVariable, @"Use Ban Enforcer").Success)
                {
                    if (_serverInfo.ServerType == "OFFICIAL" && Boolean.Parse(strValue) == true)
                    {
                        strValue = "False";
                        Log.Error("'" + strVariable + "' cannot be enabled on official servers.");
                        return;
                    }
                    Boolean use = Boolean.Parse(strValue);
                    if (_UseBanEnforcer != use)
                    {
                        _UseBanEnforcer = use;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use Ban Enforcer", typeof(Boolean), _UseBanEnforcer));
                        if (_UseBanEnforcer)
                        {
                            _fetchActionsFromDb = true;
                            _DbCommunicationWaitHandle.Set();
                        }
                    }
                }
                else if (Regex.Match(strVariable, @"Enforce New Bans by NAME").Success)
                {
                    Boolean enforceName = Boolean.Parse(strValue);
                    if (_DefaultEnforceName != enforceName)
                    {
                        _DefaultEnforceName = enforceName;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Enforce New Bans by NAME", typeof(Boolean), _DefaultEnforceName));
                    }
                }
                else if (Regex.Match(strVariable, @"Enforce New Bans by GUID").Success)
                {
                    Boolean enforceGUID = Boolean.Parse(strValue);
                    if (_DefaultEnforceGUID != enforceGUID)
                    {
                        _DefaultEnforceGUID = enforceGUID;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Enforce New Bans by GUID", typeof(Boolean), _DefaultEnforceGUID));
                    }
                }
                else if (Regex.Match(strVariable, @"Enforce New Bans by IP").Success)
                {
                    Boolean enforceIP = Boolean.Parse(strValue);
                    if (_DefaultEnforceIP != enforceIP)
                    {
                        _DefaultEnforceIP = enforceIP;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Enforce New Bans by IP", typeof(Boolean), _DefaultEnforceIP));
                    }
                }
                else if (Regex.Match(strVariable, @"Ban Search").Success)
                {
                    if (String.IsNullOrEmpty(strValue) || strValue.Length < 3)
                    {
                        Log.Error("Search query must be 3 or more characters.");
                        return;
                    }
                    lock (_BanEnforcerSearchResults)
                    {
                        _BanEnforcerSearchResults = FetchMatchingBans(strValue, 5);
                        if (_BanEnforcerSearchResults.Count == 0)
                        {
                            Log.Error("No players matching '" + strValue + "' have active bans.");
                        }
                    }
                }
                else if (Regex.Match(strVariable, @"Countdown Duration before a Nuke is fired").Success)
                {
                    Int32 duration = Int32.Parse(strValue);
                    if (_NukeCountdownDurationSeconds != duration)
                    {
                        _NukeCountdownDurationSeconds = duration;
                        if (_NukeCountdownDurationSeconds < 0)
                        {
                            _NukeCountdownDurationSeconds = 0;
                        }
                        if (_NukeCountdownDurationSeconds > 30)
                        {
                            _NukeCountdownDurationSeconds = 30;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Countdown Duration before a Nuke is fired", typeof(Int32), _NukeCountdownDurationSeconds));
                    }
                }
                else if (Regex.Match(strVariable, @"Minimum Required Reason Length").Success)
                {
                    Int32 required = Int32.Parse(strValue);
                    if (_RequiredReasonLength != required)
                    {
                        _RequiredReasonLength = required;
                        if (_RequiredReasonLength < 1)
                        {
                            _RequiredReasonLength = 1;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Minimum Required Reason Length", typeof(Int32), _RequiredReasonLength));
                    }
                }
                else if (Regex.Match(strVariable, @"Minimum Report Handle Seconds").Success)
                {
                    Int32 minimumReportHandleSeconds = Int32.Parse(strValue);
                    if (_MinimumReportHandleSeconds != minimumReportHandleSeconds)
                    {
                        _MinimumReportHandleSeconds = minimumReportHandleSeconds;
                        if (_MinimumReportHandleSeconds < 0)
                        {
                            _MinimumReportHandleSeconds = 0;
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Minimum Report Handle Seconds", typeof(Int32), _MinimumReportHandleSeconds));
                    }
                }
                else if (Regex.Match(strVariable, @"Allow Commands from Admin Say").Success)
                {
                    Boolean allowSayCommands = Boolean.Parse(strValue);
                    if (_AllowAdminSayCommands != allowSayCommands)
                    {
                        _AllowAdminSayCommands = allowSayCommands;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Allow Commands from Admin Say", typeof(Boolean), _AllowAdminSayCommands));
                    }
                }
                else if (Regex.Match(strVariable, @"Bypass all command confirmation -DO NOT USE-").Success)
                {
                    Boolean bypassAllConfirmation = Boolean.Parse(strValue);
                    if (_bypassCommandConfirmation != bypassAllConfirmation)
                    {
                        _bypassCommandConfirmation = bypassAllConfirmation;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Bypass all command confirmation -DO NOT USE-", typeof(Boolean), _bypassCommandConfirmation));
                    }
                }
                else if (Regex.Match(strVariable, @"External plugin player commands").Success)
                {
                    _ExternalPlayerCommands = new List<String>(CPluginVariable.DecodeStringArray(strValue));
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"External plugin player commands", typeof(String), CPluginVariable.EncodeStringArray(_ExternalPlayerCommands.ToArray())));
                }
                else if (Regex.Match(strVariable, @"External plugin admin commands").Success)
                {
                    _ExternalAdminCommands = new List<String>(CPluginVariable.DecodeStringArray(strValue));
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"External plugin admin commands", typeof(String), CPluginVariable.EncodeStringArray(_ExternalAdminCommands.ToArray())));
                }
                else if (Regex.Match(strVariable, @"Command Target Whitelist Commands").Success)
                {
                    _CommandTargetWhitelistCommands = new List<String>(CPluginVariable.DecodeStringArray(strValue));
                    if (_firstUserListComplete)
                    {
                        foreach (string commandText in _CommandTargetWhitelistCommands.ToList())
                        {
                            if (!_CommandTextDictionary.ContainsKey(commandText))
                            {
                                Log.Error("Command " + commandText + " not found, removing from command target whitelist commands.");
                                _CommandTargetWhitelistCommands.Remove(commandText);
                            }
                        }
                    }
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Command Target Whitelist Commands", typeof(String), CPluginVariable.EncodeStringArray(_CommandTargetWhitelistCommands.ToArray())));
                }
                else if (strVariable.StartsWith("USR"))
                {
                    //USR1 | ColColonCleaner | User Email
                    //USR1 | ColColonCleaner | User Phone
                    //USR1 | ColColonCleaner | User Role
                    //USR1 | ColColonCleaner | Delete User?
                    //USR1 | ColColonCleaner | Add Soldier?
                    //USR1 | ColColonCleaner | Soldiers | 293492 | ColColonCleaner | Delete Soldier?

                    String[] commandSplit = CPluginVariable.DecodeStringArray(strVariable);
                    String user_id_str = commandSplit[0].TrimStart("USR".ToCharArray()).Trim();
                    Int32 user_id = Int32.Parse(user_id_str);
                    String section = commandSplit[2].Trim();

                    AdKatsUser aUser = null;
                    if (_userCache.TryGetValue(user_id, out aUser))
                    {
                        switch (section)
                        {
                            case "User Email":
                                if (String.IsNullOrEmpty(strValue) || Regex.IsMatch(strValue, @"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$"))
                                {
                                    aUser.user_email = strValue;
                                    //Reupload the user
                                    QueueUserForUpload(aUser);
                                }
                                else
                                {
                                    Log.Error(strValue + " is an invalid email address.");
                                    return;
                                }
                                break;
                            case "User Expiration":
                                DateTime newExpiration;
                                if (DateTime.TryParse(strValue, out newExpiration))
                                {
                                    aUser.user_expiration = newExpiration;
                                    //Reupload the user
                                    QueueUserForUpload(aUser);
                                }
                                else
                                {
                                    Log.Error(strValue + " is an invalid date.");
                                }
                                break;
                            case "User Notes":
                                if (String.IsNullOrEmpty(strValue))
                                {
                                    Log.Error("User notes cannot be blank.");
                                    return;
                                }
                                aUser.user_notes = strValue;
                                //Reupload the user
                                QueueUserForUpload(aUser);
                                break;
                            case "User Phone":
                                aUser.user_phone = strValue;
                                //Reupload the user
                                QueueUserForUpload(aUser);
                                break;
                            case "User Role":
                                AdKatsRole aRole = null;
                                if (_RoleNameDictionary.TryGetValue(strValue, out aRole))
                                {
                                    aUser.user_role = aRole;
                                }
                                else
                                {
                                    Log.Error("Role " + strValue + " not found.");
                                    return;
                                }
                                //Reupload the user
                                QueueUserForUpload(aUser);
                                break;
                            case "Delete User?":
                                if (strValue.ToLower() == "delete")
                                {
                                    QueueUserForRemoval(aUser);
                                }
                                break;
                            case "Add Soldier?":
                                Thread addSoldierThread = new Thread(new ThreadStart(delegate
                                {
                                    Thread.CurrentThread.Name = "AddSoldier";
                                    Log.Debug(() => "Starting a user change thread.", 2);
                                    TryAddUserSoldier(aUser, strValue);
                                    QueueUserForUpload(aUser);
                                    Log.Debug(() => "Exiting a user change thread.", 2);
                                    LogThreadExit();
                                }));
                                StartAndLogThread(addSoldierThread);
                                break;
                            case "Soldiers":
                                if (strVariable.Contains("Delete Soldier?") && strValue.ToLower() == "delete")
                                {
                                    String player_id_str = commandSplit[3].Trim();
                                    Int64 player_id = Int64.Parse(player_id_str);
                                    aUser.soldierDictionary.Remove(player_id);
                                    //Reupload the user
                                    QueueUserForUpload(aUser);
                                }
                                break;
                            default:
                                Log.Error("Section " + section + " not found.");
                                break;
                        }
                    }
                }
                else if (strVariable.StartsWith("CDE"))
                {
                    //Trim off all but the command ID and section
                    //5. Command List|CDE1 | Kill Player | Active
                    //5. Command List|CDE1 | Kill Player | Logging
                    //5. Command List|CDE1 | Kill Player | Text

                    String[] commandSplit = CPluginVariable.DecodeStringArray(strVariable);
                    String command_id_str = commandSplit[0].TrimStart("CDE".ToCharArray()).Trim();
                    Int32 command_id = Int32.Parse(command_id_str);
                    String section = commandSplit[2].Trim();

                    AdKatsCommand command = null;
                    if (_CommandIDDictionary.TryGetValue(command_id, out command))
                    {
                        if (section == "Active")
                        {
                            //Check for valid value
                            if (strValue == "Active")
                            {
                                command.command_active = AdKatsCommand.CommandActive.Active;
                            }
                            else if (strValue == "Disabled")
                            {
                                command.command_active = AdKatsCommand.CommandActive.Disabled;
                            }
                            else if (strValue == "Invisible")
                            {
                                command.command_active = AdKatsCommand.CommandActive.Invisible;
                            }
                            else
                            {
                                Log.Error("Activity setting " + strValue + " was invalid.");
                                return;
                            }
                            switch (command.command_key)
                            {
                                case "command_confirm":
                                    if (command.command_active != AdKatsCommand.CommandActive.Active)
                                    {
                                        Log.Warn("Confirm command must be active. Resetting.");
                                        command.command_active = AdKatsCommand.CommandActive.Active;
                                    }
                                    break;
                                case "command_cancel":
                                    if (command.command_active != AdKatsCommand.CommandActive.Active)
                                    {
                                        Log.Warn("Cancel command must be active. Resetting.");
                                        command.command_active = AdKatsCommand.CommandActive.Active;
                                    }
                                    break;
                            }
                        }
                        else if (section == "Logging")
                        {
                            //Check for valid value
                            switch (strValue)
                            {
                                case "Log":
                                    command.command_logging = AdKatsCommand.CommandLogging.Log;
                                    break;
                                case "Mandatory":
                                    command.command_logging = AdKatsCommand.CommandLogging.Mandatory;
                                    break;
                                case "Ignore":
                                    command.command_logging = AdKatsCommand.CommandLogging.Ignore;
                                    break;
                                case "Unable":
                                    command.command_logging = AdKatsCommand.CommandLogging.Unable;
                                    break;
                                default:
                                    Log.Error("Logging setting " + strValue + " was invalid.");
                                    return;
                            }
                        }
                        else if (section == "Text")
                        {
                            if (String.IsNullOrEmpty(strValue))
                            {
                                Log.Error("Command text cannot be blank.");
                                return;
                            }
                            //Make sure command text only contains alphanumeric chars, underscores, and dashes
                            Regex rgx = new Regex("[^a-zA-Z0-9_-]");
                            strValue = rgx.Replace(strValue, "").ToLower();
                            //Check to make sure text is not a duplicate
                            foreach (AdKatsCommand testCommand in _CommandNameDictionary.Values.ToList())
                            {
                                if (testCommand.command_text == strValue)
                                {
                                    Log.Error("Command text cannot be the same as another command.");
                                    return;
                                }
                            }
                            switch (command.command_key)
                            {
                                case "command_confirm":
                                    if (strValue != "yes")
                                    {
                                        Log.Warn("Confirm command text must be 'yes'. Resetting.");
                                        strValue = "yes";
                                    }
                                    break;
                                case "command_cancel":
                                    if (strValue != "no")
                                    {
                                        Log.Warn("Cancel command text must be 'no'. Resetting.");
                                        strValue = "no";
                                    }
                                    break;
                            }
                            //Assign the command text
                            lock (_CommandIDDictionary)
                            {
                                _CommandTextDictionary.Remove(command.command_text);
                                command.command_text = strValue;
                                _CommandTextDictionary.Add(command.command_text, command);
                            }
                        }
                        else if (section == "Access Method")
                        {
                            if (String.IsNullOrEmpty(strValue))
                            {
                                Log.Error("Command access method cannot be blank.");
                                return;
                            }
                            command.command_access = (AdKatsCommand.CommandAccess)Enum.Parse(typeof(AdKatsCommand.CommandAccess), strValue);
                            switch (command.command_key)
                            {
                                case "command_confirm":
                                    if (command.command_access != AdKatsCommand.CommandAccess.Any)
                                    {
                                        Log.Warn("Confirm command access must be 'Any'. Resetting.");
                                        command.command_access = AdKatsCommand.CommandAccess.Any;
                                    }
                                    break;
                                case "command_cancel":
                                    if (command.command_access != AdKatsCommand.CommandAccess.Any)
                                    {
                                        Log.Warn("Confirm command access must be 'Any'. Resetting.");
                                        command.command_access = AdKatsCommand.CommandAccess.Any;
                                    }
                                    break;
                                case "player_kill":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "player_kick":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "player_ban_temp":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "player_ban_perm":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "player_punish":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "player_mute":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "self_kill":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "admin_say":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                                case "player_say":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                                case "admin_yell":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                                case "player_yell":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                                case "admin_tell":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                                case "player_tell":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                                case "player_ban_perm_future":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "player_kill_force":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                        {
                                            Log.Warn(command.command_name + " access must be 'GlobalVisible'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                        }
                                    }
                                    break;
                                case "player_info":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                                case "player_find":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                                case "self_reportlist":
                                    if (_isTestingAuthorized)
                                    {
                                        if (command.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                        {
                                            Log.Warn(command.command_name + " access must be 'AnyHidden'. Resetting.");
                                            command.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                        }
                                    }
                                    break;
                            }
                        }
                        else
                        {
                            Log.Error("Section " + section + " not understood.");
                            return;
                        }
                        //Upload the command changes
                        QueueCommandForUpload(command);
                    }
                    else
                    {
                        Log.Error("Command " + command_id + " not found in command dictionary.");
                    }
                }
                else if (strVariable.StartsWith("RLE"))
                {
                    //Trim off all but the role ID and section
                    //RLE1 | Default Guest | CDE3 | Kill Player

                    String[] commandSplit = CPluginVariable.DecodeStringArray(strVariable);
                    String roleIDStr = commandSplit[0].TrimStart("RLE".ToCharArray()).Trim();
                    Int32 roleID = Int32.Parse(roleIDStr);

                    //If second section is a command prefix, this is the allow/deny clause
                    if (commandSplit[2].Trim().StartsWith("CDE"))
                    {
                        String commandIDStr = commandSplit[2].Trim().TrimStart("CDE".ToCharArray());
                        Int32 commandID = Int32.Parse(commandIDStr);

                        //Fetch needed role
                        AdKatsRole aRole = null;
                        if (_RoleIDDictionary.TryGetValue(roleID, out aRole))
                        {
                            //Fetch needed command
                            AdKatsCommand aCommand = null;
                            if (_CommandIDDictionary.TryGetValue(commandID, out aCommand))
                            {
                                switch (strValue.ToLower())
                                {
                                    case "allow":
                                        lock (aRole.RoleAllowedCommands)
                                        {
                                            if (!aRole.RoleAllowedCommands.ContainsKey(aCommand.command_key))
                                            {
                                                aRole.RoleAllowedCommands.Add(aCommand.command_key, aCommand);
                                            }
                                        }
                                        QueueRoleForUpload(aRole);
                                        break;
                                    case "deny":
                                        switch (aCommand.command_key)
                                        {
                                            case "command_confirm":
                                                Log.Error("Confirm command cannot be denied for any role. [M]");
                                                return;
                                            case "command_cancel":
                                                Log.Error("Cancel command cannot be denied for any role. [M]");
                                                return;
                                        }
                                        lock (aRole.RoleAllowedCommands)
                                        {
                                            aRole.RoleAllowedCommands.Remove(aCommand.command_key);
                                        }
                                        QueueRoleForUpload(aRole);
                                        break;
                                    default:
                                        Log.Error("Unknown setting when assigning command allowance.");
                                        return;
                                }
                            }
                            else
                            {
                                Log.Error("Command " + commandID + " not found in command dictionary.");
                            }
                        }
                        else
                        {
                            Log.Error("Role " + roleID + " not found in role dictionary.");
                        }
                    }
                    else if (commandSplit[2].Trim().StartsWith("GPE"))
                    {
                        String groupIDStr = commandSplit[2].Trim().TrimStart("GPE".ToCharArray());
                        Int32 groupID = Int32.Parse(groupIDStr);

                        //Fetch needed role
                        AdKatsRole aRole = null;
                        if (_RoleIDDictionary.TryGetValue(roleID, out aRole))
                        {
                            //Fetch needed group
                            AdKatsSpecialGroup aGroup = null;
                            if (_specialPlayerGroupIDDictionary.TryGetValue(groupID, out aGroup))
                            {
                                switch (strValue.ToLower())
                                {
                                    case "assign":
                                        lock (aRole.RoleSetGroups)
                                        {
                                            if (!aRole.RoleSetGroups.ContainsKey(aGroup.group_key))
                                            {
                                                aRole.RoleSetGroups.Add(aGroup.group_key, aGroup);
                                            }
                                        }
                                        QueueRoleForUpload(aRole);
                                        break;
                                    case "ignore":
                                        lock (aRole.RoleSetGroups)
                                        {
                                            aRole.RoleSetGroups.Remove(aGroup.group_key);
                                        }
                                        QueueRoleForUpload(aRole);
                                        break;
                                    default:
                                        Log.Error("Unknown setting when changing role group assignment.");
                                        return;
                                }
                            }
                            else
                            {
                                Log.Error("Group " + groupID + " not found in group dictionary.");
                            }
                        }
                        else
                        {
                            Log.Error("Role " + roleID + " not found in role dictionary.");
                        }
                    }
                    else if (commandSplit[2].Contains("Delete Role?") && strValue.ToLower() == "delete")
                    {
                        //Fetch needed role
                        AdKatsRole aRole = null;
                        if (_RoleIDDictionary.TryGetValue(roleID, out aRole))
                        {
                            QueueRoleForRemoval(aRole);
                        }
                        else
                        {
                            Log.Error("Unable to fetch role for deletion.");
                        }
                    }
                }
                else if (strVariable.StartsWith("BAN"))
                {
                    //Trim off all but the command ID and section
                    //BAN1 | ColColonCleaner | Some Reason

                    String[] commandSplit = CPluginVariable.DecodeStringArray(strVariable);
                    String banIDStr = commandSplit[0].TrimStart("BAN".ToCharArray()).Trim();
                    Int32 banID = Int32.Parse(banIDStr);

                    AdKatsBan aBan = null;
                    foreach (AdKatsBan innerBan in _BanEnforcerSearchResults.ToList())
                    {
                        if (innerBan.ban_id == banID)
                        {
                            aBan = innerBan;
                            break;
                        }
                    }
                    if (aBan != null)
                    {
                        switch (strValue)
                        {
                            case "Active":
                                aBan.ban_status = strValue;
                                break;
                            case "Disabled":
                                aBan.ban_status = strValue;
                                break;
                            default:
                                Log.Error("Unknown setting when assigning ban status.");
                                return;
                        }
                        if (aBan.ban_status == "Disabled")
                        {
                            if (aBan.ban_record.command_action.command_key == "player_ban_perm" || aBan.ban_record.command_action.command_key == "player_ban_perm_future")
                            {
                                aBan.ban_record.command_action = GetCommandByKey("player_ban_perm_old");
                            }
                            else if (aBan.ban_record.command_action.command_key == "player_ban_temp")
                            {
                                aBan.ban_record.command_action = GetCommandByKey("player_ban_temp_old");
                            }
                            UpdateRecord(aBan.ban_record);
                        }
                        else if (aBan.ban_status == "Active")
                        {
                            if (aBan.ban_record.command_action.command_key == "player_ban_perm_old")
                            {
                                aBan.ban_record.command_action = GetCommandByKey("player_ban_perm");
                            }
                            else if (aBan.ban_record.command_action.command_key == "player_ban_temp_old")
                            {
                                aBan.ban_record.command_action = GetCommandByKey("player_ban_temp");
                            }
                            UpdateRecord(aBan.ban_record);
                        }
                        UpdateBanStatus(aBan);
                        Log.Success("Ban " + aBan.ban_id + " is now " + strValue);
                    }
                    else
                    {
                        Log.Error("Unable to update ban. This should not happen.");
                    }
                } 
                else if (Regex.Match(strVariable, @"Banned Tags").Success) 
                {
                    _BannedTags = CPluginVariable.DecodeStringArray(strValue).Where(entry => !String.IsNullOrEmpty(entry)).ToArray();
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Banned Tags", typeof(String), CPluginVariable.EncodeStringArray(_BannedTags)));
                }
                else if (Regex.Match(strVariable, @"Punishment Hierarchy").Success)
                {
                    _PunishmentHierarchy = CPluginVariable.DecodeStringArray(strValue).Where(punishType => _PunishmentSeverityIndex.Contains(punishType)).ToArray();
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Punishment Hierarchy", typeof(String), CPluginVariable.EncodeStringArray(_PunishmentHierarchy)));
                }
                else if (Regex.Match(strVariable, @"Combine Server Punishments").Success)
                {
                    Boolean combine = Boolean.Parse(strValue);
                    if (_CombineServerPunishments != combine)
                    {
                        _CombineServerPunishments = combine;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Combine Server Punishments", typeof(Boolean), _CombineServerPunishments));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatic Forgives").Success)
                {
                    Boolean AutomaticForgives = Boolean.Parse(strValue);
                    if (_AutomaticForgives != AutomaticForgives)
                    {
                        _AutomaticForgives = AutomaticForgives;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatic Forgives", typeof(Boolean), _AutomaticForgives));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatic Forgive Days Since Punished").Success)
                {
                    Int32 AutomaticForgiveLastPunishDays = Int32.Parse(strValue);
                    if (AutomaticForgiveLastPunishDays != _AutomaticForgiveLastPunishDays)
                    {
                        if (AutomaticForgiveLastPunishDays < 7) {
                            AutomaticForgiveLastPunishDays = 7;
                        }
                        _AutomaticForgiveLastPunishDays = AutomaticForgiveLastPunishDays;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatic Forgive Days Since Punished", typeof(Int32), _AutomaticForgiveLastPunishDays));
                    }
                }
                else if (Regex.Match(strVariable, @"Automatic Forgive Days Since Forgiven").Success)
                {
                    Int32 AutomaticForgiveLastForgiveDays = Int32.Parse(strValue);
                    if (AutomaticForgiveLastForgiveDays != _AutomaticForgiveLastForgiveDays) 
                    {
                        if (AutomaticForgiveLastForgiveDays < 7) {
                            AutomaticForgiveLastForgiveDays = 7;
                        }
                        _AutomaticForgiveLastForgiveDays = AutomaticForgiveLastForgiveDays;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Automatic Forgive Days Since Forgiven", typeof(Int32), _AutomaticForgiveLastForgiveDays));
                    }
                }
                else if (Regex.Match(strVariable, @"Only Kill Players when Server in low population").Success)
                {
                    Boolean onlyKill = Boolean.Parse(strValue);
                    if (onlyKill != _OnlyKillOnLowPop)
                    {
                        _OnlyKillOnLowPop = onlyKill;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Only Kill Players when Server in low population", typeof(Boolean), _OnlyKillOnLowPop));
                    }
                }
                else if (Regex.Match(strVariable, @"Low Population Value").Success)
                {
                    Int32 lowPopulationPlayerCount = Int32.Parse(strValue);
                    if (lowPopulationPlayerCount != _lowPopulationPlayerCount)
                    {
                        if (lowPopulationPlayerCount < 0)
                        {
                            Log.Error("Low population value cannot be less than 0.");
                            lowPopulationPlayerCount = 0;
                        }
                        if (lowPopulationPlayerCount > _highPopulationPlayerCount)
                        {
                            Log.Error("Low population value cannot be greater than high population value.");
                            lowPopulationPlayerCount = _highPopulationPlayerCount;
                        }
                        _lowPopulationPlayerCount = lowPopulationPlayerCount;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Low Population Value", typeof(Int32), _lowPopulationPlayerCount));
                    }
                }
                else if (Regex.Match(strVariable, @"High Population Value").Success)
                {
                    Int32 HighPopulationPlayerCount = Int32.Parse(strValue);
                    if (HighPopulationPlayerCount != _highPopulationPlayerCount)
                    {
                        if (HighPopulationPlayerCount > 64)
                        {
                            Log.Error("High population value cannot be greater than 64.");
                            HighPopulationPlayerCount = 64;
                        }
                        if (HighPopulationPlayerCount < _lowPopulationPlayerCount)
                        {
                            Log.Error("High population value cannot be less than low population value.");
                            HighPopulationPlayerCount = _lowPopulationPlayerCount;
                        }
                        _highPopulationPlayerCount = HighPopulationPlayerCount;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"High Population Value", typeof(Int32), _highPopulationPlayerCount));
                    }
                }
                else if (Regex.Match(strVariable, @"Use IRO Punishment").Success)
                {
                    Boolean iro = Boolean.Parse(strValue);
                    if (iro != _IROActive)
                    {
                        _IROActive = iro;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use IRO Punishment", typeof(Boolean), _IROActive));
                    }
                }
                else if (Regex.Match(strVariable, @"IRO Punishment Overrides Low Pop").Success)
                {
                    Boolean overrideIRO = Boolean.Parse(strValue);
                    if (overrideIRO != _IROOverridesLowPop)
                    {
                        _IROOverridesLowPop = overrideIRO;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"IRO Punishment Overrides Low Pop", typeof(Boolean), _IROOverridesLowPop));
                    }
                }
                else if (Regex.Match(strVariable, @"IRO Timeout Minutes").Success)
                {
                    Int32 timeout = Int32.Parse(strValue);
                    if (timeout != _IROTimeout)
                    {
                        _IROTimeout = timeout;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"IRO Timeout Minutes", typeof(Int32), _IROTimeout));
                    }
                }
                else if (Regex.Match(strVariable, @"MySQL Hostname").Success)
                {
                    _mySqlHostname = strValue;
                    _dbSettingsChanged = true;
                    _DbCommunicationWaitHandle.Set();
                }
                else if (Regex.Match(strVariable, @"MySQL Port").Success)
                {
                    Int32 tmp = 3306;
                    if (!Int32.TryParse(strValue, out tmp))
                    {
                        tmp = 3306;
                    }
                    if (tmp > 0 && tmp < 65536)
                    {
                        _mySqlPort = strValue;
                        _dbSettingsChanged = true;
                        _DbCommunicationWaitHandle.Set();
                    }
                    else
                    {
                        Log.Error("Invalid value for MySQL Port: '" + strValue + "'. Must be number between 1 and 65535!");
                    }
                }
                else if (Regex.Match(strVariable, @"MySQL Database").Success)
                {
                    _mySqlSchemaName = strValue;
                    _dbSettingsChanged = true;
                    _DbCommunicationWaitHandle.Set();
                }
                else if (Regex.Match(strVariable, @"MySQL Username").Success)
                {
                    _mySqlUsername = strValue;
                    _dbSettingsChanged = true;
                    _DbCommunicationWaitHandle.Set();
                }
                else if (Regex.Match(strVariable, @"MySQL Password").Success)
                {
                    _mySqlPassword = strValue;
                    _dbSettingsChanged = true;
                    _DbCommunicationWaitHandle.Set();
                }
                else if (Regex.Match(strVariable, @"Send Emails").Success)
                {
                    //Disabled
                    _UseEmail = Boolean.Parse(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable("Send Emails", typeof(Boolean), _UseEmail));
                }
                else if (Regex.Match(strVariable, @"Use SSL?").Success)
                {
                    _EmailHandler.UseSSL = Boolean.Parse(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable("Use SSL?", typeof(Boolean), _EmailHandler.UseSSL));
                }
                else if (Regex.Match(strVariable, @"SMTP-Server address").Success)
                {
                    if (!String.IsNullOrEmpty(strValue))
                    {
                        _EmailHandler.SMTPServer = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable("SMTP-Server address", typeof(String), _EmailHandler.SMTPServer));
                    }
                }
                else if (Regex.Match(strVariable, @"SMTP-Server port").Success)
                {
                    Int32 iPort = Int32.Parse(strValue);
                    if (iPort > 0)
                    {
                        _EmailHandler.SMTPPort = iPort;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable("SMTP-Server port", typeof(Int32), _EmailHandler.SMTPPort));
                    }
                }
                else if (Regex.Match(strVariable, @"Sender address").Success)
                {
                    if (string.IsNullOrEmpty(strValue))
                    {
                        _EmailHandler.SenderEmail = "SENDER_CANNOT_BE_EMPTY";
                        Log.Error("No sender for email was given! Canceling Operation.");
                    }
                    else
                    {
                        _EmailHandler.SenderEmail = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable("Sender address", typeof(String), _EmailHandler.SenderEmail));
                    }
                }
                else if (Regex.Match(strVariable, @"SMTP-Server username").Success)
                {
                    if (string.IsNullOrEmpty(strValue))
                    {
                        _EmailHandler.SMTPUser = "SMTP_USERNAME_CANNOT_BE_EMPTY";
                        Log.Error("No username for SMTP was given! Canceling Operation.");
                    }
                    else
                    {
                        _EmailHandler.SMTPUser = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable("SMTP-Server username", typeof(String), _EmailHandler.SMTPUser));
                    }
                }
                else if (Regex.Match(strVariable, @"SMTP-Server password").Success)
                {
                    if (string.IsNullOrEmpty(strValue))
                    {
                        _EmailHandler.SMTPPassword = "SMTP_PASSWORD_CANNOT_BE_EMPTY";
                        Log.Error("No password for SMTP was given! Canceling Operation.");
                    }
                    else
                    {
                        _EmailHandler.SMTPPassword = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable("SMTP-Server password", typeof(String), _EmailHandler.SMTPPassword));
                    }
                }
                else if (Regex.Match(strVariable, @"Custom HTML Addition").Success)
                {
                    _EmailHandler.CustomHTMLAddition = strValue;
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable("Custom HTML Addition", typeof(String), _EmailHandler.CustomHTMLAddition));
                }
                else if (Regex.Match(strVariable, @"Extra Recipient Email Addresses").Success)
                {
                    _EmailHandler.RecipientEmails = CPluginVariable.DecodeStringArray(strValue).ToList();
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Extra Recipient Email Addresses", typeof(String), strValue));
                }
                else if (Regex.Match(strVariable, @"Only Send Report Emails When Admins Offline").Success)
                {
                    Boolean emailReportsOnlyWhenAdminless = Boolean.Parse(strValue);
                    if (emailReportsOnlyWhenAdminless != _EmailReportsOnlyWhenAdminless)
                    {
                        _EmailReportsOnlyWhenAdminless = emailReportsOnlyWhenAdminless;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Only Send Report Emails When Admins Offline", typeof(Boolean), _EmailReportsOnlyWhenAdminless));
                    }
                } 
                else if (Regex.Match(strVariable, @"Send PushBullet Reports").Success) {
                    _UsePushBullet = Boolean.Parse(strValue);
                    QueueSettingForUpload(new CPluginVariable(@"Send PushBullet Reports", typeof(Boolean), _UsePushBullet));
                } else if (Regex.Match(strVariable, @"PushBullet Access Token").Success) {
                    _PushBulletHandler.AccessToken = strValue;
                    QueueSettingForUpload(new CPluginVariable(@"PushBullet Access Token", typeof(String), _PushBulletHandler.AccessToken));
                } else if (Regex.Match(strVariable, @"PushBullet Note Target").Success) {
                    switch (strValue) {
                        case "Private":
                            _PushBulletHandler.DefaultTarget = PushBulletHandler.Target.Private;
                            break;
                        case "Channel":
                            _PushBulletHandler.DefaultTarget = PushBulletHandler.Target.Channel;
                            break;
                        default:
                            Log.Error("Unknown setting when changing PushBullet note target.");
                            return;
                    }
                    QueueSettingForUpload(new CPluginVariable(@"PushBullet Note Target", typeof(String), _PushBulletHandler.DefaultTarget.ToString()));
                } else if (Regex.Match(strVariable, @"PushBullet Channel Tag").Success) {
                    _PushBulletHandler.DefaultChannelTag = strValue;
                    QueueSettingForUpload(new CPluginVariable(@"PushBullet Channel Tag", typeof(String), _PushBulletHandler.DefaultChannelTag));
                } else if (Regex.Match(strVariable, @"Only Send PushBullet Reports When Admins Offline").Success) {
                    _PushBulletReportsOnlyWhenAdminless = Boolean.Parse(strValue);
                    QueueSettingForUpload(new CPluginVariable(@"Only Send PushBullet Reports When Admins Offline", typeof(Boolean), _PushBulletReportsOnlyWhenAdminless));
                } 
                else if (Regex.Match(strVariable, @"Use Metabans?").Success) {
                    var useMetabans = Boolean.Parse(strValue);
                    if (!_useMetabans && useMetabans) {
                        //Make sure the metabans plugin is enabled
                        ExecuteCommand("procon.protected.plugins.enable", "Metabans", "True");
                        SetExternalPluginSetting("Metabans", "Ban Propagation", "Do not propagate my bans");
                        if (_isTestingAuthorized) {
                            SetExternalPluginSetting("Metabans", "Enforce Metabans Bans", "No");
                            SetExternalPluginSetting("Metabans", "Announce Bans", "No");
                            SetExternalPluginSetting("Metabans", "Debug Mode", "Off");
                        }
                    }
                    _useMetabans = useMetabans;
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable("Use Metabans?", typeof(Boolean), _useMetabans));
                }
                else if (Regex.Match(strVariable, @"Metabans API Key").Success)
                {
                    if (_useMetabans)
                    {
                        if (string.IsNullOrEmpty(strValue))
                        {
                            _metabansAPIKey = "";
                            Log.Error("No API key for Metabans was given! Canceling Operation.");
                        }
                        else if (_metabansAPIKey != strValue)
                        {
                            _metabansAPIKey = strValue;
                            //Once setting has been changed, upload the change to database
                            QueueSettingForUpload(new CPluginVariable(@"Metabans API Key", typeof(String), _metabansAPIKey));
                            SetExternalPluginSetting("Metabans", "API Key", _metabansAPIKey);
                        }
                    }
                }
                else if (Regex.Match(strVariable, @"Metabans Username").Success)
                {
                    if (_useMetabans)
                    {
                        if (string.IsNullOrEmpty(strValue))
                        {
                            _metabansUsername = "";
                            Log.Error("No username for Metabans was given! Canceling Operation.");
                        }
                        else if (_metabansUsername != strValue)
                        {
                            _metabansUsername = strValue;
                            //Once setting has been changed, upload the change to database
                            QueueSettingForUpload(new CPluginVariable(@"Metabans Username", typeof(String), _metabansUsername));
                            SetExternalPluginSetting("Metabans", "Username", _metabansUsername);
                        }
                    }
                } 
                else if (Regex.Match(strVariable, @"Metabans Filter Strings").Success) 
                {
                    _metabansFilterStrings = CPluginVariable.DecodeStringArray(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Metabans Filter Strings", typeof(String), CPluginVariable.EncodeStringArray(_metabansFilterStrings)));
                }
                else if (Regex.Match(strVariable, @"On-Player-Muted Message").Success)
                {
                    if (_MutedPlayerMuteMessage != strValue)
                    {
                        _MutedPlayerMuteMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"On-Player-Muted Message", typeof(String), _MutedPlayerMuteMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"On-Player-Killed Message").Success)
                {
                    if (_MutedPlayerKillMessage != strValue)
                    {
                        _MutedPlayerKillMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"On-Player-Killed Message", typeof(String), _MutedPlayerKillMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"On-Player-Kicked Message").Success)
                {
                    if (_MutedPlayerKickMessage != strValue)
                    {
                        _MutedPlayerKickMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"On-Player-Kicked Message", typeof(String), _MutedPlayerKickMessage));
                    }
                }
                if (Regex.Match(strVariable, @"# Chances to give player before kicking").Success)
                {
                    Int32 tmp = 5;
                    int.TryParse(strValue, out tmp);
                    if (_MutedPlayerChances != tmp)
                    {
                        _MutedPlayerChances = tmp;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"# Chances to give player before kicking", typeof(Int32), _MutedPlayerChances));
                    }
                }
                else if (Regex.Match(strVariable, @"Ignore commands for mute enforcement").Success)
                {
                    Boolean ignoreCommands = Boolean.Parse(strValue);
                    if (_MutedPlayerIgnoreCommands != ignoreCommands)
                    {
                        _MutedPlayerIgnoreCommands = ignoreCommands;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ignore commands for mute enforcement", typeof(Boolean), _MutedPlayerIgnoreCommands));
                    }
                }
                else if (Regex.Match(strVariable, @"Ticket Window High").Success)
                {
                    Int32 tmp = 2;
                    int.TryParse(strValue, out tmp);
                    if (tmp != _TeamSwapTicketWindowHigh)
                    {
                        _TeamSwapTicketWindowHigh = tmp;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ticket Window High", typeof(Int32), _TeamSwapTicketWindowHigh));
                    }
                }
                else if (Regex.Match(strVariable, @"Ticket Window Low").Success)
                {
                    Int32 tmp = 2;
                    int.TryParse(strValue, out tmp);
                    if (tmp != _TeamSwapTicketWindowLow)
                    {
                        _TeamSwapTicketWindowLow = tmp;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Ticket Window Low", typeof(Int32), _TeamSwapTicketWindowLow));
                    }
                }
                else if (Regex.Match(strVariable, @"Enable Admin Assistants").Success)
                {
                    Boolean enableAA = Boolean.Parse(strValue);
                    if (_EnableAdminAssistants != enableAA)
                    {
                        _EnableAdminAssistants = enableAA;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Enable Admin Assistants", typeof(Boolean), _EnableAdminAssistants));
                    }
                }
                else if (Regex.Match(strVariable, @"Enable Admin Assistant Perk").Success)
                {
                    Boolean enableAA = Boolean.Parse(strValue);
                    if (_EnableAdminAssistantPerk != enableAA)
                    {
                        _EnableAdminAssistantPerk = enableAA;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Enable Admin Assistant Perk", typeof(Boolean), _EnableAdminAssistantPerk));
                    }
                }
                else if (Regex.Match(strVariable, @"Use AA Report Auto Handler").Success)
                {
                    Boolean useAAHandler = Boolean.Parse(strValue);
                    if (useAAHandler != _UseAAReportAutoHandler)
                    {
                        _UseAAReportAutoHandler = useAAHandler;
                        if (_UseAAReportAutoHandler)
                        {
                            if (_threadsReady)
                            {
                                Log.Info("Internal Automatic Report Handler activated.");
                            }
                        }
                        else
                        {
                            Log.Info("Internal Automatic Report Handler disabled.");
                        }
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use AA Report Auto Handler", typeof(Boolean), _UseAAReportAutoHandler));
                    }
                }
                else if (Regex.Match(strVariable, @"Auto-Report-Handler Strings").Success)
                {
                    _AutoReportHandleStrings = CPluginVariable.DecodeStringArray(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Auto-Report-Handler Strings", typeof(String), CPluginVariable.EncodeStringArray(_AutoReportHandleStrings)));
                }
                else if (Regex.Match(strVariable, @"Minimum Confirmed Reports Per Month").Success)
                {
                    Int32 monthlyReports = Int32.Parse(strValue);
                    if (_MinimumRequiredMonthlyReports != monthlyReports)
                    {
                        _MinimumRequiredMonthlyReports = monthlyReports;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Minimum Confirmed Reports Per Month", typeof(Int32), _MinimumRequiredMonthlyReports));
                    }
                }
                else if (Regex.Match(strVariable, @"Yell display time seconds").Success)
                {
                    Int32 yellTime = Int32.Parse(strValue);
                    if (_YellDuration != yellTime)
                    {
                        if (yellTime < 0)
                        {
                            Log.Error("Yell duration cannot be negative.");
                            return;
                        }
                        if (yellTime > 10)
                        {
                            Log.Error("Yell duration cannot be greater than 10 seconds.");
                            return;
                        }
                        _YellDuration = yellTime;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Yell display time seconds", typeof(Int32), _YellDuration));
                    }
                }
                else if (Regex.Match(strVariable, @"Pre-Message List").Success)
                {
                    _PreMessageList = new List<String>(CPluginVariable.DecodeStringArray(strValue));
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Pre-Message List", typeof(String), CPluginVariable.EncodeStringArray(_PreMessageList.ToArray())));
                }
                else if (Regex.Match(strVariable, @"Require Use of Pre-Messages").Success)
                {
                    Boolean require = Boolean.Parse(strValue);
                    if (require != _RequirePreMessageUse)
                    {
                        _RequirePreMessageUse = require;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Require Use of Pre-Messages", typeof(Boolean), _RequirePreMessageUse));
                    }
                }
                else if (Regex.Match(strVariable, @"Use first spawn message").Success)
                {
                    Boolean useFirstSpawnMessage = Boolean.Parse(strValue);
                    if (useFirstSpawnMessage != _UseFirstSpawnMessage)
                    {
                        _UseFirstSpawnMessage = useFirstSpawnMessage;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use first spawn message", typeof(Boolean), _UseFirstSpawnMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"First spawn message text").Success)
                {
                    if (_FirstSpawnMessage != strValue)
                    {
                        _FirstSpawnMessage = strValue;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"First spawn message text", typeof(String), _FirstSpawnMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"Use First Spawn Reputation and Infraction Message").Success)
                {
                    Boolean UseFirstSpawnRepMessage = Boolean.Parse(strValue);
                    if (UseFirstSpawnRepMessage != _useFirstSpawnRepMessage)
                    {
                        _useFirstSpawnRepMessage = UseFirstSpawnRepMessage;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Use First Spawn Reputation and Infraction Message", typeof(Boolean), _useFirstSpawnRepMessage));
                    }
                }
                else if (Regex.Match(strVariable, @"Use Perk Expiration Notification").Success)
                {
                    Boolean UsePerkExpirationNotify = Boolean.Parse(strValue);
                    if (UsePerkExpirationNotify != _UsePerkExpirationNotify)
                    {
                        _UsePerkExpirationNotify = UsePerkExpirationNotify;
                        QueueSettingForUpload(new CPluginVariable(@"Use Perk Expiration Notification", typeof(Boolean), _UsePerkExpirationNotify));
                    }
                }
                else if (Regex.Match(strVariable, @"Perk Expiration Notify Days Remaining").Success)
                {
                    Int32 PerkExpirationNotifyDays = Int32.Parse(strValue);
                    if (_PerkExpirationNotifyDays != PerkExpirationNotifyDays)
                    {
                        if (PerkExpirationNotifyDays <= 0)
                        {
                            Log.Error("Notify duration must be a positive number of days.");
                            return;
                        }
                        if (PerkExpirationNotifyDays > 90)
                        {
                            Log.Error("Notify duration cannot be longer than 90 days.");
                            return;
                        }
                        _PerkExpirationNotifyDays = PerkExpirationNotifyDays;
                        QueueSettingForUpload(new CPluginVariable(@"Perk Expiration Notify Days Remaining", typeof(Int32), _PerkExpirationNotifyDays));
                    }
                }
                else if (Regex.Match(strVariable, @"SpamBot Enable").Success)
                {
                    Boolean spamBotEnable = Boolean.Parse(strValue);
                    if (spamBotEnable != _spamBotEnabled)
                    {
                        if (spamBotEnable)
                        {
                            _spamBotSayLastPost = UtcNow() - TimeSpan.FromSeconds(10);
                            _spamBotYellLastPost = UtcNow() - TimeSpan.FromSeconds(10);
                            _spamBotTellLastPost = UtcNow() - TimeSpan.FromSeconds(10);
                        }
                        _spamBotEnabled = spamBotEnable;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"SpamBot Enable", typeof(Boolean), _spamBotEnabled));
                    }
                }
                else if (Regex.Match(strVariable, @"SpamBot Say List").Success)
                {
                    List<String> spamBotSayList = new List<String>(CPluginVariable.DecodeStringArray(strValue));
                    if (!_spamBotSayList.SequenceEqual(spamBotSayList))
                    {
                        _spamBotSayQueue.Clear();
                        foreach (String line in spamBotSayList.Where(message => !String.IsNullOrEmpty(message)).ToList())
                        {
                            _spamBotSayQueue.Enqueue(line);
                        }
                    }
                    _spamBotSayList = spamBotSayList;
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"SpamBot Say List", typeof(String), CPluginVariable.EncodeStringArray(_spamBotSayList.ToArray())));
                }
                else if (Regex.Match(strVariable, @"SpamBot Say Delay Seconds").Success)
                {
                    Int32 spamBotSayDelaySeconds = Int32.Parse(strValue);
                    if (_spamBotSayDelaySeconds != spamBotSayDelaySeconds)
                    {
                        if (spamBotSayDelaySeconds < 60)
                        {
                            Log.Error("SpamBot Say Delay cannot be less than 60 seconds.");
                            spamBotSayDelaySeconds = 60;
                        }
                        _spamBotSayDelaySeconds = spamBotSayDelaySeconds;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"SpamBot Say Delay Seconds", typeof(Int32), _spamBotSayDelaySeconds));
                    }
                }
                else if (Regex.Match(strVariable, @"SpamBot Yell List").Success)
                {
                    List<String> spamBotYellList = new List<String>(CPluginVariable.DecodeStringArray(strValue));
                    if (!_spamBotYellList.SequenceEqual(spamBotYellList))
                    {
                        _spamBotYellQueue.Clear();
                        foreach (String line in spamBotYellList.Where(message => !String.IsNullOrEmpty(message)).ToList())
                        {
                            _spamBotYellQueue.Enqueue(line);
                        }
                    }
                    _spamBotYellList = spamBotYellList;
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"SpamBot Yell List", typeof(String), CPluginVariable.EncodeStringArray(_spamBotYellList.ToArray())));
                }
                else if (Regex.Match(strVariable, @"SpamBot Yell Delay Seconds").Success)
                {
                    Int32 spamBotYellDelaySeconds = Int32.Parse(strValue);
                    if (_spamBotYellDelaySeconds != spamBotYellDelaySeconds)
                    {
                        if (spamBotYellDelaySeconds < 60)
                        {
                            Log.Error("SpamBot Yell Delay cannot be less than 60 seconds.");
                            spamBotYellDelaySeconds = 60;
                        }
                        _spamBotYellDelaySeconds = spamBotYellDelaySeconds;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"SpamBot Yell Delay Seconds", typeof(Int32), _spamBotYellDelaySeconds));
                    }
                }
                else if (Regex.Match(strVariable, @"SpamBot Tell List").Success)
                {
                    List<String> spamBotTellList = new List<String>(CPluginVariable.DecodeStringArray(strValue));
                    if (!_spamBotTellList.SequenceEqual(spamBotTellList))
                    {
                        _spamBotTellQueue.Clear();
                        foreach (String line in spamBotTellList.Where(message => !String.IsNullOrEmpty(message)).ToList())
                        {
                            _spamBotTellQueue.Enqueue(line);
                        }
                    }
                    _spamBotTellList = spamBotTellList;
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"SpamBot Tell List", typeof(String), CPluginVariable.EncodeStringArray(_spamBotTellList.ToArray())));
                }
                else if (Regex.Match(strVariable, @"SpamBot Tell Delay Seconds").Success)
                {
                    Int32 spamBotTellDelaySeconds = Int32.Parse(strValue);
                    if (_spamBotTellDelaySeconds != spamBotTellDelaySeconds)
                    {
                        if (spamBotTellDelaySeconds < 60)
                        {
                            Log.Error("SpamBot Tell Delay cannot be less than 60 seconds.");
                            spamBotTellDelaySeconds = 60;
                        }
                        _spamBotTellDelaySeconds = spamBotTellDelaySeconds;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"SpamBot Tell Delay Seconds", typeof(Int32), _spamBotTellDelaySeconds));
                    }
                }
                else if (Regex.Match(strVariable, @"Exclude Admins and Whitelist from Spam").Success)
                {
                    Boolean spamBotExcludeAdmins = Boolean.Parse(strValue);
                    if (spamBotExcludeAdmins != _spamBotExcludeAdminsAndWhitelist)
                    {
                        _spamBotExcludeAdminsAndWhitelist = spamBotExcludeAdmins;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Exclude Admins and Whitelist from Spam", typeof(Boolean), _spamBotExcludeAdminsAndWhitelist));
                    }
                }
                else if (Regex.Match(strVariable, @"Player Battlecry Volume").Success)
                {
                    switch (strValue)
                    {
                        case "Disabled":
                            _battlecryVolume = BattlecryVolume.Disabled;
                            break;
                        case "Say":
                            _battlecryVolume = BattlecryVolume.Say;
                            break;
                        case "Yell":
                            _battlecryVolume = BattlecryVolume.Yell;
                            break;
                        case "Tell":
                            _battlecryVolume = BattlecryVolume.Tell;
                            break;
                        default:
                            Log.Error("Unknown setting when updating player battlecry volume.");
                            return;
                    }
                    QueueSettingForUpload(new CPluginVariable(@"Player Battlecry Volume", typeof(String), _battlecryVolume.ToString()));
                }
                else if (Regex.Match(strVariable, @"Player Battlecry Max Length").Success)
                {
                    Int32 battleCryMaxLength = Int32.Parse(strValue);
                    if (_battlecryMaxLength != battleCryMaxLength)
                    {
                        if (battleCryMaxLength < 20)
                        {
                            Log.Error("Battlecry max length cannot be less than 20 characters.");
                            battleCryMaxLength = 20;
                        }
                        if (battleCryMaxLength > 300)
                        {
                            Log.Error("Battlecry max length cannot be more than 300 characters.");
                            battleCryMaxLength = 300;
                        }
                        _battlecryMaxLength = battleCryMaxLength;
                        QueueSettingForUpload(new CPluginVariable(@"Player Battlecry Max Length", typeof(Int32), _battlecryMaxLength));
                    }
                }
                else if (Regex.Match(strVariable, @"Player Battlecry Denied Words").Success)
                {
                    _battlecryDeniedWords = CPluginVariable.DecodeStringArray(strValue);
                    QueueSettingForUpload(new CPluginVariable(@"Player Battlecry Denied Words", typeof(String), CPluginVariable.EncodeStringArray(_battlecryDeniedWords)));
                }
                else if (Regex.Match(strVariable, @"Display Admin Name in Kick and Ban Announcement").Success)
                {
                    Boolean display = Boolean.Parse(strValue);
                    if (display != _ShowAdminNameInAnnouncement)
                    {
                        _ShowAdminNameInAnnouncement = display;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Display Admin Name in Kick and Ban Announcement", typeof(Boolean), _ShowAdminNameInAnnouncement));
                    }
                }
                else if (Regex.Match(strVariable, @"Display New Player Announcement").Success)
                {
                    Boolean display = Boolean.Parse(strValue);
                    if (display != _ShowNewPlayerAnnouncement)
                    {
                        _ShowNewPlayerAnnouncement = display;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Display New Player Announcement", typeof(Boolean), _ShowNewPlayerAnnouncement));
                    }
                }
                else if (Regex.Match(strVariable, @"Display Player Name Change Announcement").Success)
                {
                    Boolean display = Boolean.Parse(strValue);
                    if (display != _ShowPlayerNameChangeAnnouncement)
                    {
                        _ShowPlayerNameChangeAnnouncement = display;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Display Player Name Change Announcement", typeof(Boolean), _ShowPlayerNameChangeAnnouncement));
                    }
                }
                else if (Regex.Match(strVariable, @"Display Targeted Player Left Notification").Success)
                {
                    Boolean ShowTargetedPlayerLeftNotification = Boolean.Parse(strValue);
                    if (ShowTargetedPlayerLeftNotification != _ShowTargetedPlayerLeftNotification)
                    {
                        _ShowTargetedPlayerLeftNotification = ShowTargetedPlayerLeftNotification;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Display Targeted Player Left Notification", typeof(Boolean), _ShowTargetedPlayerLeftNotification));
                    }
                }
                else if (Regex.Match(strVariable, @"Display Ticket Rates in Procon Chat").Success)
                {
                    Boolean display = Boolean.Parse(strValue);
                    if (display != _DisplayTicketRatesInProconChat)
                    {
                        _DisplayTicketRatesInProconChat = display;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Display Ticket Rates in Procon Chat", typeof(Boolean), _DisplayTicketRatesInProconChat));
                    }
                }
                else if (Regex.Match(strVariable, @"Inform players of reports against them").Success)
                {
                    Boolean inform = Boolean.Parse(strValue);
                    if (inform != _InformReportedPlayers)
                    {
                        _InformReportedPlayers = inform;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Inform players of reports against them", typeof(Boolean), _InformReportedPlayers));
                    }
                }
                else if (Regex.Match(strVariable, @"Player Inform Exclusion Strings").Success)
                {
                    _PlayerInformExclusionStrings = CPluginVariable.DecodeStringArray(strValue);
                    //Once setting has been changed, upload the change to database
                    QueueSettingForUpload(new CPluginVariable(@"Player Inform Exclusion Strings", typeof(String), CPluginVariable.EncodeStringArray(_PlayerInformExclusionStrings)));
                }
                else if (Regex.Match(strVariable, @"Inform reputable players of admin joins").Success)
                {
                    Boolean InformReputablePlayersOfAdminJoins = Boolean.Parse(strValue);
                    if (InformReputablePlayersOfAdminJoins != _InformReputablePlayersOfAdminJoins)
                    {
                        _InformReputablePlayersOfAdminJoins = InformReputablePlayersOfAdminJoins;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Inform reputable players of admin joins", typeof(Boolean), _InformReputablePlayersOfAdminJoins));
                    }
                }
                else if (Regex.Match(strVariable, @"Inform admins of admin joins").Success)
                {
                    Boolean InformAdminsOfAdminJoins = Boolean.Parse(strValue);
                    if (InformAdminsOfAdminJoins != _InformAdminsOfAdminJoins)
                    {
                        _InformAdminsOfAdminJoins = InformAdminsOfAdminJoins;
                        //Once setting has been changed, upload the change to database
                        QueueSettingForUpload(new CPluginVariable(@"Inform admins of admin joins", typeof(Boolean), _InformAdminsOfAdminJoins));
                    }
                }
                else if (Regex.Match(strVariable, @"Add User").Success)
                {
                    if (IsSoldierNameValid(strValue))
                    {
                        AdKatsUser aUser = new AdKatsUser
                        {
                            user_name = strValue,
                            user_expiration = UtcNow().AddYears(20),
                            user_notes = "No Notes"
                        };
                        if (_userCache.Values.Any(iUser => aUser.user_name == iUser.user_name))
                        {
                            Log.Error("Unable to add " + aUser.user_name + ", a user with that name already exists.");
                            return;
                        }
                        Thread addUserThread = new Thread(new ThreadStart(delegate
                        {
                            Thread.CurrentThread.Name = "UserChange";
                            Log.Debug(() => "Starting a user change thread.", 2);
                            //Attempt to add soldiers matching the user's name
                            TryAddUserSoldier(aUser, aUser.user_name);
                            QueueUserForUpload(aUser);
                            Log.Debug(() => "Exiting a user change thread.", 2);
                            LogThreadExit();
                        }));
                        StartAndLogThread(addUserThread);
                    }
                    else
                    {
                        Log.Error("User id had invalid formatting, please try again.");
                    }
                }
                else if (Regex.Match(strVariable, @"Add Role").Success)
                {
                    if (!String.IsNullOrEmpty(strValue))
                    {
                        String roleName = new Regex("[^a-zA-Z0-9 _-]").Replace(strValue, "");
                        String roleKey = roleName.Replace(' ', '_');
                        if (!String.IsNullOrEmpty(roleName) && !String.IsNullOrEmpty(roleKey))
                        {
                            AdKatsRole aRole = new AdKatsRole
                            {
                                role_key = roleKey,
                                role_name = roleName
                            };
                            //By default we should include all commands as allowed
                            lock (_CommandIDDictionary)
                            {
                                foreach (AdKatsCommand aCommand in _RoleKeyDictionary["guest_default"].RoleAllowedCommands.Values)
                                {
                                    aRole.RoleAllowedCommands.Add(aCommand.command_key, aCommand);
                                }
                            }
                            //Queue it for upload
                            QueueRoleForUpload(aRole);
                        }
                        else
                        {
                            Log.Error("Role had invalid characters, please try again.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured while updating AdKats settings.", e));
            }
        }

        public void OnPluginLoaded(String strHostName, String strPort, String strPRoConVersion)
        {
            Log.Debug(() => "Entering OnPluginLoaded", 7);
            try
            {
                //Set the server IP
                _serverInfo.ServerIP = strHostName + ":" + strPort;
                //Register all events
                RegisterEvents(GetType().Name, 
                    "OnVersion", 
                    "OnServerInfo", 
                    "OnSoldierHealth",
                    "OnListPlayers", 
                    "OnPunkbusterPlayerInfo", 
                    "OnReservedSlotsList", 
                    "OnPlayerKilled", 
                    "OnPlayerIsAlive", 
                    "OnPlayerSpawned", 
                    "OnPlayerTeamChange",
                    "OnPlayerSquadChange", 
                    "OnPlayerJoin", 
                    "OnPlayerLeft", 
                    "OnGlobalChat", 
                    "OnTeamChat", 
                    "OnSquadChat", 
                    "OnLevelLoaded", 
                    "OnBanAdded", 
                    "OnBanRemoved", 
                    "OnBanListClear", 
                    "OnBanListSave", 
                    "OnBanListLoad", 
                    "OnBanList", 
                    "OnRoundOverTeamScores", 
                    "OnRoundOverPlayers",
                    "OnSpectatorListLoad", 
                    "OnSpectatorListSave", 
                    "OnSpectatorListPlayerAdded", 
                    "OnSpectatorListPlayerRemoved", 
                    "OnSpectatorListCleared", 
                    "OnSpectatorListList", 
                    "OnGameAdminLoad", 
                    "OnGameAdminSave", 
                    "OnGameAdminPlayerAdded", 
                    "OnGameAdminPlayerRemoved", 
                    "OnGameAdminCleared", 
                    "OnGameAdminList", 
                    "OnFairFight", 
                    "OnIsHitIndicator", 
                    "OnCommander", 
                    "OnForceReloadWholeMags", 
                    "OnServerType", 
                    "OnMaxSpectators", 
                    "OnTeamFactionOverride",
                    "OnPlayerPingedByAdmin",
                    "OnMapListList",
                    "OnMaplistLoad",
                    "OnMaplistSave",
                    "OnMaplistCleared",
                    "OnMaplistMapAppended",
                    "OnMaplistNextLevelIndex",
                    "OnMaplistMapRemoved",
                    "OnMaplistMapInserted");
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("FATAL ERROR on plugin load.", e));
            }
            Log.Debug(() => "Exiting OnPluginLoaded", 7);
        }

        public void OnPluginEnable()
        {
            try
            {
                //If the finalizer is still alive, inform the user and disable
                if (_Finalizer != null && _Finalizer.IsAlive)
                {
                    Log.Error("Cannot enable plugin while it is shutting down. Please Wait for it to shut down.");
                    _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(2));
                    //Disable the plugin
                    Disable();
                    return;
                }
                //Create a new thread to activate the plugin
                _Activator = new Thread(new ThreadStart(delegate
                {
                    try
                    {
                        Thread.CurrentThread.Name = "Enabler";
                        Thread.Sleep(250);

                        _roundState = RoundState.Loaded;

                        UpdateFactions();

                        //Add command informing other plugins that AdKats is enabling
                        RegisterCommand(_PluginEnabledMatchCommand);
                        RegisterCommand(_subscribeAsClientMatchCommand);

                        if (_pluginRebootOnDisable)
                        {
                            if (!String.IsNullOrEmpty(_pluginRebootOnDisableSource))
                            {
                                PlayerTellMessage(_pluginRebootOnDisableSource, "AdKats is Rebooting");
                            }
                            _pluginRebootOnDisable = false;
                            _pluginRebootOnDisableSource = null;
                        }

                        if ((UtcNow() - _proconStartTime).TotalSeconds <= 20)
                        {
                            Log.Write("Waiting a few seconds for requirements and other plugins to initialize, please wait...");
                            //Wait on all settings to be imported by procon for initial start, and for all other plugins to start and register.
                            for (Int32 index = 20 - (Int32)(UtcNow() - _proconStartTime).TotalSeconds; index > 0; index--)
                            {
                                Log.Write(index + "...");
                                _threadMasterWaitHandle.WaitOne(1000);
                            }
                        }

                        WeaponDictionary dic = GetWeaponDefines();
                        WeaponTypeDictionary = new Dictionary<string, DamageTypes>();
                        foreach (Weapon weapon in dic)
                        {
                            if (weapon != null && !WeaponTypeDictionary.ContainsKey(weapon.Name))
                            {
                                WeaponTypeDictionary.Add(weapon.Name, weapon.Damage);
                            }
                        }

                        //Make sure the default in-game admin is disabled
                        ExecuteCommand("procon.protected.plugins.enable", "CInGameAdmin", "False");

                        //Initialize the stat library
                        _StatLibrary = new StatLibrary(this);
                        if (_StatLibrary.PopulateWeaponStats())
                        {
                            Log.Success("Fetched " + _StatLibrary.Weapons.Count + " " + _gameVersion + " weapon stat definitions.");
                        }
                        else
                        {
                            Log.Error("Failed to fetch weapon stat definitions. AdKats cannot be started.");
                            Disable();
                            LogThreadExit();
                            return;
                        }

                        //Fetch all reputation information
                        if (PopulateCommandReputationDictionaries())
                        {
                            Log.Success("Fetched reputation definitions.");
                        }
                        else
                        {
                            Log.Error("Failed to fetch reputation definitions. AdKats cannot be started.");
                            Disable();
                            LogThreadExit();
                            return;
                        }

                        if (_gameVersion == GameVersion.BF3 || _gameVersion == GameVersion.BF4)
                        {
                            //Fetch all weapon names
                            if (PopulateWeaponNameDictionaries())
                            {
                                Log.Success("Fetched weapon names.");
                            }
                            else
                            {
                                Log.Error("Failed to fetch weapon names. AdKats cannot be started.");
                                Disable();
                                LogThreadExit();
                                return;
                            }
                        }

                        //Fetch all special player group information
                        if (PopulateSpecialGroupDictionaries())
                        {
                            Log.Success("Fetched special player group definitions.");
                        }
                        else
                        {
                            Log.Error("Failed to fetch special player group definitions. AdKats cannot be started.");
                            Disable();
                            LogThreadExit();
                            return;
                        }

                        //Fetch global timing
                        TimeSpan diffUTCGlobal;
                        _globalTimingValid = TestGlobalTiming(false, true, out diffUTCGlobal);
                        _globalTimingOffset = diffUTCGlobal;

                        //Don't directly depend on stat logger being controllable at this time, connection is unstable
                        /*if (useDatabase)
                        {
                            //Confirm Stat Logger active and properly configured
                            Log.Write("Confirming proper setup for CChatGUIDStatsLoggerBF3, please wait...");

                            if (gameVersion == GameVersion.BF3)
                            {
                                if (confirmStatLoggerSetup())
                                {
                                    Log.Success("^bCChatGUIDStatsLoggerBF3^n enabled and active!");
                                }
                                else
                                {
                                    //Stat logger could not be enabled or managed
                                    Log.Warn("The stat logger plugin could not be found or controlled. Running AdKats in backup mode.");
                                    return;
                                }
                            }
                        }*/

                        //Inform of IP
                        Log.Success("Server IP is " + _serverInfo.ServerIP + "");

                        //Set the enabled variable
                        _pluginEnabled = true;
                        _LastVersionTrackingUpdate = UtcNow() - TimeSpan.FromHours(1);

                        //Init and start all the threads
                        InitWaitHandles();
                        OpenAllHandles();
                        InitThreads();
                        StartThreads();
                    }
                    catch (Exception e)
                    {
                        HandleException(new AdKatsException("Error while enabling AdKats.", e));
                    }
                    LogThreadExit();
                }));

                Log.Write("^b^2ENABLED!^n^0 Beginning startup sequence...");
                //Start the thread
                StartAndLogThread(_Activator);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while initializing activator thread.", e));
            }
        }

        public void OnPluginDisable()
        {
            //If the plugin is already disabling then cancel
            if (_Finalizer != null && _Finalizer.IsAlive)
            {
                return;
            }
            try
            {
                //Create a new thread to disabled the plugin
                _Finalizer = new Thread(new ThreadStart(delegate
                {
                    try
                    {
                        Thread.CurrentThread.Name = "Finalizer";
                        Log.Info("Shutting down AdKats.");
                        //Disable settings
                        _pluginEnabled = false;
                        _threadsReady = false;
                        //Remove all match commands
                        UnregisterCommand(_PluginEnabledMatchCommand);
                        UnregisterCommand(_issueCommandMatchCommand);
                        UnregisterCommand(_fetchAuthorizedSoldiersMatchCommand);
                        UnregisterCommand(_subscribeAsClientMatchCommand);
                        //Open all handles. Threads will finish on their own.
                        OpenAllHandles();

                        //Check to make sure all threads have completed and stopped
                        Int32 attempts = 0;
                        Boolean alive = false;
                        do
                        {
                            OpenAllHandles();
                            attempts++;
                            Thread.Sleep(500);
                            alive = false;
                            String aliveThreads = "";
                            lock (_aliveThreads)
                            {
                                foreach (Int32 deadThreadID in _aliveThreads.Values.Where(thread => !thread.IsAlive).Select(thread => thread.ManagedThreadId).ToList())
                                {
                                    _aliveThreads.Remove(deadThreadID);
                                }
                                foreach (Thread aliveThread in _aliveThreads.Values.ToList())
                                {
                                    alive = true;
                                    aliveThreads += (aliveThread.Name + "[" + aliveThread.ManagedThreadId + "] ");
                                }
                            }
                            if (aliveThreads.Length > 0)
                            {
                                if (attempts > 20)
                                {
                                    Log.Warn("Threads still exiting: " + aliveThreads);
                                }
                                else
                                {
                                    Log.Debug(() => "Threads still exiting: " + aliveThreads, 2);
                                }
                            }
                        } while (alive);

                        Int64 MBUsed = (GC.GetTotalMemory(true) / 1024 / 1024);
                        Boolean memDisplay = _isTestingAuthorized && MBUsed > 100;
                        //Reset all caches and storage
                        if (memDisplay)
                        {
                            Log.Info("Before any: " + MBUsed + "MB");
                        }
                        if (_UserRemovalQueue != null)
                        {
                            _UserRemovalQueue.Clear();
                        }
                        if (_UserUploadQueue != null)
                        {
                            _UserUploadQueue.Clear();
                        }
                        if (_TeamswapForceMoveQueue != null)
                        {
                            _TeamswapForceMoveQueue.Clear();
                        }
                        if (_TeamswapOnDeathCheckingQueue != null)
                        {
                            _TeamswapOnDeathCheckingQueue.Clear();
                        }
                        if (_TeamswapOnDeathMoveDic != null)
                        {
                            _TeamswapOnDeathMoveDic.Clear();
                        }
                        if (_UnparsedCommandQueue != null)
                        {
                            _UnparsedCommandQueue.Clear();
                        }
                        if (_UnparsedMessageQueue != null)
                        {
                            _UnparsedMessageQueue.Clear();
                        }
                        if (_UnprocessedActionQueue != null)
                        {
                            _UnprocessedActionQueue.Clear();
                        }
                        if (_UnprocessedRecordQueue != null)
                        {
                            _UnprocessedRecordQueue.Clear();
                        }
                        if (_UnprocessedStatisticQueue != null)
                        {
                            _UnprocessedStatisticQueue.Clear();
                        }
                        if (_BanEnforcerCheckingQueue != null)
                        {
                            _BanEnforcerCheckingQueue.Clear();
                        }
                        _toldCol = false;
                        if (_Team2MoveQueue != null)
                        {
                            _Team2MoveQueue.Clear();
                        }
                        if (_Team1MoveQueue != null)
                        {
                            _Team1MoveQueue.Clear();
                        }
                        if (_RoundCookers != null)
                        {
                            _RoundCookers.Clear();
                        }
                        if (_RoundReports != null)
                        {
                            _RoundReports.Clear();
                        }
                        if (_RoundReportHistory != null)
                        {
                            _RoundReportHistory.Clear();
                        }
                        if (_RoundMutedPlayers != null)
                        {
                            _RoundMutedPlayers.Clear();
                        }
                        if (_PlayerDictionary != null)
                        {
                            _PlayerDictionary.Clear();
                        }
                        if (memDisplay)
                        {
                            Thread.Sleep(TimeSpan.FromSeconds(1));
                            Log.Info("After _PlayerDictionary: " + (GC.GetTotalMemory(true) / 1024 / 1024) + "MB");
                        }
                        if (_PlayerLeftDictionary != null)
                        {
                            _PlayerLeftDictionary.Clear();
                        }
                        if (memDisplay)
                        {
                            Thread.Sleep(TimeSpan.FromSeconds(1));
                            Log.Info("After _PlayerLeftDictionary: " + (GC.GetTotalMemory(true) / 1024 / 1024) + "MB");
                        }
                        if (_FetchedPlayers != null)
                        {
                            _FetchedPlayers.Clear();
                        }
                        if (memDisplay)
                        {
                            Thread.Sleep(TimeSpan.FromSeconds(1));
                            Log.Info("After _FetchedPlayers: " + (GC.GetTotalMemory(true) / 1024 / 1024) + "MB");
                        }
                        _firstPlayerListComplete = false;
                        _firstUserListComplete = false;
                        _firstPlayerListStarted = false;
                        if (_userCache != null)
                        {
                            _userCache.Clear();
                        }
                        if (memDisplay)
                        {
                            Thread.Sleep(TimeSpan.FromSeconds(1));
                            Log.Info("After _userCache: " + (GC.GetTotalMemory(true) / 1024 / 1024) + "MB");
                        }
                        if (FrostbitePlayerInfoList != null)
                        {
                            FrostbitePlayerInfoList.Clear();
                        }
                        if (memDisplay)
                        {
                            Thread.Sleep(TimeSpan.FromSeconds(1));
                            Log.Info("After FrostbitePlayerInfoList: " + (GC.GetTotalMemory(true) / 1024 / 1024) + "MB");
                        }
                        if (_CBanProcessingQueue != null)
                        {
                            _CBanProcessingQueue.Clear();
                        }
                        if (_BanEnforcerProcessingQueue != null)
                        {
                            _BanEnforcerProcessingQueue.Clear();
                        }
                        if (_ActOnSpawnDictionary != null)
                        {
                            _ActOnSpawnDictionary.Clear();
                        }
                        if (_ActOnIsAliveDictionary != null)
                        {
                            _ActOnIsAliveDictionary.Clear();
                        }
                        if (_ActionConfirmDic != null)
                        {
                            _ActionConfirmDic.Clear();
                        }
                        if (_LoadoutConfirmDictionary != null)
                        {
                            _LoadoutConfirmDictionary.Clear();
                        }
                        _hackerCheckedPlayers.Clear();
                        _hackerCheckedPlayersStats.Clear();
                        _unmatchedRoundDeathCounts.Clear();
                        _unmatchedRoundDeaths.Clear();
                        _endingRound = false;
                        _surrenderVoteList.Clear();
                        _nosurrenderVoteList.Clear();
                        _surrenderVoteActive = false;
                        _surrenderVoteSucceeded = false;
                        _surrenderAutoSucceeded = false;
                        _surrenderAutoTriggerCountCurrent = 0;
                        _surrenderAutoTriggerCountPause = 0;
                        _autoNukesThisRound = 0;
                        _roundAssists.Clear();
                        _slowmo = false;
                        _pluginUpdateServerInfoChecked = false;
                        _databaseConnectionCriticalState = false;
                        _databaseSuccess = 0;
                        _databaseTimeouts = 0;
                        _pingKicksTotal = 0;
                        if (_subscribedClients.Any())
                        {
                            Log.Warn("All active subscriptions removed.");
                            _subscribedClients.Clear();
                        }
                        //Now that plugin is disabled, update the settings page to reflect
                        UpdateSettingPage();
                        Log.Write("^b^1AdKats " + GetPluginVersion() + " Disabled! =(^n^0");
                        //Automatic Enable
                        if (_pluginRebootOnDisable && !_useKeepAlive)
                        {
                            Enable();
                        }
                    }
                    catch (Exception e)
                    {
                        HandleException(new AdKatsException("Error occured while disabling Adkats.", e));
                    }
                }));

                //Start the finalizer thread
                _Finalizer.Start();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured while initializing AdKats disable thread.", e));
            }
        }

        private void FetchPluginDocumentation()
        {
            if (_aliveThreads.Values.Any(aThread => aThread.Name == "DescFetching"))
            {
                return;
            }
            _PluginDescriptionWaitHandle.Reset();
            //Create a new thread to fetch the plugin description and changelog
            Thread descFetcher = new Thread(new ThreadStart(delegate
            {
                try
                {
                    Thread.CurrentThread.Name = "DescFetching";
                    _pluginDescFetchProgress = "Started";
                    //Create web client
                    WebClient client = new WebClient();
                    //Download the readme and changelog
                    Log.Debug(() => "Fetching plugin links...", 2);
                    try
                    {
                        _pluginLinks = ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/LINKS.md?cacherand=" + Environment.TickCount);
                        Log.Debug(() => "Plugin links fetched.", 1);
                    }
                    catch (Exception)
                    {
                        try
                        {
                            _pluginLinks = ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/links?cacherand=" + Environment.TickCount);
                            Log.Debug(() => "Plugin links fetched from backup location.", 1);
                        }
                        catch (Exception)
                        {
                            Log.Error("Failed to fetch plugin links.");
                        }
                    }
                    _pluginDescFetchProgress = "LinksFetched";
                    Log.Debug(() => "Fetching plugin readme...", 2);
                    try
                    {
                        _pluginDescription = ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/README.md?cacherand=" + Environment.TickCount);
                        Log.Debug(() => "Plugin readme fetched.", 1);
                    }
                    catch (Exception)
                    {
                        try
                        {
                            _pluginDescription = ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/readme?cacherand=" + Environment.TickCount);
                            Log.Debug(() => "Plugin readme fetched from backup location.", 1);
                        }
                        catch (Exception)
                        {
                            Log.Error("Failed to fetch plugin readme.");
                        }
                    }
                    _pluginDescFetchProgress = "DescFetched";
                    Log.Debug(() => "Fetching plugin changelog...", 2);
                    try
                    {
                        _pluginChangelog = ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/CHANGELOG.md?cacherand=" + Environment.TickCount);
                        Log.Debug(() => "Plugin changelog fetched.", 1);
                    }
                    catch (Exception)
                    {
                        try
                        {
                            _pluginChangelog = ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/changelog?cacherand=" + Environment.TickCount);
                            Log.Debug(() => "Plugin changelog fetched from backup location.", 1);
                        }
                        catch (Exception)
                        {
                            Log.Error("Failed to fetch plugin changelog.");
                        }
                    }
                    _pluginDescFetchProgress = "ChangeFetched";
                    if (!String.IsNullOrEmpty(_pluginDescription))
                    {
                        //Extract the latest stable version
                        String latestStableVersion = ExtractString(_pluginDescription, "latest_stable_release");
                        if (!String.IsNullOrEmpty(latestStableVersion)) 
                        {
                            _latestPluginVersion = latestStableVersion;
                            _latestPluginVersionInt = ConvertVersionInt(latestStableVersion);
                            //Get current plugin version
                            _currentPluginVersionInt = ConvertVersionInt(PluginVersion);

                            String versionStatus = String.Empty;
                            //Add the appropriate message to plugin description
                            if (_latestPluginVersionInt > _currentPluginVersionInt)
                            {
                                if (_pluginUpdatePatched)
                                {
                                    versionStatus = @"
                                    <h2 style='color:#DF0101;'>
                                        You are running an outdated version! The update has been patched, reboot PRoCon to run version " + latestStableVersion + @"!
                                    </h2>";
                                }
                                else
                                {
                                    versionStatus = @"
                                    <h2 style='color:#DF0101;'>
                                        You are running an outdated version! Version " + latestStableVersion + @" is available for download!
                                    </h2>
                                    <a href='https://sourceforge.net/projects/adkats/files/latest/download' target='_blank'>
                                        Download Version " + latestStableVersion + @"!
                                    </a><br/>
                                    Download link below.";
                                }
                                _pluginVersionStatus = VersionStatus.OutdatedBuild;
                            }
                            else if (_latestPluginVersionInt == _currentPluginVersionInt)
                            {
                                versionStatus = @"
                                <h2 style='color:#01DF01;'>
                                    Congrats! You are running the latest stable version!
                                </h2>";
                                _pluginVersionStatus = VersionStatus.StableBuild;
                            }
                            else if (_latestPluginVersionInt < _currentPluginVersionInt)
                            {
                                versionStatus = @"
                                <h2 style='color:#FF8000;'>
                                    CAUTION! You are running a TEST version! Functionality might not be completely tested.
                                </h2>";
                                _pluginVersionStatus = VersionStatus.TestBuild;
                            }
                            else
                            {
                                _pluginVersionStatus = VersionStatus.UnknownBuild;
                            }
                            //Prepend the message
                            _pluginVersionStatusString = versionStatus;
                            _pluginDescFetchProgress = "VersionStatusSet";
                            //Check for plugin updates
                            CheckForPluginUpdates(false);
                            _pluginDescFetchProgress = "UpdateChecked";
                        }
                    }
                    else if (!_fetchedPluginInformation)
                    {
                        Log.Error("Unable to fetch required documentation files. AdKats cannot be started.");
                        Disable();
                        LogThreadExit();
                        return;
                    }
                    Log.Debug(() => "Setting desc fetch handle.", 1);
                    _fetchedPluginInformation = true;
                    _LastPluginDescFetch = UtcNow();
                    _PluginDescriptionWaitHandle.Set();
                    _pluginDescFetchProgress = "Completed";
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while fetching plugin description and changelog.", e));
                }
                LogThreadExit();
            }));
            //Start the thread
            StartAndLogThread(descFetcher);
        }

        private void SetupStatusMonitor()
        {
            //Create a new thread to handle keep-alive
            //This thread will remain running for the duration the layer is online
            Thread statusMonitorThread = new Thread(new ThreadStart(delegate
            {
                try
                {
                    Thread.CurrentThread.Name = "StatusMonitor";
                    DateTime lastShortKeepAliveCheck = UtcNow();
                    DateTime lastLongKeepAliveCheck = UtcNow();
                    ExecuteCommand("procon.protected.send", "serverInfo");
                    DateTime lastMemoryWarning = UtcNow();
                    while (true)
                    {
                        try
                        {
                            Int64 MBUsed = (GC.GetTotalMemory(true) / 1024 / 1024);
                            if (NowDuration(lastMemoryWarning).TotalSeconds > 30)
                            {
                                if (MBUsed > 750 && (UtcNow() - _AdKatsRunningTime).TotalMinutes > 30 && _firstPlayerListComplete)
                                {
                                    Log.Warn(MBUsed + "MB estimated memory used.");
                                    QueueRecordForProcessing(new AdKatsRecord
                                    {
                                        record_source = AdKatsRecord.Sources.InternalAutomated,
                                        server_id = _serverInfo.ServerID,
                                        command_type = GetCommandByKey("plugin_restart"),
                                        command_numeric = 0,
                                        target_name = "AdKats",
                                        source_name = "MemoryMonitor",
                                        record_message = MBUsed + "MB estimated memory used",
                                        record_time = UtcNow()
                                    });
                                    lastMemoryWarning = UtcNow();
                                }
                                else if (MBUsed > 250)
                                {
                                    String mm = " MAP: ";
                                    mm += "1:" + _aliveThreads.Count() + ", ";
                                    mm += "2:" + _populationPopulatingPlayers.Count() + ", ";
                                    mm += "3:" + _ActOnIsAliveDictionary.Count() + ", ";
                                    mm += "4:" + _ActOnSpawnDictionary.Count() + ", ";
                                    mm += "5:" + _LoadoutConfirmDictionary.Count() + ", ";
                                    mm += "6:" + _ActionConfirmDic.Count() + ", ";
                                    mm += "7:" + _RoundReports.Count() + ", ";
                                    mm += "8:" + _userCache.Count() + ", ";
                                    mm += "9:" + _specialPlayerGroupIDDictionary.Count() + ", ";
                                    mm += "10:" + _specialPlayerGroupKeyDictionary.Count() + ", ";
                                    mm += "11:" + _baseSpecialPlayerCache.Count() + ", ";
                                    mm += "12:" + _verboseSpecialPlayerCache.Count() + ", ";
                                    mm += "13:" + _roundAssists.Count() + ", ";
                                    mm += "14:" + _PlayerDictionary.Count() + ", ";
                                    mm += "15:" + _RoundOverSquads.Count() + ", ";
                                    mm += "16:" + _PlayerLeftDictionary.Count() + ", ";
                                    mm += "17:" + _FetchedPlayers.Count() + ", ";
                                    mm += "18:" + _topPlayers.Count() + ", ";
                                    mm += "19:" + _populatorPlayers.Count() + ", ";
                                    mm += "20:" + _tsPlayers.Count() + ", ";
                                    mm += "21:" + _RoundCookers.Count() + ", ";
                                    mm += "22:" + _BanEnforcerCheckingQueue.Count() + ", ";
                                    mm += "23:" + _HackerCheckerQueue.Count() + ", ";
                                    mm += "24:" + _KillProcessingQueue.Count() + ", ";
                                    mm += "25:" + _PlayerListProcessingQueue.Count() + ", ";
                                    mm += "26:" + _PlayerRemovalProcessingQueue.Count() + ", ";
                                    mm += "27:" + _SettingUploadQueue.Count() + ", ";
                                    mm += "28:" + _UnparsedCommandQueue.Count() + ", ";
                                    mm += "29:" + _UnparsedMessageQueue.Count() + ", ";
                                    mm += "30:" + _UnprocessedActionQueue.Count() + ", ";
                                    mm += "31:" + _UnprocessedRecordQueue.Count() + ", ";
                                    mm += "32:" + _UnprocessedStatisticQueue.Count() + ", ";
                                    mm += "33:" + _UserRemovalQueue.Count() + ", ";
                                    mm += "34:" + _UserUploadQueue.Count() + ", ";
                                    mm += "35:" + _BattlelogFetchQueue.Count() + ", ";
                                    mm += "36:" + _IPInfoFetchQueue.Count() + ", ";
                                    Log.Warn(MBUsed + "MB estimated memory used." + mm);
                                    lastMemoryWarning = UtcNow();
                                }
                            }

                            //Post battlelog action times
                            lock (_BattlelogActionTimes) {
                                if (_BattlelogActionTimes.Any() && NowDuration(_lastBattlelogFrequencyMessage).TotalSeconds > 30) {
                                    while (_BattlelogActionTimes.Any() && NowDuration(_BattlelogActionTimes.Peek()).TotalMinutes > 4) {
                                        _BattlelogActionTimes.Dequeue();
                                    }
                                    if (false && _isTestingAuthorized) {
                                        var frequency = Math.Round(_BattlelogActionTimes.Count() / 4.0, 2);
                                        Log.Info("Average battlelog request frequency: " + frequency + " r/m, HC: " + _HackerCheckerQueue.Count() + ", BF: " + _BattlelogFetchQueue.Count());
                                        QueueStatisticForProcessing(new AdKatsStatistic() {
                                            stat_type = AdKatsStatistic.StatisticType.battlelog_requestfreq,
                                            server_id = _serverInfo.ServerID,
                                            round_id = _roundID,
                                            target_name = _serverInfo.InfoObject.Map,
                                            stat_value = frequency,
                                            stat_comment = frequency + " r/m, HC: " + _HackerCheckerQueue.Count() + ", BF: " + _BattlelogFetchQueue.Count(),
                                            stat_time = UtcNow()
                                        });
                                    }
                                    _lastBattlelogFrequencyMessage = UtcNow();
                                }
                            }

                            //Check for unswitcher disable every 20 seconds
                            if (_pluginEnabled && _MULTIBalancerUnswitcherDisabled && (UtcNow() - _LastPlayerMoveIssued).TotalSeconds > 20)
                            {
                                Log.Debug(() => "MULTIBalancer Unswitcher Re-Enabled", 3);
                                ExecuteCommand("procon.protected.plugins.call", "MULTIbalancer", "UpdatePluginData", "AdKats", "bool", "DisableUnswitcher", "False");
                                _MULTIBalancerUnswitcherDisabled = false;
                            }
                            
                            if (_isTestingAuthorized && 
                                (UtcNow() - _proconStartTime).TotalHours > 24 && 
                                _populationStatus != PopulationState.High &&
                                !_databaseConnectionCriticalState) {
                                Environment.Exit(4533);
                            }

                            //Check for plugin updates at interval
                            if ((UtcNow() - _LastPluginDescFetch).TotalHours > 1 || (_isTestingAuthorized && (UtcNow() - _LastPluginDescFetch).TotalMinutes > 10))
                            {
                                FetchPluginDocumentation();
                            }

                            //Post usage stats at interval
                            if ((!_versionTrackingDisabled || _pluginVersionStatus == VersionStatus.TestBuild || _isTestingAuthorized) && (UtcNow() - _LastVersionTrackingUpdate).TotalHours > 1 && (_threadsReady || (UtcNow() - _proconStartTime).TotalSeconds > 30))
                            {
                                PostVersionTracking();
                            }

                            //Post usage stats at interval
                            if (((UtcNow() - _LastWeaponCodePost).TotalMinutes > 20 || !_PostedWeaponCodes) && _firstPlayerListComplete)
                            {
                                PostWeaponCodes();
                            }
                            
                            //Run SpamBot
                            if (_pluginEnabled && 
                                _spamBotEnabled && 
                                _firstPlayerListComplete && 
                                _PlayerDictionary.Any())
                            {
                                if ((UtcNow() - _spamBotSayLastPost).TotalSeconds > _spamBotSayDelaySeconds && _spamBotSayQueue.Any()) {
                                    String message = "[SpamBotMessage]" + _spamBotSayQueue.Peek();
                                    if (message.Contains("%Round25KDate%")) {
                                        var futureDate = FetchFutureRoundDate(25000);
                                        message = message.Replace("%Round25KDate%", futureDate.ToShortDateString() + " (" + FormatTimeString(futureDate - UtcNow(), 2) + ")");
                                    }
                                    if (_spamBotExcludeAdminsAndWhitelist) {
                                        if (!String.IsNullOrEmpty(message)) {
                                            OnlineNonWhitelistSayMessage(message);
                                        }
                                    } else {
                                        if (!String.IsNullOrEmpty(message)) {
                                            AdminSayMessage(message);
                                        }
                                    }
                                    _spamBotSayQueue.Enqueue(_spamBotSayQueue.Dequeue());
                                    _spamBotSayLastPost = UtcNow();
                                }
                                if ((UtcNow() - _spamBotYellLastPost).TotalSeconds > _spamBotYellDelaySeconds && _spamBotYellQueue.Any()) {
                                    String message = "[SpamBotMessage]" + _spamBotYellQueue.Peek();
                                    if (message.Contains("%Round25KDate%")) {
                                        var futureDate = FetchFutureRoundDate(25000);
                                        message = message.Replace("%Round25KDate%", futureDate.ToShortDateString() + " (" + FormatTimeString(futureDate - UtcNow(), 2) + ")");
                                    }
                                    if (_spamBotExcludeAdminsAndWhitelist) {
                                        if (!String.IsNullOrEmpty(message)) {
                                            OnlineNonWhitelistYellMessage(message);
                                        }
                                    } else {
                                        if (!String.IsNullOrEmpty(message)) {
                                            AdminYellMessage(message);
                                        }
                                    }
                                    _spamBotYellQueue.Enqueue(_spamBotYellQueue.Dequeue());
                                    _spamBotYellLastPost = UtcNow();
                                }
                                if ((UtcNow() - _spamBotTellLastPost).TotalSeconds > _spamBotTellDelaySeconds && _spamBotTellQueue.Any()) {
                                    String message = "[SpamBotMessage]" + _spamBotTellQueue.Peek();
                                    if (message.Contains("%Round25KDate%")) {
                                        var futureDate = FetchFutureRoundDate(25000);
                                        message = message.Replace("%Round25KDate%", futureDate.ToShortDateString() + " (" + FormatTimeString(futureDate - UtcNow(), 2) + ")");
                                    }
                                    if (_spamBotExcludeAdminsAndWhitelist) {
                                        if (!String.IsNullOrEmpty(message)) {
                                            OnlineNonWhitelistTellMessage(message);
                                        }
                                    } else {
                                        if (!String.IsNullOrEmpty(message)) {
                                            AdminTellMessage(message);
                                        }
                                    }
                                    _spamBotTellQueue.Enqueue(_spamBotTellQueue.Dequeue());
                                    _spamBotTellLastPost = UtcNow();
                                }
                            }

                            //Run long keep alive every 5 minutes
                            if ((UtcNow() - lastLongKeepAliveCheck).TotalMinutes > 5) {
                                //Player listing check
                                if (_pluginEnabled && 
                                    _firstPlayerListComplete && 
                                    (UtcNow() - _lastSuccessfulPlayerList) > TimeSpan.FromMinutes(5)) {
                                    if (_isTestingAuthorized) {
                                        //Create report record
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_report"),
                                            command_numeric = 0,
                                            target_name = "AdKats",
                                            source_name = "AdKats",
                                            record_message = "Player listing offline. Inform ColColonCleaner.",
                                            record_time = UtcNow()
                                        });
                                    }
                                }

                                //Auto-squad-leader
                                if (false &&
                                    _isTestingAuthorized && 
                                    _firstPlayerListComplete &&
                                    _gameVersion == GameVersion.BF4 &&
                                    _roundState == RoundState.Playing &&
                                    _serverInfo.GetRoundElapsedTime().TotalMinutes > 1) {
                                    var onlinePlayers = _PlayerDictionary.Values.ToList();
                                    var squads = onlinePlayers.GroupBy(aPlayer => new {
                                        aPlayer.frostbitePlayerInfo.TeamID,
                                        aPlayer.frostbitePlayerInfo.SquadID
                                    });
                                    foreach (var squad in squads) {
                                        Int32 topScore = 0;
                                        AdKatsPlayer topPlayer = null;
                                        foreach (var aPlayer in squad) {
                                            if (aPlayer.frostbitePlayerInfo.Score > topScore) {
                                                topScore = aPlayer.frostbitePlayerInfo.Score;
                                                topPlayer = aPlayer;
                                            }
                                        }
                                        if (topPlayer != null) {
                                            Thread.Sleep(100);
                                            ExecuteCommand(
                                                "procon.protected.send", 
                                                "squad.leader", 
                                                topPlayer.frostbitePlayerInfo.TeamID.ToString(), 
                                                topPlayer.frostbitePlayerInfo.SquadID.ToString(), 
                                                topPlayer.player_name);
                                        }
                                    }
                                }

                                if (_isTestingAuthorized && _roundState == RoundState.Playing) {
                                    var players = _PlayerDictionary.Values.ToList();
                                    double total = players.Count();
                                    if (total > 0) {
                                        double over100 = players.Count(aPlayer => aPlayer.player_ping_avg > 100);
                                        double over150 = players.Count(aPlayer => aPlayer.player_ping_avg > 150);
                                        double over200 = players.Count(aPlayer => aPlayer.player_ping_avg > 200);
                                        double over100p = Math.Round(over100 / total * 100, 1);
                                        double over150p = Math.Round(over150 / total * 100, 1);
                                        double over200p = Math.Round(over200 / total * 100, 1);
                                        string over100t = "Over 100ms: (" + Math.Round(over100) + "/" + total + ") " + over100p + "%";
                                        string over150t = "Over 150ms: (" + Math.Round(over150) + "/" + total + ") " + over150p + "%";
                                        string over200t = "Over 200ms: (" + Math.Round(over200) + "/" + total + ") " + over200p + "%";
                                        QueueStatisticForProcessing(new AdKatsStatistic() {
                                            stat_type = AdKatsStatistic.StatisticType.ping_over100,
                                            server_id = _serverInfo.ServerID,
                                            round_id = _roundID,
                                            target_name = _serverInfo.InfoObject.Map,
                                            stat_value = over100p,
                                            stat_comment = over100t,
                                            stat_time = UtcNow()
                                        });
                                        QueueStatisticForProcessing(new AdKatsStatistic() {
                                            stat_type = AdKatsStatistic.StatisticType.ping_over150,
                                            server_id = _serverInfo.ServerID,
                                            round_id = _roundID,
                                            target_name = _serverInfo.InfoObject.Map,
                                            stat_value = over150p,
                                            stat_comment = over150t,
                                            stat_time = UtcNow()
                                        });
                                        QueueStatisticForProcessing(new AdKatsStatistic() {
                                            stat_type = AdKatsStatistic.StatisticType.ping_over200,
                                            server_id = _serverInfo.ServerID,
                                            round_id = _roundID,
                                            target_name = _serverInfo.InfoObject.Map,
                                            stat_value = over200p,
                                            stat_comment = over200t,
                                            stat_time = UtcNow()
                                        });
                                        //Log.Info(over100t + ", " + over150t + ", " + over200t);
                                    }
                                }

                                lastLongKeepAliveCheck = UtcNow();
                            }

                            //Check for short keep alive every 30 seconds
                            if ((UtcNow() - lastShortKeepAliveCheck).TotalSeconds > 30) {

                                if (_UseTopPlayerMonitor && _isTestingAuthorized && _firstPlayerListComplete) {
                                    var onlineTopPlayers = _PlayerDictionary.Values.ToList()
                                        .Where(aPlayer =>
                                            _topPlayers.ContainsKey(aPlayer.player_name));
                                    AdKatsTeam t1, t2;
                                    if (_previousRoundDuration != TimeSpan.Zero && _roundState != RoundState.Loaded && GetTeamByID(1, out t1) && GetTeamByID(2, out t2))
                                    {
                                        Double t1Power = t1.getTeamPower();
                                        Double t2Power = t2.getTeamPower();
                                        Double percDiff = Math.Abs(t1Power - t2Power) / ((t1Power + t2Power) / 2.0) * 100.0;
                                        String message = "TeamPower: ";
                                        if (t1Power > t2Power)
                                        {
                                            message += t1.TeamKey + " up " + Math.Round(((t1Power - t2Power) / t2Power) * 100) + "% ";
                                        }
                                        else
                                        {
                                            message += t2.TeamKey + " up " + Math.Round(((t2Power - t1Power) / t1Power) * 100) + "% ";
                                        }
                                        message += "(" + t1.TeamKey + ":" + t1.getTeamPower() + " / " + t2.TeamKey + ":" + t2.getTeamPower() + ")";
                                        ProconChatWrite(Log.FBold(message));
                                        if (_PlayerDictionary.ContainsKey("ColColonCleaner")) {
                                            PlayerSayMessage("ColColonCleaner", message);
                                        }
                                    }
                                }

                                if (_isTestingAuthorized && _serverInfo.ServerID == 1 && _roundID > 0) {
                                    if (_roundID >= 25000 + 10 || _roundID < 25000 - 400) {
                                        this.ExecuteCommand("procon.protected.send", "vars.serverName", "=ADK= #7 | 24/7 Operation Metro NO EXPLOSIVES | ADKGamers.com");
                                    } else if (_roundID >= 25000) {
                                        String result = "";
                                        switch (_roundID) {
                                            case 25000:
                                                result = " KNIVES!";
                                                break;
                                            case 25001:
                                                result = " HC BOLT!";
                                                break;
                                            case 25002:
                                                result = " MARES LEG!";
                                                break;
                                            case 25003:
                                                result = " DEFIBS!";
                                                break;
                                            case 25004:
                                                result = " BOW/KNIVES!";
                                                break;
                                            case 25005:
                                                result = " REPAIR TOOLS!";
                                                break;
                                            case 25006:
                                                result = " PISTOLS!";
                                                break;
                                            case 25007:
                                                result = " ALL WEAPONS!";
                                                break;
                                            case 25008:
                                                result = " ALL WEAPONS!";
                                                break;
                                            case 25009:
                                                result = " ALL WEAPONS!";
                                                break;
                                        }
                                        this.ExecuteCommand("procon.protected.send", "vars.serverName", "=ADK= #7 | 24/7 Metro | ROUND 25,000 EVENT!" + result);
                                    } else {
                                        this.ExecuteCommand("procon.protected.send", "vars.serverName", "=ADK= #7 | 24/7 Operation Metro NO EXPLOSIVES | Round " + String.Format("{0:n0}", _roundID));
                                    }
                                }

                                //Team operations
                                AdKatsTeam team1, team2, winningTeam, losingTeam;
                                if (GetTeamByID(1, out team1) && GetTeamByID(2, out team2)) {
                                    if (team1.TeamTicketCount > team2.TeamTicketCount) {
                                        winningTeam = team1;
                                        losingTeam = team2;
                                    } else {
                                        winningTeam = team2;
                                        losingTeam = team1;
                                    }

                                    //Auto-assist
                                    if (_roundState == RoundState.Playing &&
                                        _serverInfo.GetRoundElapsedTime().TotalMinutes > 5 && 
                                        Math.Abs(winningTeam.TeamTicketCount - losingTeam.TeamTicketCount) > 100 && 
                                        winningTeam.GetTicketDifferenceRate() > losingTeam.GetTicketDifferenceRate() &&
                                        !_Team1MoveQueue.Any() &&
                                        !_Team2MoveQueue.Any() &&
                                        (!_isTestingAuthorized || (_serverInfo.ServerID != 1 || losingTeam.TeamTicketCount > 400))) {
                                        foreach (var aPlayer in GetOnlinePlayerDictionaryOfGroup("blacklist_autoassist").Values
                                            .Where(dPlayer => dPlayer.frostbitePlayerInfo.TeamID == winningTeam.TeamID)) {
                                            Thread.Sleep(2000);
                                            _PlayersAutoAssistedThisRound = true;
                                            QueueRecordForProcessing(new AdKatsRecord {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("self_assist"),
                                                command_action = GetCommandByKey("self_assist_unconfirmed"),
                                                target_name = aPlayer.player_name,
                                                target_player = aPlayer,
                                                source_name = "AUAManager",
                                                record_message = "Auto-assist Weak Team [" + winningTeam.TeamTicketCount + ":" + losingTeam.TeamTicketCount + "][" + FormatTimeString(_serverInfo.GetRoundElapsedTime(), 3) + "]",
                                                record_time = UtcNow()
                                            });
                                        }
                                    }
                                }

                                if (_TeamspeakPlayerMonitorEnable)
                                {
                                    Boolean accessUpdateRequired = false;
                                    List<AdKatsPlayer> onlineTeamspeakPlayers = new List<AdKatsPlayer>();
                                    //Check for online teamspeak players
                                    foreach (TeamSpeakClientViewer.TeamspeakClient client in _tsViewer.GetPlayersOnTs())
                                    {
                                        IEnumerable<AdKatsPlayer> matching = _PlayerDictionary.Values.ToList().Where(dPlayer => 
                                            // Do not include spectators in this list
                                            dPlayer.player_type != PlayerType.Spectator &&
                                            // Match by IP or by name (only if no IP is available), percent matching over 80%
                                            ((!String.IsNullOrEmpty(client.AdvIpAddress) && !String.IsNullOrEmpty(dPlayer.player_ip) && client.AdvIpAddress == dPlayer.player_ip) || 
                                             ((String.IsNullOrEmpty(client.AdvIpAddress) || String.IsNullOrEmpty(dPlayer.player_ip)) && PercentMatch(client.TsName, dPlayer.player_name) > 80)));
                                        if (_tsViewer.DbgClients)
                                        {
                                            Log.Info("TSClient: " + client.TsName + " | " + client.AdvIpAddress + " | " + ((matching.Any()) ? (matching.Count() + " online players match client.") : ("No matching online players.")));
                                        }
                                        onlineTeamspeakPlayers.AddRange(matching);
                                    }
                                    List<String> validTsPlayers = new List<String>();
                                    foreach (AdKatsPlayer aPlayer in onlineTeamspeakPlayers)
                                    {
                                        validTsPlayers.Add(aPlayer.player_name);
                                        if (!_tsPlayers.ContainsKey(aPlayer.player_name))
                                        {
                                            if (_tsViewer.DbgClients)
                                            {
                                                Log.Success("Teamspeak soldier " + aPlayer.player_name + " connected.");
                                            }
                                            switch (_tsViewer.JoinDisplay) {
                                                case TeamSpeakClientViewer.JoinDisplayType.Say:
                                                    AdminSayMessage(_tsViewer.JoinDisplayMessage
                                                        .Replace("%player%", aPlayer.GetVerboseName()));
                                                    break;
                                                case TeamSpeakClientViewer.JoinDisplayType.Yell:
                                                    AdminYellMessage(_tsViewer.JoinDisplayMessage
                                                        .Replace("%player%", aPlayer.GetVerboseName()));
                                                    break;
                                                case TeamSpeakClientViewer.JoinDisplayType.Tell:
                                                    AdminTellMessage(_tsViewer.JoinDisplayMessage
                                                        .Replace("%player%", aPlayer.GetVerboseName()));
                                                    break;
                                            }
                                            accessUpdateRequired = true;
                                        }
                                        _tsPlayers[aPlayer.player_name] = aPlayer;
                                    }
                                    foreach (string removePlayer in _tsPlayers.Keys.ToList().Where(key => !validTsPlayers.Contains(key)).ToList())
                                    {
                                        if (_tsViewer.DbgClients)
                                        {
                                            Log.Success("Teamspeak soldier " + removePlayer + " disconnected.");
                                        }
                                        accessUpdateRequired = true;
                                        _tsPlayers.Remove(removePlayer);
                                    }
                                    if (accessUpdateRequired)
                                    {
                                        FetchAllAccess(true);
                                    }
                                }

                                if (_pluginEnabled && _threadsReady && _firstPlayerListComplete && _enforceSingleInstance)
                                {
                                    AdminSayMessage("/AdKatsInstanceCheck " + _instanceKey + " " + Math.Round((UtcNow() - _AdKatsRunningTime).TotalSeconds), false);
                                }

                                //Enable if auto-enable wanted
                                if (_useKeepAlive && !_pluginEnabled)
                                {
                                    Enable();
                                }

                                //Clean dead threads
                                foreach (Int32 deadThreadID in _aliveThreads.Values.ToList().Where(thread => !thread.IsAlive).Select(thread => thread.ManagedThreadId))
                                {
                                    _aliveThreads.Remove(deadThreadID);
                                }
                                //Check for thread warning
                                if (_aliveThreads.Count() >= 20)
                                {
                                    String aliveThreads = "";
                                    lock (_aliveThreads)
                                    {
                                        foreach (Thread value in _aliveThreads.Values.ToList())
                                        {
                                            aliveThreads = aliveThreads + (value.Name + "[" + value.ManagedThreadId + "] ");
                                        }
                                    }
                                    Log.Warn("Thread warning: " + aliveThreads);
                                }

                                //Perform AFK processing
                                if (_AFKManagerEnable && _AFKAutoKickEnable && (_PlayerDictionary.Count > _AFKTriggerMinimumPlayers))
                                {
                                    //Double list conversion
                                    List<AdKatsPlayer> afkPlayers = _PlayerDictionary.Values.ToList().Where(aPlayer => (UtcNow() - aPlayer.lastAction).TotalMinutes > _AFKTriggerDurationMinutes && aPlayer.player_type != PlayerType.Spectator && !PlayerIsAdmin(aPlayer)).Take(_PlayerDictionary.Count - _AFKTriggerMinimumPlayers).ToList();
                                    if (_AFKIgnoreUserList)
                                    {
                                        IEnumerable<string> userSoldierGuids = FetchAllUserSoldiers().Select(aPlayer => aPlayer.player_guid);
                                        afkPlayers = afkPlayers.Where(aPlayer => !userSoldierGuids.Contains(aPlayer.player_guid)).ToList();
                                    }
                                    else
                                    {
                                        afkPlayers = afkPlayers.Where(aPlayer => !_AFKIgnoreRoles.Contains(aPlayer.player_role.role_key)).ToList();
                                    }
                                    foreach (AdKatsPlayer aPlayer in afkPlayers)
                                    {
                                        String afkTime = FormatTimeString(UtcNow() - aPlayer.lastAction, 2);
                                        Log.Debug(() => "Kicking " + aPlayer.player_name + " for being AFK " + afkTime + ".", 3);
                                        AdKatsRecord record = new AdKatsRecord
                                        {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_kick"),
                                            command_numeric = 0,
                                            target_name = aPlayer.player_name,
                                            target_player = aPlayer,
                                            source_name = "AFKManager",
                                            record_message = "AFK time exceeded [" + afkTime + "/" + GetPlayerTeamKey(aPlayer) + "]. Please rejoin once you return.",
                                            record_time = UtcNow()
                                        };
                                        QueueRecordForProcessing(record);
                                        //Only take one
                                        break;
                                    }

                                    //TODO: Once MULTIBalancer adds registered commands, check for availability
                                }

                                lastShortKeepAliveCheck = UtcNow();
                            }

                            if (_threadsReady && NowDuration(_LastServerInfoFire).TotalSeconds > 9.5)
                            {
                                ExecuteCommand("procon.protected.send", "serverInfo");
                            }

                            if (_threadsReady && NowDuration(_LastPlayerListFire).TotalSeconds > 9.5)
                            {
                                ExecuteCommand("procon.protected.send", "admin.listPlayers", "all");
                            }

                            //Auto-Nuke Slay Duration
                            var duration = NowDuration(_surrenderAutoNukeLast);
                            var nukeInfoMessage = "";
                            var durationIncrease = _surrenderAutoNukeDurationIncrease * Math.Max(_autoNukesThisRound - 1, 0);
                            if (!_autoNukeActive)
                            {
                                switch (_populationStatus)
                                {
                                    case PopulationState.High:
                                        _autoNukeDuration = _surrenderAutoNukeDurationHigh + durationIncrease;
                                        nukeInfoMessage = "High population nuke: " + _surrenderAutoNukeDurationHigh + (durationIncrease > 0 ? " + " + durationIncrease : "") + " seconds.";
                                        break;
                                    case PopulationState.Medium:
                                        _autoNukeDuration = _surrenderAutoNukeDurationMed + durationIncrease;
                                        nukeInfoMessage = "Medium population nuke: " + _surrenderAutoNukeDurationMed + (durationIncrease > 0 ? " + " + durationIncrease : "") + " seconds.";
                                        break;
                                    case PopulationState.Low:
                                        _autoNukeDuration = _surrenderAutoNukeDurationLow + durationIncrease;
                                        nukeInfoMessage = "Low population nuke: " + _surrenderAutoNukeDurationLow + (durationIncrease > 0 ? " + " + durationIncrease : "") + " seconds.";
                                        break;
                                }
                            }
                            if (_surrenderAutoNukeLastTeam != null && _autoNukeDuration > 0)
                            {
                                if (duration.TotalSeconds < _autoNukeDuration)
                                {
                                    if (!_autoNukeActive)
                                    {
                                        OnlineAdminSayMessage(nukeInfoMessage);
                                    }
                                    _autoNukeActive = true;
                                    Int32 endDuration = (int)NowDuration(_surrenderAutoNukeLast.AddSeconds(_autoNukeDuration)).TotalSeconds;
                                    if (endDuration > 0 && endDuration % 2 == 0)
                                    {
                                        AdminTellMessage(_surrenderAutoNukeLastTeam.TeamKey + " nuke active for " + endDuration + " seconds!");
                                    }
                                }
                                else if (_autoNukeActive)
                                {
                                    _autoNukeActive = false;
                                    _autoNukeDuration = 0;
                                    AdminTellMessage(_surrenderAutoNukeLastTeam.TeamKey + " nuke has ended!");
                                }
                            }

                            //Sleep 1 second between loops
                            Thread.Sleep(TimeSpan.FromSeconds(1));
                        }
                        catch (Exception e)
                        {
                            HandleException(new AdKatsException("Error in status monitor. Skipping current loop.", e));
                        }
                    }
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while running status monitor.", e));
                }
            }));
            //Start the thread
            statusMonitorThread.Start();
        }

        public void InitWaitHandles()
        {
            //Initializes all wait handles 
            _threadMasterWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _TeamswapWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _PlayerProcessingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _AccessFetchWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _KillProcessingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _PlayerListUpdateWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _MessageParsingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _CommandParsingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _DbCommunicationWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _ActionHandlingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _BanEnforcerWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _HackerCheckerWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _ServerInfoWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _StatLoggerStatusWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _PluginDescriptionWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            _BattlelogCommWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
        }

        public void OpenAllHandles()
        {
            _threadMasterWaitHandle.Set();
            _TeamswapWaitHandle.Set();
            _PlayerProcessingWaitHandle.Set();
            _AccessFetchWaitHandle.Set();
            _KillProcessingWaitHandle.Set();
            _PlayerListUpdateWaitHandle.Set();
            _MessageParsingWaitHandle.Set();
            _CommandParsingWaitHandle.Set();
            _DbCommunicationWaitHandle.Set();
            _ActionHandlingWaitHandle.Set();
            _BanEnforcerWaitHandle.Set();
            _HackerCheckerWaitHandle.Set();
            _ServerInfoWaitHandle.Set();
            _StatLoggerStatusWaitHandle.Set();
            _BattlelogCommWaitHandle.Set();
            _EmailHandler._EmailProcessingWaitHandle.Set();
        }

        public void InitThreads()
        {
            try
            {
                //Creats all threads with their starting methods and set to run in the background
                _PlayerListingThread = new Thread(PlayerListingThreadLoop)
                {
                    IsBackground = true
                };

                _AccessFetchingThread = new Thread(AccessFetchingThreadLoop)
                {
                    IsBackground = true
                };

                _KillProcessingThread = new Thread(KillProcessingThreadLoop)
                {
                    IsBackground = true
                };

                _MessageProcessingThread = new Thread(MessagingThreadLoop)
                {
                    IsBackground = true
                };

                _CommandParsingThread = new Thread(CommandParsingThreadLoop)
                {
                    IsBackground = true
                };

                _DatabaseCommunicationThread = new Thread(DatabaseCommunicationThreadLoop)
                {
                    IsBackground = true
                };

                _ActionHandlingThread = new Thread(ActionHandlingThreadLoop)
                {
                    IsBackground = true
                };

                _TeamSwapThread = new Thread(TeamswapThreadLoop)
                {
                    IsBackground = true
                };

                _BanEnforcerThread = new Thread(BanEnforcerThreadLoop)
                {
                    IsBackground = true
                };

                _HackerCheckerThread = new Thread(HackerCheckerThreadLoop)
                {
                    IsBackground = true
                };

                _BattlelogCommThread = new Thread(BattlelogCommThreadLoop)
                {
                    IsBackground = true
                };

                _IPAPICommThread = new Thread(IPAPICommThreadLoop)
                {
                    IsBackground = true
                };
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured while initializing threads.", e));
            }
        }

        public void StartThreads()
        {
            Log.Debug(() => "Entering StartThreads", 7);
            try
            {
                //Start the main thread
                OnlineAdminSayMessage("AdKats starting.");
                //Reset the master wait handle
                _threadMasterWaitHandle.Reset();
                //DB Comm is the heart of AdKats, everything revolves around that thread
                StartAndLogThread(_DatabaseCommunicationThread);
                //Battlelog comm and IP API threads are independant
                StartAndLogThread(_BattlelogCommThread);
                StartAndLogThread(_IPAPICommThread);
                //Other threads are started within the db comm thread
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while starting processing threads.", e));
            }
            Log.Debug(() => "Exiting StartThreads", 7);
        }

        private void Disable()
        {
            //Call Disable
            ExecuteCommand("procon.protected.plugins.enable", "AdKats", "False");
            //Set enabled false so threads begin exiting
            _pluginEnabled = false;
            _threadsReady = false;
        }

        private void Enable()
        {
            if (Thread.CurrentThread.Name == "Finalizer")
            {
                Thread pluginRebootThread = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting a reboot thread.", 5);
                    try
                    {
                        Thread.CurrentThread.Name = "Reboot";
                        Thread.Sleep(1000);
                        //Call Enable
                        ExecuteCommand("procon.protected.plugins.enable", "AdKats", "True");
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while running reboot."));
                    }
                    Log.Debug(() => "Exiting a reboot thread.", 5);
                    LogThreadExit();
                }));
                StartAndLogThread(pluginRebootThread);
            }
            else
            {
                //Call Enable
                ExecuteCommand("procon.protected.plugins.enable", "AdKats", "True");
            }
        }

        public void OnPluginLoadingEnv(List<String> lstPluginEnv)
        {
            foreach (String env in lstPluginEnv)
            {
                Log.Debug(() => "^9OnPluginLoadingEnv: " + env, 7);
            }
            switch (lstPluginEnv[1])
            {
                case "BF3":
                    _gameVersion = GameVersion.BF3;
                    break;
                case "BF4":
                    _gameVersion = GameVersion.BF4;
                    break;
                case "BFHL":
                    _gameVersion = GameVersion.BFHL;
                    break;
            }
            Log.Debug(() => "^1Game Version: " + _gameVersion, 1);

            //Initialize the Email Handler
            _EmailHandler = new EmailHandler(this);

            //Initialize PushBullet Handler
            _PushBulletHandler = new PushBulletHandler(this);
        }

        public override void OnVersion(String serverType, String version)
        {
            _serverInfo.GamePatchVersion = version;
        }

        public override void OnTeamFactionOverride(Int32 targetTeamID, Int32 overrideTeamId)
        {
            if (!_acceptingTeamUpdates)
            {
                return;
            }
            try
            {
                switch (overrideTeamId)
                {
                    case -1:
                        //Check for already existing Neutral team
                        if (_serverInfo.GetRoundElapsedTime().TotalSeconds > 20 && _teamDictionary.ContainsKey(targetTeamID) && _teamDictionary[targetTeamID].TeamKey == "Neutral")
                        {
                            Log.Debug(() => "Neutral Team already set for team " + targetTeamID + ", cancelling override.", 4);
                            break;
                        }
                        _teamDictionary[targetTeamID] = new AdKatsTeam(this, targetTeamID, "Neutral", "Neutral Team", "Neutral Team");
                        Log.Debug(() => "Assigning team ID " + targetTeamID + " to Neutral ", 4);
                        break;
                    case 0:
                        switch (_gameVersion)
                        {
                            case GameVersion.BF3:
                            case GameVersion.BF4:
                                //Check for already existing US team
                                if (_serverInfo.GetRoundElapsedTime().TotalSeconds > 20 && _teamDictionary.ContainsKey(targetTeamID) && _teamDictionary[targetTeamID].TeamKey == "US")
                                {
                                    Log.Debug(() => "Team US already set for team " + targetTeamID + ", cancelling override.", 4);
                                    break;
                                }
                                _teamDictionary[targetTeamID] = new AdKatsTeam(this, targetTeamID, "US", "US Army", "United States Army");
                                Log.Debug(() => "Assigning team ID " + targetTeamID + " to US ", 4);
                                break;
                            case GameVersion.BFHL:
                                //Check for already existing US team
                                if (_serverInfo.GetRoundElapsedTime().TotalSeconds > 20 && _teamDictionary.ContainsKey(targetTeamID) && _teamDictionary[targetTeamID].TeamKey == "Cops")
                                {
                                    Log.Debug(() => "Team Cops already set for team " + targetTeamID + ", cancelling override.", 4);
                                    break;
                                }
                                _teamDictionary[targetTeamID] = new AdKatsTeam(this, targetTeamID, "LE", "Cops", "Law Enforcement");
                                Log.Debug(() => "Assigning team ID " + targetTeamID + " to Cops ", 4);
                                break;
                        }
                        break;
                    case 1:
                        switch (_gameVersion)
                        {
                            case GameVersion.BF3:
                            case GameVersion.BF4:
                                //Check for already existing RU team
                                if (_serverInfo.GetRoundElapsedTime().TotalSeconds > 20 && _teamDictionary.ContainsKey(targetTeamID) && _teamDictionary[targetTeamID].TeamKey == "RU")
                                {
                                    Log.Debug(() => "Team RU already set for team " + targetTeamID + ", cancelling override.", 4);
                                    break;
                                }
                                _teamDictionary[targetTeamID] = new AdKatsTeam(this, targetTeamID, "RU", "Russian Army", "Russian Federation Army");
                                Log.Debug(() => "Assigning team ID " + targetTeamID + " to RU", 4);
                                break;
                            case GameVersion.BFHL:
                                //Check for already existing RU team
                                if (_serverInfo.GetRoundElapsedTime().TotalSeconds > 20 && _teamDictionary.ContainsKey(targetTeamID) && _teamDictionary[targetTeamID].TeamKey == "Crims")
                                {
                                    Log.Debug(() => "Team Crims already set for team " + targetTeamID + ", cancelling override.", 4);
                                    break;
                                }
                                _teamDictionary[targetTeamID] = new AdKatsTeam(this, targetTeamID, "CR", "Crims", "Criminals");
                                Log.Debug(() => "Assigning team ID " + targetTeamID + " to Crims", 4);
                                break;
                        }
                        break;
                    case 2:
                        switch (_gameVersion)
                        {
                            case GameVersion.BF3:
                            case GameVersion.BF4:
                                //Check for already existing CN team
                                if (_serverInfo.GetRoundElapsedTime().TotalSeconds > 20 && _teamDictionary.ContainsKey(targetTeamID) && _teamDictionary[targetTeamID].TeamKey == "CN")
                                {
                                    Log.Debug(() => "Team CN already set for team " + targetTeamID + ", cancelling override.", 4);
                                    break;
                                }
                                _teamDictionary[targetTeamID] = new AdKatsTeam(this, targetTeamID, "CN", "Chinese Army", "Chinese People's Liberation Army");
                                Log.Debug(() => "Assigning team ID " + targetTeamID + " to CN", 4);
                                break;
                            default:
                                Log.Error("Attempted to use team key 2 on non-BF3/BF4 server.");
                                break;
                        }
                        break;
                    default:
                        Log.Error("Team ID " + overrideTeamId + " was not understood.");
                        break;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while processing team faction override.", e));
            }
        }

        public override void OnFairFight(bool isEnabled)
        {
            _serverInfo.FairFightEnabled = isEnabled;
        }

        public override void OnIsHitIndicator(bool isEnabled)
        {
            _serverInfo.HitIndicatorEnabled = isEnabled;
        }

        public override void OnCommander(bool isEnabled)
        {
            _serverInfo.CommanderEnabled = isEnabled;
        }

        public override void OnForceReloadWholeMags(bool isEnabled)
        {
            _serverInfo.ForceReloadWholeMags = isEnabled;
        }

        public override void OnServerType(String serverType)
        {
            _serverInfo.ServerType = serverType;
        }

        //procon.public.accounts.create
        //procon.public.accounts.delete
        //procon.public.accounts.setPassword
        public override void OnGameAdminLoad()
        {
            Log.Info("OnGameAdminLoad");
        }

        public override void OnGameAdminSave()
        {
            Log.Info("OnGameAdminSave");
        }

        public override void OnGameAdminPlayerAdded(String soldierName)
        {
            Log.Info("OnGameAdminPlayerAdded " + soldierName);
        }

        public override void OnGameAdminPlayerRemoved(String soldierName)
        {
            Log.Info("OnGameAdminPlayerRemoved " + soldierName);
        }

        public override void OnGameAdminCleared()
        {
            Log.Info("OnGameAdminCleared");
        }

        public override void OnGameAdminList(List<String> soldierNames)
        {
            foreach (string soldierName in soldierNames)
            {
                Log.Info("OnGameAdminList " + soldierName);
            }
        }

        public void UpdateFactions()
        {
            try
            {
                _acceptingTeamUpdates = true;
                _teamDictionary.Clear();
                _teamDictionary[0] = new AdKatsTeam(this, 0, "Neutral", "Neutrals", "Neutral Players");
                if (_gameVersion == GameVersion.BF3)
                {
                    OnTeamFactionOverride(1, 0);
                    OnTeamFactionOverride(2, 1);
                    OnTeamFactionOverride(3, 0);
                    OnTeamFactionOverride(4, 1);
                    _acceptingTeamUpdates = false;
                }
                else if (_gameVersion == GameVersion.BF4)
                {
                    Log.Debug(() => "Assigning team ID " + 0 + " to Spectator", 4);
                    Thread.Sleep(500);
                    ExecuteCommand("procon.protected.send", "vars.teamFactionOverride");
                    //Wait for proper team overrides to complete
                    if (_aliveThreads.Values.All(thread => thread.Name != "TeamAssignmentConfirmation"))
                    {
                        StartAndLogThread(new Thread(new ThreadStart(delegate
                        {
                            Thread.CurrentThread.Name = "TeamAssignmentConfirmation";
                            Thread.Sleep(TimeSpan.FromSeconds(1));
                            DateTime starting = UtcNow();
                            while (true)
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                if ((UtcNow() - starting).TotalSeconds > 30)
                                {
                                    Log.Warn("TeamAssignmentConfirmation took too long.");
                                    break;
                                }
                                if (!_teamDictionary.ContainsKey(1) ||
                                    !_teamDictionary.ContainsKey(2) ||
                                    !_teamDictionary.ContainsKey(3) ||
                                    !_teamDictionary.ContainsKey(4))
                                {
                                    Thread.Sleep(TimeSpan.FromSeconds(0.5));
                                    continue;
                                }
                                _acceptingTeamUpdates = false;
                                break;
                            }
                            LogThreadExit();
                        })));
                    }
                }
                else if (_gameVersion == GameVersion.BFHL)
                {
                    Log.Debug(() => "Assigning team ID " + 0 + " to Spectator", 4);
                    OnTeamFactionOverride(1, 0);
                    OnTeamFactionOverride(2, 1);
                    _acceptingTeamUpdates = false;
                }

                //Top player monitor
                if (_aliveThreads.Values.All(thread => thread.Name != "TopPlayerMonitorAssignment"))
                {
                    StartAndLogThread(new Thread(new ThreadStart(delegate
                    {
                        Thread.CurrentThread.Name = "TopPlayerMonitorAssignment";
                        Thread.Sleep(TimeSpan.FromSeconds(0.1));
                        DateTime starting = UtcNow();
                        while (true)
                        {
                            if (!_pluginEnabled)
                            {
                                break;
                            }
                            if ((UtcNow() - starting).TotalSeconds > 30)
                            {
                                Log.Warn("TopPlayerMonitorAssignment took too long.");
                                break;
                            }
                            if (_acceptingTeamUpdates)
                            {
                                Thread.Sleep(TimeSpan.FromSeconds(0.5));
                                continue;
                            }
                            AdKatsTeam team1, team2;
                            if (!GetTeamByID(1, out team1))
                            {
                                Log.Info("Team 1 was not found, waiting.");
                                continue;
                            }
                            if (!GetTeamByID(2, out team2))
                            {
                                Log.Info("Team 2 was not found, waiting.");
                                continue;
                            }
                            if (_UseTopPlayerMonitor && _firstPlayerListComplete)
                            {
                                Boolean team1Set = currentStartingTeam1;
                                currentStartingTeam1 = !currentStartingTeam1;

                                Dictionary<Int32, Boolean> team1AvailableSquads = new Dictionary<int, bool>();
                                Dictionary<Int32, Boolean> team2AvailableSquads = new Dictionary<int, bool>();
                                //Loop over the available squads from last to first
                                for (int squadID = _SquadNames.Length - 1; squadID > 0; squadID--)
                                {
                                    team1AvailableSquads[squadID] = true;
                                    team2AvailableSquads[squadID] = true;
                                }

                                if (_RoundOverSquads.Any())
                                {
                                    //First process squads from the previous round, ordering most powerful squads first
                                    Boolean first = true;
                                    foreach (var squad in _RoundOverSquads.OrderByDescending(squad => squad.Value.Sum(member => member.TopStats.TopRoundRatio)))
                                    {
                                        List<AdKatsPlayer> members = squad.Value;

                                        //Decide where to send this squad
                                        Boolean targetTeam1;
                                        if (first)
                                        {
                                            targetTeam1 = team1Set;
                                            first = false;
                                        }
                                        else
                                        {
                                            targetTeam1 = team1.getTeamPower() < team2.getTeamPower();
                                        }

                                        //Get the needed information for the target
                                        AdKatsTeam targetTeam;
                                        Int32 availableSquadID;
                                        String availableSquadName;
                                        if (targetTeam1)
                                        {
                                            targetTeam = team1;
                                            availableSquadID = team1AvailableSquads.First(aSquad => aSquad.Value == true).Key;
                                            team1AvailableSquads[availableSquadID] = false;
                                        }
                                        else
                                        {
                                            targetTeam = team2;
                                            availableSquadID = team2AvailableSquads.First(aSquad => aSquad.Value == true).Key;
                                            team2AvailableSquads[availableSquadID] = false;
                                        }
                                        availableSquadName = GetSquadName(availableSquadID);

                                        var message = "Squad " + availableSquadName + ":" + availableSquadID + " |";
                                        //Loop over each member in the squad and assign them to the same team/squad
                                        foreach (var member in members)
                                        {
                                            //Assign their squad
                                            member.AssignedSquad = availableSquadID;
                                            message += member.player_name + "|";
                                            //If they are being monitored, set their required team
                                            if (member.TopStats.TopRoundRatio > 0)
                                            {
                                                member.RequiredTeam = targetTeam;
                                            }
                                            //tell colon what's up
                                            if (member.player_name == _debugSoldierName)
                                            {
                                                PlayerTellMessage(member.player_name, "Your squad " + availableSquadName + ":" + availableSquadID + " was assigned to " + targetTeam.TeamKey + " for round " + _roundID);
                                            }
                                            //Move them to the team/squad
                                            ExecuteCommand("procon.protected.send", "admin.movePlayer", member.player_name, targetTeam.TeamID + "", member.AssignedSquad + "", "false");
                                            Thread.Sleep(TimeSpan.FromMilliseconds(50));
                                        }
                                        if (_isTestingAuthorized)
                                        {
                                            Log.Info(message + " assigned to " + targetTeam.TeamKey + " for " + targetTeam.getTeamPower() + " team power.");
                                        }
                                    }
                                }
                                else if (_isTestingAuthorized)
                                {
                                    Log.Info("No squads remembered; can't do squad dispersion.");
                                }
                                _RoundOverSquads.Clear();

                                //Update team assignment of remaining players not assigned through squads
                                List<AdKatsPlayer> orderedTopPlayers = _PlayerDictionary.Values
                                    .Where(dPlayer =>
                                        dPlayer.player_type == PlayerType.Player &&
                                        _topPlayers.ContainsKey(dPlayer.player_name) && 
                                        dPlayer.RequiredTeam == null &&
                                        dPlayer.AssignedSquad == 0)
                                    .OrderByDescending(dPlayer =>
                                        dPlayer.TopStats.TopRoundRatio)
                                    .ToList();
                                if (orderedTopPlayers.Count > 1)
                                {
                                    foreach (AdKatsPlayer aPlayer in orderedTopPlayers)
                                    {
                                        //Fill in the remaining players based on teampower
                                        aPlayer.RequiredTeam = team1.getTeamPower() < team2.getTeamPower() ? team1 : team2;
                                        if (_isTestingAuthorized)
                                        {
                                            ProconChatWrite("Initial Moved " + aPlayer.player_name + " to " + aPlayer.RequiredTeam.TeamKey);
                                        }
                                        Thread.Sleep(TimeSpan.FromMilliseconds(50));
                                        ExecuteCommand("procon.protected.send", "admin.movePlayer", aPlayer.player_name, aPlayer.RequiredTeam.TeamID + "", aPlayer.frostbitePlayerInfo.SquadID + "", "false");
                                        Log.Info(aPlayer.GetVerboseName() + " assigned to " + aPlayer.RequiredTeam.TeamKey + " for round " + _roundID);
                                        if (aPlayer.player_name == _debugSoldierName)
                                        {
                                            PlayerTellMessage(aPlayer.player_name, "You were assigned to " + aPlayer.RequiredTeam.TeamKey + " for round " + _roundID);
                                        }
                                    }
                                }
                                else if (_isTestingAuthorized)
                                {
                                    Log.Info("Not enough extra top players online to do dispersion.");
                                }

                                //Confirm they remain on the team they were assigned, yay DICE's mandatory balancer
                                var start = UtcNow();
                                while (NowDuration(start).TotalSeconds < _TopPlayersTeamConfirmationDuration && 
                                       _pluginEnabled && 
                                       _roundState != RoundState.Playing)
                                {
                                    foreach (AdKatsPlayer aPlayer in orderedTopPlayers)
                                    {
                                        if (!_pluginEnabled ||
                                            _roundState == RoundState.Playing ||
                                            NowDuration(start).TotalSeconds > _TopPlayersTeamConfirmationDuration)
                                        {
                                            break;
                                        }
                                        Thread.Sleep(TimeSpan.FromMilliseconds(50));
                                        if (aPlayer.RequiredTeam != null)
                                        {
                                            ExecuteCommand("procon.protected.send",
                                                           "admin.movePlayer",
                                                           aPlayer.player_name,
                                                           aPlayer.RequiredTeam.TeamID + "", (aPlayer.AssignedSquad == 0 ? aPlayer.frostbitePlayerInfo.SquadID : aPlayer.AssignedSquad) + "",
                                                           "true");
                                            if (_isTestingAuthorized)
                                            {
                                                ProconChatWrite("Upkeep Moved " + aPlayer.player_name + " to " + aPlayer.RequiredTeam.TeamKey);
                                            }
                                        }
                                    }
                                    Thread.Sleep(TimeSpan.FromSeconds(1));
                                }
                                if (_isTestingAuthorized)
                                {
                                    ProconChatWrite("Stopped confirming player positions.");
                                }

                                //Update top player information
                                FetchAllAccess(true);
                            }
                            break;
                        }
                        LogThreadExit();
                    })));
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while running faction updates.", e));
            }
        }

        public override void OnMaplistLoad() {
            getMapInfo();
        }

        public override void OnMaplistSave() {
            getMapInfo();
        }

        public override void OnMaplistCleared() {
            getMapInfo();
        }

        public override void OnMaplistMapAppended(string mapFileName) {
            getMapInfo();
        }

        public override void OnMaplistNextLevelIndex(int mapIndex) {
            getMapInfo();
        }

        public override void OnMaplistMapRemoved(int mapIndex) {
            getMapInfo();
        }

        public override void OnMaplistMapInserted(int mapIndex, string mapFileName) {
            getMapInfo();
        }

        public void getMapInfo()
        {
            getMapList();
            getMapIndices();
        }

        public void getMapList()
        {
            ExecuteCommand("procon.protected.send", "mapList.list");
        }

        public void getMapIndices()
        {
            ExecuteCommand("procon.protected.send", "mapList.getMapIndices");
        }

        public override void OnMaplistList(List<MaplistEntry> lstMaplist)
        {
            Log.Debug(() => "Entering OnMaplistList", 5);
            if (!_pluginEnabled || _serverInfo == null)
            {
                return;
            }

            _serverInfo.SetMapList(lstMaplist);

            Log.Debug(() => "Exiting OnMaplistList", 7);
        }

        public override void OnMaplistGetMapIndices(int mapIndex, int nextIndex)
        {
            Log.Debug(() => "Entering OnMaplistGetMapIndices", 5);
            if (!_pluginEnabled || _serverInfo == null)
            {
                return;
            }

            _serverInfo.SetMapListIndicies(mapIndex, nextIndex);

            Log.Debug(() => "Exiting OnMaplistGetMapIndices", 7);
        }

        public override void OnPlayerTeamChange(String soldierName, Int32 teamId, Int32 squadId)
        {
            Log.Debug(() => "Entering OnPlayerTeamChange", 7);
            try
            {
                if (!_firstPlayerListComplete)
                {
                    return;
                }
                if (_PlayerDictionary.ContainsKey(soldierName))
                {
                    AdKatsPlayer aPlayer = _PlayerDictionary[soldierName];
                    AdKatsTeam oldTeam;
                    if (!GetTeamByID(aPlayer.frostbitePlayerInfo.TeamID, out oldTeam))
                    {
                        if (_roundState == RoundState.Playing) {
                            Log.Error("Error fetching old team on team change.");
                        }
                        return;
                    }
                    AdKatsTeam newTeam;
                    if (!GetTeamByID(teamId, out newTeam)) {
                        if (_roundState == RoundState.Playing) {
                            Log.Error("Error fetching new team on team change.");
                        }
                        return;
                    }
                    if (aPlayer.RequiredTeam != null && 
                        aPlayer.RequiredTeam.TeamKey != newTeam.TeamKey && 
                        oldTeam.TeamKey != "Neutral" &&
                        !PlayerIsAdmin(aPlayer))
                    {
                        var newPowerDiff = Math.Round(Math.Abs(newTeam.getTeamPower(null, aPlayer) - oldTeam.getTeamPower(aPlayer, null)));
                        var oldPowerDiff = Math.Round(Math.Abs(newTeam.getTeamPower() - oldTeam.getTeamPower()));
                        if (_UseTopPlayerMonitor && 
                            aPlayer.TopStats.getTopPower() != 0 && 
                            newPowerDiff <= oldPowerDiff &&
                            _roundState == RoundState.Playing && 
                            _serverInfo.GetRoundElapsedTime().TotalSeconds > 10) {
                            if (_isTestingAuthorized) {
                                Log.Warn(aPlayer.GetVerboseName() + " REASSIGNED themselves from " + aPlayer.RequiredTeam.TeamKey + " to " + newTeam.TeamKey + " (" + newPowerDiff + "<" + oldPowerDiff + ").");
                            }
                            aPlayer.RequiredTeam = newTeam;
                        } else {
                            if (_roundState == RoundState.Playing && !_topPlayers.ContainsKey(aPlayer.player_name)) {
                                OnlineAdminSayMessage(soldierName + " attempted to switch teams after being admin moved.");
                                PlayerTellMessage(soldierName, "You were assigned to " + aPlayer.RequiredTeam.TeamName + ", please remain on that team.");
                            }
                            if (_isTestingAuthorized) {
                                ProconChatWrite("Anti-move Moved " + aPlayer.player_name + " to " + aPlayer.RequiredTeam.TeamKey);
                            }
                            ExecuteCommand("procon.protected.send", "admin.movePlayer", soldierName, aPlayer.RequiredTeam.TeamID + "", "1", "false");
                        }
                    }
                    else
                    {
                        Int32 oldSquad = aPlayer.frostbitePlayerInfo.SquadID;
                        aPlayer.frostbitePlayerInfo.TeamID = teamId;
                    }
                }
                //When a player changes team, tell teamswap to recheck queues
                _TeamswapWaitHandle.Set();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling player team change.", e));
            }
            Log.Debug(() => "Exiting OnPlayerTeamChange", 7);
        }

        public List<AdKatsPlayer> GetSquadPlayers(AdKatsPlayer aPlayer)
        {
            return GetSquadPlayers(aPlayer.frostbitePlayerInfo.SquadID);
        }

        public List<AdKatsPlayer> GetSquadPlayers(Int32 squadID)
        {
            return _PlayerDictionary.Values.ToList().Where(
                aPlayer => aPlayer.frostbitePlayerInfo.SquadID == squadID).ToList();
        }

        public String GetSquadName(Int32 squadID)
        {
            if (squadID < 0 || squadID >= _SquadNames.Length)
            {
                Log.Error("Invalid squad ID " + squadID + ", unable to get squad name.");
                return squadID.ToString();
            }
            return _SquadNames[squadID];
        }

        public override void OnPlayerSquadChange(string soldierName, int teamId, int squadId)
        {
            Log.Debug(() => "Entering OnPlayerSquadChange", 7);
            try
            {
                if (!_firstPlayerListComplete)
                {
                    return;
                }
                if (_PlayerDictionary.ContainsKey(soldierName))
                {
                    AdKatsPlayer aPlayer = _PlayerDictionary[soldierName];
                    AdKatsTeam oldTeam;
                    if (!GetTeamByID(aPlayer.frostbitePlayerInfo.TeamID, out oldTeam)) {
                        if (_roundState == RoundState.Playing) {
                            Log.Error("Error fetching old team on team change.");
                        }
                        return;
                    }
                    AdKatsTeam newTeam;
                    if (!GetTeamByID(teamId, out newTeam)) {
                        if (_roundState == RoundState.Playing) {
                            Log.Error("Error fetching new team on team change.");
                        }
                        return;
                    }
                    Int32 oldSquad = aPlayer.frostbitePlayerInfo.SquadID;
                    aPlayer.frostbitePlayerInfo.SquadID = squadId;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling player squad change.", e));
            }
            Log.Debug(() => "Exiting OnPlayerSquadChange", 7);
        }

        public override void OnListPlayers(List<CPlayerInfo> players, CPlayerSubset cpsSubset)
        {
            Log.Debug(() => "Entering OnListPlayers", 7);
            try
            {
                //Only handle the list if it is an "All players" list
                if (cpsSubset.Subset == CPlayerSubset.PlayerSubsetType.All)
                {
                    _LastPlayerListFire = UtcNow();
                    //Return if small duration (5 seconds) since last player list
                    if ((UtcNow() - _lastSuccessfulPlayerList) < TimeSpan.FromSeconds(5))
                    {
                        return;
                    }
                    //Only perform the following if all threads are ready
                    if (_threadsReady)
                    {
                        QueuePlayerListForProcessing(players);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured while listing players.", e));
            }
            Log.Debug(() => "Exiting OnListPlayers", 7);
        }

        public override void OnPlayerPingedByAdmin(string soldierName, int ping) {
            try {
                AdKatsPlayer aPlayer;
                if (_PlayerDictionary.TryGetValue(soldierName, out aPlayer) &&
                    _roundState == RoundState.Playing) {
                    aPlayer.AddPingEntry(ping);
                }
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error while fetching player ping.", e));
            }
        }

        private void QueuePlayerListForProcessing(List<CPlayerInfo> players)
        {
            Log.Debug(() => "Entering QueuePlayerListForProcessing", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue player list for processing", 6);
                    lock (_PlayerListProcessingQueue)
                    {
                        _PlayerListProcessingQueue.Enqueue(players);
                        Log.Debug(() => "Player list queued for processing", 6);
                        _PlayerProcessingWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing player list for processing.", e));
            }
            Log.Debug(() => "Exiting QueuePlayerListForProcessing", 7);
        }

        private void QueuePlayerForRemoval(CPlayerInfo player)
        {
            Log.Debug(() => "Entering QueuePlayerForRemoval", 7);
            try
            {
                if (_pluginEnabled && _firstPlayerListComplete)
                {
                    Log.Debug(() => "Preparing to queue player list for processing", 6);
                    lock (_PlayerRemovalProcessingQueue)
                    {
                        _PlayerRemovalProcessingQueue.Enqueue(player);
                        Log.Debug(() => "Player removal queued for processing", 6);
                        _PlayerProcessingWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing player for removal.", e));
            }
            Log.Debug(() => "Exiting QueuePlayerForRemoval", 7);
        }

        public void PlayerListingThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Player Listing Thread", 1);
                Thread.CurrentThread.Name = "PlayerListing";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering Player Listing Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }

                        Boolean playerListFetched = false;
                        AdKatsPlayer pingPickedPlayer = null;

                        //Get all unparsed inbound lists
                        //Only allow player list fetching if the user list is already fetched
                        List<CPlayerInfo> inboundPlayerList = null;
                        if (_PlayerListProcessingQueue.Count > 0 && _firstUserListComplete)
                        {
                            Log.Debug(() => "Preparing to lock player list queues to retrive new player lists", 7);
                            lock (_PlayerListProcessingQueue)
                            {
                                Log.Debug(() => "Inbound player lists found. Grabbing.", 6);
                                while (_PlayerListProcessingQueue.Any())
                                {
                                    inboundPlayerList = _PlayerListProcessingQueue.Dequeue();
                                    playerListFetched = true;
                                    _firstPlayerListStarted = true;
                                }
                                //Clear the queue for next run
                                _PlayerListProcessingQueue.Clear();
                            }
                        }
                        else
                        {
                            inboundPlayerList = new List<CPlayerInfo>();
                        }

                        //Get all unparsed inbound player removals
                        Queue<CPlayerInfo> inboundPlayerRemoval = null;
                        if (_PlayerRemovalProcessingQueue.Count > 0)
                        {
                            Log.Debug(() => "Preparing to lock player removal queue to retrive new player removals", 7);
                            lock (_PlayerRemovalProcessingQueue)
                            {
                                Log.Debug(() => "Inbound player removals found. Grabbing.", 6);
                                if (_PlayerRemovalProcessingQueue.Any())
                                {
                                    inboundPlayerRemoval = new Queue<CPlayerInfo>(_PlayerRemovalProcessingQueue.ToArray());
                                }
                                //Clear the queue for next run
                                _PlayerRemovalProcessingQueue.Clear();
                            }
                        }
                        else
                        {
                            inboundPlayerRemoval = new Queue<CPlayerInfo>();
                        }

                        if (!inboundPlayerList.Any() && 
                            !inboundPlayerRemoval.Any() && 
                            !_PlayerRoleRefetch && 
                            !playerListFetched)
                        {
                            Log.Debug(() => "No inbound player listing actions. Waiting for Input.", 5);
                            //Wait for input
                            if (!_firstPlayerListStarted)
                            {
                                ExecuteCommand("procon.protected.send", "admin.listPlayers", "all");
                                Thread.Sleep(1000);
                            }
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. PlayerListing thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _PlayerProcessingWaitHandle.Reset();
                            _PlayerProcessingWaitHandle.WaitOne(TimeSpan.FromSeconds(60));
                            loopStart = UtcNow();
                            if (_firstPlayerListComplete)
                            {
                                //Case where all players are gone after first player list
                                _lastSuccessfulPlayerList = UtcNow();
                            }
                            continue;
                        }

                        List<string> removedPlayers = new List<string>();
                        lock (_PlayerDictionary)
                        {
                            //Firstly, go through removal queue, remove all names, and log them.
                            while (inboundPlayerRemoval.Any())
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                CPlayerInfo playerInfo = inboundPlayerRemoval.Dequeue();
                                AdKatsPlayer aPlayer;
                                if (_PlayerDictionary.TryGetValue(playerInfo.SoldierName, out aPlayer))
                                {
                                    //Show leaving messages
                                    Boolean toldAdmins = false;
                                    if (!aPlayer.TargetedRecords.Any(aRecord => aRecord.command_action.command_key == "player_kick" || aRecord.command_action.command_key == "player_ban_temp" || aRecord.command_action.command_key == "player_ban_perm"))
                                    {
                                        List<AdKatsRecord> meaningfulRecords = aPlayer.TargetedRecords.Where(aRecord => aRecord.command_action.command_key != "banenforcer_enforce" && aRecord.command_action.command_key != "player_changeip" && aRecord.command_action.command_key != "player_changename" && aRecord.command_action.command_key != "player_repboost" && aRecord.command_action.command_key != "player_pm_send" && aRecord.command_action.command_key != "player_pm_reply" && aRecord.command_action.command_key != "player_pm_start" && aRecord.command_action.command_key != "player_pm_transmit" && aRecord.command_action.command_key != "player_pm_cancel" && !aRecord.command_action.command_key.Contains("self_")).ToList();
                                        if (meaningfulRecords.Any())
                                        {
                                            List<String> types = (from record in meaningfulRecords select record.command_action.command_name).Distinct().ToList();
                                            String typeString = types.Aggregate("[", (current, type) => current + (type + ", "));
                                            typeString = typeString.Trim().TrimEnd(',') + "]";
                                            if (_ShowTargetedPlayerLeftNotification)
                                            {
                                                toldAdmins = true;
                                                OnlineAdminSayMessage(aPlayer.GetVerboseName() + " left from " + GetPlayerTeamKey(aPlayer) + " " + typeString);
                                            }
                                            List<AdKatsRecord> reports = aPlayer.TargetedRecords.Where(aRecord => aRecord.command_type.command_key == "player_report" || aRecord.command_type.command_key == "player_calladmin").ToList();
                                            Dictionary<string, AdKatsPlayer> reporters = new Dictionary<string, AdKatsPlayer>();
                                            foreach (AdKatsRecord report in reports.Where(report => report.source_player != null))
                                            {
                                                reporters[report.source_player.player_name] = report.source_player;
                                            }
                                            foreach (AdKatsPlayer player in reporters.Values)
                                            {
                                                PlayerSayMessage(player.player_name, "Player " + aPlayer.GetVerboseName() + " you reported has left the server.");
                                            }
                                        }
                                    }
                                    if (!toldAdmins && aPlayer.player_type == PlayerType.Spectator)
                                    {
                                        OnlineAdminSayMessage(((PlayerIsAdmin(aPlayer)) ? ("Admin ") : ("")) + aPlayer.GetVerboseName() + " stopped spectating the server.");
                                    }
                                    //Shut down any running conversations
                                    if (aPlayer.conversationPartner != null)
                                    {
                                        AdKatsPlayer partner = aPlayer.conversationPartner;
                                        if (PlayerIsExternal(aPlayer.conversationPartner))
                                        {
                                            QueueRecordForProcessing(new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = partner.player_server.ServerID,
                                                record_orchestrate = true,
                                                command_type = GetCommandByKey("player_pm_cancel"),
                                                command_numeric = 0,
                                                target_name = partner.player_name,
                                                target_player = partner,
                                                source_name = aPlayer.player_name,
                                                source_player = aPlayer,
                                                record_message = aPlayer.GetVerboseName() + " has left their server. Private conversation closed.",
                                                record_time = UtcNow()
                                            });
                                        }
                                        else
                                        {
                                            PlayerSayMessage(partner.player_name, aPlayer.GetVerboseName() + " has left the server. Private conversation closed.");
                                            partner.conversationPartner = null;
                                        }
                                        aPlayer.conversationPartner = null;
                                    }
                                    if ((_roundState == RoundState.Loaded || (_roundState == RoundState.Playing && _serverInfo.GetRoundElapsedTime().TotalMinutes < 2)) && !PlayerIsAdmin(aPlayer))
                                    {
                                        _mapDetrimentIndex++;
                                    }
                                    //Remove from populators
                                    _populationPopulatingPlayers.Remove(aPlayer.player_name);
                                    //Add player to the left dictionary
                                    aPlayer.player_online = false;
                                    aPlayer.player_server = null;
                                    aPlayer.player_spawnedOnce = false;
                                    aPlayer.LiveKills.Clear();
                                    aPlayer.ClearPingEntries();
                                    DequeuePlayer(aPlayer);
                                    //Remove all old values
                                    List<String> removeNames = _PlayerLeftDictionary.Where(pair => (UtcNow() - pair.Value.LastUsage).TotalMinutes > 120).Select(pair => pair.Key).ToList();
                                    foreach (String removeName in removeNames)
                                    {
                                        _PlayerLeftDictionary.Remove(removeName);
                                    }
                                    aPlayer.LastUsage = UtcNow();
                                    _PlayerLeftDictionary[aPlayer.player_name] = aPlayer;
                                }
                                RemovePlayerFromDictionary(playerInfo.SoldierName, false);
                                removedPlayers.Add(playerInfo.SoldierName);
                            }
                            List<string> validPlayers = new List<String>();
                            var fetchAccessAfterList = false;
                            if (inboundPlayerList.Count > 0)
                            {
                                Log.Debug(() => "Listing Players", 5);
                                //Loop over all players in the list

                                List<Double> durations = new List<Double>();
                                IEnumerable<CPlayerInfo> trimmedInboundPlayers = inboundPlayerList.Where(player => !removedPlayers.Contains(player.SoldierName));
                                Int32 index = 0;
                                foreach (CPlayerInfo playerInfo in trimmedInboundPlayers)
                                {
                                    index++;
                                    Stopwatch timer = new Stopwatch();
                                    timer.Start();
                                    if (!_pluginEnabled)
                                    {
                                        break;
                                    }
                                    //Check for glitched players
                                    if (String.IsNullOrEmpty(playerInfo.GUID)) {
                                        if ((UtcNow() - _lastGlitchedPlayerNotification).TotalMinutes > 5) {
                                            OnlineAdminSayMessage(playerInfo.SoldierName + " is glitched in the server, their player has no GUID.");
                                            Log.Warn(playerInfo.SoldierName + " is glitched in the server, their player has no GUID.");
                                            _lastGlitchedPlayerNotification = UtcNow();
                                        }
                                        continue;
                                    }
                                    //Check for invalid player names
                                    if (!IsSoldierNameValid(playerInfo.SoldierName)) {
                                        if ((UtcNow() - _lastInvalidPlayerNameNotification).TotalMinutes > 5) {
                                            OnlineAdminSayMessage(playerInfo.SoldierName + " had an invalid player name, unable to process.");
                                            Log.Warn(playerInfo.SoldierName + " has an invalid player name, unable to process.");
                                            ExecuteCommand("procon.protected.send", "admin.kickPlayer", playerInfo.SoldierName, "Your soldier name " + playerInfo.SoldierName + " is invalid.");
                                            _lastInvalidPlayerNameNotification = UtcNow();
                                        }
                                        continue;
                                    }

                                    validPlayers.Add(playerInfo.SoldierName);
                                    //Check if the player is already in the player dictionary
                                    AdKatsPlayer aPlayer = null;
                                    if (_PlayerDictionary.TryGetValue(playerInfo.SoldierName, out aPlayer))
                                    {
                                        //They are
                                        if (aPlayer.frostbitePlayerInfo.Score != playerInfo.Score || aPlayer.frostbitePlayerInfo.Kills != playerInfo.Kills || aPlayer.frostbitePlayerInfo.Deaths != playerInfo.Deaths)
                                        {
                                            aPlayer.lastAction = UtcNow();
                                        }
                                        aPlayer.frostbitePlayerInfo = playerInfo;
                                        switch (aPlayer.frostbitePlayerInfo.Type)
                                        {
                                            case 0:
                                                aPlayer.player_type = PlayerType.Player;
                                                break;
                                            case 1:
                                                aPlayer.player_type = PlayerType.Spectator;
                                                break;
                                            case 2:
                                                aPlayer.player_type = PlayerType.CommanderPC;
                                                break;
                                            case 3:
                                                aPlayer.player_type = PlayerType.CommanderMobile;
                                                break;
                                            default:
                                                Log.Error("Player type " + aPlayer.frostbitePlayerInfo.Type + " is not valid.");
                                                break;
                                        }

                                        if (_roundState == RoundState.Playing) 
                                        {
                                            //If this game is BF3 their ping will be loaded elsewhere
                                            Boolean proconFetched = false;
                                            Double ping = aPlayer.player_ping;

                                            if (_gameVersion != GameVersion.BF3) {
                                                
                                                //If this game is not BF3, their ping will be loaded through the player list
                                                ping = aPlayer.frostbitePlayerInfo.Ping;
                                                if (_pingEnforcerKickMissingPings &&
                                                    _attemptManualPingWhenMissing &&
                                                    ping < 0 &&
                                                    !String.IsNullOrEmpty(aPlayer.player_ip)) {
                                                    PingReply reply = null;
                                                    try {
                                                        reply = _pingProcessor.Send(aPlayer.player_ip, 1000);
                                                    } catch (Exception e) {
                                                        HandleException(new AdKatsException("Error fetching manual player ping.", e));
                                                    }
                                                    if (reply != null && reply.Status == IPStatus.Success) {
                                                        ping = reply.RoundtripTime;
                                                        proconFetched = true;
                                                    } else {
                                                        Log.Debug(() => "Ping status for " + aPlayer.GetVerboseName() + ": " + reply.Status, 5);
                                                        ping = -1;
                                                    }
                                                }
                                                aPlayer.AddPingEntry(ping);
                                            }

                                            //Automatic ping kick
                                            if (_pingEnforcerEnable && 
                                                aPlayer.player_type == PlayerType.Player && 
                                                !PlayerIsAdmin(aPlayer) && 
                                                (!_isTestingAuthorized || aPlayer.player_reputation < 150 || aPlayer.player_ping >= 200) &&
                                                !GetMatchingVerboseASPlayersOfGroup("whitelist_ping", aPlayer).Any() && 
                                                !_pingEnforcerIgnoreRoles.Contains(aPlayer.player_role.role_key) && 
                                                !(_pingEnforcerIgnoreUserList && 
                                                  FetchAllUserSoldiers().Any(sPlayer => sPlayer.player_guid == aPlayer.player_guid)) &&
                                                _PlayerDictionary.Values.Count(player => player.player_type == PlayerType.Player) > _pingEnforcerTriggerMinimumPlayers) 
                                            {
                                                Double currentTriggerMS = GetPingLimit();
                                                //Warn players of limit and spikes
                                                if (ping > currentTriggerMS) {
                                                    if (aPlayer.player_pings_full && aPlayer.player_ping_avg < currentTriggerMS && ping > (aPlayer.player_ping_avg * 1.5)) {
                                                        PlayerSayMessage(aPlayer.player_name, "Warning, your ping is spiking. Current: [" + Math.Round(ping) + "ms] Avg: [" + Math.Round(aPlayer.player_ping_avg, 1) + "ms]" + ((proconFetched) ? ("[PR]") : ("")));
                                                    } else {
                                                        PlayerSayMessage(aPlayer.player_name, "Warning, your ping is over the limit. [" + Math.Round(aPlayer.player_ping, 1) + "ms]" + ((proconFetched) ? ("[PR]") : ("")));
                                                    }
                                                }
                                                Boolean acted = false;
                                                //Are they over the limit, or missing
                                                if (((aPlayer.player_ping_avg > currentTriggerMS && aPlayer.player_ping > aPlayer.player_ping_avg) || (_pingEnforcerKickMissingPings && aPlayer.player_ping_avg < 0 && (UtcNow() - aPlayer.JoinTime).TotalSeconds > 60)) && aPlayer.player_pings_full) {
                                                    //Are they worse than the current picked player
                                                    if (pingPickedPlayer == null || (aPlayer.player_ping_avg > pingPickedPlayer.player_ping_avg && pingPickedPlayer.player_ping_avg > 0)) {
                                                        pingPickedPlayer = aPlayer;
                                                        acted = true;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            aPlayer.ClearPingEntries();
                                        }
                                        if (_CMDRManagerEnable && _firstPlayerListComplete && (aPlayer.player_type == PlayerType.CommanderPC || aPlayer.player_type == PlayerType.CommanderMobile) && _PlayerDictionary.Values.Count(player => player.player_type == PlayerType.Player) < (0.75 * _CMDRMinimumPlayers))
                                        {
                                            AdKatsRecord record = new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("player_kick"),
                                                command_numeric = 0,
                                                target_name = aPlayer.player_name,
                                                target_player = aPlayer,
                                                source_name = "CMDRManager",
                                                record_message = "Commanders not allowed until " + _CMDRMinimumPlayers + " active players",
                                                record_time = UtcNow()
                                            };
                                            QueueRecordForProcessing(record);
                                        }
                                    }
                                    else
                                    {
                                        //Player is not already online, handle fetching
                                        //First check if the player is rejoining current session
                                        aPlayer = _PlayerLeftDictionary.Values.FirstOrDefault(oPlayer => oPlayer.player_guid == playerInfo.GUID);
                                        if (aPlayer != null)
                                        {
                                            Log.Debug(() => "Player " + playerInfo.SoldierName + " rejoined the server.", 3);
                                            //Remove them from the left dictionary
                                            _PlayerLeftDictionary.Remove(playerInfo.SoldierName);
                                            //check for name changes
                                            if (!String.IsNullOrEmpty(playerInfo.SoldierName) && playerInfo.SoldierName != aPlayer.player_name)
                                            {
                                                aPlayer.player_name_previous = aPlayer.player_name;
                                                aPlayer.player_name = playerInfo.SoldierName;
                                                AdKatsRecord record = new AdKatsRecord
                                                {
                                                    record_source = AdKatsRecord.Sources.InternalAutomated,
                                                    server_id = _serverInfo.ServerID,
                                                    command_type = GetCommandByKey("player_changename"),
                                                    command_numeric = 0,
                                                    target_name = aPlayer.player_name,
                                                    target_player = aPlayer,
                                                    source_name = "AdKats",
                                                    record_message = aPlayer.player_name_previous,
                                                    record_time = UtcNow()
                                                };
                                                QueueRecordForProcessing(record);
                                                Log.Debug(() => aPlayer.player_name_previous + " changed their name to " + playerInfo.SoldierName + ". Updating the database.", 2);
                                                if (_ShowPlayerNameChangeAnnouncement)
                                                {
                                                    OnlineAdminSayMessage(aPlayer.player_name_previous + " changed their name to " + playerInfo.SoldierName);
                                                }
                                                UpdatePlayer(aPlayer);
                                            }
                                            if (aPlayer.TargetedRecords.Any(aRecord => aRecord.command_action.command_key == "player_kick" && (UtcNow() - aRecord.record_time).TotalMinutes < 30) && aPlayer.TargetedRecords.All(aRecord => aRecord.command_action.command_key != "banenforcer_enforce"))
                                            {
                                                OnlineAdminSayMessage("Kicked player " + aPlayer.GetVerboseName() + " rejoined the server.");
                                            }
                                        }
                                        else
                                        {
                                            //If they aren't in the list, fetch their information from the database
                                            aPlayer = FetchPlayer(true, false, false, null, -1, playerInfo.SoldierName, playerInfo.GUID, null);
                                            if (aPlayer == null)
                                            {
                                                //Do not handle the player if not returned
                                                continue;
                                            }
                                        }
                                        aPlayer.player_online = true;
                                        aPlayer.JoinTime = UtcNow();
                                        //Fetch their infraction points
                                        FetchPoints(aPlayer, false, true);
                                        if (aPlayer.location == null || aPlayer.location.status != "success" || aPlayer.location.IP != aPlayer.player_ip)
                                        {
                                            //Update IP location
                                            QueuePlayerForIPInfoFetch(aPlayer);
                                        }
                                        if (String.IsNullOrEmpty(aPlayer.player_personaID))
                                        {
                                            //Get their battlelog information
                                            QueuePlayerForBattlelogInfoFetch(aPlayer);
                                        }
                                        //Last Punishment
                                        List<AdKatsRecord> punishments = FetchRecentRecords(aPlayer.player_id, GetCommandByKey("player_punish").command_id, 1000, 1, true, false);
                                        if (punishments.Any())
                                        {
                                            aPlayer.LastPunishment = punishments.FirstOrDefault();
                                        }
                                        //Last Forgive
                                        List<AdKatsRecord> forgives = FetchRecentRecords(aPlayer.player_id, GetCommandByKey("player_forgive").command_id, 1000, 1, true, false);
                                        if (forgives.Any())
                                        {
                                            aPlayer.LastForgive = forgives.FirstOrDefault();
                                        }
                                        aPlayer.player_server = _serverInfo;
                                        //Add the frostbite player info
                                        aPlayer.frostbitePlayerInfo = playerInfo;
                                        String joinLocation = String.Empty;
                                        AdKatsTeam playerTeam = null;
                                        if (aPlayer.frostbitePlayerInfo != null)
                                        {
                                            _teamDictionary.TryGetValue(aPlayer.frostbitePlayerInfo.TeamID, out playerTeam);
                                        }
                                        switch (aPlayer.frostbitePlayerInfo.Type)
                                        {
                                            case 0:
                                                aPlayer.player_type = PlayerType.Player;
                                                if (playerTeam == null || playerTeam.TeamID == 0)
                                                {
                                                    joinLocation += "player";
                                                }
                                                else
                                                {
                                                    joinLocation += playerTeam.TeamKey + " player";
                                                }
                                                break;
                                            case 1:
                                                aPlayer.player_type = PlayerType.Spectator;
                                                joinLocation += "spectator";
                                                break;
                                            case 2:
                                                aPlayer.player_type = PlayerType.CommanderPC;
                                                joinLocation += "commander";
                                                break;
                                            case 3:
                                                aPlayer.player_type = PlayerType.CommanderMobile;
                                                if (playerTeam != null)
                                                {
                                                    joinLocation += playerTeam.TeamKey + " ";
                                                }
                                                joinLocation += "tablet commander";
                                                break;
                                            default:
                                                Log.Error("Player type " + aPlayer.frostbitePlayerInfo.Type + " is not valid.");
                                                break;
                                        }
                                        if (aPlayer.player_type == PlayerType.Spectator) {
                                            if (GetMatchingVerboseASPlayersOfGroup("blacklist_spectator", aPlayer).Any()) {
                                                AdKatsRecord record = new AdKatsRecord {
                                                    record_source = AdKatsRecord.Sources.InternalAutomated,
                                                    server_id = _serverInfo.ServerID,
                                                    command_type = GetCommandByKey("player_kick"),
                                                    command_numeric = 0,
                                                    target_name = aPlayer.player_name,
                                                    target_player = aPlayer,
                                                    source_name = "SpectatorManager",
                                                    record_message = "You may not spectate the server at this time.",
                                                    record_time = UtcNow()
                                                };
                                                QueueRecordForProcessing(record);
                                            }
                                            if (GetVerboseASPlayersOfGroup("slot_spectator").Any() &&
                                                !GetMatchingVerboseASPlayersOfGroup("slot_spectator", aPlayer).Any()) {
                                                AdKatsRecord record = new AdKatsRecord {
                                                    record_source = AdKatsRecord.Sources.InternalAutomated,
                                                    server_id = _serverInfo.ServerID,
                                                    command_type = GetCommandByKey("player_kick"),
                                                    command_numeric = 0,
                                                    target_name = aPlayer.player_name,
                                                    target_player = aPlayer,
                                                    source_name = "SpectatorManager",
                                                    record_message = "Whitelist required to spectate this server.",
                                                    record_time = UtcNow()
                                                };
                                                QueueRecordForProcessing(record);
                                            }
                                        }
                                        bool isAdmin = PlayerIsAdmin(aPlayer);
                                        if (_firstPlayerListComplete)
                                        {
                                            //Notify reputable players
                                            if (isAdmin || aPlayer.player_aa)
                                            {
                                                String message = ((isAdmin) ? ("Admin ") : ("Admin assistant ")) + aPlayer.GetVerboseName() + " joined the server as a " + joinLocation + ".";
                                                if (_InformReputablePlayersOfAdminJoins)
                                                {
                                                    List<AdKatsPlayer> reputablePlayers = _PlayerDictionary.Values.Where(iPlayer => iPlayer.player_reputation >= _reputationThresholdGood && !PlayerIsAdmin(iPlayer)).ToList();
                                                    foreach (AdKatsPlayer reputablePlayer in reputablePlayers)
                                                    {
                                                        PlayerSayMessage(reputablePlayer.player_name, message);
                                                    }
                                                }
                                                if (_InformAdminsOfAdminJoins)
                                                {
                                                    OnlineAdminSayMessage(message);
                                                }
                                            }
                                            else if (aPlayer.player_type == PlayerType.Spectator)
                                            {
                                                OnlineAdminSayMessage(((PlayerIsAdmin(aPlayer)) ? ("Admin ") : ("")) + aPlayer.GetVerboseName() + " is now spectating the server.");
                                            }
                                            //If populating, add player
                                            if (_populationPopulating && _populationStatus == PopulationState.Low && aPlayer.player_type == PlayerType.Player && _populationPopulatingPlayers.Count < _lowPopulationPlayerCount)
                                            {
                                                _populationPopulatingPlayers[aPlayer.player_name] = aPlayer;
                                            }
                                            //Increment benefit index
                                            if ((_roundState == RoundState.Playing || _roundState == RoundState.Loaded) && !PlayerIsAdmin(aPlayer))
                                            {
                                                _mapBenefitIndex++;
                                            }
                                        }
                                        //Set their last death/spawn times
                                        aPlayer.lastDeath = UtcNow();
                                        aPlayer.lastSpawn = UtcNow();
                                        aPlayer.lastAction = UtcNow();
                                        //Add them to the dictionary
                                        _PlayerDictionary.Add(playerInfo.SoldierName, aPlayer);
                                        //If they are an admin, and if we protect admins from VIP kicks, update the user list
                                        if (_firstPlayerListComplete && isAdmin && _FeedServerReservedSlots && _FeedServerReservedSlots_Admins_Online)
                                        {
                                            fetchAccessAfterList = true;
                                        }
                                        //Update rep
                                        UpdatePlayerReputation(aPlayer, false);
                                        //If using ban enforcer, check the player's ban status
                                        if (_UseBanEnforcer)
                                        {
                                            QueuePlayerForBanCheck(aPlayer);
                                        }
                                        else
                                        {
                                            //Queue the player for a hacker check
                                            QueuePlayerForHackerCheck(aPlayer);
                                        }
                                    }
                                    if (_CMDRManagerEnable && _firstPlayerListComplete && (aPlayer.player_type == PlayerType.CommanderPC || aPlayer.player_type == PlayerType.CommanderMobile) && _PlayerDictionary.Values.Count(player => player.player_type == PlayerType.Player) < _CMDRMinimumPlayers)
                                    {
                                        AdKatsRecord record = new AdKatsRecord
                                        {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_kick"),
                                            command_numeric = 0,
                                            target_name = aPlayer.player_name,
                                            target_player = aPlayer,
                                            source_name = "CMDRManager",
                                            record_message = "Commanders not allowed until " + _CMDRMinimumPlayers + " active players",
                                            record_time = UtcNow()
                                        };
                                        QueueRecordForProcessing(record);
                                    }
                                    //Update them to round players
                                    HashSet<Int64> roundPlayers;
                                    if (!_RoundPlayerIDs.TryGetValue(_roundID, out roundPlayers)) {
                                        roundPlayers = new HashSet<Int64>();
                                        _RoundPlayerIDs[_roundID] = roundPlayers;
                                    }
                                    roundPlayers.Add(aPlayer.player_id);
                                    timer.Stop();
                                    durations.Add(timer.Elapsed.TotalSeconds);
                                    if (!_firstPlayerListComplete)
                                    {
                                        Log.Write(index + "/" + trimmedInboundPlayers.Count() + " players loaded (" + aPlayer.player_name + "). " + Math.Round(durations.Sum() / durations.Count, 2) + "s per player.");
                                    }
                                    if (!aPlayer.RoundStats.ContainsKey(_roundID)) {
                                        aPlayer.RoundStats[_roundID] = new AdKatsPlayerStats(_roundID);
                                    }
                                    if (_roundState == RoundState.Playing) {
                                        aPlayer.RoundStats[_roundID].LiveStats = aPlayer.frostbitePlayerInfo;
                                    }
                                    try {
                                        //Top player processing
                                        if (_firstPlayerListComplete &&
                                            _previousRoundDuration != TimeSpan.Zero &&
                                            _UseTopPlayerMonitor &&
                                            aPlayer.player_type == PlayerType.Player &&
                                            _topPlayers.ContainsKey(aPlayer.player_name) && 
                                            _roundState == RoundState.Playing) {
                                            AdKatsTeam t1, t2, tf, te;
                                            if (GetTeamByID(1, out t1) && GetTeamByID(2, out t2) && GetTeamByID(aPlayer.frostbitePlayerInfo.TeamID, out tf)) {
                                                Double t1Power = t1.getTeamPower();
                                                Double t2Power = t2.getTeamPower();
                                                Double playerPower = Math.Pow(aPlayer.TopStats.TopRoundRatio + 1, 2);
                                                Double friendlyPower, enemyPower;
                                                if (t1.TeamID == tf.TeamID) {
                                                    tf = t1;
                                                    te = t2;
                                                    friendlyPower = t1Power;
                                                    enemyPower = t2Power;
                                                } else {
                                                    tf = t2;
                                                    te = t1;
                                                    friendlyPower = t2Power;
                                                    enemyPower = t1Power;
                                                }
                                                if (aPlayer.RequiredTeam == null) {
                                                    if (t1Power > t2Power) {
                                                        aPlayer.RequiredTeam = t2;
                                                    } else {
                                                        aPlayer.RequiredTeam = t1;
                                                    }
                                                    Log.Info(aPlayer.GetVerboseName() + " assigned to " + aPlayer.RequiredTeam.TeamKey + " for round " + _roundID);
                                                } else if (tf != aPlayer.RequiredTeam &&
                                                           (_startingTicketCount == 0 || Math.Min(t1.TeamTicketCount, t2.TeamTicketCount) > _startingTicketCount * (2.0 / 5.0))) {
                                                    //The player is not on the team they should be. But are they?
                                                    var reassignDiff = Math.Round(Math.Abs(tf.getTeamPower(null, aPlayer) - te.getTeamPower(aPlayer, null)));
                                                    var currentDiff = Math.Round(Math.Abs(tf.getTeamPower() - te.getTeamPower()));
                                                    //If team power difference after reassignment would be less than the current, do it
                                                    if (reassignDiff <= currentDiff && tf.TeamKey != "Neutral") {
                                                        if (_isTestingAuthorized) {
                                                            Log.Warn(aPlayer.GetVerboseName() + " REASSIGNED from " + aPlayer.RequiredTeam.TeamKey + " to " + tf.TeamKey + " (" + reassignDiff + "<" + currentDiff + ").");
                                                        }
                                                        aPlayer.RequiredTeam = tf;
                                                    } else {
                                                        if (_isTestingAuthorized && tf.TeamKey != "Neutral") {
                                                            Log.Warn(aPlayer.GetVerboseName() + " friendly power " + tf.TeamKey + " " + friendlyPower + ", enemy power " + te.TeamKey + " " + enemyPower + ".");
                                                            Log.Warn(aPlayer.GetVerboseName() + " assigned to " + aPlayer.RequiredTeam.TeamKey + " but on " + tf.TeamKey + ", attempting to move.");
                                                        }
                                                        ExecuteCommand("procon.protected.send", "admin.movePlayer", aPlayer.player_name, aPlayer.RequiredTeam.TeamID + "", aPlayer.frostbitePlayerInfo.SquadID + "", "false");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    catch (Exception e) {
                                        HandleException(new AdKatsException("Error running player distribution.", e));
                                    }
                                }

                                AdKatsTeam team1, team2;
                                if (GetTeamByID(1, out team1)) {
                                    team1.UpdatePlayerCount(_PlayerDictionary.Values.ToList().Count(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == 1));
                                }
                                if (GetTeamByID(2, out team2)) {
                                    team2.UpdatePlayerCount(_PlayerDictionary.Values.ToList().Count(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == 2));
                                }
                                //Make sure the player dictionary is clean of any straglers
                                Int32 straglerCount = 0;
                                Int32 dicCount = _PlayerDictionary.Count;
                                foreach (string playerName in _PlayerDictionary.Keys.Where(playerName => !validPlayers.Contains(playerName)).ToList())
                                {
                                    straglerCount++;
                                    Log.Debug(() => "Removing " + playerName + " from current player list (VIA CLEANUP).", 4);
                                    AdKatsPlayer aPlayer;
                                    if (_PlayerDictionary.TryGetValue(playerName, out aPlayer))
                                    {
                                        //Shut down any running conversations
                                        if (aPlayer.conversationPartner != null)
                                        {
                                            AdKatsPlayer partner = aPlayer.conversationPartner;
                                            if (PlayerIsExternal(aPlayer.conversationPartner))
                                            {
                                                QueueRecordForProcessing(new AdKatsRecord
                                                {
                                                    record_source = AdKatsRecord.Sources.InternalAutomated,
                                                    server_id = partner.player_server.ServerID,
                                                    record_orchestrate = true,
                                                    command_type = GetCommandByKey("player_pm_cancel"),
                                                    command_numeric = 0,
                                                    target_name = partner.player_name,
                                                    target_player = partner,
                                                    source_name = aPlayer.player_name,
                                                    source_player = aPlayer,
                                                    record_message = aPlayer.GetVerboseName() + " has left their server. Private conversation closed.",
                                                    record_time = UtcNow()
                                                });
                                            }
                                            else
                                            {
                                                PlayerSayMessage(partner.player_name, aPlayer.GetVerboseName() + " has left the server. Private conversation closed.");
                                                partner.conversationPartner = null;
                                            }
                                            aPlayer.conversationPartner = null;
                                        }
                                        //Remove from populators
                                        _populationPopulatingPlayers.Remove(aPlayer.player_name);
                                        //Add player to the left dictionary
                                        aPlayer.player_online = false;
                                        aPlayer.player_server = null;
                                        aPlayer.player_spawnedOnce = false;
                                        aPlayer.ClearPingEntries();
                                        aPlayer.LiveKills.Clear();
                                        DequeuePlayer(aPlayer);
                                        //Remove all old values
                                        List<String> removeNames = _PlayerLeftDictionary.Where(pair => (UtcNow() - pair.Value.LastUsage).TotalMinutes > 120).Select(pair => pair.Key).ToList();
                                        foreach (String removeName in removeNames)
                                        {
                                            _PlayerLeftDictionary.Remove(removeName);
                                        }
                                        aPlayer.LastUsage = UtcNow();
                                        _PlayerLeftDictionary[aPlayer.player_name] = aPlayer;
                                    }
                                    _PlayerDictionary.Remove(playerName);
                                }
                                if (straglerCount > 1 && straglerCount > (dicCount / 2))
                                {
                                    AdKatsRecord record = new AdKatsRecord
                                    {
                                        record_source = AdKatsRecord.Sources.InternalAutomated,
                                        isDebug = true,
                                        server_id = _serverInfo.ServerID,
                                        command_type = GetCommandByKey("player_calladmin"),
                                        command_numeric = straglerCount,
                                        target_name = "Server",
                                        target_player = null,
                                        source_name = "AdKats",
                                        record_message = "Server Crashed (" + dicCount + " Players Lost)",
                                        record_time = UtcNow()
                                    };
                                    //Process the record
                                    QueueRecordForProcessing(record);
                                    Log.Error(record.record_message);
                                    //Set round ended
                                    _roundState = RoundState.Ended;
                                    //Clear populators
                                    _populationPopulatingPlayers.Clear();
                                }
                            }
                            if (fetchAccessAfterList)
                            {
                                FetchAllAccess(true);
                            }
                            if (_PlayerRoleRefetch)
                            {
                                //Update roles for all online players
                                foreach (AdKatsPlayer aPlayer in _PlayerDictionary.Values)
                                {
                                    AssignPlayerRole(aPlayer);
                                }
                                _PlayerRoleRefetch = false;
                            }

                            if (_firstPlayerListComplete)
                            {
                                Int32 playerCount = _PlayerDictionary.Values.Count(player => player.player_type == PlayerType.Player);
                                if (playerCount < _lowPopulationPlayerCount)
                                {
                                    switch (_populationStatus)
                                    {
                                        case PopulationState.Unknown:
                                            _populationTransitionTime = UtcNow();
                                            OnlineAdminSayMessage("Server in populating mode.");
                                            break;
                                        case PopulationState.Low:
                                            //Current state
                                            _populationDurations[PopulationState.Low] += (UtcNow() - _populationUpdateTime);
                                            break;
                                        case PopulationState.Medium:
                                            _populationTransitionTime = UtcNow();
                                            _populationDurations[PopulationState.Medium] += (UtcNow() - _populationTransitionTime);
                                            OnlineAdminSayMessage("Server now in populating mode, with " + playerCount + " populators.");
                                            break;
                                        case PopulationState.High:
                                            _populationTransitionTime = UtcNow();
                                            _populationDurations[PopulationState.High] += (UtcNow() - _populationTransitionTime);
                                            OnlineAdminSayMessage("Server now in populating mode, with " + playerCount + " populators.");
                                            break;
                                        default:
                                            break;
                                    }
                                    if (!_populationPopulating)
                                    {
                                        _populationPopulatingPlayers.Clear();
                                        _populationPopulating = true;
                                        foreach (AdKatsPlayer popPlayer in _PlayerDictionary.Values.Where(player => player.player_type == PlayerType.Player).ToList())
                                        {
                                            _populationPopulatingPlayers[popPlayer.player_name] = popPlayer;
                                        }
                                    }
                                    _populationStatus = PopulationState.Low;
                                }
                                else if (playerCount < _highPopulationPlayerCount)
                                {
                                    switch (_populationStatus)
                                    {
                                        case PopulationState.Unknown:
                                            _populationTransitionTime = UtcNow();
                                            break;
                                        case PopulationState.Low:
                                            _populationTransitionTime = UtcNow();
                                            _populationDurations[PopulationState.Low] += (UtcNow() - _populationTransitionTime);
                                            break;
                                        case PopulationState.Medium:
                                            //Current state
                                            _populationDurations[PopulationState.Medium] += (UtcNow() - _populationUpdateTime);
                                            break;
                                        case PopulationState.High:
                                            _populationTransitionTime = UtcNow();
                                            _populationDurations[PopulationState.High] += (UtcNow() - _populationTransitionTime);
                                            break;
                                        default:
                                            break;
                                    }
                                    _populationStatus = PopulationState.Medium;
                                }
                                else
                                {
                                    switch (_populationStatus)
                                    {
                                        case PopulationState.Unknown:
                                            _populationTransitionTime = UtcNow();
                                            break;
                                        case PopulationState.Low:
                                            _populationTransitionTime = UtcNow();
                                            _populationDurations[PopulationState.Low] += (UtcNow() - _populationTransitionTime);
                                            break;
                                        case PopulationState.Medium:
                                            _populationTransitionTime = UtcNow();
                                            _populationDurations[PopulationState.Medium] += (UtcNow() - _populationTransitionTime);
                                            break;
                                        case PopulationState.High:
                                            //Current state
                                            _populationDurations[PopulationState.High] += (UtcNow() - _populationUpdateTime);
                                            break;
                                        default:
                                            break;
                                    }
                                    if (_populationPopulating)
                                    {
                                        foreach (AdKatsPlayer popPlayer in _populationPopulatingPlayers.Values.Where(aPlayer => aPlayer.player_online && _PlayerDictionary.ContainsKey(aPlayer.player_name) && aPlayer.player_type == PlayerType.Player))
                                        {
                                            QueueRecordForProcessing(new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("player_population_success"),
                                                command_numeric = 0,
                                                target_name = popPlayer.player_name,
                                                target_player = popPlayer,
                                                source_name = "PopulationManager",
                                                record_message = "Populated Server " + _serverInfo.ServerID,
                                                record_time = UtcNow()
                                            });
                                        }
                                        _populationPopulatingPlayers.Clear();
                                        _populationPopulating = false;
                                    }
                                    _populationStatus = PopulationState.High;
                                }
                                _populationUpdateTime = UtcNow();
                            }
                        }

                        if (pingPickedPlayer != null)
                        {
                            AdKatsRecord record = new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_kick"),
                                command_numeric = 0,
                                target_name = pingPickedPlayer.player_name,
                                target_player = pingPickedPlayer,
                                source_name = "PingEnforcer",
                                record_message = _pingEnforcerMessagePrefix + " " + ((pingPickedPlayer.player_ping_avg > 0) ? ("Cur:[" + Math.Round(pingPickedPlayer.player_ping) + "ms] Avg:[" + Math.Round(pingPickedPlayer.player_ping_avg) + "ms]") : ("[Missing]")),
                                record_time = UtcNow()
                            };
                            QueueRecordForProcessing(record);
                            AdminSayMessage(record.GetTargetNames() + " KICKED for exceeding ping limit. " + ((pingPickedPlayer.player_ping_avg > 0) ? ("Cur:[" + Math.Round(pingPickedPlayer.player_ping) + "ms] Avg:[" + Math.Round(pingPickedPlayer.player_ping_avg) + "ms]") : ("[Missing]")));
                        }

                        //Update last successful player list time
                        _lastSuccessfulPlayerList = UtcNow();
                        //Set required handles 
                        _PlayerListUpdateWaitHandle.Set();
                        _TeamswapWaitHandle.Set();
                        //Push online player subscription
                        if (playerListFetched && _pluginEnabled)
                        {
                            SendOnlineSoldiers();
                        }
                        if (!_firstPlayerListComplete && playerListFetched && _pluginEnabled)
                        {
                            _AdKatsRunningTime = UtcNow();
                            _firstPlayerListComplete = true;
                            OnlineAdminSayMessage("Player listing complete [" + _PlayerDictionary.Count + " players]. Performing final startup.");
                            Log.Success("Player listing complete [" + _PlayerDictionary.Count + " players].");

                            Log.Info("Performing final startup.");
                            //Register external plugin commands
                            RegisterCommand(_issueCommandMatchCommand);
                            RegisterCommand(_fetchAuthorizedSoldiersMatchCommand);
                            _threadMasterWaitHandle.WaitOne(500);

                            var startupDuration = NowDuration(_AdKatsStartTime);
                            _startupDurations.Enqueue(startupDuration);
                            while(_startupDurations.Count() > 5)
                            {
                                _startupDurations.Dequeue();
                            }
                            var averageStartupDuration = TimeSpan.FromSeconds(_startupDurations.Average(span => span.TotalSeconds));
                            var averageDurationString = "";
                            if (_isTestingAuthorized)
                            {
                                averageDurationString = "(" + FormatTimeString(averageStartupDuration, 3) + ":" + _startupDurations.Count() + ")";
                            }
                            OnlineAdminTellMessage("AdKats startup complete [" + FormatTimeString(startupDuration, 3) + "]" + averageDurationString + ". Commands are now online.");
                            foreach (String playerName in _PlayersRequestingCommands)
                            {
                                AdKatsPlayer aPlayer;
                                if (_PlayerDictionary.TryGetValue(playerName, out aPlayer))
                                {
                                    if (!PlayerIsAdmin(aPlayer))
                                    {
                                        PlayerTellMessage(aPlayer.player_name, "AdKats commands now online. Thank you for your patience.");
                                    }
                                }
                            }
                            Log.Success("AdKats " + GetPluginVersion() + " startup complete [" + FormatTimeString(UtcNow() - _AdKatsStartTime, 3) + "]. Commands are now online.");

                            if (_TeamspeakPlayerMonitorEnable)
                            {
                                _tsViewer.Enable();
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            Log.Warn("player listing thread was force aborted. Exiting.");
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in player listing thread. Skipping loop.", e));
                    }
                }
                Log.Debug(() => "Ending Player Listing Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in player listing thread.", e));
            }
        }

        public override void OnPunkbusterPlayerInfo(CPunkbusterInfo cpbiPlayer)
        {
            try
            {
                Log.Debug(() => "OnPunkbusterPlayerInfo fired!", 7);
                AdKatsPlayer aPlayer;
                if (_PlayerDictionary.TryGetValue(cpbiPlayer.SoldierName, out aPlayer))
                {
                    Boolean updatePlayer = false;
                    //Update the player with pb info
                    aPlayer.PBPlayerInfo = cpbiPlayer;
                    aPlayer.player_pbguid = cpbiPlayer.GUID;
                    aPlayer.player_slot = cpbiPlayer.SlotID;
                    String player_ip = cpbiPlayer.Ip.Split(':')[0];
                    if (player_ip != aPlayer.player_ip && !String.IsNullOrEmpty(player_ip))
                    {
                        updatePlayer = true;
                        if (!String.IsNullOrEmpty(aPlayer.player_ip))
                        {
                            Log.Debug(() => aPlayer.GetVerboseName() + " changed their IP from " + aPlayer.player_ip + " to " + player_ip + ". Updating the database.", 2);
                            AdKatsRecord record = new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_changeip"),
                                command_numeric = 0,
                                target_name = aPlayer.player_name,
                                target_player = aPlayer,
                                source_name = "AdKats",
                                record_message = aPlayer.player_ip,
                                record_time = UtcNow()
                            };
                            QueueRecordForProcessing(record);
                        }
                    }
                    aPlayer.SetIP(player_ip);

                    if (aPlayer.location == null || aPlayer.location.status != "success" || aPlayer.location.IP != aPlayer.player_ip)
                    {
                        //Update IP location
                        QueuePlayerForIPInfoFetch(aPlayer);
                    }

                    if (updatePlayer)
                    {
                        Log.Debug(() => "Queueing existing player " + aPlayer.GetVerboseName() + " for update.", 4);
                        UpdatePlayer(aPlayer);
                        //If using ban enforcer, queue player for update
                        if (_UseBanEnforcer)
                        {
                            QueuePlayerForBanCheck(aPlayer);
                        }
                    }
                }
                Log.Debug(() => "Player slot: " + cpbiPlayer.SlotID, 7);
                Log.Debug(() => "OnPunkbusterPlayerInfo finished!", 7);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured while processing punkbuster info.", e));
            }
        }

        private void FetchAllAccess(Boolean async)
        {
            if (async)
            {
                _AccessFetchWaitHandle.Set();
            }
            else if (_threadsReady)
            {
                lock (_userCache)
                {
                    DateTime start = UtcNow();
                    FetchCommands();
                    Log.Debug(() => "Command fetch took " + (UtcNow() - start).TotalMilliseconds + "ms.", 4);
                    start = UtcNow();
                    FetchRoles();
                    Log.Debug(() => "Role fetch took " + (UtcNow() - start).TotalMilliseconds + "ms.", 4);
                    start = UtcNow();
                    FetchUserList();
                    Log.Debug(() => "User fetch took " + (UtcNow() - start).TotalMilliseconds + "ms.", 4);
                    start = UtcNow();
                }
            }
        }

        private void AccessFetchingThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Access Fetching Thread", 1);
                Thread.CurrentThread.Name = "AccessFetching";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering Access Fetching Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }

                        FetchAllAccess(false);

                        Log.Debug(() => "Access fetch waiting for Input.", 5);
                        if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                        {
                            Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                        }
                        _AccessFetchWaitHandle.Reset();
                        _AccessFetchWaitHandle.WaitOne(TimeSpan.FromSeconds(300));
                        loopStart = UtcNow();
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            Log.Warn("Access Fetching thread was force aborted. Exiting.");
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in Access Fetching thread. Skipping loop.", e));
                    }
                }
                Log.Debug(() => "Ending Access Fetching Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in Access Fetching thread.", e));
            }
        }

        private void FetchRoundID(Boolean increment) {
            try {
                using (MySqlConnection connection = GetDatabaseConnection()) {
                    using (MySqlCommand command = connection.CreateCommand()) {
                        command.CommandText = @"
                            SELECT
	                            IFNULL(MAX(`round_id`), 0) AS `max_round_id`
                            FROM
	                            `tbl_extendedroundstats`
                            WHERE 
                                `server_id` = @server_id";
                        command.Parameters.AddWithValue("server_id", _serverInfo.ServerID);
                        using (MySqlDataReader reader = SafeExecuteReader(command)) {
                            if (reader.Read()) {
                                Int32 oldRoundID = reader.GetInt32("max_round_id");
                                if (increment) {
                                    _roundID = oldRoundID + 1;
                                    Log.Debug(() => "New round. Round ID is " + _roundID, 2);
                                }
                                else {
                                    _roundID = oldRoundID;
                                    Log.Debug(() => "Current round. Round ID is " + _roundID, 2);
                                }
                            } else {
                                _roundID = 1;
                            }
                        }
                    }
                }
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error fetching round ID", e));
            }
        }

        private void StartRoundTicketLogger(Int32 startingSeconds)
        {
            try
            {
                if (!_pluginEnabled || !_threadsReady || !_firstPlayerListComplete || _roundID <= 0)
                {
                    return;
                }
                Thread roundLoggerThread = new Thread(new ThreadStart(delegate
                {
                    try
                    {
                        Thread.CurrentThread.Name = "RoundTicketLogger";
                        Int32 TPCSCounter = 0;
                        Boolean TPCSActionTaken = false;
                        Int32 roundTimeSeconds = startingSeconds;
                        ProconChatWrite(Log.FBold("Ticket logging started on round " + _roundID));

                        Stopwatch watch = new Stopwatch();
                        while (true)
                        {
                            if (!_pluginEnabled)
                            {
                                break;
                            }
                            watch.Reset();
                            watch.Start();
                            if (_roundState == RoundState.Loaded)
                            {
                                _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(2));
                                continue;
                            }
                            AdKatsTeam team1 = _teamDictionary[1];
                            AdKatsTeam team2 = _teamDictionary[2];
                            if (_roundState == RoundState.Ended || !_pluginEnabled || _PlayerDictionary.Count() <= 2)
                            {
                                break;
                            }

                            using (MySqlConnection connection = GetDatabaseConnection())
                            {
                                using (MySqlCommand command = connection.CreateCommand())
                                {
                                    //Set the insert command structure
                                    command.CommandText = @"
                                    INSERT INTO 
                                        `tbl_extendedroundstats` 
                                    (
                                        `server_id`, 
                                        `round_id`, 
                                        `round_elapsedTimeSec`, 
                                        `team1_count`, 
                                        `team2_count`, 
                                        `team1_score`, 
                                        `team2_score`, 
                                        `team1_spm`, 
                                        `team2_spm`, 
                                        `team1_tickets`, 
                                        `team2_tickets`,
                                        `team1_tpm`, 
                                        `team2_tpm`,
                                        `roundstat_time`
                                    ) 
                                    VALUES 
                                    (
                                        @server_id, 
                                        @round_id, 
                                        @round_elapsedTimeSec, 
                                        @team1_count, 
                                        @team2_count, 
                                        @team1_score, 
                                        @team2_score, 
                                        @team1_spm, 
                                        @team2_spm, 
                                        @team1_tickets, 
                                        @team2_tickets,
                                        @team1_tpm, 
                                        @team2_tpm,
                                        UTC_TIMESTAMP()
                                    )";
                                    command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                                    command.Parameters.AddWithValue("@round_id", _roundID);
                                    command.Parameters.AddWithValue("@round_elapsedTimeSec", roundTimeSeconds);
                                    command.Parameters.AddWithValue("@team1_count", team1.TeamPlayerCount);
                                    command.Parameters.AddWithValue("@team2_count", team2.TeamPlayerCount);
                                    command.Parameters.AddWithValue("@team1_score", Math.Round(team1.TeamTotalScore, 2));
                                    command.Parameters.AddWithValue("@team2_score", Math.Round(team2.TeamTotalScore, 2));
                                    command.Parameters.AddWithValue("@team1_spm", Math.Round(team1.TeamScoreDifferenceRate, 2));
                                    command.Parameters.AddWithValue("@team2_spm", Math.Round(team2.TeamScoreDifferenceRate, 2));
                                    command.Parameters.AddWithValue("@team1_tickets", team1.TeamTicketCount);
                                    command.Parameters.AddWithValue("@team2_tickets", team2.TeamTicketCount);
                                    command.Parameters.AddWithValue("@team1_tpm", Math.Round(team1.GetTicketDifferenceRate(), 2));
                                    command.Parameters.AddWithValue("@team2_tpm", Math.Round(team2.GetTicketDifferenceRate(), 2));
                                    if (team1.TeamPlayerCount > 0 || team2.TeamPlayerCount > 0)
                                    {
                                        try
                                        {
                                            //Attempt to execute the query
                                            if (SafeExecuteNonQuery(command) > 0)
                                            {
                                                Log.Debug(() => "round stat pushed to database", 5);
                                            }
                                        }
                                        catch (Exception e)
                                        {
                                            HandleException(new AdKatsException("Invalid round stats when posting. " + FormatTimeString(_serverInfo.GetRoundElapsedTime(), 2) + "|" + team1.TeamPlayerCount + "|" + team2.TeamPlayerCount + "|" + Math.Round(team1.TeamTotalScore, 2) + "|" + Math.Round(team2.TeamTotalScore, 2) + "|" + Math.Round(team1.TeamScoreDifferenceRate, 2) + "|" + team1.TeamScoreDifferenceRate + "|" + Math.Round(team2.TeamScoreDifferenceRate, 2) + "|" + team2.TeamScoreDifferenceRate + "|" + team1.TeamTicketCount + "|" + team2.TeamTicketCount + "|" + Math.Round(team1.GetTicketDifferenceRate(), 2) + "|" + team1.GetTicketDifferenceRate() + "|" + Math.Round(team2.GetTicketDifferenceRate(), 2) + "|" + team2.GetTicketDifferenceRate()));
                                        }
                                    }
                                }
                            }

                            watch.Stop();
                            if (watch.Elapsed.TotalSeconds < 30)
                            {
                                _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(30) - watch.Elapsed);
                            }
                            roundTimeSeconds += 30;
                        }
                    }
                    catch (Exception e)
                    {
                        HandleException(new AdKatsException("Error in round stat logger thread", e));
                    }
                    LogThreadExit();
                }));

                if (_aliveThreads.Values.All(thread => thread.Name != "RoundTicketLogger"))
                {
                    //Start the thread
                    StartAndLogThread(roundLoggerThread);
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while starting round ticket logger", e));
            }
        }

        public override void OnServerInfo(CServerInfo serverInfo)
        {
            Log.Debug(() => "Entering OnServerInfo", 7);
            try
            {
                if (_pluginEnabled)
                {
                    lock (_serverInfo)
                    {
                        if (serverInfo != null)
                        {
                            //Get the server info
                            if (NowDuration(_LastServerInfoFire).TotalSeconds < 9.5)
                            {
                                return;
                            }
                            _LastServerInfoFire = UtcNow();
                            _serverInfo.SetInfoObject(serverInfo);
                            if (serverInfo.TeamScores != null)
                            {
                                List<TeamScore> listCurrTeamScore = serverInfo.TeamScores;
                                //During round change, teams don't exist
                                if (listCurrTeamScore.Count > 0)
                                {
                                    foreach (TeamScore score in listCurrTeamScore)
                                    {
                                        AdKatsTeam currentTeam;
                                        if (!GetTeamByID(score.TeamID, out currentTeam))
                                        {
                                            if (_roundState == RoundState.Playing)
                                            {
                                                Log.Error("Teams not loaded when they should be.");
                                            }
                                            continue;
                                        }
                                        currentTeam.UpdateTicketCount(score.Score);
                                        currentTeam.UpdateTotalScore(_PlayerDictionary.Values.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == score.TeamID).Aggregate<AdKatsPlayer, double>(0, (current, aPlayer) => current + aPlayer.frostbitePlayerInfo.Score));
                                    }
                                }
                                else
                                {
                                    Log.Debug(() => "Server info fired while changing rounds, no teams to parse.", 5);
                                }
                            }
                            AdKatsTeam team1, team2;
                            if (!GetTeamByID(1, out team1))
                            {
                                if (_roundState == RoundState.Playing)
                                {
                                    Log.Error("Teams not loaded when they should be.");
                                }
                                return;
                            }
                            if (!GetTeamByID(2, out team2))
                            {
                                if (_roundState == RoundState.Playing)
                                {
                                    Log.Error("Teams not loaded when they should be.");
                                }
                                return;
                            }
                            AdKatsTeam winningTeam = null;
                            AdKatsTeam losingTeam = null;
                            AdKatsTeam mapUpTeam = null;
                            AdKatsTeam mapDownTeam = null;
                            AdKatsTeam baserapingTeam = null;
                            AdKatsTeam baserapedTeam = null;
                            if (team1.TeamTicketCount > team2.TeamTicketCount)
                            {
                                winningTeam = team1;
                                losingTeam = team2;
                            }
                            else
                            {
                                winningTeam = team2;
                                losingTeam = team1;
                            }
                            if (team1.GetTicketDifferenceRate() > team2.GetTicketDifferenceRate())
                            {
                                //Team1 has more map than Team2
                                mapUpTeam = team1;
                                mapDownTeam = team2;
                            }
                            else
                            {
                                //Team2 has more map than Team1
                                mapUpTeam = team2;
                                mapDownTeam = team1;
                            }
                            if (_DisplayTicketRatesInProconChat && 
                                _roundState == RoundState.Playing &&
                                _PlayerDictionary.Any())
                            {
                                String flagMessage = "";
                                if (_serverInfo.InfoObject.GameMode == "ConquestLarge0" || 
                                    _serverInfo.InfoObject.GameMode == "Chainlink0" || 
                                    _serverInfo.InfoObject.GameMode == "Domination0")
                                {
                                    Double winRate = mapUpTeam.GetTicketDifferenceRate();
                                    Double loseRate = mapDownTeam.GetTicketDifferenceRate();
                                    if (_serverInfo.InfoObject.GameMode == "ConquestLarge0" && _gameVersion == GameVersion.BF4)
                                    {
                                        Int32 maxFlags = Int32.MaxValue;
                                        switch (_serverInfo.InfoObject.Map)
                                        {
                                            case "XP0_Metro":
                                                maxFlags = 3;
                                                break;
                                            case "MP_Prison":
                                                maxFlags = 5;
                                                break;
                                        }
                                        if ((UtcNow() - _AdKatsRunningTime).TotalMinutes > 2.5 && _firstPlayerListComplete)
                                        {
                                            if (winRate > -20 && loseRate > -20)
                                            {
                                                flagMessage = " | Flags equal, ";
                                            }
                                            else if (loseRate <= -20 && loseRate > -34)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 1 flag, ";
                                            }
                                            else if (loseRate <= -34 && loseRate > -38)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 1-3 flags, ";
                                            }
                                            else if (loseRate <= -38 && loseRate > -44 || maxFlags == 3)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 3 flags, ";
                                            }
                                            else if (loseRate <= -44 && loseRate > -48)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 3-5 flags, ";
                                            }
                                            else if (loseRate <= -48 && loseRate > -54 || maxFlags == 5)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 5 flags, ";
                                            }
                                            else if (loseRate <= -54 && loseRate > -58)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 5-7 flags, ";
                                            }
                                            else if (loseRate <= -58 && loseRate > -64 || maxFlags == 7)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 7 flags, ";
                                            }
                                            else if (loseRate <= -64 && loseRate > -68)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 7-9 flags, ";
                                            }
                                            else if (loseRate <= -68 && loseRate > -74 || maxFlags == 9)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up 9 flags, ";
                                            }
                                            else if (loseRate < -74)
                                            {
                                                flagMessage = " | " + mapUpTeam.TeamKey + " up many flags, ";
                                            }
                                            double t1t = team1.TeamAdjustedTicketAccellerationRate - team2.TeamAdjustedTicketAccellerationRate;
                                            double t2t = team2.TeamAdjustedTicketAccellerationRate - team1.TeamAdjustedTicketAccellerationRate;
                                            if (Math.Abs(t1t - t2t) < 10)
                                            {
                                                flagMessage += "not changing.";
                                            }
                                            else if (t1t > t2t)
                                            {
                                                flagMessage += team1.TeamKey + " gaining ground.";
                                            }
                                            else
                                            {
                                                flagMessage += team2.TeamKey + " gaining ground.";
                                            }
                                        }
                                        else
                                        {
                                            flagMessage = " | Calculating flag state.";
                                        }
                                    }
                                    else
                                    {
                                        flagMessage = " | " + _serverInfo.InfoObject.GameMode;
                                    }
                                }
                                if ((UtcNow() - _LastTicketRateDisplay).TotalSeconds > 55 || _currentFlagMessage != flagMessage)
                                {
                                    _LastTicketRateDisplay = UtcNow();
                                    _currentFlagMessage = flagMessage;
                                    ProconChatWrite(Log.FBold(team1.TeamKey + " Rate: " + Math.Round(team1.GetTicketDifferenceRate(), 1) + " t/m | " + team2.TeamKey + " Rate: " + Math.Round(team2.GetTicketDifferenceRate(), 1) + " t/m" + flagMessage));
                                }
                            }

                            if (team1.TeamTicketCount >= 0 && team2.TeamTicketCount >= 0)
                            {
                                _lowestTicketCount = Math.Min(team1.TeamTicketCount, team2.TeamTicketCount);
                                _highestTicketCount = Math.Max(team1.TeamTicketCount, team2.TeamTicketCount);
                            }

                            //Auto-Surrender System
                            if (_surrenderAutoEnable && 
                                _roundState == RoundState.Playing && 
                                !_endingRound && 
                                (UtcNow() - _lastAutoSurrenderTriggerTime).TotalSeconds > 9.0 && 
                                _serverInfo.GetRoundElapsedTime().TotalSeconds > 60 && 
                                (UtcNow() - _AdKatsRunningTime).TotalMinutes > 2.5 &&
                                _firstPlayerListComplete &&
                                //Block system if all possible actions have already taken place this round
                                (_autoNukesThisRound < _surrenderAutoMaxNukesEachRound || _surrenderAutoNukeResolveAfterMax) &&
                                //Block system while a nuke is active
                                NowDuration(_surrenderAutoNukeLast).TotalSeconds > _surrenderAutoNukeDurationHigh)
                            {
                                Boolean canFire = true;
                                Boolean fired = false;
                                String denyReason = "";
                                String readyPercentage = "";

                                //Action
                                AutoSurrenderAction config_action = AutoSurrenderAction.None;
                                if (_surrenderAutoNukeInstead)
                                {
                                    if (_autoNukesThisRound < _surrenderAutoMaxNukesEachRound)
                                    {
                                        config_action = AutoSurrenderAction.Nuke;
                                    }
                                    else if (_surrenderAutoNukeResolveAfterMax)
                                    {
                                        config_action = AutoSurrenderAction.Surrender;
                                    }
                                    else
                                    {
                                        config_action = AutoSurrenderAction.None;
                                    }
                                }
                                else if (_surrenderAutoTriggerVote)
                                {
                                    config_action = AutoSurrenderAction.Vote;
                                }
                                else
                                {
                                    config_action = AutoSurrenderAction.Surrender;
                                }

                                if (config_action != AutoSurrenderAction.None)
                                {
                                    //State
                                    Boolean config_resumed = _surrenderAutoTriggerCountCurrent > 0 && _surrenderAutoTriggerCountCurrent == _surrenderAutoTriggerCountPause;

                                    //Tickets
                                    Int32 config_tickets_min = 0;
                                    Int32 config_tickets_max = 9999;
                                    Int32 config_tickets_gap_min = 0;

                                    //Rates
                                    Double config_mapUp_rate_max = 0;
                                    Double config_mapUp_rate_min = 0;
                                    Double config_mapDown_rate_max = 0;
                                    Double config_mapDown_rate_min = 0;

                                    //Triggers
                                    Int32 config_triggers_min = 0;

                                    //Set automatic values for metro 2014 
                                    if (_surrenderAutoUseMetroValues)
                                    {
                                        //Tickets
                                        config_tickets_min = 100;
                                        config_tickets_max = 9999;
                                        config_tickets_gap_min = 100;

                                        //Rates
                                        config_mapDown_rate_max = -42;
                                        config_mapDown_rate_min = -1000;
                                        config_mapUp_rate_max = 1000;
                                        config_mapUp_rate_min = -5;

                                        //Triggers
                                        if (config_action == AutoSurrenderAction.Surrender)
                                        {
                                            config_triggers_min = 20;
                                            //Add modification based on ticket count
                                            if (losingTeam.TeamTicketCount <= 600)
                                            {
                                                config_triggers_min -= (600 - losingTeam.TeamTicketCount) / 30;
                                            }
                                            //Add modification based on automatic assist
                                            if (_PlayersAutoAssistedThisRound)
                                            {
                                                config_triggers_min *= 2;
                                            }
                                        }
                                        else
                                        {
                                            config_triggers_min = 4;
                                        }
                                    }
                                    //Set automatic values for operation locker 
                                    else if (_surrenderAutoUseLockerValues)
                                    {
                                        //Tickets
                                        config_tickets_min = 100;
                                        config_tickets_max = 9999;
                                        config_tickets_gap_min = 100;

                                        //Rates
                                        config_mapDown_rate_max = -50;
                                        config_mapDown_rate_min = -1000;
                                        config_mapUp_rate_max = 1000;
                                        config_mapUp_rate_min = -5;

                                        //Triggers
                                        if (config_action == AutoSurrenderAction.Surrender)
                                        {
                                            config_triggers_min = 20;
                                            //Add modification based on ticket count
                                            if (losingTeam.TeamTicketCount <= 600)
                                            {
                                                config_triggers_min -= (600 - losingTeam.TeamTicketCount) / 30;
                                            }
                                            //Add modification based on automatic assist
                                            if (_PlayersAutoAssistedThisRound)
                                            {
                                                config_triggers_min *= 2;
                                            }
                                        }
                                        else
                                        {
                                            config_triggers_min = 4;
                                        }
                                    }
                                    //Set custom values based on the user
                                    else
                                    {
                                        //Tickets
                                        config_tickets_min = _surrenderAutoMinimumTicketCount;
                                        config_tickets_max = _surrenderAutoMaximumTicketCount;
                                        config_tickets_gap_min = _surrenderAutoMinimumTicketGap;

                                        //Rates
                                        config_mapDown_rate_max = _surrenderAutoLosingRateMax;
                                        config_mapDown_rate_min = _surrenderAutoLosingRateMin;
                                        config_mapUp_rate_max = _surrenderAutoWinningRateMax;
                                        config_mapUp_rate_min = _surrenderAutoWinningRateMin;

                                        //Triggers
                                        config_triggers_min = _surrenderAutoTriggerCountToSurrender;
                                    }
                                    
                                    //Add modification based on population
                                    if (config_action == AutoSurrenderAction.Nuke && 
                                        config_triggers_min < 5 &&
                                        (_populationStatus == PopulationState.Low || _populationStatus == PopulationState.Medium))
                                    {
                                        config_triggers_min = 5;
                                    }

                                    int playerCount = _PlayerDictionary.Values.Count(player => player.player_type == PlayerType.Player);
                                    int neededPlayers = Math.Min(_surrenderAutoMinimumPlayers - playerCount, 0);
                                    var ticketGap = Math.Abs(winningTeam.TeamTicketCount - losingTeam.TeamTicketCount);

                                    if (canFire && 
                                        neededPlayers > 0)
                                    {
                                        canFire = false;
                                        denyReason = neededPlayers + " more players needed.";
                                    }

                                    var downRate = mapDownTeam.GetTicketDifferenceRate();
                                    var upRate = mapUpTeam.GetTicketDifferenceRate();

                                    var validRateWindow = downRate <= config_mapDown_rate_max &&
                                                          downRate >= config_mapDown_rate_min &&
                                                          upRate <= config_mapUp_rate_max &&
                                                          upRate >= config_mapUp_rate_min;
                                    var validTicketBasedNuke = config_action == AutoSurrenderAction.Nuke &&
                                                               mapUpTeam == winningTeam &&
                                                               ticketGap > _NukeWinningTeamUpTicketCount;
                                    var validTeams = config_action == AutoSurrenderAction.Nuke ||
                                                     winningTeam == mapUpTeam;
                                    if ((validRateWindow || validTicketBasedNuke) &&
                                        validTeams)
                                    {
                                        //Fire triggers
                                        _lastAutoSurrenderTriggerTime = UtcNow();
                                        _surrenderAutoTriggerCountCurrent++;

                                        //Log
                                        if (_isTestingAuthorized)
                                        {
                                            Log.Warn("FIRING NUKE TRIGGERS: UP/" + mapUpTeam.TeamKey + "/" + upRate + " | DOWN/" + mapDownTeam.TeamKey + "/" + downRate);
                                        }

                                        readyPercentage = Math.Round(Math.Min((_surrenderAutoTriggerCountCurrent / (Double)config_triggers_min) * 100.0, 100)) + "%";

                                        if (canFire &&
                                            config_action == AutoSurrenderAction.Nuke &&
                                            _autoNukesThisRound > 0 &&
                                            NowDuration(_surrenderAutoNukeLast).TotalSeconds < _surrenderAutoNukeMinBetween)
                                        {
                                            canFire = false;
                                            denyReason = "~" + FormatNowDuration(_surrenderAutoNukeLast.AddSeconds(_surrenderAutoNukeMinBetween), 2) + " till it can fire again.";
                                        }
                                        
                                        if (canFire &&
                                            _surrenderAutoTriggerCountCurrent < config_triggers_min)
                                        {
                                            canFire = false;
                                            TimeSpan remaining = TimeSpan.FromSeconds((config_triggers_min - _surrenderAutoTriggerCountCurrent) * 10);
                                            denyReason = "~" + FormatTimeString(remaining, 2) + " till it can fire.";
                                        }
                                        if (canFire && ticketGap < config_tickets_gap_min)
                                        {
                                            canFire = false;
                                            denyReason = "Less than " + config_tickets_gap_min + " tickets between teams. (" + ticketGap + ")";
                                        }
                                        
                                        if (canFire && winningTeam.TeamTicketCount > config_tickets_max)
                                        {
                                            canFire = false;
                                            denyReason = winningTeam.TeamKey + " has more than " + config_tickets_max + " tickets. (" + winningTeam.TeamTicketCount + ")";
                                        }
                                        
                                        if (canFire && losingTeam.TeamTicketCount < config_tickets_min)
                                        {
                                            canFire = false;
                                            denyReason = losingTeam.TeamKey + " has less than " + config_tickets_min + " tickets. (" + losingTeam.TeamTicketCount + ")";
                                        }

                                        if (canFire && 
                                            config_action == AutoSurrenderAction.Nuke && 
                                            mapUpTeam != winningTeam)
                                        {
                                            //Losing team is the one with all flags capped
                                            if (_surrenderAutoNukeLosingTeams)
                                            {
                                                if (ticketGap > _surrenderAutoNukeLosingMaxDiff)
                                                {
                                                    canFire = false;
                                                    denyReason = mapUpTeam.TeamKey + " losing by more than " + _surrenderAutoNukeLosingMaxDiff + " tickets.";
                                                }
                                            }
                                            else
                                            {
                                                canFire = false;
                                                denyReason = mapUpTeam.TeamKey + " is losing.";
                                            }
                                        }
                                        
                                        if (canFire)
                                        {
                                            fired = true;
                                            switch (config_action)
                                            {
                                                case AutoSurrenderAction.Surrender:
                                                    baserapingTeam = winningTeam;
                                                    baserapedTeam = losingTeam;
                                                    break;
                                                case AutoSurrenderAction.Nuke:
                                                    if (_surrenderAutoNukeLosingTeams)
                                                    {
                                                        baserapingTeam = mapUpTeam;
                                                        baserapedTeam = mapDownTeam;
                                                    }
                                                    else
                                                    {
                                                        baserapingTeam = winningTeam;
                                                        baserapedTeam = losingTeam;
                                                    }
                                                    break;
                                                case AutoSurrenderAction.Vote:
                                                    baserapingTeam = winningTeam;
                                                    baserapedTeam = losingTeam;
                                                    break;
                                            }
                                        }
                                        else
                                        {
                                            if (config_resumed)
                                            {
                                                if (config_action == AutoSurrenderAction.Nuke)
                                                {
                                                    AdminSayMessage("Auto-nuke countdown resumed at " + readyPercentage + "." + denyReason);
                                                }
                                                else
                                                {
                                                    OnlineAdminSayMessage("Auto-surrender countdown resumed at " + readyPercentage + "." + denyReason);
                                                }
                                            }
                                            //How often the message should be displayed
                                            else if (_surrenderAutoTriggerCountCurrent == 1 || 
                                                     _surrenderAutoTriggerCountCurrent % 3 == 0 ||
                                                     (config_action == AutoSurrenderAction.Nuke && neededPlayers <= 10) ||
                                                     _surrenderAutoTriggerVote)
                                            {
                                                if (_surrenderAutoTriggerCountCurrent < config_triggers_min)
                                                {
                                                    if (config_action == AutoSurrenderAction.Nuke)
                                                    {
                                                        if (_surrenderAutoAnnounceNukePrep)
                                                        {
                                                            AdminSayMessage("Auto-nuke " + (_autoNukesThisRound + 1) + " " + readyPercentage + " ready. " + denyReason);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        OnlineAdminSayMessage("Auto-surrender " + readyPercentage + " ready. " + denyReason);
                                                    }
                                                }
                                                else
                                                {
                                                    if (config_action == AutoSurrenderAction.Nuke)
                                                    {
                                                        if (_surrenderAutoAnnounceNukePrep)
                                                        {
                                                            AdminSayMessage("Auto-nuke " + (_autoNukesThisRound + 1) + " ready and waiting. " + denyReason);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        OnlineAdminSayMessage("Auto-surrender ready and waiting. " + denyReason);
                                                    }
                                                }
                                            }

                                            if (!_Team1MoveQueue.Any() &&
                                                !_Team2MoveQueue.Any() &&
                                                _serverInfo.GetRoundElapsedTime().TotalSeconds > 120)
                                            {
                                                Dictionary<String, AdKatsPlayer> auaPlayers = new Dictionary<String, AdKatsPlayer>();
                                                //Get players from the auto-assist blacklist
                                                foreach (AdKatsPlayer aPlayer in GetOnlinePlayersOfGroup("blacklist_autoassist").Where(aPlayer =>
                                                    aPlayer.frostbitePlayerInfo.TeamID == winningTeam.TeamID))
                                                {
                                                    if (!auaPlayers.ContainsKey(aPlayer.player_name))
                                                    {
                                                        auaPlayers[aPlayer.player_name] = aPlayer;
                                                    }
                                                }
                                                if (!_UseTopPlayerMonitor)
                                                {
                                                    //Get players from those who have assisted to the now winning team
                                                    foreach (AdKatsRecord aRecord in _roundAssists.Values.Where(dRecord => dRecord.target_player.player_online && dRecord.target_player.frostbitePlayerInfo.TeamID == winningTeam.TeamID))
                                                    {
                                                        if (!auaPlayers.ContainsKey(aRecord.target_player.player_name))
                                                        {
                                                            auaPlayers[aRecord.target_player.player_name] = aRecord.target_player;
                                                        }
                                                    }
                                                }
                                                foreach (AdKatsPlayer aPlayer in auaPlayers.Values)
                                                {
                                                    if (PlayerIsAdmin(aPlayer))
                                                    {
                                                        continue;
                                                    }
                                                    OnlineAdminSayMessage(aPlayer.GetVerboseName() + " being automatically assisted to weak team.");
                                                    PlayerTellMessage(aPlayer.player_name, "You are being automatically assisted to the weak team.");
                                                    Thread.Sleep(2000);
                                                    _PlayersAutoAssistedThisRound = true;
                                                    QueueRecordForProcessing(new AdKatsRecord
                                                    {
                                                        record_source = AdKatsRecord.Sources.InternalAutomated,
                                                        server_id = _serverInfo.ServerID,
                                                        command_type = GetCommandByKey("self_assist"),
                                                        command_action = GetCommandByKey("self_assist_unconfirmed"),
                                                        target_name = aPlayer.player_name,
                                                        target_player = aPlayer,
                                                        source_name = "AUAManager",
                                                        record_message = "Assist Weak Team [" + winningTeam.TeamTicketCount + ":" + losingTeam.TeamTicketCount + "][" + FormatTimeString(_serverInfo.GetRoundElapsedTime(), 3) + "]",
                                                        record_time = UtcNow()
                                                    });
                                                }
                                            }
                                        }
                                    } 
                                    else
                                    {
                                        //Server is outside of auto-surrender window, send update messages if needed
                                        readyPercentage = Math.Round((Math.Min(_surrenderAutoTriggerCountCurrent, config_triggers_min) / (Double)config_triggers_min) * 100.0) + "%";
                                        if (_surrenderAutoResetTriggerCountOnCancel)
                                        {
                                            if (_surrenderAutoTriggerCountCurrent > 0)
                                            {
                                                if (config_action == AutoSurrenderAction.Nuke)
                                                {
                                                    AdminSayMessage("Auto-nuke countdown cancelled.");
                                                }
                                                else
                                                {
                                                    OnlineAdminSayMessage("Auto-surrender countdown cancelled.");
                                                }
                                            }
                                            _surrenderAutoTriggerCountCurrent = 0;
                                        }
                                        else
                                        {
                                            if (_surrenderAutoTriggerCountCurrent > 0 && _surrenderAutoTriggerCountCurrent != _surrenderAutoTriggerCountPause)
                                            {
                                                _surrenderAutoTriggerCountPause = _surrenderAutoTriggerCountCurrent;
                                                if (_surrenderAutoTriggerCountCurrent < config_triggers_min)
                                                {
                                                    if (config_action == AutoSurrenderAction.Nuke)
                                                    {
                                                        AdminSayMessage("Auto-nuke countdown paused at " + readyPercentage + "." + denyReason);
                                                    }
                                                    else
                                                    {
                                                        OnlineAdminSayMessage("Auto-surrender countdown paused at " + readyPercentage + "." + denyReason);
                                                    }
                                                }
                                                else
                                                {
                                                    if (config_action == AutoSurrenderAction.Nuke)
                                                    {
                                                        AdminSayMessage("Auto-nuke countdown paused." + denyReason);
                                                    }
                                                    else
                                                    {
                                                        OnlineAdminSayMessage("Auto-surrender countdown paused." + denyReason);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (fired)
                                    {
                                        if (_surrenderAutoResetTriggerCountOnFire)
                                        {
                                            _surrenderAutoTriggerCountCurrent = 0;
                                            _surrenderAutoTriggerCountPause = 0;
                                        }
                                        if (config_action == AutoSurrenderAction.Nuke)
                                        {
                                            string autoNukeMessage = _surrenderAutoNukeMessage.Replace("%WinnerName%", baserapingTeam.TeamName);
                                            _autoNukesThisRound++;
                                            _surrenderAutoNukeLast = UtcNow();
                                            _surrenderAutoNukeLastTeam = baserapingTeam;
                                            QueueRecordForProcessing(new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("server_nuke"),
                                                command_numeric = baserapingTeam.TeamID,
                                                target_name = baserapingTeam.TeamName,
                                                source_name = "RoundManager",
                                                record_message = autoNukeMessage,
                                                record_time = UtcNow()
                                            });
                                        }
                                        else if (_surrenderAutoTriggerVote)
                                        {
                                            QueueRecordForProcessing(new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("self_votenext"),
                                                command_numeric = 0,
                                                target_name = "RoundManager",
                                                source_name = "RoundManager",
                                                record_message = "Auto-Starting Surrender Vote",
                                                record_time = UtcNow()
                                            });
                                        }
                                        else if (!_endingRound)
                                        {
                                            _endingRound = true;
                                            _surrenderAutoSucceeded = true;
                                            Thread roundEndDelayThread = new Thread(new ThreadStart(delegate
                                            {
                                                Log.Debug(() => "Starting a round end delay thread.", 5);
                                                try
                                                {
                                                    Thread.CurrentThread.Name = "RoundEndDelay";
                                                    string autoSurrenderMessage = _surrenderAutoMessage.Replace("%WinnerName%", baserapingTeam.TeamName);
                                                    for (int i = 0; i < 8; i++)
                                                    {
                                                        AdminTellMessage(autoSurrenderMessage);
                                                        Thread.Sleep(50);
                                                    }
                                                    _threadMasterWaitHandle.WaitOne(1000 * _YellDuration);
                                                    AdKatsRecord repRecord = new AdKatsRecord
                                                    {
                                                        record_source = AdKatsRecord.Sources.InternalAutomated,
                                                        server_id = _serverInfo.ServerID,
                                                        command_type = GetCommandByKey("round_end"),
                                                        command_numeric = baserapingTeam.TeamID,
                                                        target_name = baserapingTeam.TeamName,
                                                        source_name = "RoundManager",
                                                        record_message = "Auto-Surrender (" + baserapingTeam.TeamKey + " Win)(" + baserapingTeam.TeamTicketCount + ":" + baserapedTeam.TeamTicketCount + ")(" + FormatTimeString(_serverInfo.GetRoundElapsedTime(), 2) + ")",
                                                        record_time = UtcNow()
                                                    };
                                                    QueueRecordForProcessing(repRecord);
                                                }
                                                catch (Exception)
                                                {
                                                    HandleException(new AdKatsException("Error while running round end delay."));
                                                }
                                                Log.Debug(() => "Exiting a round end delay thread.", 5);
                                                LogThreadExit();
                                            }));
                                            StartAndLogThread(roundEndDelayThread);
                                        }
                                    }
                                }
                            }

                            Boolean hadServerName = !String.IsNullOrEmpty(_serverInfo.ServerName);
                            _serverInfo.ServerName = serverInfo.ServerName;
                            Boolean haveServerName = !String.IsNullOrEmpty(_serverInfo.ServerName);
                            if (!_versionTrackingDisabled && haveServerName && !hadServerName)
                            {
                                PostVersionTracking();
                            }

                            //Only activate the following on ADK servers.
                            Boolean wasADK = _isTestingAuthorized;
                            _isTestingAuthorized = serverInfo.ServerName.Contains("=ADK=");
                            if (!wasADK && _isTestingAuthorized)
                            {
                                Log.Info("Server is testing authorized.");
                                if (_gameVersion != GameVersion.BF3)
                                {
                                    _FeedStatLoggerSettings = true;
                                    _PostStatLoggerChatManually = true;
                                    _UseTopPlayerMonitor = true;

                                    if (_serverInfo.ServerType != "OFFICIAL")
                                    {
                                        _pingEnforcerEnable = true;
                                        _pingEnforcerKickMissingPings = true;
                                        _CMDRManagerEnable = true;
                                        _surrenderVoteEnable = true;
                                    }
                                    if (_serverInfo.ServerName.Contains("#7") && _gameVersion == GameVersion.BF4)
                                    {
                                        _surrenderAutoEnable = true;
                                        _surrenderAutoUseMetroValues = true;
                                    }
                                    _spamBotExcludeAdminsAndWhitelist = true;
                                }
                                _DisplayTicketRatesInProconChat = true;
                                _PostMapBenefitStatistics = true;
                                UpdateSettingPage();
                            }
                            if (!_pluginUpdateServerInfoChecked)
                            {
                                _pluginUpdateServerInfoChecked = true;
                                CheckForPluginUpdates(false);
                            }
                            FeedStatLoggerSettings();
                        }
                        else
                        {
                            HandleException(new AdKatsException("Server info was null"));
                        }
                        _ServerInfoWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while processing server info.", e));
            }
            Log.Debug(() => "Exiting OnServerInfo", 7);
        }

        public override void OnSoldierHealth(Int32 limit) {
            _soldierHealth = limit;
        }

        public void PostAndResetMapBenefitStatistics()
        {
            Log.Debug(() => "Entering PostAndResetMapBenefitStatistics", 7);
            try
            {
                if (_PostMapBenefitStatistics && _serverInfo != null && _serverInfo.InfoObject != null)
                {
                    Int32 roundID = _roundID;
                    String mapName = _serverInfo.InfoObject.Map;
                    if (roundID > 0 && !String.IsNullOrEmpty(mapName))
                    {
                        QueueStatisticForProcessing(new AdKatsStatistic()
                        {
                            stat_type = AdKatsStatistic.StatisticType.map_detriment,
                            server_id = _serverInfo.ServerID,
                            round_id = _roundID,
                            target_name = mapName,
                            stat_value = _mapDetrimentIndex,
                            stat_comment = _mapDetrimentIndex + " players left because of " + mapName,
                            stat_time = UtcNow()
                        });
                        QueueStatisticForProcessing(new AdKatsStatistic()
                        {
                            stat_type = AdKatsStatistic.StatisticType.map_benefit,
                            server_id = _serverInfo.ServerID,
                            round_id = _roundID,
                            target_name = mapName,
                            stat_value = _mapBenefitIndex,
                            stat_comment = _mapBenefitIndex + " players joined because of " + mapName,
                            stat_time = UtcNow()
                        });
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while preparing map stats for upload", e));
            }
            _mapDetrimentIndex = 0;
            _mapBenefitIndex = 0;
            Log.Debug(() => "Exiting PostAndResetMapBenefitStatistics", 7);
        }

        public void PostRoundStatistics(AdKatsTeam winningTeam, AdKatsTeam losingTeam)
        {
            Log.Debug(() => "Entering PostRoundStatistics", 7);
            try
            {
                List<AdKatsPlayer> OrderedPlayers = _PlayerDictionary.Values.Where(aPlayer => aPlayer.player_type == PlayerType.Player).OrderByDescending(aPlayer => aPlayer.frostbitePlayerInfo.Score).ToList();
                List<AdKatsPlayer> WinningPlayers = OrderedPlayers.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == winningTeam.TeamID).OrderByDescending(aPlayer => aPlayer.frostbitePlayerInfo.Score).ToList();
                List<AdKatsPlayer> LosingPlayers = OrderedPlayers.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == losingTeam.TeamID).OrderByDescending(aPlayer => aPlayer.frostbitePlayerInfo.Score).ToList();
                foreach (AdKatsPlayer aPlayer in WinningPlayers)
                {
                    QueueStatisticForProcessing(new AdKatsStatistic()
                    {
                        stat_type = AdKatsStatistic.StatisticType.player_win,
                        server_id = _serverInfo.ServerID,
                        round_id = _roundID,
                        target_name = aPlayer.player_name,
                        target_player = aPlayer,
                        stat_value = aPlayer.frostbitePlayerInfo.SquadID,
                        stat_comment = aPlayer.player_name + " won",
                        stat_time = UtcNow()
                    });
                }
                foreach (AdKatsPlayer aPlayer in LosingPlayers)
                {
                    QueueStatisticForProcessing(new AdKatsStatistic()
                    {
                        stat_type = AdKatsStatistic.StatisticType.player_loss,
                        server_id = _serverInfo.ServerID,
                        round_id = _roundID,
                        target_name = aPlayer.player_name,
                        target_player = aPlayer,
                        stat_value = aPlayer.frostbitePlayerInfo.SquadID,
                        stat_comment = aPlayer.player_name + " lost",
                        stat_time = UtcNow()
                    });
                }
                var TopOrdered = OrderedPlayers.Take((Int32) (OrderedPlayers.Count / 3.75)).ToList();
                foreach (AdKatsPlayer aPlayer in TopOrdered) {
                    QueueStatisticForProcessing(new AdKatsStatistic() {
                        stat_type = AdKatsStatistic.StatisticType.player_top,
                        server_id = _serverInfo.ServerID,
                        round_id = _roundID,
                        target_name = aPlayer.player_name,
                        target_player = aPlayer,
                        stat_value = aPlayer.frostbitePlayerInfo.SquadID,
                        stat_comment = aPlayer.player_name + " top player in position " + (WinningPlayers.IndexOf(aPlayer) + 1),
                        stat_time = UtcNow()
                    });
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while preparing round stats for upload", e));
            }
            Log.Debug(() => "Exiting PostRoundStatistics", 7);
        }

        public override void OnLevelLoaded(String strMapFileName, String strMapMode, Int32 roundsPlayed, Int32 roundsTotal)
        {
            Log.Debug(() => "Entering OnLevelLoaded", 7);
            try
            {
                if (_pluginEnabled)
                {
                    //Upload map benefit/detriment statistics
                    PostAndResetMapBenefitStatistics();
                    //Change round state
                    _roundState = RoundState.Loaded;
                    //Request new server info
                    ExecuteCommand("procon.protected.send", "serverInfo");
                    //Completely clear all round-specific data
                    _endingRound = false;
                    _surrenderVoteList.Clear();
                    _nosurrenderVoteList.Clear();
                    _surrenderVoteActive = false;
                    _surrenderVoteSucceeded = false;
                    _surrenderAutoSucceeded = false;
                    _surrenderAutoTriggerCountCurrent = 0;
                    _surrenderAutoTriggerCountPause = 0;
                    _autoNukesThisRound = 0;
                    _roundAssists.Clear();
                    _PlayersAutoAssistedThisRound = false;
                    _RoundReports.Clear();
                    _RoundReportHistory.Clear();
                    _RoundMutedPlayers.Clear();
                    _ActionConfirmDic.Clear();
                    _ActOnSpawnDictionary.Clear();
                    _ActOnIsAliveDictionary.Clear();
                    _TeamswapOnDeathMoveDic.Clear();
                    _Team1MoveQueue.Clear();
                    _Team2MoveQueue.Clear();
                    _RoundCookers.Clear();
                    _unmatchedRoundDeathCounts.Clear();
                    _unmatchedRoundDeaths.Clear();
                    //Update the factions 
                    UpdateFactions();
                    getMapInfo();
                    StartRoundTicketLogger(0);
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling level load.", e));
            }
            Log.Debug(() => "Exiting OnLevelLoaded", 7);
        }

        //Round ended stuff
        public override void OnRoundOverPlayers(List<CPlayerInfo> players) {
            _roundOverPlayers = players;
        }

        public override void OnRoundOverTeamScores(List<TeamScore> teamScores)
        {
            try {
                //Set round duration
                _previousRoundDuration = _serverInfo.GetRoundElapsedTime();
                //Update the live team scores
                if (teamScores != null) {
                    foreach (var teamScore in teamScores) {
                        AdKatsTeam aTeam;
                        if (GetTeamByID(teamScore.TeamID, out aTeam)) {
                            aTeam.UpdateTicketCount(teamScore.Score);
                        }
                    }
                }
                AdKatsTeam team1, team2;
                if (!GetTeamByID(1, out team1)) {
                    if (_roundState == RoundState.Playing) {
                        Log.Error("Teams not loaded when they should be.");
                    }
                    return;
                }
                if (!GetTeamByID(2, out team2)) {
                    if (_roundState == RoundState.Playing) {
                        Log.Error("Teams not loaded when they should be.");
                    }
                    return;
                }
                AdKatsTeam winningTeam, losingTeam;
                if (team1.TeamTicketCount > team2.TeamTicketCount) {
                    winningTeam = team1;
                    losingTeam = team2;
                } else {
                    winningTeam = team2;
                    losingTeam = team1;
                }
                if (_serverInfo.ServerName.Contains("[FPSG] 24/7 Operation Lockers")) {
                    Int32 quality = 4;
                    if (winningTeam.TeamTicketCount >= 1500) {
                        quality = 0;
                    } else if (winningTeam.TeamTicketCount >= 1100) {
                        quality = 1;
                    } else if (winningTeam.TeamTicketCount >= 700) {
                        quality = 2;
                    } else if (winningTeam.TeamTicketCount >= 350) {
                        quality = 3;
                    }
                    QueueStatisticForProcessing(new AdKatsStatistic() {
                        stat_type = AdKatsStatistic.StatisticType.round_quality,
                        server_id = _serverInfo.ServerID,
                        round_id = _roundID,
                        target_name = _serverInfo.InfoObject.Map,
                        stat_value = quality,
                        stat_comment = "Quality level " + quality + " (" + winningTeam.TeamTicketCount + "|" + losingTeam.TeamTicketCount + ")",
                        stat_time = UtcNow()
                    });
                } else if (_serverInfo.ServerName.Contains("[FPSG] 24/7 Metro Madness")) {
                    Int32 quality = 4;
                    if (winningTeam.TeamTicketCount >= 1100) {
                        quality = 0;
                    } else if (winningTeam.TeamTicketCount >= 800) {
                        quality = 1;
                    } else if (winningTeam.TeamTicketCount >= 600) {
                        quality = 2;
                    } else if (winningTeam.TeamTicketCount >= 400) {
                        quality = 3;
                    }
                    QueueStatisticForProcessing(new AdKatsStatistic() {
                        stat_type = AdKatsStatistic.StatisticType.round_quality,
                        server_id = _serverInfo.ServerID,
                        round_id = _roundID,
                        target_name = _serverInfo.InfoObject.Map,
                        stat_value = quality,
                        stat_comment = "Quality level " + quality + " (" + winningTeam.TeamTicketCount + "|" + losingTeam.TeamTicketCount + ")",
                        stat_time = UtcNow()
                    });
                } else if (_isTestingAuthorized && _gameVersion == GameVersion.BF4) {
                    if (_serverInfo.ServerID == 6) {
                        Int32 quality = 0;
                        if (losingTeam.TeamTicketCount >= 350) {
                            quality = 4;
                        } else if (losingTeam.TeamTicketCount >= 300) {
                            quality = 3;
                        } else if (losingTeam.TeamTicketCount >= 250) {
                            quality = 2;
                        } else if (losingTeam.TeamTicketCount >= 200) {
                            quality = 1;
                        }
                        QueueStatisticForProcessing(new AdKatsStatistic() {
                            stat_type = AdKatsStatistic.StatisticType.round_quality,
                            server_id = _serverInfo.ServerID,
                            round_id = _roundID,
                            target_name = _serverInfo.InfoObject.Map,
                            stat_value = quality,
                            stat_comment = "Quality level " + quality + " (" + winningTeam.TeamTicketCount + "|" + losingTeam.TeamTicketCount + ")",
                            stat_time = UtcNow()
                        });
                    } else if (_serverInfo.ServerID == 1) {
                        var nRound = _roundID + 1;
                        if (nRound >= 25000 && nRound <= 25009) {
                            _pingEnforcerEnable = false;
                            _surrenderVoteEnable = false;
                            _surrenderAutoEnable = false;
                            ExecuteCommand("procon.protected.plugins.enable", "AdKatsLRT", "False");
                            for (int i = 0; i < 8; i++) {
                                switch (nRound) {
                                    case 25000:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! KNIVES ONLY!");
                                        //25,000 - Conquest 500 Knives Only
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "ConquestLarge0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "75");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25001:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! HARDCORE BOLT ACTIONS!");
                                        //25,001 - Domination 500 Hardcore Bolt Action Only
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "Domination0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "HARDCORE", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "200");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25002:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! MARE'S LEG ONLY!");
                                        //25,002 - TDM 300 Mare's Leg Only
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "TeamDeathMatch0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "500");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25003:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! DEFIBS ONLY!");
                                        //25,003 - Conquest 500 Defibs Only
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "ConquestLarge0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "75");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25004:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! PHANTOM BOW AND KNIVES ONLY!");
                                        //25,004 - Domination 500 Phantom Bow/Knives Only
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "Domination0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "200");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25005:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! REPAIR TOOL ONLY!");
                                        //25,005 - Rush 300 Repair Tools Only
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "RushLarge0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "300");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25006:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! PISTOLS ONLY!");
                                        //25,006 - TDM 300 Pistols Only
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "TeamDeathMatch0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "500");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25007:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! CONQUEST ALL WEAPONS ALLOWED!");
                                        //25,007 - Conquest 2000 All Weapons
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "ConquestLarge0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "200");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25008:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! DOMINATION ALL WEAPONS ALLOWED!");
                                        //25,008 - Domination 1100 All Weapons
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "Domination0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "300");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    case 25009:
                                        AdminTellMessage("PREPARING ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! TDM ALL WEAPONS ALLOWED!");
                                        //25,009 - TDM 500 All Weapons
                                        ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "TeamDeathMatch0", "1");
                                        ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                                        ExecuteCommand("procon.protected.send", "mapList.save");
                                        ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                                        ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                                        ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                                        ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                                        ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "500");
                                        ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                                        ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                                        break;
                                    default:
                                        AdminTellMessage("Welcome to round " + String.Format("{0:n0}", _roundID) + " of No Explosives Metro");
                                        break;
                                }
                            }
                        } else if (nRound == 19991) {
                            ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "Domination0", "1");
                            ExecuteCommand("procon.protected.send", "mapList.remove", "0");
                            ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
                            ExecuteCommand("procon.protected.send", "mapList.save");
                            ExecuteCommand("procon.protected.send", "vars.preset", "NORMAL", "false");
                            ExecuteCommand("procon.protected.send", "vars.idleTimeout", "240");
                            ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "75");
                            ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "75");
                            ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "167");
                            ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "400");
                            ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "0");
                            ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "0");
                            ExecuteCommand("procon.protected.send", "vars.teamKillValueForKick", "0");
                        } else {
//                            _pingEnforcerEnable = true;
//                            _surrenderVoteEnable = true;
//                            _surrenderAutoEnable = true;
//                            ExecuteCommand("procon.protected.send", "mapList.add", "XP0_Metro", "ConquestLarge0", "1");
//                            ExecuteCommand("procon.protected.send", "mapList.remove", "0");
//                            ExecuteCommand("procon.protected.send", "mapList.setNextMapIndex", "0");
//                            ExecuteCommand("procon.protected.send", "mapList.save");
//                            ExecuteCommand("procon.protected.plugins.enable", "AdKatsLRT", "True");
//                            ExecuteCommand("procon.protected.send", "vars.idleTimeout", "300");
//                            ExecuteCommand("procon.protected.send", "vars.friendlyFire", "false");
//                            ExecuteCommand("procon.protected.send", "vars.playerRespawnTime", "100");
//                            ExecuteCommand("procon.protected.send", "vars.ticketBleedRate", "100");
//                            ExecuteCommand("procon.protected.send", "vars.gameModeCounter", "150");
//                            ExecuteCommand("procon.protected.send", "vars.roundTimeLimit", "300");
//                            ExecuteCommand("procon.protected.send", "vars.teamKillCountForKick", "5");
//                            ExecuteCommand("procon.protected.send", "vars.teamKillKickForBan", "3");
                        }
                        Int32 quality = 4;
                        if (winningTeam.TeamTicketCount >= 900) {
                            quality = 0;
                        } else if (winningTeam.TeamTicketCount >= 750) {
                            quality = 1;
                        } else if (winningTeam.TeamTicketCount >= 550) {
                            quality = 2;
                        } else if (winningTeam.TeamTicketCount >= 350) {
                            quality = 3;
                        }
                        QueueStatisticForProcessing(new AdKatsStatistic() {
                            stat_type = AdKatsStatistic.StatisticType.round_quality,
                            server_id = _serverInfo.ServerID,
                            round_id = _roundID,
                            target_name = _serverInfo.InfoObject.Map,
                            stat_value = quality,
                            stat_comment = "Quality level " + quality + " (" + winningTeam.TeamTicketCount + "|" + losingTeam.TeamTicketCount + ")",
                            stat_time = UtcNow()
                        });
                    } else if (_serverInfo.ServerID == 7 || _serverInfo.ServerID == 12) {
                        Int32 quality = 4;
                        if (winningTeam.TeamTicketCount >= 800) {
                            quality = 0;
                        } else if (winningTeam.TeamTicketCount >= 650) {
                            quality = 1;
                        } else if (winningTeam.TeamTicketCount >= 500) {
                            quality = 2;
                        } else if (winningTeam.TeamTicketCount >= 350) {
                            quality = 3;
                        }
                        QueueStatisticForProcessing(new AdKatsStatistic() {
                            stat_type = AdKatsStatistic.StatisticType.round_quality,
                            server_id = _serverInfo.ServerID,
                            round_id = _roundID,
                            target_name = _serverInfo.InfoObject.Map,
                            stat_value = quality,
                            stat_comment = "Quality level " + quality + " (" + winningTeam.TeamTicketCount + "|" + losingTeam.TeamTicketCount + ")",
                            stat_time = UtcNow()
                        });
                    }
                }

                //Post round stats
                PostRoundStatistics(winningTeam, losingTeam);

                //Wait for round over players to be fired, if not already
                var start = UtcNow();
                while (_roundOverPlayers == null && (UtcNow() - start).TotalSeconds < 10) {
                    Thread.Sleep(100);
                }
                if ((UtcNow() - start).TotalSeconds >= 10)
                {
                    Log.Error("Round over players waiting timed out!");
                }

                //Queue players for stats refresh
                StartAndLogThread(new Thread(new ThreadStart(delegate {
                    Thread.CurrentThread.Name = "SquadGrab";
                    Thread.Sleep(TimeSpan.FromSeconds(5));
                    if (_roundOverPlayers != null)
                    {
                        //Clear out the round over squad list
                        _RoundOverSquads.Clear();
                        //Update all players with their final stats
                        foreach (var player in _roundOverPlayers)
                        {
                            AdKatsPlayer aPlayer;
                            if (_PlayerDictionary.TryGetValue(player.SoldierName, out aPlayer))
                            {
                                aPlayer.frostbitePlayerInfo = player;
                                AdKatsPlayerStats aStats;
                                if (aPlayer.RoundStats.TryGetValue(_roundID, out aStats))
                                {
                                    aStats.LiveStats = player;
                                }
                                var squadIdentifier = aPlayer.frostbitePlayerInfo.TeamID.ToString() + aPlayer.frostbitePlayerInfo.SquadID.ToString();
                                // If the squad isn't loaded yet, load it
                                if (!_RoundOverSquads.ContainsKey(squadIdentifier))
                                {
                                    _RoundOverSquads[squadIdentifier] = new List<AdKatsPlayer>();
                                }
                                // Store which squad the player is in
                                _RoundOverSquads[squadIdentifier].Add(aPlayer);
                                if (_UseTopPlayerMonitor)
                                {
                                    // Remove the player's current squad
                                    ExecuteCommand("procon.protected.send", "admin.movePlayer", aPlayer.player_name, aPlayer.frostbitePlayerInfo.TeamID + "", "0", "true");
                                }
                            }
                        }
                        if (_isTestingAuthorized)
                        {
                            Log.Success("Updated round over players.");
                        }
                        //Unassign round over players, wait for next round
                        _roundOverPlayers = null;
                    }
                    else
                    {
                        Log.Error("Round over players not found/ready! Contact ColColonCleaner.");
                    }
                    LogThreadExit();
                })));

                //Stat refresh
                List<AdKatsPlayer> roundPlayerObjects;
                HashSet<Int64> roundPlayers;
                if (_roundID > 0 && _RoundPlayerIDs.TryGetValue(_roundID, out roundPlayers) && _useHackerCheckerLIVESystem) {
                    //Get players who where online this round
                    roundPlayerObjects = _FetchedPlayers.Values.Where(dPlayer => roundPlayers.Contains(dPlayer.player_id)).ToList();
                    if (_isTestingAuthorized) {
                        Log.Warn("Preparing to requeue " + roundPlayerObjects.Count + " players for stats check in 30 seconds.");
                    }
                    //Queue players for stats refresh
                    StartAndLogThread(new Thread(new ThreadStart(delegate {
                        Thread.CurrentThread.Name = "StatRefetch";
                        Thread.Sleep(TimeSpan.FromSeconds(30));
                        if (_isTestingAuthorized) {
                            Log.Warn("Requeuing " + roundPlayerObjects.Count + " players for stats check.");
                        }
                        foreach (var aPlayer in roundPlayerObjects) {
                            if (_UseBanEnforcer) {
                                QueuePlayerForBanCheck(aPlayer);
                            } else {
                                //Queue the player for a hacker check
                                QueuePlayerForHackerCheck(aPlayer);
                            }
                        }
                        LogThreadExit();
                    })));
                }

                RunFactionRandomizer();

                FetchRoundID(true);
                _roundState = RoundState.Ended;
                _pingKicksThisRound = 0;
                foreach (AdKatsPlayer aPlayer in _FetchedPlayers.Values.Where(aPlayer => aPlayer.RequiredTeam != null)) {
                    aPlayer.RequiredTeam = null;
                    aPlayer.AssignedSquad = 0;
                }
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error running round over teamscores.", e));
            }
        }

        public void RunFactionRandomizer()
        {
            Log.Debug(() => "Entering RunFactionRandomizer", 6);
            //Faction Randomizer
            //Credit to LumPenPacK
            if (_factionRandomizerEnable && _gameVersion == GameVersion.BF4)
            {
                if (_isTestingAuthorized)
                {
                    Log.Info("RUNNING FACTION RANDOMIZER");
                }
                var nextMap = _serverInfo.GetNextMap();
                if (((_serverInfo.InfoObject.CurrentRound + 1) >= _serverInfo.InfoObject.TotalRounds) && 
                    (nextMap != null && (nextMap.MapFileName == "XP3_UrbanGdn" || nextMap.MapFileName == "X0_Oman")))
                {
                    //Cannot change things on urban garden or oman
                    Log.Info("Cannot run faction randomizer on urban garden or gulf of oman.");
                    return;
                }

                var team1Selection = 0;
                var team2Selection = 1;
                var selectionValid = false;
                var attempts = 0;
                Random rnd = new Random();
                Int32 US = 0;
                Int32 RU = 1;
                Int32 CN = 2;

                while (!selectionValid && ++attempts < 1000)
                {
                    if (_isTestingAuthorized)
                    {
                        Log.Info("FACTION RANDOMIZER ATTEMPT " + attempts);
                    }

                    switch (_factionRandomizerRestriction)
                    {
                        case FactionRandomizerRestriction.NoRestriction:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = rnd.Next(0, 3);
                            break;
                        case FactionRandomizerRestriction.NeverSameFaction:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = rnd.Next(0, 3);
                            if (team1Selection == team2Selection)
                            {
                                continue;
                            }
                            break;
                        case FactionRandomizerRestriction.AlwaysSameFaction:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = team1Selection;
                            break;
                        case FactionRandomizerRestriction.AlwaysSwapUSvsRU:
                            if (_factionRandomizerCurrentTeam1 == US &&
                                _factionRandomizerCurrentTeam2 == RU)
                            {
                                team1Selection = RU;
                                team2Selection = US;
                            }
                            else
                            {
                                team1Selection = US;
                                team2Selection = RU;
                            }
                            break;
                        case FactionRandomizerRestriction.AlwaysSwapUSvsCN:
                            if (_factionRandomizerCurrentTeam1 == US &&
                                _factionRandomizerCurrentTeam2 == CN)
                            {
                                team1Selection = CN;
                                team2Selection = US;
                            }
                            else
                            {
                                team1Selection = US;
                                team2Selection = CN;
                            }
                            break;
                        case FactionRandomizerRestriction.AlwaysSwapRUvsCN:
                            if (_factionRandomizerCurrentTeam1 == RU &&
                                _factionRandomizerCurrentTeam2 == CN)
                            {
                                team1Selection = CN;
                                team2Selection = RU;
                            }
                            else
                            {
                                team1Selection = RU;
                                team2Selection = CN;
                            }
                            break;
                        case FactionRandomizerRestriction.AlwaysBothUS:
                            team1Selection = US;
                            team2Selection = US;
                            break;
                        case FactionRandomizerRestriction.AlwaysBothRU:
                            team1Selection = RU;
                            team2Selection = RU;
                            break;
                        case FactionRandomizerRestriction.AlwaysBothCN:
                            team1Selection = CN;
                            team2Selection = CN;
                            break;
                        case FactionRandomizerRestriction.AlwaysUSvsX:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = rnd.Next(0, 3);
                            if (team1Selection != US && team2Selection != US)
                            {
                                continue;
                            }
                            break;
                        case FactionRandomizerRestriction.AlwaysRUvsX:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = rnd.Next(0, 3);
                            if (team1Selection != RU && team2Selection != RU)
                            {
                                continue;
                            }
                            break;
                        case FactionRandomizerRestriction.AlwaysCNvsX:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = rnd.Next(0, 3);
                            if (team1Selection != CN && team2Selection != CN)
                            {
                                continue;
                            }
                            break;
                        case FactionRandomizerRestriction.NeverUSvsX:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = rnd.Next(0, 3);
                            if (team1Selection == US || team2Selection == US)
                            {
                                continue;
                            }
                            break;
                        case FactionRandomizerRestriction.NeverRUvsX:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = rnd.Next(0, 3);
                            if (team1Selection == RU || team2Selection == RU)
                            {
                                continue;
                            }
                            break;
                        case FactionRandomizerRestriction.NeverCNvsX:
                            team1Selection = rnd.Next(0, 3);
                            team2Selection = rnd.Next(0, 3);
                            if (team1Selection == CN || team2Selection == CN)
                            {
                                continue;
                            }
                            break;
                        default:
                            break;
                    }

                    if (!_factionRandomizerAllowRepeatSelection)
                    {
                        //We cannot allow the same teams to be selected again
                        if (_factionRandomizerCurrentTeam1 == team1Selection &&
                            _factionRandomizerCurrentTeam2 == team2Selection)
                        {
                            continue;
                        }
                    }

                    selectionValid = true;
                }

                if (selectionValid)
                {
                    _factionRandomizerCurrentTeam1 = team1Selection;
                    _factionRandomizerCurrentTeam2 = team2Selection;
                    ExecuteCommand("procon.protected.send", "vars.teamFactionOverride", "1", Convert.ToString(team1Selection));
                    ExecuteCommand("procon.protected.send", "vars.teamFactionOverride", "2", Convert.ToString(team2Selection));
                    ExecuteCommand("procon.protected.send", "vars.teamFactionOverride", "3", Convert.ToString(team1Selection));
                    ExecuteCommand("procon.protected.send", "vars.teamFactionOverride", "4", Convert.ToString(team2Selection));
                    if (_isTestingAuthorized)
                    {
                        Log.Success("Faction randomizer selected " + team1Selection + " vs " + team2Selection);
                    }
                }
                else
                {
                    Log.Error("Faction randomizer failed!");
                }
            }
            Log.Debug(() => "Exiting RunFactionRandomizer", 6);
        }

        public override void OnRunNextLevel()
        {
            if (_roundState != RoundState.Ended)
            {
                getMapInfo();
                _roundState = RoundState.Ended;
                _pingKicksThisRound = 0;
                foreach (AdKatsPlayer aPlayer in _FetchedPlayers.Values.Where(aPlayer => aPlayer.RequiredTeam != null)) {
                    aPlayer.RequiredTeam = null;
                }
            }
        }

        //Move delayed players when they are killed
        public override void OnPlayerKilled(Kill kKillerVictimDetails)
        {
            Log.Debug(() => "Entering OnPlayerKilled", 7);
            try
            {
                //If the plugin is not enabled just return
                if (!_pluginEnabled || !_threadsReady || !_firstPlayerListComplete)
                {
                    return;
                }
                //Used for delayed player moving
                if (_TeamswapOnDeathMoveDic.Count > 0)
                {
                    lock (_TeamswapOnDeathCheckingQueue)
                    {
                        _TeamswapOnDeathCheckingQueue.Enqueue(kKillerVictimDetails.Victim);
                        _TeamswapWaitHandle.Set();
                    }
                }
                //Otherwise, queue the kill for processing
                QueueKillForProcessing(kKillerVictimDetails);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling onPlayerKilled.", e));
            }
            Log.Debug(() => "Exiting OnPlayerKilled", 7);
        }

        public override void OnPlayerIsAlive(string soldierName, bool isAlive)
        {
            Log.Debug(() => "Entering OnPlayerIsAlive", 7);
            try
            {
                if (!_pluginEnabled)
                {
                    return;
                }
                if (!_ActOnIsAliveDictionary.ContainsKey(soldierName))
                {
                    return;
                }
                AdKatsRecord aRecord;
                lock (_ActOnIsAliveDictionary)
                {
                    if (_ActOnIsAliveDictionary.TryGetValue(soldierName, out aRecord))
                    {
                        _ActOnIsAliveDictionary.Remove(aRecord.target_player.player_name);
                        aRecord.isAliveChecked = true;
                        switch (aRecord.command_action.command_key)
                        {
                            case "player_kill":
                            case "player_kill_lowpop":
                                if (isAlive)
                                {
                                    QueueRecordForActionHandling(aRecord);
                                }
                                else
                                {
                                    if (!_ActOnSpawnDictionary.ContainsKey(aRecord.target_player.player_name))
                                    {
                                        Log.Debug(() => aRecord.GetTargetNames() + " is dead. Queueing them for kill on-spawn.", 3);
                                        SendMessageToSource(aRecord, aRecord.GetTargetNames() + " is dead. Queueing them for kill on-spawn.");
                                        ExecuteCommand("procon.protected.send", "admin.killPlayer", aRecord.target_player.player_name);
                                        lock (_ActOnSpawnDictionary)
                                        {
                                            aRecord.command_action = GetCommandByKey("player_kill_repeat");
                                            _ActOnSpawnDictionary.Add(aRecord.target_player.player_name, aRecord);
                                        }
                                    }
                                }
                                break;
                            case "player_move":
                                //If player is not alive, change to force move
                                if (!isAlive)
                                {
                                    aRecord.command_type = GetCommandByKey("player_fmove");
                                    aRecord.command_action = GetCommandByKey("player_fmove");
                                }
                                QueueRecordForActionHandling(aRecord);
                                break;
                            default:
                                Log.Error("Command " + aRecord.command_action.command_key + " not useable in OnPlayerIsAlive");
                                break;
                        }
                    }
                    else
                    {
                        Log.Warn(soldierName + " not fetchable from the isalive dictionary.");
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling OnPlayerIsAlive.", e));
            }
            Log.Debug(() => "Exiting OnPlayerIsAlive", 7);
        }

        private void QueueKillForProcessing(Kill kKillerVictimDetails)
        {
            Log.Debug(() => "Entering queueKillForProcessing", 7);
            try
            {
                if (_pluginEnabled && _threadsReady && _firstPlayerListComplete)
                {
                    Log.Debug(() => "Preparing to queue kill for processing", 6);
                    lock (_KillProcessingQueue)
                    {
                        _KillProcessingQueue.Enqueue(kKillerVictimDetails);
                        Log.Debug(() => "Kill queued for processing", 6);
                        _KillProcessingWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing kill for processing.", e));
            }
            Log.Debug(() => "Exiting queueKillForProcessing", 7);
        }

        public void KillProcessingThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Kill Processing Thread", 1);
                Thread.CurrentThread.Name = "KillProcessing";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    loopStart = UtcNow();
                    try
                    {
                        Log.Debug(() => "Entering Kill Processing Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }

                        //Get all unprocessed inbound kills
                        Queue<Kill> inboundPlayerKills;
                        if (_KillProcessingQueue.Count > 0)
                        {
                            Log.Debug(() => "Preparing to lock inbound kill queue to retrive new player kills", 7);
                            lock (_KillProcessingQueue)
                            {
                                Log.Debug(() => "Inbound kills found. Grabbing.", 6);
                                //Grab all kills in the queue
                                inboundPlayerKills = new Queue<Kill>(_KillProcessingQueue.ToArray());
                                //Clear the queue for next run
                                _KillProcessingQueue.Clear();
                            }
                        }
                        else
                        {
                            Log.Debug(() => "No inbound player kills. Waiting for Input.", 6);
                            //Wait for input
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _KillProcessingWaitHandle.Reset();
                            _KillProcessingWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                            loopStart = UtcNow();
                            continue;
                        }

                        //Loop through all kils in order that they came in
                        while (inboundPlayerKills.Count > 0)
                        {
                            if (!_pluginEnabled)
                            {
                                break;
                            }
                            Log.Debug(() => "begin reading player kills", 6);
                            //Dequeue the first/next kill
                            Kill playerKill = inboundPlayerKills.Dequeue();

                            DamageTypes category = DamageTypes.None;
                            if (playerKill != null && !String.IsNullOrEmpty(playerKill.DamageType))
                            {
                                if (!WeaponTypeDictionary.TryGetValue(playerKill.DamageType, out category))
                                {
                                    category = DamageTypes.None;
                                }
                            }
                            if (!_DetectedWeaponCodes.Contains(playerKill.DamageType))
                            {
                                _DetectedWeaponCodes.Add(playerKill.DamageType);
                            }
                            if (!_firstPlayerListComplete)
                            {
                                continue;
                            }
                            AdKatsPlayer victim = null;
                            _PlayerDictionary.TryGetValue(playerKill.Victim.SoldierName, out victim);
                            AdKatsPlayer killer = null;
                            _PlayerDictionary.TryGetValue(playerKill.Killer.SoldierName, out killer);
                            if (killer == null || victim == null)
                            {
                                if (_isTestingAuthorized && 
                                    !String.IsNullOrEmpty(playerKill.Killer.SoldierName) && 
                                    !String.IsNullOrEmpty(playerKill.Victim.SoldierName)) {
                                    Log.Warn("Unable to process kill " + 
                                        playerKill.Killer.SoldierName + "/" +
                                        playerKill.Victim.SoldierName + " | " + 
                                        (_PlayerDictionary.ContainsKey(playerKill.Killer.SoldierName)) + "/" + 
                                        (_PlayerDictionary.ContainsKey(playerKill.Victim.SoldierName)));
                                }
                                continue;
                            }

                            //Call processing on the player kill
                            ProcessPlayerKill(new AdKatsKill()
                            {
                                killer = killer,
                                killerCPI = playerKill.Killer,
                                victim = victim,
                                victimCPI = playerKill.Victim,
                                weaponCode = String.IsNullOrEmpty(playerKill.DamageType) ? "NoDamageType" : playerKill.DamageType,
                                weaponCategory = category,
                                timestamp = playerKill.TimeOfDeath,
                                IsSuicide = playerKill.IsSuicide,
                                IsHeadshot = playerKill.Headshot,
                                IsTeamkill = (playerKill.Killer.TeamID == playerKill.Victim.TeamID),
                                RoundID = _roundID
                            });
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("kill processing thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in kill processing thread.", e));
                    }
                }
                Log.Debug(() => "Ending Kill Processing Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in kill processing thread.", e));
            }
        }

        private void ProcessPlayerKill(AdKatsKill aKill)
        {
            try
            {
                aKill.victim.lastAction = UtcNow();
                aKill.killer.lastAction = UtcNow();

                //Add the unmatched unique round death
                if (!_unmatchedRoundDeaths.Contains(aKill.victim.player_name))
                {
                    _unmatchedRoundDeaths.Add(aKill.victim.player_name);
                }
                //Add the unmatched round death count
                if (_unmatchedRoundDeathCounts.ContainsKey(aKill.victim.player_name))
                {
                    _unmatchedRoundDeathCounts[aKill.victim.player_name] = _unmatchedRoundDeathCounts[aKill.victim.player_name] + 1;
                }
                else
                {
                    _unmatchedRoundDeathCounts[aKill.victim.player_name] = 1;
                }

                Boolean gKillHandled = false;
                //Update player death information
                Log.Debug(() => "Setting " + aKill.victim.GetVerboseName() + " time of death to " + aKill.timestamp, 7);
                aKill.victim.lastDeath = UtcNow();

                //Add the kill
                aKill.killer.LiveKills.Add(aKill);

                if (_isTestingAuthorized && 
                    aKill.killer.frostbitePlayerInfo.Kills >= 5 && 
                    !aKill.killer.LiveKills.Any()) {
                    Log.Error(aKill.killer.GetVerboseName() + " kills not loading. " + 
                        aKill.killer.LiveKills.Count + " < " + aKill.killer.frostbitePlayerInfo.Kills);
                }

                if ((_isTestingAuthorized || _serverInfo.ServerName.Contains("FPSG")) && _serverInfo.ServerType != "OFFICIAL")
                {
                    //KPM check
                    Int32 lowCountRecent = aKill.killer.LiveKills.Count(dKill => (DateTime.Now - dKill.timestamp).TotalSeconds < 60);
                    int lowCountBan = 
                        ((_gameVersion == GameVersion.BF3) ? (25) : (20)) -
                        ((aKill.killer.frostbitePlayerInfo.Rank <= 15) ? (6) : (0));
                    if (lowCountRecent >= lowCountBan && !PlayerProtected(aKill.killer)) {
                        QueueRecordForProcessing(new AdKatsRecord {
                            record_source = AdKatsRecord.Sources.InternalAutomated,
                            server_id = _serverInfo.ServerID,
                            command_type = GetCommandByKey("player_ban_perm"),
                            command_numeric = 0,
                            target_name = aKill.killer.player_name,
                            target_player = aKill.killer,
                            source_name = "AutoAdmin",
                            record_message = _HackerCheckerKPMBanMessage + " [LIVE][5-L-" + lowCountRecent + "]",
                            record_time = UtcNow()
                        });
                        return;
                    }
                    Int32 highCountRecent = aKill.killer.LiveKills.Count(dKill => (DateTime.Now - dKill.timestamp).TotalSeconds < 120);
                    int highCountBan = 
                        ((_gameVersion == GameVersion.BF3) ? (40) : (32)) -
                        ((aKill.killer.frostbitePlayerInfo.Rank <= 15) ? (8) : (0));
                    if (highCountRecent >= highCountBan && !PlayerProtected(aKill.killer)) {
                        QueueRecordForProcessing(new AdKatsRecord {
                            record_source = AdKatsRecord.Sources.InternalAutomated,
                            server_id = _serverInfo.ServerID,
                            command_type = GetCommandByKey("player_ban_perm"),
                            command_numeric = 0,
                            target_name = aKill.killer.player_name,
                            target_player = aKill.killer,
                            source_name = "AutoAdmin",
                            record_message = _HackerCheckerKPMBanMessage + " [LIVE][5-H-" + highCountRecent + "]",
                            record_time = UtcNow()
                        });
                        return;
                    }

                    //HSK Check
                    Int32 lowKillCount = 20;
                    Double lowKillTriggerHSKP = 90;
                    Int32 highKillCount = 45;
                    Double highKillTriggerHSKP = 80;
                    if (_serverInfo.InfoObject.Map == "XP0_Metro" || 
                        _serverInfo.InfoObject.Map == "MP_Prison") {
                        lowKillCount = 30;
                        highKillCount = 60;
                    }
                    var nonSniperKills = aKill.killer.LiveKills
                        .Where(dKill => 
                            dKill.weaponCategory != DamageTypes.SniperRifle && 
                            dKill.weaponCategory != DamageTypes.DMR)
                        .OrderByDescending(dKill => dKill.timestamp);
                    var countAll = nonSniperKills.Count();
                    if (countAll >= lowKillCount) {
                        var lowKillHSKP = nonSniperKills.Take(lowKillCount).Count(dKill => dKill.IsHeadshot) / ((Double) lowKillCount) * 100.0;
                        var highKillHSKP = nonSniperKills.Take(highKillCount).Count(dKill => dKill.IsHeadshot) / ((Double) highKillCount) * 100.0;
                        String actionMessage = null;
                        if (countAll >= lowKillCount && lowKillHSKP >= lowKillTriggerHSKP) {
                            actionMessage = _HackerCheckerHSKBanMessage + " [LIVE][6-L-" + countAll + "-" + Math.Round(lowKillHSKP) + "]";
                        } else if (countAll >= highKillCount && highKillHSKP >= highKillTriggerHSKP) {
                            actionMessage = _HackerCheckerHSKBanMessage + " [LIVE][6-H-" + countAll + "-" + Math.Round(highKillHSKP) + "]";
                        } 
                        if (!String.IsNullOrEmpty(actionMessage) && !PlayerProtected(aKill.killer)) {
                            //Create ban record
                            QueueRecordForProcessing(new AdKatsRecord {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_ban_perm"),
                                command_numeric = 0,
                                target_name = aKill.killer.player_name,
                                target_player = aKill.killer,
                                source_name = "AutoAdmin",
                                record_message = actionMessage,
                                record_time = UtcNow()
                            });
                            return;
                        }
                        if (highKillHSKP >= 75 &&
                            !aKill.killer.TargetedRecords.Any(aRecord =>
                                aRecord.record_message.Contains("non-sniper HSKP") &&
                                (UtcNow() - aRecord.record_time).TotalMinutes <= 30) &&
                            !PlayerProtected(aKill.killer)) {
                            //Create report record
                            QueueRecordForProcessing(new AdKatsRecord {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_report"),
                                command_numeric = 0,
                                target_name = aKill.killer.player_name,
                                target_player = aKill.killer,
                                source_name = "AutoAdmin",
                                record_message = Math.Round(highKillHSKP) + "% non-sniper HSKP",
                                record_time = UtcNow()
                            });
                        }
                    }

                    if (_gameVersion == GameVersion.BF4)
                    {
                        //Special weapons
                        String actedCode = null;
                        Int32 triggerCount = 3;
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "U_PortableAmmopack") >= triggerCount)
                        {
                            actedCode = "1";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "U_RadioBeacon") >= triggerCount)
                        {
                            actedCode = "2";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "Gameplay/Gadgets/SOFLAM/SOFLAM_Projectile") >= triggerCount)
                        {
                            actedCode = "3";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "U_Motionsensor") >= triggerCount) 
                        {
                            actedCode = "4";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "U_PortableMedicpack" && !dKill.IsTeamkill) >= triggerCount) 
                        {
                            actedCode = "5";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "U_Medkit" && !dKill.IsTeamkill) >= triggerCount) 
                        {
                            actedCode = "6";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "U_Ammobag") >= triggerCount) 
                        {
                            actedCode = "7";
                        }
                        if (!String.IsNullOrEmpty(actedCode) && !PlayerProtected(aKill.killer))
                        {
                            QueueRecordForProcessing(new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_ban_perm"),
                                command_numeric = 0,
                                target_name = aKill.killer.player_name,
                                target_player = aKill.killer,
                                source_name = "AutoAdmin",
                                record_message = "Code 8-" + actedCode + ": Dispute Requested",
                                record_time = UtcNow()
                            });
                            return;
                        }
                    }
                    if (_gameVersion == GameVersion.BF3)
                    {
                        //Special weapons
                        String actedCode = null;
                        Int32 triggerCount = 3;
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "AmmoBag") >= triggerCount)
                        {
                            actedCode = "1";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "Weapons/Gadgets/RadioBeacon/Radio_Beacon") >= triggerCount)
                        {
                            actedCode = "2";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "Weapons/Gadgets/SOFLAM/SOFLAM_PDA") >= triggerCount)
                        {
                            actedCode = "3";
                        }
                        if (aKill.killer.LiveKills.Count(dKill => dKill.RoundID == _roundID && dKill.weaponCode == "Medkit" && !dKill.IsTeamkill) >= triggerCount) 
                        {
                            actedCode = "4";
                        }
                        if (!String.IsNullOrEmpty(actedCode) && !PlayerProtected(aKill.killer))
                        {
                            QueueRecordForProcessing(new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_ban_perm"),
                                command_numeric = 0,
                                target_name = aKill.killer.player_name,
                                target_player = aKill.killer,
                                source_name = "AutoAdmin",
                                record_message = "Code 8-" + actedCode + ": Dispute Requested",
                                record_time = UtcNow()
                            });
                            return;
                        }
                    }
                }

                //Only add the last death if it's not a death by admin
                if (!String.IsNullOrEmpty(aKill.killer.player_name))
                {
                    try
                    {
                        //ADK grenade cooking catcher
                        if (_useExperimentalTools && _UseGrenadeCookCatcher)
                        {
                            if (_RoundCookers == null)
                            {
                                _RoundCookers = new Dictionary<String, AdKatsPlayer>();
                            }
                            const double possibleRange = 750.00;
                            //Check for cooked grenade and non-suicide
                            if (aKill.weaponCode.Contains("M67") || aKill.weaponCode.Contains("V40"))
                            {
                                if (true)
                                {
                                    Double fuseTime = 0;
                                    if (aKill.weaponCode.Contains("M67"))
                                    {
                                        if (_gameVersion == GameVersion.BF3)
                                        {
                                            fuseTime = 3735.00;
                                        }
                                        else if (_gameVersion == GameVersion.BF4)
                                        {
                                            fuseTime = 3132.00;
                                        }
                                    }
                                    else if (aKill.weaponCode.Contains("V40"))
                                    {
                                        fuseTime = 2865.00;
                                    }
                                    Boolean told = false;
                                    List<KeyValuePair<AdKatsPlayer, string>> possible = new List<KeyValuePair<AdKatsPlayer, String>>();
                                    List<KeyValuePair<AdKatsPlayer, string>> sure = new List<KeyValuePair<AdKatsPlayer, String>>();
                                    foreach (AdKatsKill cookerKill in aKill.killer.LiveKills.Where(dKill => (DateTime.Now - dKill.timestamp).TotalSeconds < 10))
                                    {
                                        //Get the actual time since cooker value
                                        Double milli = aKill.timestamp.Subtract(cookerKill.timestamp).TotalMilliseconds;

                                        //Calculate the percentage probability
                                        Double probability;
                                        if (Math.Abs(milli - fuseTime) < possibleRange)
                                        {
                                            probability = (1 - Math.Abs((milli - fuseTime) / possibleRange)) * 100;
                                            Log.Debug(() => cookerKill.victim.GetVerboseName() + " cooking probability: " + probability + "%", 2);
                                        }
                                        else
                                        {
                                            probability = 0.00;
                                        }

                                        //If probability > 60% report the player and add them to the round cookers list
                                        if (probability > 60.00)
                                        {
                                            Log.Debug(() => cookerKill.victim.GetVerboseName() + " in " + aKill.killer.GetVerboseName() + "'s recent kills has a " + probability + "% cooking probability.", 2);
                                            gKillHandled = true;
                                            //Code to avoid spam
                                            if (aKill.killer.lastKill.AddSeconds(2) < UtcNow())
                                            {
                                                aKill.killer.lastKill = UtcNow();
                                            }
                                            else
                                            {
                                                Log.Debug(() => "Skipping additional auto-actions for multi-kill event.", 2);
                                                continue;
                                            }

                                            if (!told)
                                            {
                                                //Inform the victim player that they will not be punished
                                                PlayerTellMessage(aKill.killer.player_name, "You appear to be a victim of grenade cooking and will NOT be punished.");
                                                PlayerTellMessage(aKill.victim.player_name, aKill.killer.GetVerboseName() + " was a victim of grenade cooking, they did not use explosives.");
                                                told = true;
                                            }

                                            //Create the probability String
                                            String probString = ((int)probability) + "-" + ((int)milli);

                                            //If the player is already on the round cooker list, ban them
                                            if (_RoundCookers.ContainsKey(cookerKill.victim.player_name) && _gameVersion == GameVersion.BF3)
                                            {
                                                //Create the punish record
                                                AdKatsRecord record = new AdKatsRecord
                                                {
                                                    record_source = AdKatsRecord.Sources.InternalAutomated,
                                                    server_id = _serverInfo.ServerID,
                                                    command_type = GetCommandByKey("player_punish"),
                                                    command_numeric = 0,
                                                    target_name = cookerKill.victim.player_name,
                                                    target_player = cookerKill.victim,
                                                    source_name = "AutoAdmin",
                                                    record_message = "Rules: Cooking Grenades [" + probString + "-X] [Victim " + aKill.killer.GetVerboseName() + " Protected]",
                                                    record_time = UtcNow()
                                                };
                                                //Process the record
                                                QueueRecordForProcessing(record);
                                                //adminSay("Punishing " + killer.player_name + " for " + record.record_message);
                                                Log.Debug(() => record.GetTargetNames() + " punished for " + record.record_message, 2);
                                                return;
                                            }
                                            //else if probability > 92.5% add them to the SURE list, and round cooker list
                                            if (probability > 92.5)
                                            {
                                                _RoundCookers.Add(cookerKill.victim.player_name, cookerKill.victim);
                                                Log.Debug(() => cookerKill.victim.GetVerboseName() + " added to round cooker list.", 2);
                                                //Add to SURE
                                                sure.Add(new KeyValuePair<AdKatsPlayer, String>(cookerKill.victim, probString));
                                            }
                                            //Otherwise add them to the round cooker list, and add to POSSIBLE list
                                            else
                                            {
                                                _RoundCookers.Add(cookerKill.victim.player_name, cookerKill.victim);
                                                Log.Debug(() => cookerKill.victim.GetVerboseName() + " added to round cooker list.", 2);
                                                //Add to POSSIBLE
                                                possible.Add(new KeyValuePair<AdKatsPlayer, String>(cookerKill.victim, probString));
                                            }
                                        }
                                    }
                                    //This method used for dealing with multiple kills at the same instant i.e twin/triple headshots
                                    if (sure.Count == 1 && possible.Count == 0 && _gameVersion == GameVersion.BF3)
                                    {
                                        AdKatsPlayer player = sure[0].Key;
                                        String probString = sure[0].Value;
                                        //Create the ban record
                                        AdKatsRecord record = new AdKatsRecord
                                        {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_punish"),
                                            command_numeric = 0,
                                            target_name = player.player_name,
                                            target_player = player,
                                            source_name = "AutoAdmin",
                                            record_message = "Rules: Cooking Grenades [" + probString + "] [Victim " + aKill.killer.GetVerboseName() + " Protected]",
                                            record_time = UtcNow()
                                        };
                                        //Process the record
                                        QueueRecordForProcessing(record);
                                        //adminSay("Punishing " + killer.player_name + " for " + record.record_message);
                                        Log.Debug(() => record.GetTargetNames() + " punished for " + record.record_message, 2);
                                    }
                                    else
                                    {
                                        AdKatsPlayer player;
                                        String probString;
                                        foreach (KeyValuePair<AdKatsPlayer, string> playerPair in sure)
                                        {
                                            player = playerPair.Key;
                                            probString = playerPair.Value;
                                            //Create the report record
                                            AdKatsRecord record = new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("player_report"),
                                                command_numeric = 0,
                                                target_name = player.player_name,
                                                target_player = player,
                                                source_name = "AutoAdmin",
                                                record_message = "Possible Grenade Cooker [" + probString + "] [Victim " + aKill.killer.GetVerboseName() + " Protected]",
                                                record_time = UtcNow()
                                            };
                                            //Process the record
                                            QueueRecordForProcessing(record);
                                            Log.Debug(() => record.GetTargetNames() + " reported for " + record.record_message, 2);
                                        }
                                        foreach (KeyValuePair<AdKatsPlayer, string> playerPair in possible)
                                        {
                                            player = playerPair.Key;
                                            probString = playerPair.Value;
                                            //Create the report record
                                            AdKatsRecord record = new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("player_report"),
                                                command_numeric = 0,
                                                target_name = player.player_name,
                                                target_player = player,
                                                source_name = "AutoAdmin",
                                                record_message = "Possible Grenade Cooker [" + probString + "] [Victim " + aKill.killer.GetVerboseName() + " Protected]",
                                                record_time = UtcNow()
                                            };
                                            //Process the record
                                            QueueRecordForProcessing(record);
                                            Log.Debug(() => record.GetTargetNames() + " reported for " + record.record_message, 2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        HandleException(new AdKatsException("Error in grenade cook catcher.", e));
                    }
                }

                try
                {
                    if (_isTestingAuthorized &&
                        _serverInfo.ServerID == 1 &&
                        _roundID >= 25000 &&
                        _roundID <= 25009) {
                        if (aKill.killerCPI.TeamID != aKill.victimCPI.TeamID) {
                            var killSpam = (aKill.killer.lastKill.AddSeconds(2) > UtcNow());
                            aKill.killer.lastKill = UtcNow();
                            switch (_roundID) {
                                case 25000:
                                    //Only 5 knife codes known, fuzzy match for unknown knife types
                                    if (!aKill.weaponCode.ToLower().Contains("knife") &&
                                        !aKill.weaponCode.ToLower().Contains("melee") &&
                                        aKill.weaponCode != "DamageArea" &&
                                        !killSpam) {
                                        AdKatsCommand aCommand = GetCommandByKey("player_kill");
                                        if (_populationStatus == PopulationState.High &&
                                            aKill.killer.TargetedRecords.Any(targetedRecord =>
                                            (targetedRecord.command_numeric == _roundID) &&
                                            (targetedRecord.command_action.command_key == "player_kill" || targetedRecord.command_action.command_key == "player_kick") &&
                                            (UtcNow() - targetedRecord.record_time).TotalMinutes < 10)) {
                                            aCommand = GetCommandByKey("player_kick");
                                        }
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = aCommand,
                                            command_numeric = _roundID,
                                            target_name = aKill.killer.player_name,
                                            target_player = aKill.killer,
                                            source_name = "AutoAdmin",
                                            record_time = UtcNow(),
                                            record_message = "KNIFE ONLY! ROUND 25000 EVENT (PT 1)"
                                        });
                                    }
                                    break;
                                case 25001:
                                    if (aKill.weaponCategory != DamageTypes.SniperRifle &&
                                        aKill.weaponCode != "DamageArea" &&
                                        !killSpam) {
                                        AdKatsCommand aCommand = GetCommandByKey("player_kill");
                                        if (_populationStatus == PopulationState.High &&
                                            aKill.killer.TargetedRecords.Any(targetedRecord =>
                                            (targetedRecord.command_numeric == _roundID) &&
                                            (targetedRecord.command_action.command_key == "player_kill" || targetedRecord.command_action.command_key == "player_kick") &&
                                            (UtcNow() - targetedRecord.record_time).TotalMinutes < 10)) {
                                            aCommand = GetCommandByKey("player_kick");
                                        }
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = aCommand,
                                            command_numeric = _roundID,
                                            target_name = aKill.killer.player_name,
                                            target_player = aKill.killer,
                                            source_name = "AutoAdmin",
                                            record_time = UtcNow(),
                                            record_message = "BOLT ACTIONS ONLY! ROUND 25000 EVENT (PT 2)"
                                        });
                                    }
                                    break;
                                case 25002:
                                    if (aKill.weaponCode != "U_SaddlegunSnp" &&
                                        aKill.weaponCode != "DamageArea" &&
                                        !killSpam) {
                                        AdKatsCommand aCommand = GetCommandByKey("player_kill");
                                        if (_populationStatus == PopulationState.High &&
                                            aKill.killer.TargetedRecords.Any(targetedRecord =>
                                            (targetedRecord.command_numeric == _roundID) &&
                                            (targetedRecord.command_action.command_key == "player_kill" || targetedRecord.command_action.command_key == "player_kick") &&
                                            (UtcNow() - targetedRecord.record_time).TotalMinutes < 10)) {
                                            aCommand = GetCommandByKey("player_kick");
                                        }
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = aCommand,
                                            command_numeric = _roundID,
                                            target_name = aKill.killer.player_name,
                                            target_player = aKill.killer,
                                            source_name = "AutoAdmin",
                                            record_time = UtcNow(),
                                            record_message = "MARE'S LEG ONLY! ROUND 25000 EVENT (PT 3)"
                                        });
                                    }
                                    break;
                                case 25003:
                                    if (aKill.weaponCode != "U_Defib" &&
                                        aKill.weaponCode != "DamageArea" &&
                                        !killSpam) {
                                        AdKatsCommand aCommand = GetCommandByKey("player_kill");
                                        if (_populationStatus == PopulationState.High &&
                                            aKill.killer.TargetedRecords.Any(targetedRecord =>
                                            (targetedRecord.command_numeric == _roundID) &&
                                            (targetedRecord.command_action.command_key == "player_kill" || targetedRecord.command_action.command_key == "player_kick") &&
                                            (UtcNow() - targetedRecord.record_time).TotalMinutes < 10)) {
                                            aCommand = GetCommandByKey("player_kick");
                                        }
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = aCommand,
                                            command_numeric = _roundID,
                                            target_name = aKill.killer.player_name,
                                            target_player = aKill.killer,
                                            source_name = "AutoAdmin",
                                            record_time = UtcNow(),
                                            record_message = "DEFIBS ONLY! ROUND 25000 EVENT (PT 4)"
                                        });
                                    }
                                    break;
                                case 25004:
                                    if (!aKill.weaponCode.ToLower().Contains("knife") &&
                                        !aKill.weaponCode.ToLower().Contains("melee") &&
                                        aKill.weaponCode != "dlSHTR" &&
                                        aKill.weaponCode != "DamageArea" &&
                                        !killSpam) {
                                        AdKatsCommand aCommand = GetCommandByKey("player_kill");
                                        if (_populationStatus == PopulationState.High &&
                                            aKill.killer.TargetedRecords.Any(targetedRecord =>
                                            (targetedRecord.command_numeric == _roundID) &&
                                            (targetedRecord.command_action.command_key == "player_kill" || targetedRecord.command_action.command_key == "player_kick") &&
                                            (UtcNow() - targetedRecord.record_time).TotalMinutes < 10)) {
                                            aCommand = GetCommandByKey("player_kick");
                                        }
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = aCommand,
                                            command_numeric = _roundID,
                                            target_name = aKill.killer.player_name,
                                            target_player = aKill.killer,
                                            source_name = "AutoAdmin",
                                            record_time = UtcNow(),
                                            record_message = "PHANTOM BOW AND KNIVES ONLY! ROUND 25000 EVENT (PT 5)"
                                        });
                                    }
                                    break;
                                case 25005:
                                    if (aKill.weaponCode != "U_Repairtool" &&
                                        aKill.weaponCode != "DamageArea" &&
                                        !killSpam) {
                                        AdKatsCommand aCommand = GetCommandByKey("player_kill");
                                        if (_populationStatus == PopulationState.High &&
                                            aKill.killer.TargetedRecords.Any(targetedRecord =>
                                            (targetedRecord.command_numeric == _roundID) &&
                                            (targetedRecord.command_action.command_key == "player_kill" || targetedRecord.command_action.command_key == "player_kick") &&
                                            (UtcNow() - targetedRecord.record_time).TotalMinutes < 10)) {
                                            aCommand = GetCommandByKey("player_kick");
                                        }
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = aCommand,
                                            command_numeric = _roundID,
                                            target_name = aKill.killer.player_name,
                                            target_player = aKill.killer,
                                            source_name = "AutoAdmin",
                                            record_time = UtcNow(),
                                            record_message = "REPAIR TOOL ONLY! ROUND 25000 EVENT (PT 6)"
                                        });
                                    }
                                    break;
                                case 25006:
                                    if (aKill.weaponCategory != DamageTypes.Handgun &&
                                        aKill.weaponCode != "DamageArea" &&
                                        !killSpam) {
                                        AdKatsCommand aCommand = GetCommandByKey("player_kill");
                                        if (_populationStatus == PopulationState.High &&
                                            aKill.killer.TargetedRecords.Any(targetedRecord =>
                                            (targetedRecord.command_numeric == _roundID) &&
                                            (targetedRecord.command_action.command_key == "player_kill" || targetedRecord.command_action.command_key == "player_kick") &&
                                            (UtcNow() - targetedRecord.record_time).TotalMinutes < 10)) {
                                            aCommand = GetCommandByKey("player_kick");
                                        }
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = aCommand,
                                            command_numeric = _roundID,
                                            target_name = aKill.killer.player_name,
                                            target_player = aKill.killer,
                                            source_name = "AutoAdmin",
                                            record_time = UtcNow(),
                                            record_message = "PISTOLS ONLY! ROUND 25000 EVENT (PT 7)"
                                        });
                                    }
                                    break;
                                case 25007:
                                    //All weapons allowed
                                    break;
                                case 25008:
                                    //All weapons allowed
                                    break;
                                case 25009:
                                    //All weapons allowed
                                    break;
                            }
                        }
                    } else if (_isTestingAuthorized && 
                        _gameVersion == GameVersion.BF4 &&
                        aKill.IsTeamkill &&
                        !aKill.IsSuicide)
                    {
                        //Case for valid medkit teamkills
                        if (_serverInfo.ServerID == 1 && aKill.weaponCode != "U_PortableMedicpack" && aKill.weaponCode != "U_Medkit")
                        {
                            //Slay the teamkiller
                            AdKatsRecord aRecord = new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_kill_force"),
                                command_numeric = 0,
                                target_name = aKill.killer.player_name,
                                target_player = aKill.killer,
                                source_name = "AutoAdmin",
                                record_message = "Teamkilling " + aKill.victim.GetVerboseName(),
                                record_time = UtcNow()
                            };
                            QueueRecordForProcessing(aRecord);
                            //Inform the victim
                            PlayerTellMessage(aKill.victim.player_name, aKill.killer.GetVerboseName() + " was slain for teamkilling you");
                        }
                    }
                    else if (_UseWeaponLimiter && !gKillHandled)
                    {
                        //Check for restricted weapon
                        if (Regex.Match(aKill.weaponCode, @"(?:" + _WeaponLimiterString + ")", RegexOptions.IgnoreCase).Success)
                        {
                            //Check for exception type
                            if (!Regex.Match(aKill.weaponCode, @"(?:" + _WeaponLimiterExceptionString + ")", RegexOptions.IgnoreCase).Success)
                            {
                                //Check if suicide
                                if (!aKill.IsSuicide)
                                {
                                    //Get player from the dictionary
                                    if (aKill.killer != null) {
                                        var killSpam = (aKill.killer.lastKill.AddSeconds(2) > UtcNow());
                                        aKill.killer.lastKill = UtcNow();

                                        const string removeWeapon = "Weapons/";
                                        const string removeGadgets = "Gadgets/";
                                        const string removePrefix = "U_";
                                        String weapon = GetShortWeaponNameByCode(aKill.weaponCode);
                                        Int32 index = weapon.IndexOf(removeWeapon, StringComparison.Ordinal);
                                        weapon = (index < 0) ? (weapon) : (weapon.Remove(index, removeWeapon.Length));
                                        index = weapon.IndexOf(removeGadgets, StringComparison.Ordinal);
                                        weapon = (index < 0) ? (weapon) : (weapon.Remove(index, removeGadgets.Length));
                                        index = weapon.IndexOf(removePrefix, StringComparison.Ordinal);
                                        weapon = (index < 0) ? (weapon) : (weapon.Remove(index, removePrefix.Length));

                                        //Record to boost rep for victim
                                        PlayerYellMessage(aKill.victim.player_name, aKill.killer.GetVerboseName() + " was punished for killing you with " + weapon);
                                        AdKatsRecord repRecord = new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_repboost"),
                                            command_numeric = 0,
                                            target_name = aKill.victim.player_name,
                                            target_player = aKill.victim,
                                            source_name = "RepManager",
                                            record_message = "Player killed by restricted weapon " + weapon,
                                            record_time = UtcNow()
                                        };
                                        QueueRecordForProcessing(repRecord);

                                        if (!killSpam && _serverInfo.ServerType != "OFFICIAL")
                                        {
                                            //Create the punish record
                                            AdKatsRecord record = new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("player_punish"),
                                                command_numeric = 0,
                                                target_name = aKill.killer.player_name,
                                                target_player = aKill.killer,
                                                source_name = "AutoAdmin",
                                                record_time = UtcNow()
                                            };
                                            if (weapon == "RoadKill")
                                            {
                                                record.record_message = "Rules: Roadkilling with EOD or MAV";
                                            }
                                            else if (weapon == "Death")
                                            {
                                                if (_gameVersion == GameVersion.BF3)
                                                {
                                                    record.record_message = "Rules: Using Mortar";
                                                }
                                                else if (_gameVersion == GameVersion.BF4)
                                                {
                                                    record.record_message = "Rules: Using EOD Bot";
                                                }
                                            }
                                            else
                                            {
                                                record.record_message = "Rules: Using Explosives [" + weapon + "]";
                                            }

                                            //Process the record
                                            QueueRecordForProcessing(record);
                                        }
                                        else
                                        {
                                            Log.Debug(() => "Skipping additional auto-actions for multi-kill event.", 2);
                                        }
                                    }
                                    else
                                    {
                                        Log.Error("Killer was null when processing kill");
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error in no explosives auto-admin.", e));
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while processing player kill.", e));
            }
            Log.Debug(() => "Exiting OnPlayerKilled", 7);
        }

        public override void OnPlayerSpawned(String soldierName, Inventory spawnedInventory)
        {
            Log.Debug(() => "Entering OnPlayerSpawned", 7);
            try
            {
                AdKatsPlayer aPlayer = null;
                if (_pluginEnabled && _threadsReady && _firstPlayerListComplete)
                {
                    //Fetch the player
                    if (!_PlayerDictionary.TryGetValue(soldierName, out aPlayer)) {
                        Log.Error("Could not find " + soldierName + " in player dictionary on spawn.");
                        return;
                    }

                    //Ensure frostbite player info
                    if (aPlayer.frostbitePlayerInfo == null) {
                        if (_isTestingAuthorized) {
                            Log.Error("Could not find " + soldierName + " frostbite info on spawn.");
                        }
                        return;
                    }

                    //Fetch teams
                    AdKatsTeam team1, team2;
                    if (!GetTeamByID(1, out team1)) {
                        if (_roundState == RoundState.Playing) {
                            Log.Error("Teams not loaded when they should be.");
                        }
                        return;
                    }
                    if (!GetTeamByID(2, out team2)) {
                        if (_roundState == RoundState.Playing) {
                            Log.Error("Teams not loaded when they should be.");
                        }
                        return;
                    }
                    AdKatsTeam friendlyTeam, enemyTeam;
                    if (aPlayer.frostbitePlayerInfo.TeamID == team1.TeamID) {
                        friendlyTeam = team1;
                        enemyTeam = team2;
                    } else {
                        friendlyTeam = team2;
                        enemyTeam = team1;
                    }

                    if (_roundState == RoundState.Loaded)
                    {
                        _roundState = RoundState.Playing;

                        //Take minimum ticket count between teams (accounts for rush), but not less than 0
                        _startingTicketCount = Math.Max(0, Math.Min(team1.TeamTicketCount, team2.TeamTicketCount));
                        if (_isTestingAuthorized) {
                            ProconChatWrite("Starting Ticket Count: " + _startingTicketCount);
                            Log.Info("Starting Ticket Count: " + _startingTicketCount);
                        }

                        if (_isTestingAuthorized && _gameVersion == GameVersion.BF4) {
                            if (_serverInfo.ServerName.Contains("EU #5")) {
                                StartAndLogThread(new Thread(new ThreadStart(delegate {
                                    Thread.CurrentThread.Name = "RoundWelcome";
                                    Thread.Sleep(TimeSpan.FromSeconds(17));
                                    AdminTellMessage("Welcome to round " + String.Format("{0:n0}", _roundID) + " of Conquest Locker");
                                    LogThreadExit();
                                })));
                            } else if (_serverInfo.ServerName.Contains("#5")) {
                                StartAndLogThread(new Thread(new ThreadStart(delegate {
                                    Thread.CurrentThread.Name = "RoundWelcome";
                                    Thread.Sleep(TimeSpan.FromSeconds(17));
                                    AdminTellMessage("Welcome to round " + String.Format("{0:n0}", _roundID) + " of VoteMap TDM");
                                    LogThreadExit();
                                })));
                            } else if (_serverInfo.ServerName.Contains("#7")) {
                                StartAndLogThread(new Thread(new ThreadStart(delegate {
                                    Thread.CurrentThread.Name = "RoundWelcome";
                                    Thread.Sleep(TimeSpan.FromSeconds(17));
                                    switch (_roundID) {
                                        case 25000:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! KNIVES ONLY!");
                                            break;
                                        case 25001:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! HARDCORE BOLT ACTIONS!");
                                            break;
                                        case 25002:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! MARE'S LEG ONLY!");
                                            break;
                                        case 25003:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! DEFIBS ONLY!");
                                            break;
                                        case 25004:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! PHANTOM BOW AND KNIVES ONLY!");
                                            break;
                                        case 25005:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! REPAIR TOOL ONLY!");
                                            break;
                                        case 25006:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! PISTOLS ONLY!");
                                            break;
                                        case 25007:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! ALL WEAPONS ALLOWED!");
                                            break;
                                        case 25008:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! ALL WEAPONS ALLOWED!");
                                            break;
                                        case 25009:
                                            AdminTellMessage("WELCOME TO THE ROUND " + String.Format("{0:n0}", _roundID) + " EVENT! ALL WEAPONS ALLOWED!");
                                            break;
                                        default:
                                            AdminTellMessage("Welcome to round " + String.Format("{0:n0}", _roundID) + " of No Explosives Metro" + ((_roundID < 25000 && _roundID >= 25000 - 15) ? ". Round 25,000 event today!" : ""));
                                            break;
                                    }
                                    LogThreadExit();
                                })));
                            } else if (_serverInfo.ServerName.Contains("#6")) {
                                StartAndLogThread(new Thread(new ThreadStart(delegate {
                                    Thread.CurrentThread.Name = "RoundWelcome";
                                    Thread.Sleep(TimeSpan.FromSeconds(17));
                                    AdminTellMessage("Welcome to round " + String.Format("{0:n0}", _roundID) + " of No Explosives Locker");
                                    LogThreadExit();
                                })));
                            }
                        }
                        if (_useRoundTimer)
                        {
                            StartRoundTimer();
                        }
                    }

                    if (_CommandNameDictionary.Count > 0)
                    {
                        //Handle TeamSwap notifications
                        String command = GetCommandByKey("self_teamswap").command_text;
                        aPlayer.lastSpawn = UtcNow();
                        aPlayer.lastAction = UtcNow();

                        //Add matched spawn count
                        if (_unmatchedRoundDeaths.Contains(aPlayer.player_name))
                        {
                            friendlyTeam.IncrementTeamTicketAdjustment();
                        }
                        //Removed unmatched death if applicable
                        _unmatchedRoundDeaths.Remove(aPlayer.player_name);
                        //Decrement unmatched death count if applicable
                        if (_unmatchedRoundDeathCounts.ContainsKey(aPlayer.player_name))
                        {
                            _unmatchedRoundDeathCounts[aPlayer.player_name] = _unmatchedRoundDeathCounts[aPlayer.player_name] - 1;
                        }

                        if (aPlayer.player_aa && !aPlayer.player_aa_told)
                        {
                            String adminAssistantMessage = "You are now considered an Admin Assistant. ";
                            if (!_UseAAReportAutoHandler && !_EnableAdminAssistantPerk)
                            {
                                adminAssistantMessage += "Thank you for your consistent reporting.";
                            }
                            else
                            {
                                adminAssistantMessage += "Perks: ";
                                if (_UseAAReportAutoHandler)
                                {
                                    adminAssistantMessage += "AutoAdmin can handle some of your reports. ";
                                }
                                if (_EnableAdminAssistantPerk)
                                {
                                    adminAssistantMessage += "You can use the @" + command + " command.";
                                }
                            }
                            PlayerSayMessage(soldierName, adminAssistantMessage);
                            aPlayer.player_aa_told = true;
                        }
                    }

                    //Handle Dev Notifications
                    if (soldierName == "ColColonCleaner" && (!_isTestingAuthorized || !_toldCol))
                    {
                        PlayerTellMessage("ColColonCleaner", "CONGRATS! This server is running AdKats " + PluginVersion + "!");
                        _toldCol = true;
                    }

                    if (!aPlayer.player_spawnedOnce)
                    {
                        if (_ShowNewPlayerAnnouncement && aPlayer.player_new)
                        {
                            OnlineAdminSayMessage(aPlayer.GetVerboseName() + " just joined this server group for the first time!");
                        }

                        if (_UseFirstSpawnMessage || 
                            (_battlecryVolume != BattlecryVolume.Disabled && !String.IsNullOrEmpty(aPlayer.player_battlecry)) ||
                            _UsePerkExpirationNotify)
                        {
                            Thread spawnPrinter = new Thread(new ThreadStart(delegate
                            {
                                Log.Debug(() => "Starting a spawn printer thread.", 5);
                                try
                                {
                                    Thread.CurrentThread.Name = "SpawnPrinter";

                                    //Wait 2 seconds
                                    _threadMasterWaitHandle.WaitOne(2000);
                                    
                                    //Send perk expiration notification
                                    if (_UsePerkExpirationNotify)
                                    {
                                        var groups = GetMatchingVerboseASPlayers(aPlayer);
                                        var expiringGroups = groups.Where(group => NowDuration(group.player_expiration).TotalDays < _PerkExpirationNotifyDays);
                                        if (expiringGroups.Any())
                                        {
                                            PlayerTellMessage(aPlayer.player_name, "You have perks expiring soon. Use !" + GetCommandByKey("player_perks").command_text + " to see your perks!");
                                            _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(_YellDuration));
                                        }
                                    }

                                    if (_battlecryVolume != BattlecryVolume.Disabled && 
                                        !String.IsNullOrEmpty(aPlayer.player_battlecry))
                                    {
                                        switch (_battlecryVolume)
                                        {
                                            case BattlecryVolume.Say:
                                                AdminSayMessage(aPlayer.player_battlecry);
                                                break;
                                            case BattlecryVolume.Yell:
                                                AdminYellMessage(aPlayer.player_battlecry);
                                                break;
                                            case BattlecryVolume.Tell:
                                                AdminTellMessage(aPlayer.player_battlecry);
                                                break;
                                        }
                                        _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(_YellDuration));
                                    }
                                    else if (_UseFirstSpawnMessage)
                                    {
                                        PlayerTellMessage(aPlayer.player_name, _FirstSpawnMessage);
                                        _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(_YellDuration));
                                    }

                                    int points = FetchPoints(aPlayer, false, true);
                                    if (_useFirstSpawnRepMessage)
                                    {
                                        Boolean isAdmin = PlayerIsAdmin(aPlayer);
                                        String repMessage = "Your server reputation is " + ((!isAdmin || !_isTestingAuthorized) ? (Math.Round(aPlayer.player_reputation, 2) + "") : (aPlayer.player_role.role_name)) + ", with ";
                                        if (points > 0)
                                        {
                                            repMessage += points + " infraction point(s). ";
                                        }
                                        else
                                        {
                                            repMessage += "a clean infraction record. ";
                                        }
                                        //TODO add this back
                                        if (!isAdmin && _isTestingAuthorized && false)
                                        {
                                            repMessage += Environment.NewLine;
                                            if (aPlayer.player_reputation < _reputationThresholdGood)
                                            {
                                                if (aPlayer.player_reputation > 15)
                                                {
                                                    repMessage += "Thank you for helping the admins! At " + Math.Round(_reputationThresholdGood, 2) + " reputation you receive large perks.";
                                                }
                                                else if (aPlayer.player_reputation > 0)
                                                {
                                                    repMessage += "Thank you for helping the admins! At 15 reputation you receive small perks.";
                                                }
                                                else
                                                {
                                                    repMessage += "!" + GetCommandByKey("player_report").command_text + " rule breakers to increase reputation.";
                                                }
                                            }
                                            else
                                            {
                                                repMessage += "You have report auto-contest and spambot whitelist. Thank you.";
                                            }
                                        }
                                        PlayerTellMessage(aPlayer.player_name, repMessage);
                                    }
                                }
                                catch (Exception)
                                {
                                    HandleException(new AdKatsException("Error while printing spawn messages"));
                                }
                                Log.Debug(() => "Exiting a spawn printer.", 5);
                                LogThreadExit();
                            }));

                            //Start the thread
                            StartAndLogThread(spawnPrinter);
                        }
                    }
                    aPlayer.player_spawnedOnce = true;

                    if (_ActOnSpawnDictionary.Count > 0)
                    {
                        lock (_ActOnSpawnDictionary)
                        {
                            AdKatsRecord record;
                            if (_ActOnSpawnDictionary.TryGetValue(soldierName, out record))
                            {
                                //Remove it from the dic
                                _ActOnSpawnDictionary.Remove(soldierName);
                                //Wait 1.5 seconds to take action (no "killed by admin" message in BF3 without this wait)
                                _threadMasterWaitHandle.WaitOne(1500);
                                //Queue the action
                                QueueRecordForActionHandling(record);
                            }
                        }
                    }

                    if (_AutomaticForgives && 
                        aPlayer.player_reputation >= 0 && 
                        aPlayer.player_infractionPoints > 0 && 
                        aPlayer.LastPunishment != null && 
                        (UtcNow() - aPlayer.LastPunishment.record_time).TotalDays > _AutomaticForgiveLastPunishDays && 
                        (aPlayer.LastForgive == null || (UtcNow() - aPlayer.LastForgive.record_time).TotalDays > _AutomaticForgiveLastForgiveDays))
                    {
                        QueueRecordForProcessing(new AdKatsRecord
                        {
                            record_source = AdKatsRecord.Sources.InternalAutomated,
                            server_id = _serverInfo.ServerID,
                            command_type = GetCommandByKey("player_forgive"),
                            command_numeric = 0,
                            target_name = aPlayer.player_name,
                            target_player = aPlayer,
                            source_name = "InfractionManager",
                            record_message = "Auto-Forgiven for Clean Play",
                            record_time = UtcNow()
                        });
                    }

                    //Auto-Nuke Slay Duration
                    var duration = NowDuration(_surrenderAutoNukeLast);
                    if (duration.TotalSeconds < _autoNukeDuration && 
                        _surrenderAutoNukeLastTeam != null && 
                        aPlayer.frostbitePlayerInfo.TeamID == _surrenderAutoNukeLastTeam.TeamID)
                    {
                        var endDuration = NowDuration(_surrenderAutoNukeLast.AddSeconds(_autoNukeDuration));
                        PlayerTellMessage(aPlayer.player_name, _surrenderAutoNukeLastTeam.TeamKey + " nuke active for " + Math.Round(endDuration.TotalSeconds, 1) + " seconds!");
                        ExecuteCommand("procon.protected.send", "admin.killPlayer", aPlayer.player_name);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling player spawn.", e));
            }
            Log.Debug(() => "Exiting OnPlayerSpawned", 7);
        }


        public override void OnPlayerLeft(CPlayerInfo playerInfo)
        {
            Log.Debug(() => "Entering OnPlayerLeft", 7);
            try
            {
                QueuePlayerForRemoval(playerInfo);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling player left.", e));
            }
            Log.Debug(() => "Exiting OnPlayerLeft", 7);
        }

        private void QueueSettingImport(Int32 serverID)
        {
            Log.Debug(() => "Entering queueSettingImport", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue server ID for setting import", 6);
                    _settingImportID = serverID;
                    _DbCommunicationWaitHandle.Set();
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while preparing to import settings.", e));
            }
            Log.Debug(() => "Exiting queueSettingImport", 7);
        }

        private void QueueSettingForUpload(CPluginVariable setting)
        {
            Log.Debug(() => "Entering queueSettingForUpload", 7);
            if (!_settingsFetched)
            {
                return;
            }
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue setting " + setting.Name + " for upload", 6);
                    lock (_SettingUploadQueue)
                    {
                        _SettingUploadQueue.Enqueue(setting);
                        _DbCommunicationWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing setting for upload.", e));
            }
            Log.Debug(() => "Exiting queueSettingForUpload", 7);
        }

        private void QueueCommandForUpload(AdKatsCommand command)
        {
            Log.Debug(() => "Entering queueCommandForUpload", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue command " + command.command_key + " for upload", 6);
                    lock (_CommandUploadQueue)
                    {
                        _CommandUploadQueue.Enqueue(command);
                        _DbCommunicationWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing command for upload.", e));
            }
            Log.Debug(() => "Exiting queueCommandForUpload", 7);
        }

        private void QueueRoleForUpload(AdKatsRole aRole)
        {
            Log.Debug(() => "Entering queueRoleForUpload", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue role " + aRole.role_key + " for upload", 6);
                    lock (_RoleUploadQueue)
                    {
                        _RoleUploadQueue.Enqueue(aRole);
                        _DbCommunicationWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing role for upload.", e));
            }
            Log.Debug(() => "Exiting queueRoleForUpload", 7);
        }

        private void QueueRoleForRemoval(AdKatsRole aRole)
        {
            Log.Debug(() => "Entering queueRoleForRemoval", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue role " + aRole.role_key + " for removal", 6);
                    lock (_RoleRemovalQueue)
                    {
                        _RoleRemovalQueue.Enqueue(aRole);
                        _DbCommunicationWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing role for removal.", e));
            }
            Log.Debug(() => "Exiting queueRoleForRemoval", 7);
        }

        private void QueuePlayerForBanCheck(AdKatsPlayer player)
        {
            Log.Debug(() => "Entering queuePlayerForBanCheck", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue player for ban check", 6);
                    lock (_BanEnforcerCheckingQueue)
                    {
                        _BanEnforcerCheckingQueue.Enqueue(player);
                        Log.Debug(() => "Player queued for checking", 6);
                        _BanEnforcerWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing player for ban check.", e));
            }
            Log.Debug(() => "Exiting queuePlayerForBanCheck", 7);
        }

        private void QueueBanForProcessing(AdKatsBan aBan)
        {
            Log.Debug(() => "Entering queueBanForProcessing", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue ban for processing", 6);
                    lock (_BanEnforcerProcessingQueue)
                    {
                        _BanEnforcerProcessingQueue.Enqueue(aBan);
                        Log.Debug(() => "Ban queued for processing", 6);
                        _DbCommunicationWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing ban for processing.", e));
            }
            Log.Debug(() => "Exiting queueBanForProcessing", 7);
        }

        private void BanEnforcerThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Ban Enforcer Thread", 1);
                Thread.CurrentThread.Name = "BanEnforcer";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering Ban Enforcer Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }

                        SendNonQuery("Updating Active Bans", "UPDATE `adkats_bans` SET `ban_status` = 'Expired' WHERE `ban_endTime` <= UTC_TIMESTAMP() AND `ban_status` = 'Active'", false);

                        //Get all unchecked players
                        Queue<AdKatsPlayer> playerCheckingQueue;
                        if (_BanEnforcerCheckingQueue.Count > 0 && _UseBanEnforcer)
                        {
                            Log.Debug(() => "Preparing to lock banEnforcerMutex to retrive new players", 6);
                            lock (_BanEnforcerCheckingQueue)
                            {
                                Log.Debug(() => "Inbound ban enforcer players found. Grabbing.", 5);
                                //Grab all players in the queue
                                playerCheckingQueue = new Queue<AdKatsPlayer>(_BanEnforcerCheckingQueue.ToArray());
                                //Clear the queue for next run
                                _BanEnforcerCheckingQueue.Clear();
                                if (_databaseConnectionCriticalState)
                                {
                                    continue;
                                }
                            }
                        }
                        else
                        {
                            Log.Debug(() => "No inbound ban checks. Waiting for Input.", 6);
                            //Wait for input
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _BanEnforcerWaitHandle.Reset();
                            _BanEnforcerWaitHandle.WaitOne(TimeSpan.FromSeconds(60));
                            loopStart = UtcNow();
                            continue;
                        }

                        //Get all checks in order that they came in
                        while (playerCheckingQueue.Count > 0)
                        {
                            if (!_pluginEnabled)
                            {
                                break;
                            }
                            //Grab first/next player
                            AdKatsPlayer aPlayer = playerCheckingQueue.Dequeue();
                            Log.Debug(() => "begin ban enforcer reading player " + aPlayer.GetVerboseName(), 5);
                            if (_PlayerDictionary.ContainsKey(aPlayer.player_name))
                            {
                                List<AdKatsBan> aBanList = FetchPlayerBans(aPlayer);
                                if (aBanList.Count > 0)
                                {
                                    //Check for specific ban on this player
                                    AdKatsBan playerBan = aBanList.Where(aBan => aBan.player_id == aPlayer.player_id || (aBan.ban_record.target_player != null && aBan.ban_record.target_player.player_id == aPlayer.player_id)).FirstOrDefault();
                                    if (playerBan != null)
                                    {
                                        //Ensure the ban record has updated player information
                                        playerBan.ban_record.target_player = aPlayer;
                                        //Found specific ban
                                        QueueRecordForProcessing(new AdKatsRecord
                                        {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            source_name = "BanEnforcer",
                                            isIRO = false,
                                            server_id = _serverInfo.ServerID,
                                            target_name = aPlayer.player_name,
                                            target_player = aPlayer,
                                            command_type = GetCommandByKey("banenforcer_enforce"),
                                            command_numeric = (int)playerBan.ban_id,
                                            record_message = playerBan.ban_record.record_message,
                                            record_time = UtcNow()
                                        });
                                    }
                                    else
                                    {
                                        //No specific ban, use linked bans
                                        List<String> linkedIDs = (from aBan in aBanList where aBan != null && aBan.ban_record != null && aBan.ban_record.target_player != null select aBan.ban_record.target_player.player_id.ToString()).ToList();
                                        String strIDs = String.Join(", ", linkedIDs.ToArray());
                                        //Use the first ban found
                                        playerBan = aBanList.FirstOrDefault();
                                        if (playerBan != null)
                                        {
                                            //Ensure the ban record has updated player information
                                            playerBan.ban_record.target_player = aPlayer;
                                            //Queue record for upload
                                            QueueRecordForProcessing(new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                source_name = "BanEnforcer",
                                                isIRO = false,
                                                server_id = _serverInfo.ServerID,
                                                target_name = aPlayer.player_name,
                                                target_player = aPlayer,
                                                command_type = GetCommandByKey("banenforcer_enforce"),
                                                command_numeric = (int)playerBan.ban_id,
                                                record_message = playerBan.ban_record.record_message + " [LINKED ACCOUNT " + strIDs + "]",
                                                record_time = UtcNow()
                                            });
                                        }
                                        else
                                        {
                                            Log.Error("Error fetching ban details to enforce.");
                                            continue;
                                        }
                                    }
                                    Log.Debug(() => "BAN ENFORCED on " + aPlayer.GetVerboseName(), 3);
                                    //Enforce the ban
                                    EnforceBan(playerBan, true);
                                }
                                else
                                {
                                    Log.Debug(() => "No ban found for player", 5);
                                    if (_serverInfo.ServerType != "OFFICIAL")
                                    {
                                        if (_isTestingAuthorized && 
                                            (aPlayer.player_name.ToLower().Contains("fairfight") || aPlayer.player_name.StartsWith("AA_") || aPlayer.player_name.EndsWith("_AA")))
                                        {
                                            QueueRecordForProcessing(new AdKatsRecord
                                            {
                                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                                server_id = _serverInfo.ServerID,
                                                command_type = GetCommandByKey("player_ban_perm"),
                                                command_numeric = 0,
                                                target_name = aPlayer.player_name,
                                                target_player = aPlayer,
                                                source_name = "AutoAdmin",
                                                record_message = "Multihack",
                                                record_time = UtcNow()
                                            });
                                            continue;
                                        }
                                        //Only call a hack check if the player does not already have a ban
                                        QueuePlayerForHackerCheck(aPlayer);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("ban enforcer thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in ban enforcer thread. Skipping current loop.", e));
                    }
                }
                Log.Debug(() => "Ending Ban Enforcer Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in ban enforcer thread.", e));
            }
        }

        public override void OnBanAdded(CBanInfo ban)
        {
            if (!_pluginEnabled || !_UseBanEnforcer)
            {
                return;
            }
            //Log.Debug(() => "OnBanAdded fired", 6);
            ExecuteCommand("procon.protected.send", "banList.list");
        }

        public override void OnBanList(List<CBanInfo> banList)
        {
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                //Return if small duration (0.5 seconds) since last ban list, or if there is already a ban list going on
                if ((UtcNow() - _lastSuccessfulBanList) < TimeSpan.FromSeconds(0.5))
                {
                    Log.Debug(() => "Banlist being called quickly.", 4);
                    return;
                }
                if (_BansQueuing)
                {
                    Log.Error("Attempted banlist call rejected. Processing already in progress.");
                    return;
                }
                DateTime startTime = UtcNow();
                _lastSuccessfulBanList = startTime;
                if (!_pluginEnabled)
                {
                    return;
                }
                Log.Debug(() => "OnBanList fired", 5);
                if (_UseBanEnforcer)
                {
                    if (banList.Count > 0)
                    {
                        Log.Debug(() => "Bans found", 3);
                        lock (_CBanProcessingQueue)
                        {
                            //Only allow queueing of new bans if the processing queue is currently empty
                            if (_CBanProcessingQueue.Count == 0)
                            {
                                foreach (CBanInfo cBan in banList)
                                {
                                    Log.Debug(() => "Queuing Ban.", 7);
                                    _CBanProcessingQueue.Enqueue(cBan);
                                    _BansQueuing = true;
                                    if (UtcNow() - startTime > TimeSpan.FromSeconds(50))
                                    {
                                        HandleException(new AdKatsException("OnBanList took longer than 50 seconds, exiting so procon doesn't panic."));
                                        _BansQueuing = false;
                                        return;
                                    }
                                }
                                _BansQueuing = false;
                            }
                        }
                    }
                }
                _DbCommunicationWaitHandle.Set();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured while listing procon bans.", e));
                _BansQueuing = false;
            }
        }

        public override void OnBanListClear()
        {
            Log.Debug(() => "Ban list cleared", 5);
        }

        public override void OnBanListSave()
        {
            Log.Debug(() => "Ban list saved", 5);
        }

        public override void OnBanListLoad()
        {
            Log.Debug(() => "Ban list loaded", 5);
        }

        private void QueuePlayerForHackerCheck(AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "Entering queuePlayerForHackerCheck", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue " + aPlayer.player_name + " for hacker check", 6);
                    _hackerCheckedPlayersStats.Remove(aPlayer.player_guid);
                    lock (_HackerCheckerQueue)
                    {
                        if (_HackerCheckerQueue.All(qPlayer => qPlayer.player_guid != aPlayer.player_guid))
                        {
                            _HackerCheckerQueue.Enqueue(aPlayer);
                            Log.Debug(() => aPlayer.player_name + " queued for hacker check", 6);
                            _HackerCheckerWaitHandle.Set();
                        }
                        else
                        {
                            Log.Debug(() => aPlayer.player_name + " hacker check cancelled; player already in queue.", 6);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing player for hacker check.", e));
            }
            Log.Debug(() => "Exiting queuePlayerForHackerCheck", 7);
        }

        public List<AdKatsSpecialPlayer> GetASPlayersOfGroup(String specialPlayerGroup)
        {
            Log.Debug(() => "Entering GetAsPlayersOfGroup", 8);
            try
            {
                lock (_baseSpecialPlayerCache)
                {
                    List<AdKatsSpecialPlayer> matchingSpecialPlayers = new List<AdKatsSpecialPlayer>();
                    matchingSpecialPlayers.AddRange(_baseSpecialPlayerCache.Values.Where(asPlayer => asPlayer.player_group != null && asPlayer.player_group.group_key == specialPlayerGroup));
                    return matchingSpecialPlayers;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching special players of group.", e));
            }
            Log.Debug(() => "Exiting GetAsPlayersOfGroup", 8);
            return null;
        }

        public List<AdKatsSpecialPlayer> GetVerboseASPlayersOfGroup(String specialPlayerGroup)
        {
            Log.Debug(() => "Entering GetVerboseASPlayersOfGroup", 8);
            try
            {
                lock (_baseSpecialPlayerCache)
                {
                    List<AdKatsSpecialPlayer> matchingSpecialPlayers = new List<AdKatsSpecialPlayer>();
                    matchingSpecialPlayers.AddRange(_verboseSpecialPlayerCache.Values.Where(asPlayer => asPlayer.player_group != null && asPlayer.player_group.group_key == specialPlayerGroup));
                    return matchingSpecialPlayers;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching verbose special players of group.", e));
            }
            Log.Debug(() => "Exiting GetVerboseASPlayersOfGroup", 8);
            return null;
        }

        public List<AdKatsSpecialPlayer> GetMatchingASPlayers(AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "Entering GetMatchingASPlayers", 8);
            try
            {
                lock (_baseSpecialPlayerCache)
                {
                    List<AdKatsSpecialPlayer> matchingSpecialPlayers = new List<AdKatsSpecialPlayer>();
                    matchingSpecialPlayers.AddRange(_baseSpecialPlayerCache.Values.Where(
                        asPlayer => asPlayer.player_group != null && 
                                    asPlayer.player_object != null && 
                                    (asPlayer.player_object.player_id == aPlayer.player_id || 
                                     asPlayer.player_identifier == aPlayer.player_name || 
                                     asPlayer.player_identifier == aPlayer.player_guid || 
                                     asPlayer.player_identifier == aPlayer.player_ip)));
                    return matchingSpecialPlayers;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching matching special players.", e));
            }
            Log.Debug(() => "Exiting GetMatchingASPlayers", 8);
            return null;
        }

        public List<AdKatsSpecialPlayer> GetMatchingVerboseASPlayers(AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "Entering GetMatchingVerboseASPlayers", 8);
            try
            {
                lock (_baseSpecialPlayerCache)
                {
                    List<AdKatsSpecialPlayer> matchingSpecialPlayers = new List<AdKatsSpecialPlayer>();
                    matchingSpecialPlayers.AddRange(_verboseSpecialPlayerCache.Values.Where(
                        asPlayer => asPlayer.player_group != null &&
                                    asPlayer.player_object != null &&
                                    (asPlayer.player_object.player_id == aPlayer.player_id ||
                                     asPlayer.player_identifier == aPlayer.player_name ||
                                     asPlayer.player_identifier == aPlayer.player_guid ||
                                     asPlayer.player_identifier == aPlayer.player_ip)));
                    return matchingSpecialPlayers;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching matching verbose special players.", e));
            }
            Log.Debug(() => "Exiting GetMatchingVerboseASPlayers", 8);
            return null;
        }

        public List<AdKatsSpecialPlayer> GetMatchingASPlayersOfGroup(String specialPlayerGroup, AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "Entering GetMatchingASPlayersOfGroup", 8);
            try
            {
                lock (_baseSpecialPlayerCache)
                {
                    List<AdKatsSpecialPlayer> matchingSpecialPlayers = new List<AdKatsSpecialPlayer>();
                    matchingSpecialPlayers.AddRange(_baseSpecialPlayerCache.Values.Where(asPlayer => asPlayer.player_group != null && asPlayer.player_group.group_key == specialPlayerGroup && asPlayer.player_object != null && (asPlayer.player_object.player_id == aPlayer.player_id || asPlayer.player_identifier == aPlayer.player_name || asPlayer.player_identifier == aPlayer.player_guid || asPlayer.player_identifier == aPlayer.player_ip)));
                    return matchingSpecialPlayers;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching matching special players of group.", e));
            }
            Log.Debug(() => "Exiting GetMatchingASPlayersOfGroup", 8);
            return null;
        }

        public List<AdKatsSpecialPlayer> GetMatchingVerboseASPlayersOfGroup(String specialPlayerGroup, AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "Entering GetMatchingVerboseASPlayersOfGroup", 8);
            try
            {
                lock (_baseSpecialPlayerCache)
                {
                    List<AdKatsSpecialPlayer> matchingSpecialPlayers = new List<AdKatsSpecialPlayer>();
                    matchingSpecialPlayers.AddRange(_verboseSpecialPlayerCache.Values.Where(asPlayer => asPlayer.player_group != null && asPlayer.player_group.group_key == specialPlayerGroup && asPlayer.player_object != null && (asPlayer.player_object.player_id == aPlayer.player_id || asPlayer.player_identifier == aPlayer.player_name || asPlayer.player_identifier == aPlayer.player_guid || asPlayer.player_identifier == aPlayer.player_ip)));
                    return matchingSpecialPlayers;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching matching verbose special players.", e));
            }
            Log.Debug(() => "Exiting GetMatchingVerboseASPlayersOfGroup", 8);
            return null;
        }

        public Dictionary<String, AdKatsPlayer> GetOnlinePlayerDictionaryOfGroup(String specialPlayerGroup)
        {
            Dictionary<String, AdKatsPlayer> onlinePlayersOfGroup = new Dictionary<String, AdKatsPlayer>();
            Log.Debug(() => "Entering GetOnlinePlayerDictionaryOfGroup", 6);
            try
            {
                List<AdKatsPlayer> onlinePlayerObjects = _PlayerDictionary.Values.ToList();
                List<AdKatsSpecialPlayer> asPlayerObjects = GetVerboseASPlayersOfGroup(specialPlayerGroup);
                foreach (AdKatsSpecialPlayer asPlayer in asPlayerObjects)
                {
                    foreach (AdKatsPlayer aPlayer in onlinePlayerObjects)
                    {
                        if (asPlayer.player_object != null && asPlayer.player_object.player_id == aPlayer.player_id)
                        {
                            onlinePlayersOfGroup[aPlayer.player_name] = aPlayer;
                        }
                        else if (asPlayer.player_identifier == aPlayer.player_name || asPlayer.player_identifier == aPlayer.player_guid || asPlayer.player_identifier == aPlayer.player_ip)
                        {
                            onlinePlayersOfGroup[aPlayer.player_name] = aPlayer;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching matching special players.", e));
            }
            Log.Debug(() => "Exiting GetOnlinePlayerDictionaryOfGroup", 6);
            return onlinePlayersOfGroup;
        }

        public List<AdKatsPlayer> GetOnlinePlayersOfGroup(String specialPlayerGroup)
        {
            Log.Debug(() => "Entering GetOnlinePlayersOfGroup", 6);
            try
            {
                return GetOnlinePlayerDictionaryOfGroup(specialPlayerGroup).Values.ToList();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching matching special players.", e));
            }
            Log.Debug(() => "Exiting GetOnlinePlayersOfGroup", 6);
            return null;
        }

        public Boolean PlayerProtected(AdKatsPlayer aPlayer)
        {
            //Pull players from special player cache
            if (GetMatchingASPlayersOfGroup("whitelist_hackerchecker", aPlayer).Any())
            {
                return true;
            }
            List<AdKatsSpecialPlayer> protectedList = GetVerboseASPlayersOfGroup("whitelist_hackerchecker");
            if (protectedList.Any())
            {
                foreach (AdKatsSpecialPlayer asPlayer in protectedList)
                {
                    if (asPlayer.player_object != null && asPlayer.player_object.player_id == aPlayer.player_id)
                    {
                        Log.Debug(() => aPlayer.GetVerboseName() + " protected from hacker checker by database ID.", 2);
                        return true;
                    }
                    if (!String.IsNullOrEmpty(asPlayer.player_identifier))
                    {
                        if (aPlayer.player_name == asPlayer.player_identifier)
                        {
                            Log.Debug(() => aPlayer.GetVerboseName() + " protected from hacker checker by NAME.", 2);
                            return true;
                        }
                        if (aPlayer.player_guid == asPlayer.player_identifier)
                        {
                            Log.Debug(() => aPlayer.GetVerboseName() + " protected from hacker checker by GUID.", 2);
                            return true;
                        }
                        if (aPlayer.player_ip == asPlayer.player_identifier)
                        {
                            Log.Debug(() => aPlayer.GetVerboseName() + " protected from hacker checker by IP.", 2);
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public void HackerCheckerThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Hacker Checker Thread", 1);
                Thread.CurrentThread.Name = "HackerChecker";

                //Current player being checked
                AdKatsPlayer aPlayer = null;

                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering Hacker Checker Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }

                        try
                        {
                            if (_BattlelogFetchQueue.Count >= 5) {
                                Log.Debug(() => "Hacker-checker waiting on battlelog fetches to complete.", 4);
                                _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(10));
                                continue;
                            }

                            //Get all unchecked players
                            if (_HackerCheckerQueue.Count > 0)
                            {
                                lock (_HackerCheckerQueue)
                                {
                                    aPlayer = _HackerCheckerQueue.Dequeue();
                                }
                            }
                            else
                            {
                                Log.Debug(() => "No inbound hacker checks. Waiting 10 seconds or for input.", 4);
                                //Wait for input
                                if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                                {
                                    Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                                }
                                _HackerCheckerWaitHandle.Reset();
                                //Either loop when handle is set, or after 3 minutes
                                _HackerCheckerWaitHandle.WaitOne(TimeSpan.FromMinutes(3));
                                loopStart = UtcNow();
                                continue;
                            }
                        }
                        catch (Exception e)
                        {
                            HandleException(new AdKatsException("Error while fetching new players to check.", e));
                        }

                        if (aPlayer != null) {
                            if (!PlayerProtected(aPlayer)) {
                                Log.Debug(() => "Reading " + aPlayer.GetVerboseName() + " for hacker-checker", 5);
                                _hackerCheckedPlayers.Add(aPlayer.player_guid);
                                if (!String.IsNullOrEmpty(aPlayer.player_name) &&
                                    !String.IsNullOrEmpty(aPlayer.player_personaID) &&
                                    FetchPlayerStatInformation(aPlayer)) {
                                    RunStatSiteHackCheck(aPlayer, false);
                                    _hackerCheckedPlayersStats.Add(aPlayer.player_guid);
                                    Log.Debug(() => aPlayer.GetVerboseName() + " stat checked. (" + String.Format("{0:0.00}", (_hackerCheckedPlayersStats.Count / (Double) _hackerCheckedPlayers.Count) * 100) + "% of " + _hackerCheckedPlayers.Count + " players checked)", 4);
                                } else if (aPlayer.player_online && _PlayerDictionary.ContainsKey(aPlayer.player_name)) {
                                    //No stats found, requeue them for checking
                                    Thread.Sleep(TimeSpan.FromSeconds(1.0));
                                    QueuePlayerForHackerCheck(aPlayer);
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("Hacker Checker thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in Hacker Checker thread. Skipping current loop.", e));
                    }
                }
                Log.Debug(() => "Ending Hacker Checker Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in Hacker Checker thread.", e));
            }
        }

        private void RunStatSiteHackCheck(AdKatsPlayer aPlayer, Boolean verbose)
        {
            try {
                Log.Debug(() => "HackerChecker running on " + aPlayer.GetVerboseName(), 5);
                Boolean acted = false;
                if (_UseHskChecker) {
                    Log.Debug(() => "Preparing to HSK check " + aPlayer.GetVerboseName(), 5);
                    acted = AimbotHackCheck(aPlayer, verbose);
                }
                if (!acted) {
                    Log.Debug(() => "Preparing to DPS check " + aPlayer.GetVerboseName(), 5);
                    acted = DamageHackCheck(aPlayer, verbose);
                }
                if (_UseKpmChecker && !acted) {
                    Log.Debug(() => "Preparing to KPM check " + aPlayer.GetVerboseName(), 5);
                    acted = KPMHackCheck(aPlayer, verbose);
                }
                if (_useHackerCheckerLIVESystem &&
                    //Only on BF4
                    _gameVersion == GameVersion.BF4 && 
                    //Stats are available
                    aPlayer.RoundStats.ContainsKey(_roundID - 1) &&
                    aPlayer.RoundStats.ContainsKey(_roundID) &&
                    //AdKats has been running long enough to collect kill codes
                    _previousRoundDuration.TotalSeconds > 0 &&
                    (UtcNow() - _AdKatsRunningTime).TotalSeconds > _previousRoundDuration.TotalSeconds * 1.5) {
                    AdKatsPlayerStats previousStats;
                    AdKatsPlayerStats currentStats;
                    if (aPlayer.RoundStats.TryGetValue(_roundID, out currentStats) &&
                        aPlayer.RoundStats.TryGetValue(_roundID - 1, out previousStats)) {
                            if (previousStats.WeaponStats != null &&
                                previousStats.VehicleStats != null &&
                                previousStats.LiveStats != null &&
                                currentStats.WeaponStats != null &&
                                currentStats.VehicleStats != null) {
                                //Weapon specific info
                                Int32 previousWeaponKillCount = 
                                    (Int32) previousStats.WeaponStats.Values.Sum(aWeapon => aWeapon.Kills) +
                                    (Int32) previousStats.VehicleStats.Values.Sum(aVehicle => aVehicle.Kills);
                                Int32 currentWeaponKillCount =
                                    (Int32) currentStats.WeaponStats.Values.Sum(aWeapon => aWeapon.Kills) +
                                    (Int32) currentStats.VehicleStats.Values.Sum(aVehicle => aVehicle.Kills);
                                Int32 previousWeaponHitCount = (Int32) previousStats.WeaponStats.Values.Sum(aWeapon => aWeapon.Hits);
                                Int32 currentWeaponHitCount = (Int32) currentStats.WeaponStats.Values.Sum(aWeapon => aWeapon.Hits);
                                //Calcs
                                Int32 weaponKillDiff = currentWeaponKillCount - previousWeaponKillCount;
                                Int32 weaponHitDiff = currentWeaponHitCount - previousWeaponHitCount;
                                Int32 overallKillDiff = currentStats.Kills - previousStats.Kills;
                                Int32 overallHitDiff = currentStats.Hits - previousStats.Hits;
                                Int32 killDiscrepancy = overallKillDiff - weaponKillDiff;
                                Int32 hitDiscrepancy = overallHitDiff - weaponHitDiff;
                                Int32 rconKillDiff = aPlayer.LiveKills.Count(aKill => aKill.RoundID == _roundID - 1);
                                Int32 serverKillDiff = previousStats.LiveStats.Kills;
                                Int32 nonBLWeaponKills = aPlayer.LiveKills.Count(aKill => aKill.RoundID == _roundID - 1 && aKill.weaponCode == "DamageArea");

                                if (_isTestingAuthorized) {
                                    if (nonBLWeaponKills > 0) {
                                        Log.Info(aPlayer.GetVerboseName() + " Ignoring " + nonBLWeaponKills + " non-bl weapon kills.");
                                    }
                                    Log.Info(aPlayer.GetVerboseName() + " live kills: " + rconKillDiff + " | server kills: " + serverKillDiff + " | stat kills: " + overallKillDiff);
                                }

                                killDiscrepancy = killDiscrepancy - nonBLWeaponKills;

                                //Confirm kill codes are loaded and valid
                                if (rconKillDiff > 0 && Math.Abs(serverKillDiff - overallKillDiff) <= 5) {
                                    if (killDiscrepancy >= 10 && 
                                        hitDiscrepancy * 2 <= killDiscrepancy &&
                                        !PlayerProtected(aPlayer)) {
                                        Log.Warn("KILLDIFF - " + aPlayer.GetVerboseName() + " - (" + killDiscrepancy + " Unaccounted Kills)(" + hitDiscrepancy + " Unaccounted Hits)");
                                        Log.Warn(String.Join(", ", aPlayer.LiveKills.Select(aKill => aKill.weaponCode).ToArray()));
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_ban_perm"),
                                            command_numeric = 0,
                                            target_name = aPlayer.player_name,
                                            target_player = aPlayer,
                                            source_name = "AutoAdmin",
                                            record_message = "Magic Bullet [LIVE][7-" + killDiscrepancy + "-" + hitDiscrepancy + "]",
                                            record_time = UtcNow()
                                        });
                                        acted = true;
                                    }
                                }
                                else if(serverKillDiff > 0 || overallKillDiff > 0) {
                                    //Kills were not loaded. Why?
                                    if (_isTestingAuthorized) {
                                        Log.Warn(aPlayer.GetVerboseName() +
                                            " Kills Not Loaded. (Join-" + FormatNowDuration(aPlayer.JoinTime, 2) + ")" +
                                            "(Action-" + FormatNowDuration(aPlayer.lastAction, 2) + ")" +
                                            "(Usage-" + FormatNowDuration(aPlayer.LastUsage, 2) + ")" +
                                            "(Online-" + aPlayer.player_online + ")" +
                                            "(Spawned-" + aPlayer.player_spawnedOnce + ") " +
                                            (_roundID + 1) + ":" + aPlayer.LiveKills.Count(aKill => aKill.RoundID == _roundID + 1) + " | " +
                                            (_roundID    ) + ":" + aPlayer.LiveKills.Count(aKill => aKill.RoundID == _roundID    ) + " | " +
                                            (_roundID - 1) + ":" + aPlayer.LiveKills.Count(aKill => aKill.RoundID == _roundID - 1) + " | " +
                                            (_roundID - 2) + ":" + aPlayer.LiveKills.Count(aKill => aKill.RoundID == _roundID - 2));
                                    }
                                }
                        } else if (_isTestingAuthorized) {
                            Log.Warn(aPlayer.GetVerboseName() + " has no stats to use.");
                        }
                    }
                }
                if (!acted && verbose) {
                    Log.Success(aPlayer.GetVerboseName() + " is clean.");
                }
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error running stat site hack check.", e));
            }
        }

        private Boolean DamageHackCheck(AdKatsPlayer aPlayer, Boolean debugMode)
        {
            Boolean acted = false;
            try {
                AdKatsPlayerStats currentStats;
                if (aPlayer == null || !aPlayer.RoundStats.TryGetValue(_roundID, out currentStats) || currentStats.WeaponStats == null) {
                    return false;
                }
                AdKatsPlayerStats previousStats;
                aPlayer.RoundStats.TryGetValue(_roundID - 1, out previousStats);

                //Confirm stat changes from battlelog are valid for the previous round
                var killStatsValid = false;
                Int32 serverKillDiff = 0;
                Int32 statKillDiff = 0;
                if (_useHackerCheckerLIVESystem &&
                    previousStats != null &&
                    previousStats.LiveStats != null &&
                    previousStats.WeaponStats != null &&
                    previousStats.VehicleStats != null &&
                    currentStats.WeaponStats != null &&
                    currentStats.VehicleStats != null) {
                    serverKillDiff = previousStats.LiveStats.Kills;
                    Int32 previousWeaponKillCount =
                        (Int32) previousStats.WeaponStats.Values.Sum(aWeapon => aWeapon.Kills) +
                        (Int32) previousStats.VehicleStats.Values.Sum(aVehicle => aVehicle.Kills);
                    Int32 currentWeaponKillCount =
                        (Int32) currentStats.WeaponStats.Values.Sum(aWeapon => aWeapon.Kills) +
                        (Int32) currentStats.VehicleStats.Values.Sum(aVehicle => aVehicle.Kills);
                    statKillDiff = currentWeaponKillCount - previousWeaponKillCount;
                    killStatsValid = serverKillDiff >= statKillDiff - 1;
                }
                if (_isTestingAuthorized && _useHackerCheckerLIVESystem) {
                    if (killStatsValid) {
                        Log.Success(aPlayer.GetVerboseName() + " kill stats valid. " + serverKillDiff + "|" + statKillDiff);
                    } else if (previousStats != null) {
                        Log.Warn(aPlayer.GetVerboseName() + " kill stats invalid. " +
                            "(" + (previousStats.LiveStats != null) + ")" +
                            "(" + (previousStats.WeaponStats != null) + ")" +
                            "(" + (previousStats.VehicleStats != null) + ")" +
                            "(" + (currentStats != null && currentStats.WeaponStats != null) + ")" +
                            "(" + (currentStats != null && currentStats.VehicleStats != null) + ") " + serverKillDiff + "|" + statKillDiff);
                    }
                }

                List<String> allowedCategories;
                switch (_gameVersion)
                {
                    case GameVersion.BF3:
                        allowedCategories = new List<string> {
                            "sub_machine_guns",
                            "assault_rifles",
                            "carbines",
                            "machine_guns",
                            "handheld_weapons"
                        };
                        break;
                    case GameVersion.BF4:
                        allowedCategories = new List<string> {
                            "pdws",
                            "assault_rifles",
                            "carbines",
                            "lmgs",
                            "handguns"
                        };
                        break;
                    case GameVersion.BFHL:
                        allowedCategories = new List<string> {
                            "assault_rifles",
                            "ar_standard",
                            "handguns",
                            "pistols",
                            "machine_pistols",
                            "revolvers",
                            "smg_mechanic",
                            "smg"
                        };
                        break;
                    default:
                        return false;
                }
                List<AdKatsWeaponStat> topWeapons = currentStats.WeaponStats.Values.OrderByDescending(aStat => aStat.Kills).ToList();

                AdKatsWeaponStat actedWeapon = null;
                Double actedPerc = -1;
                foreach (AdKatsWeaponStat weaponStat in topWeapons)
                {
                    //Only count certain weapon categories
                    if (allowedCategories.Contains(weaponStat.Category)) {
                        Boolean isSidearm = 
                            weaponStat.Category == "handheld_weapons" || 
                            weaponStat.Category == "handguns" || 
                            weaponStat.Category == "pistols" || 
                            weaponStat.Category == "machine_pistols" || 
                            weaponStat.Category == "revolvers";
                        StatLibraryWeapon weapon;
                        if (_StatLibrary.Weapons.TryGetValue(weaponStat.ID, out weapon))
                        {
                            //Only handle weapons that do < 50 max dps
                            if (weapon.DamageMax < 50) {
                                //For live stat check, look for previous round stat difference and valid stat difference
                                if (_useHackerCheckerLIVESystem && 
                                    previousStats != null && 
                                    previousStats.WeaponStats != null) {
                                    AdKatsWeaponStat previousWeaponStat;
                                    if (previousStats.WeaponStats.TryGetValue(weaponStat.ID, out previousWeaponStat)) {
                                        if (weaponStat.Kills > previousWeaponStat.Kills && (killStatsValid || _isTestingAuthorized)) {
                                            //Handle servers with different health amounts
                                            Double weaponHitsToKill = (_soldierHealth / weapon.DamageMax);
                                            Double killDiff = weaponStat.Kills - previousWeaponStat.Kills;
                                            Double hitDiff = weaponStat.Hits - previousWeaponStat.Hits;
                                            Double HSDiff = weaponStat.Headshots - previousWeaponStat.Headshots;
                                            //Reject processing of invalid data returned from battlelog
                                            if (killDiff <= 0 || hitDiff <= 0 || HSDiff < 0) {
                                                continue;
                                            }
                                            Double liveDPS = (killDiff / hitDiff) * _soldierHealth;
                                            //Coerce the live damage
                                            if (liveDPS < 0) {
                                                liveDPS = 0;
                                            }
                                            Double expectedHits = (HSDiff * weaponHitsToKill / 2) + ((killDiff - HSDiff) * weaponHitsToKill);
                                            Double expectedDPS = (killDiff / expectedHits) * _soldierHealth;
                                            //Coerce the expected damage
                                            if (expectedDPS < 0) {
                                                expectedDPS = 0;
                                            }
                                            Double percDiff = (liveDPS - expectedDPS) / expectedDPS;
                                            String formattedName = weaponStat.ID.Replace("-", "").Replace(" ", "").ToUpper();
                                            if (Math.Round(percDiff) > 0 || _isTestingAuthorized) {
                                                Log.Info("STATDIFF - " + aPlayer.GetVerboseName() + " - " + formattedName + " [" + killDiff + "/" + hitDiff + "][" + Math.Round(liveDPS) + " DPS][" + ((Math.Round(percDiff * 100) > 0) ? ("+") : ("")) + Math.Round(percDiff * 100) + "%]");
                                            }
                                            //Check for damage mod
                                            //Require at least 12 kills difference, +75% normal weapon damage for non-sidearm weapons, and 85 DPS weapon damage for sidearms.
                                            if (killDiff >= 12 &&
                                                liveDPS > weapon.DamageMax &&
                                                (liveDPS >= 85 || (!isSidearm && percDiff > 0.75))) {
                                                    Log.Info(aPlayer.GetVerboseName() + " auto-banned for damage mod. [LIVE][" + formattedName + "-" + (int) liveDPS + "-" + (int) killDiff + "-" + (int) HSDiff + "-" + (int) hitDiff + "]");
                                                if (!debugMode) {
                                                    //Create the ban record
                                                    QueueRecordForProcessing(new AdKatsRecord {
                                                        record_source = AdKatsRecord.Sources.InternalAutomated,
                                                        server_id = _serverInfo.ServerID,
                                                        command_type = GetCommandByKey("player_ban_perm"),
                                                        command_numeric = 0,
                                                        target_name = aPlayer.player_name,
                                                        target_player = aPlayer,
                                                        source_name = "AutoAdmin",
                                                        record_message = _HackerCheckerDPSBanMessage + " [LIVE]" + (killStatsValid ? "" : "[CAUTION]") + "[4-" + formattedName + "-" + (int) liveDPS + "-" + (int) killDiff + "-" + (int) HSDiff + "-" + (int) hitDiff + "]",
                                                        record_time = UtcNow()
                                                    });
                                                }
                                                return true;
                                            }
                                        }
                                    }
                                }
                                //For full stat check only take weapons with more than 50 kills
                                if (weaponStat.Kills > 50)
                                {
                                    //Check for damage hack
                                    if (weaponStat.DPS > weapon.DamageMax && (!_UseHskChecker || weaponStat.HSKR < (_HskTriggerLevel / 100))) 
                                    {
                                        //Account for hsk ratio with the weapon
                                        Double expectedDmg = weapon.DamageMax * (1 + weaponStat.HSKR);
                                        //Get the percentage over normal
                                        Double percDiff = (weaponStat.DPS - expectedDmg) / expectedDmg;
                                        Double triggerLevel = ((_soldierHealth > 65) ? (0.50) : (0.60));
                                        //Increase trigger level for kill counts under 100
                                        if (weaponStat.Kills < 100) 
                                        {
                                            triggerLevel = triggerLevel * 1.8;
                                        }
                                        //Increase trigger level for sidearms
                                        if (isSidearm) 
                                        {
                                            triggerLevel = triggerLevel * 1.5;
                                        }
                                        if (percDiff > triggerLevel && percDiff > actedPerc)
                                        {
                                            //Act on the weapon
                                            actedPerc = percDiff;
                                            actedWeapon = weaponStat;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            Log.Warn("Could not find damage stats for " + weaponStat.Category + ":" + weaponStat.ID + " in " + _gameVersion + " library of " + _StatLibrary.Weapons.Count + " weapons.");
                        }
                    }
                }
                if (actedWeapon != null)
                {
                    acted = true;
                    String formattedName = actedWeapon.ID.Replace("-", "").Replace(" ", "").ToUpper();
                    if (_isTestingAuthorized && _roundState == RoundState.Playing)
                    {
                        if (!aPlayer.IsLocked())
                        {
                            AdKatsPlayer banPlayer = aPlayer;
                            banPlayer.Lock("AutoAdmin", TimeSpan.FromMinutes(10));
                            //Special case. Let server live with the hacker for 1 minute then watch them be banned
                            Thread banDelayThread = new Thread(new ThreadStart(delegate
                            {
                                Log.Debug(() => "Starting a ban delay thread.", 5);
                                try
                                {
                                    Thread.CurrentThread.Name = "BanDelay";
                                    DateTime start = UtcNow();
                                    Log.Info(banPlayer.GetVerboseName() + " will be DPS banned. Waiting for starting case.");
                                    OnlineAdminTellMessage(banPlayer.GetVerboseName() + " will be DPS banned. Waiting for starting case.");
                                    while (banPlayer.player_online && !banPlayer.player_spawnedOnce && (UtcNow() - start).TotalSeconds < 300)
                                    {
                                        if (!_pluginEnabled)
                                        {
                                            break;
                                        }
                                        //Wait for trigger case to start timer
                                        _threadMasterWaitHandle.WaitOne(1000);
                                    }
                                    //Onced triggered, ban after 90 seconds.
                                    OnlineAdminTellMessage(banPlayer.GetVerboseName() + " triggered DPS timer. [" + formattedName + "-" + (int)actedWeapon.DPS + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "] They will be banned in 90 seconds.");
                                    _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(83));
                                    PlayerTellMessage(banPlayer.player_name, "Thank you for making our system look good. Goodbye.", true, 6);
                                    _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(7));

                                    Log.Info(aPlayer.GetVerboseName() + " auto-banned for damage mod. [" + formattedName + "-" + (int)actedWeapon.DPS + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]");
                                    if (!debugMode)
                                    {
                                        //Unlock the player
                                        banPlayer.Unlock();
                                        //Create the ban record
                                        AdKatsRecord record = new AdKatsRecord
                                        {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_ban_perm"),
                                            command_numeric = 0,
                                            target_name = aPlayer.player_name,
                                            target_player = aPlayer,
                                            source_name = "AutoAdmin",
                                            record_message = _HackerCheckerDPSBanMessage + " [4-" + formattedName + "-" + (int)actedWeapon.DPS + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]",
                                            record_time = UtcNow()
                                        };
                                        //Process the record
                                        QueueRecordForProcessing(record);
                                    }
                                }
                                catch (Exception)
                                {
                                    HandleException(new AdKatsException("Error while runnin ban delay."));
                                }
                                Log.Debug(() => "Exiting a ban delay thread.", 5);
                                LogThreadExit();
                            }));

                            //Start the thread
                            StartAndLogThread(banDelayThread);
                        }
                    }
                    else
                    {
                        Log.Info(aPlayer.GetVerboseName() + " auto-banned for damage mod. [" + formattedName + "-" + (int)actedWeapon.DPS + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]");
                        if (!debugMode)
                        {
                            //Create the ban record
                            AdKatsRecord record = new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_ban_perm"),
                                command_numeric = 0,
                                target_name = aPlayer.player_name,
                                target_player = aPlayer,
                                source_name = "AutoAdmin",
                                record_message = _HackerCheckerDPSBanMessage + " [4-" + formattedName + "-" + (int)actedWeapon.DPS + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]",
                                record_time = UtcNow()
                            };
                            //Process the record
                            QueueRecordForProcessing(record);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error running DPS hack check", e));
            }
            return acted;
        }

        private Boolean AimbotHackCheck(AdKatsPlayer aPlayer, Boolean debugMode)
        {
            Boolean acted = false;
            try {
                AdKatsPlayerStats stats;
                if (aPlayer == null || !aPlayer.RoundStats.TryGetValue(_roundID, out stats) || stats.WeaponStats == null) {
                    return false;
                }
                AdKatsPlayerStats previousStats;
                aPlayer.RoundStats.TryGetValue(_roundID - 1, out previousStats);
                List<String> allowedCategories;
                switch (_gameVersion)
                {
                    case GameVersion.BF3:
                        allowedCategories = new List<string> {
                            "sub_machine_guns",
                            "assault_rifles",
                            "carbines",
                            "machine_guns"
                        };
                        break;
                    case GameVersion.BF4:
                        allowedCategories = new List<string> {
                            "pdws",
                            "assault_rifles",
                            "carbines",
                            "lmgs"
                        };
                        break;
                    case GameVersion.BFHL:
                        allowedCategories = new List<string> {
                            "assault_rifles",
                            "ar_standard",
                            "machine_pistols",
                            "smg_mechanic",
                            "smg"
                        };
                        break;
                    default:
                        return false;
                }
                List<AdKatsWeaponStat> topWeapons = stats.WeaponStats.Values.ToList();
                topWeapons.Sort(delegate(AdKatsWeaponStat a1, AdKatsWeaponStat a2)
                {
                    if (Math.Abs(a1.Kills - a2.Kills) < 0.001)
                    {
                        return 0;
                    }
                    return (a1.Kills < a2.Kills) ? (1) : (-1);
                });

                AdKatsWeaponStat actedWeapon = null;
                Double actedHskr = -1;
                Int32 index = 0;
                foreach (AdKatsWeaponStat weaponStat in topWeapons)
                {
                    //Only count certain weapon categories
                    if (allowedCategories.Contains(weaponStat.Category))
                    {
                        StatLibraryWeapon weapon;
                        if (_StatLibrary.Weapons.TryGetValue(weaponStat.ID, out weapon))
                        {
                            //Only take weapons with more than 100 kills, and less than 50% damage
                            if (weaponStat.Kills > 100 && weapon.DamageMax < 50)
                            {
                                //Check for aimbot hack
                                Log.Debug(() => "Checking " + weaponStat.ID + " HSKR (" + weaponStat.HSKR + " >? " + (_HskTriggerLevel / 100) + ")", 6);
                                if (weaponStat.HSKR > (_HskTriggerLevel / 100))
                                {
                                    if (weaponStat.HSKR > actedHskr)
                                    {
                                        actedHskr = weaponStat.HSKR;
                                        actedWeapon = weaponStat;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Log.Warn("Could not find damage stats for " + weaponStat.Category + ":" + weaponStat.ID + " in " + _gameVersion + " library of " + _StatLibrary.Weapons.Count + " weapons.");
                        }
                    }
                }
                if (actedWeapon != null)
                {
                    acted = true;
                    String formattedName = actedWeapon.ID.Replace("-", "").Replace(" ", "").ToUpper();
                    if (_isTestingAuthorized && _roundState == RoundState.Playing)
                    {
                        if (!aPlayer.IsLocked())
                        {
                            AdKatsPlayer banPlayer = aPlayer;
                            banPlayer.Lock("AutoAdmin", TimeSpan.FromMinutes(10));
                            //Special case. Let server live with the hacker for 1 minute then watch them be banned
                            Thread banDelayThread = new Thread(new ThreadStart(delegate
                            {
                                Log.Debug(() => "Starting a ban delay thread.", 5);
                                try
                                {
                                    Thread.CurrentThread.Name = "BanDelay";
                                    DateTime start = UtcNow();
                                    Log.Info(banPlayer.GetVerboseName() + " will be HSK banned. Waiting for starting case.");
                                    OnlineAdminTellMessage(banPlayer.GetVerboseName() + " will be HSK banned. Waiting for starting case.");
                                    while (_roundState == RoundState.Playing && banPlayer.player_online && !banPlayer.player_spawnedOnce && (UtcNow() - start).TotalSeconds < 300)
                                    {
                                        if (!_pluginEnabled)
                                        {
                                            break;
                                        }
                                        //Wait for trigger case to start timer
                                        _threadMasterWaitHandle.WaitOne(1000);
                                    }
                                    //Onced triggered, ban after 90 seconds.
                                    OnlineAdminTellMessage(banPlayer.GetVerboseName() + " triggered HSK timer. [" + formattedName + "-" + (int)(actedWeapon.HSKR * 100) + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "] They will be banned in 90 seconds.");
                                    _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(83));
                                    if (actedWeapon.HSKR >= .75)
                                    {
                                        PlayerTellMessage(banPlayer.player_name, "Thank you for making our system look good. Goodbye.", true, 6);
                                    }
                                    _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(7));

                                    Log.Info(banPlayer.GetVerboseName() + " auto-banned for aimbot. [" + formattedName + "-" + (int)(actedWeapon.HSKR * 100) + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]");
                                    if (!debugMode)
                                    {
                                        //Unlock player
                                        banPlayer.Unlock();
                                        //Create the ban record
                                        AdKatsRecord record = new AdKatsRecord
                                        {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_ban_perm"),
                                            command_numeric = 0,
                                            target_name = banPlayer.player_name,
                                            target_player = banPlayer,
                                            source_name = "AutoAdmin",
                                            record_message = _HackerCheckerHSKBanMessage + " [" + formattedName + "-" + (int)(actedWeapon.HSKR * 100) + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]",
                                            record_time = UtcNow()
                                        };
                                        //Process the record
                                        QueueRecordForProcessing(record);
                                    }
                                }
                                catch (Exception)
                                {
                                    HandleException(new AdKatsException("Error while runnin ban delay."));
                                }
                                Log.Debug(() => "Exiting a ban delay thread.", 5);
                                LogThreadExit();
                            }));

                            //Start the thread
                            StartAndLogThread(banDelayThread);
                        }
                    }
                    else
                    {
                        Log.Info(aPlayer.GetVerboseName() + " auto-banned for aimbot. [" + formattedName + "-" + (int)(actedWeapon.HSKR * 100) + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]");
                        if (!debugMode)
                        {
                            //Create the ban record
                            AdKatsRecord record = new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_ban_perm"),
                                command_numeric = 0,
                                target_name = aPlayer.player_name,
                                target_player = aPlayer,
                                source_name = "AutoAdmin",
                                record_message = _HackerCheckerHSKBanMessage + " [" + formattedName + "-" + (int)(actedWeapon.HSKR * 100) + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]",
                                record_time = UtcNow()
                            };
                            //Process the record
                            QueueRecordForProcessing(record);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error running HSK hack check.", e));
            }
            return acted;
        }

        private Boolean KPMHackCheck(AdKatsPlayer aPlayer, Boolean debugMode)
        {
            Boolean acted = false;
            try {
                AdKatsPlayerStats stats;
                if (aPlayer == null || !aPlayer.RoundStats.TryGetValue(_roundID, out stats) || stats.WeaponStats == null) {
                    return false;
                }
                AdKatsPlayerStats previousStats;
                aPlayer.RoundStats.TryGetValue(_roundID - 1, out previousStats);
                List<String> allowedCategories;
                switch (_gameVersion)
                {
                    case GameVersion.BF3:
                        allowedCategories = new List<string> {
                            "assault_rifles",
                            "carbines",
                            "sub_machine_guns",
                            "machine_guns"
                        };
                        break;
                    case GameVersion.BF4:
                        allowedCategories = new List<string> {
                            "assault_rifles",
                            "carbines",
                            "dmrs",
                            "lmgs",
                            "sniper_rifles",
                            "pdws",
                            "shotguns"
                        };
                        break;
                    case GameVersion.BFHL:
                        allowedCategories = new List<string> {
                            "assault_rifles",
                            "ar_standard",
                            "sr_standard",
                            "br_standard",
                            "shotguns",
                            "smg_mechanic",
                            "sg_enforcer",
                            "smg"
                        };
                        break;
                    default:
                        return false;
                }
                //Wow, i wrote this before knowing linq, this looks terrible
                List<AdKatsWeaponStat> topWeapons = stats.WeaponStats.Values.ToList();
                topWeapons.Sort(delegate(AdKatsWeaponStat a1, AdKatsWeaponStat a2)
                {
                    if (a1.Kills == a2.Kills)
                    {
                        return 0;
                    }
                    return (a1.Kills < a2.Kills) ? (1) : (-1);
                });

                AdKatsWeaponStat actedWeapon = null;
                Double actedKpm = -1;
                Int32 index = 0;
                foreach (AdKatsWeaponStat weaponStat in topWeapons)
                {
                    //Only count certain weapon categories, and ignore gadgets/sidearms (shotgun issue with BF4)
                    if (allowedCategories.Contains(weaponStat.Category) && 
                        weaponStat.CategorySID != "WARSAW_ID_P_CAT_GADGET" && 
                        weaponStat.CategorySID != "WARSAW_ID_P_CAT_SIDEARM")
                    {
                        //Only take weapons with more than 200 kills
                        if (weaponStat.Kills > 200)
                        {
                            //Check for KPM limit
                            Log.Debug(() => "Checking " + weaponStat.ID + " KPM (" + String.Format("{0:0.00}", weaponStat.KPM) + " >? " + (_KpmTriggerLevel) + ")", 6);
                            if (weaponStat.KPM > (_KpmTriggerLevel))
                            {
                                if (weaponStat.KPM > actedKpm)
                                {
                                    actedKpm = weaponStat.KPM;
                                    actedWeapon = weaponStat;
                                }
                            }
                        }
                    }
                }
                if (actedWeapon != null)
                {
                    acted = true;
                    String formattedName = actedWeapon.ID.Replace("-", "").Replace(" ", "").ToUpper();
                    Log.Info(aPlayer.GetVerboseName() + ((debugMode) ? (" debug") : (" auto")) + "-banned for KPM. [" + formattedName + "-" + String.Format("{0:0.00}", actedWeapon.KPM) + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]");
                    if (!debugMode)
                    {
                        //Create the ban record
                        AdKatsRecord record = new AdKatsRecord
                        {
                            record_source = AdKatsRecord.Sources.InternalAutomated,
                            server_id = _serverInfo.ServerID,
                            command_type = GetCommandByKey("player_ban_perm"),
                            command_numeric = 0,
                            target_name = aPlayer.player_name,
                            target_player = aPlayer,
                            source_name = "AutoAdmin",
                            record_message = _HackerCheckerKPMBanMessage + " [" + formattedName + "-" + String.Format("{0:0.00}", actedWeapon.KPM) + "-" + (int)actedWeapon.Kills + "-" + (int)actedWeapon.Headshots + "-" + (int)actedWeapon.Hits + "]",
                            record_time = UtcNow()
                        };
                        //Process the record
                        QueueRecordForProcessing(record);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error running KPM hack check.", e));
            }
            return acted;
        }

        //all messaging is redirected to global chat for analysis
        public override void OnGlobalChat(String speaker, String message)
        {
            try
            {
                AdKatsChatMessage chatMessage = new AdKatsChatMessage()
                {
                    Speaker = speaker,
                    Message = message,
                    OriginalMessage = message,
                    Subset = AdKatsChatMessage.ChatSubset.Global,
                    Hidden = message.Trim().StartsWith("/"),
                    SubsetTeamID = -1,
                    SubsetSquadID = -1
                };
                AdKatsPlayer aPlayer;
                if (_PlayerDictionary.TryGetValue(speaker, out aPlayer))
                {
                    if (aPlayer.frostbitePlayerInfo != null)
                    {
                        chatMessage.SubsetTeamID = aPlayer.frostbitePlayerInfo.TeamID;
                        chatMessage.SubsetSquadID = aPlayer.frostbitePlayerInfo.SquadID;
                    }
                }
                HandleChat(chatMessage);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error when handling OnGlobalChat", e));
            }
        }

        public override void OnTeamChat(String speaker, String message, Int32 teamId)
        {
            try
            {
                AdKatsChatMessage chatMessage = new AdKatsChatMessage()
                {
                    Speaker = speaker,
                    Message = message,
                    OriginalMessage = message,
                    Subset = AdKatsChatMessage.ChatSubset.Team,
                    Hidden = message.Trim().StartsWith("/"),
                    SubsetTeamID = teamId,
                    SubsetSquadID = -1
                };
                AdKatsPlayer aPlayer;
                if (_PlayerDictionary.TryGetValue(speaker, out aPlayer))
                {
                    if (aPlayer.frostbitePlayerInfo != null)
                    {
                        chatMessage.SubsetSquadID = aPlayer.frostbitePlayerInfo.SquadID;
                    }
                }
                HandleChat(chatMessage);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error when handling OnTeamChat", e));
            }
        }

        public override void OnSquadChat(String speaker, String message, Int32 teamId, Int32 squadId)
        {
            try
            {
                AdKatsChatMessage chatMessage = new AdKatsChatMessage()
                {
                    Speaker = speaker,
                    Message = message,
                    OriginalMessage = message,
                    Subset = AdKatsChatMessage.ChatSubset.Squad,
                    Hidden = message.Trim().StartsWith("/"),
                    SubsetTeamID = teamId,
                    SubsetSquadID = squadId
                };
                HandleChat(chatMessage);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error when handling OnSquadChat", e));
            }
        }

        private void HandleChat(AdKatsChatMessage messageObject)
        {
            Log.Debug(() => "Entering handleChat", 7);
            try
            {
                if (_pluginEnabled)
                {
                    //Performance testing area
                    if (messageObject.Speaker == _debugSoldierName)
                    {
                        _commandStartTime = UtcNow();
                    }
                    //If message contains comorose just return and ignore
                    if (messageObject.OriginalMessage.Contains("ID_CHAT"))
                    {
                        return;
                    }
                    QueueMessageForParsing(messageObject);
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while processing inbound chat messages.", e));
            }
            Log.Debug(() => "Exiting handleChat", 7);
        }

        public void SendMessageToSource(AdKatsRecord record, String message)
        {
            Log.Debug(() => "Entering sendMessageToSource", 7);
            try
            {
                if (String.IsNullOrEmpty(message))
                {
                    Log.Error("message null or empty in sendMessageToSource");
                    return;
                }
                switch (record.record_source)
                {
                    case AdKatsRecord.Sources.InGame:
                        PlayerSayMessage(record.source_name, message);
                        break;
                    case AdKatsRecord.Sources.ServerCommand:
                        ProconChatWrite(Log.FBold(message));
                        break;
                    case AdKatsRecord.Sources.Settings:
                        Log.Write(message);
                        break;
                    case AdKatsRecord.Sources.Database:
                        //Do nothing, no way to communicate to source when database
                        break;
                    case AdKatsRecord.Sources.InternalAutomated:
                        //Do nothing, no source to communicate with
                        break;
                    case AdKatsRecord.Sources.ExternalPlugin:
                        record.debugMessages.Add(message);
                        break;
                    case AdKatsRecord.Sources.HTTP:
                        record.debugMessages.Add(message);
                        break;
                    default:
                        Log.Warn("Command source not set, or not recognized.");
                        break;
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending message to record source.", e);
                HandleException(record.record_exception);
            }
            Log.Debug(() => "Exiting sendMessageToSource", 7);
        }

        public Boolean OnlineNonWhitelistSayMessage(String message)
        {
            return OnlineNonWhitelistSayMessage(message, true);
        }

        public Boolean OnlineNonWhitelistSayMessage(String message, Boolean displayProconChat)
        {
            Boolean nonAdminsTold = false;
            Dictionary<String, AdKatsPlayer> whitelistedPlayers = GetOnlinePlayerDictionaryOfGroup("whitelist_spambot");
            if (_isTestingAuthorized) {
                foreach (AdKatsPlayer aPlayer in _PlayerDictionary.Values.ToList()){
                    if (!whitelistedPlayers.ContainsKey(aPlayer.player_name)) {
                        if ((aPlayer.player_reputation >= _reputationThresholdGood && !PlayerIsAdmin(aPlayer)) || 
                            (message.ToLower().Contains("donat") && aPlayer.player_serverplaytime.TotalHours <= 5.0) ||
                            (message.ToLower().Contains("reserve") && _populationStatus != PopulationState.High) || 
                            _tsPlayers.ContainsKey(aPlayer.player_name)) {
                            whitelistedPlayers[aPlayer.player_name] = aPlayer;
                        }
                    }
                }
            }
            const string bypassPrefix = "[whitelistbypass]";
            var bypass = false;
            while (message.Contains(bypassPrefix)) {
                message = message.Replace(bypassPrefix, "");
                bypass = true;
            }
            if (bypass) {
                whitelistedPlayers.Clear();
            }
            if (FetchOnlineAdminSoldiers().Any() || whitelistedPlayers.Any())
            {
                Thread nonAdminSayThread = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting an online non-admin say thread.", 8);
                    try
                    {
                        Thread.CurrentThread.Name = "OnlineNonAdminSay";
                        var spambotMessage = false;
                        if (message.Contains("[SpamBotMessage]")) {
                            message = message.Replace("[SpamBotMessage]", "");
                            spambotMessage = true;
                        }
                        if (displayProconChat) {
                            ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Say (Admins " + ((whitelistedPlayers.Any()) ? ("& " + whitelistedPlayers.Count + " Others ") : ("")) + "Whitelisted) > " + message);
                        }
                        //Process will take ~2 seconds for a full server
                        foreach (AdKatsPlayer aPlayer in FetchOnlineNonAdminSoldiers())
                        {
                            if (whitelistedPlayers.ContainsKey(aPlayer.player_name))
                            {
                                continue;
                            }
                            nonAdminsTold = true;
                            PlayerSayMessage(aPlayer.player_name, message, false, 1);
                            Thread.Sleep(30);
                        }
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while running online non-admin say."));
                    }
                    Log.Debug(() => "Exiting an online non-admin say thread.", 8);
                    LogThreadExit();
                }));
                StartAndLogThread(nonAdminSayThread);
            }
            else
            {
                AdminSayMessage(message, displayProconChat);
            }
            return nonAdminsTold;
        }

        public Boolean OnlineNonWhitelistYellMessage(String message)
        {
            return OnlineNonWhitelistYellMessage(message, true);
        }

        public Boolean OnlineNonWhitelistYellMessage(String message, Boolean displayProconChat)
        {
            Boolean nonAdminsTold = false;
            Dictionary<String, AdKatsPlayer> whitelistedPlayers = GetOnlinePlayerDictionaryOfGroup("whitelist_spambot");
            if (_isTestingAuthorized) {
                foreach (AdKatsPlayer aPlayer in _PlayerDictionary.Values.ToList()) {
                    if (!whitelistedPlayers.ContainsKey(aPlayer.player_name)) {
                        if ((aPlayer.player_reputation >= _reputationThresholdGood && !PlayerIsAdmin(aPlayer)) ||
                            (message.ToLower().Contains("donat") && aPlayer.player_serverplaytime.TotalHours <= 50.0) ||
                            (message.ToLower().Contains("reserve") && _populationStatus != PopulationState.High) ||
                            _tsPlayers.ContainsKey(aPlayer.player_name)) {
                            whitelistedPlayers[aPlayer.player_name] = aPlayer;
                        }
                    }
                }
            }
            const string bypassPrefix = "[whitelistbypass]";
            var bypass = false;
            while (message.Contains(bypassPrefix)) {
                message = message.Replace(bypassPrefix, "");
                bypass = true;
            }
            if (bypass) {
                whitelistedPlayers.Clear();
            }
            if (FetchOnlineAdminSoldiers().Any() || whitelistedPlayers.Any())
            {
                Thread nonAdminSayThread = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting an online non-admin yell thread.", 8);
                    try
                    {
                        Thread.CurrentThread.Name = "OnlineNonAdminYell";
                        var spambotMessage = false;
                        if (message.Contains("[SpamBotMessage]")) {
                            message = message.Replace("[SpamBotMessage]", "");
                            spambotMessage = true;
                        }
                        if (displayProconChat) {
                            ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Yell[" + _YellDuration + "s] (Admins " + ((whitelistedPlayers.Any()) ? ("& " + whitelistedPlayers.Count + " Others ") : ("")) + "Whitelisted) > " + message);
                        }
                        //Process will take ~2 seconds for a full server
                        foreach (AdKatsPlayer aPlayer in FetchOnlineNonAdminSoldiers())
                        {
                            if (whitelistedPlayers.ContainsKey(aPlayer.player_name))
                            {
                                continue;
                            }
                            nonAdminsTold = true;
                            PlayerYellMessage(aPlayer.player_name, message, false, 1);
                            Thread.Sleep(30);
                        }
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while running online non-admin yell."));
                    }
                    Log.Debug(() => "Exiting an online non-admin yell thread.", 8);
                    LogThreadExit();
                }));
                StartAndLogThread(nonAdminSayThread);
            }
            else
            {
                AdminYellMessage(message, displayProconChat);
            }
            return nonAdminsTold;
        }

        public Boolean OnlineNonWhitelistTellMessage(String message)
        {
            return OnlineNonWhitelistTellMessage(message, true);
        }

        public Boolean OnlineNonWhitelistTellMessage(String message, Boolean displayProconChat)
        {
            Boolean nonAdminsTold = false;
            Dictionary<String, AdKatsPlayer> whitelistedPlayers = GetOnlinePlayerDictionaryOfGroup("whitelist_spambot");
            if (_isTestingAuthorized) {
                foreach (AdKatsPlayer aPlayer in _PlayerDictionary.Values.ToList()) {
                    if (!whitelistedPlayers.ContainsKey(aPlayer.player_name)) {
                        if ((aPlayer.player_reputation >= _reputationThresholdGood && !PlayerIsAdmin(aPlayer)) ||
                            (message.ToLower().Contains("donat") && aPlayer.player_serverplaytime.TotalHours <= 50.0) ||
                            (message.ToLower().Contains("reserve") && _populationStatus != PopulationState.High) ||
                            _tsPlayers.ContainsKey(aPlayer.player_name)) {
                            whitelistedPlayers[aPlayer.player_name] = aPlayer;
                        }
                    }
                }
            }
            const string bypassPrefix = "[whitelistbypass]";
            var bypass = false;
            while (message.Contains(bypassPrefix)) {
                message = message.Replace(bypassPrefix, "");
                bypass = true;
            }
            if (bypass) {
                whitelistedPlayers.Clear();
            }
            if (FetchOnlineAdminSoldiers().Any() || whitelistedPlayers.Any())
            {
                Thread nonAdminSayThread = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting an online non-admin tell thread.", 8);
                    try
                    {
                        Thread.CurrentThread.Name = "OnlineNonAdminTell";
                        var spambotMessage = false;
                        if (message.Contains("[SpamBotMessage]")) {
                            message = message.Replace("[SpamBotMessage]", "");
                            spambotMessage = true;
                        }
                        if (displayProconChat) {
                            ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Tell[" + _YellDuration + "s] (Admins " + ((whitelistedPlayers.Any()) ? ("& " + whitelistedPlayers.Count + " Others ") : ("")) + "Whitelisted) > " + message);
                        }
                        //Process will take ~2 seconds for a full server
                        foreach (AdKatsPlayer aPlayer in FetchOnlineNonAdminSoldiers())
                        {
                            if (whitelistedPlayers.ContainsKey(aPlayer.player_name))
                            {
                                continue;
                            }
                            nonAdminsTold = true;
                            PlayerTellMessage(aPlayer.player_name, message, false, 1);
                            Thread.Sleep(30);
                        }
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while running online non-admin tell."));
                    }
                    Log.Debug(() => "Exiting an online non-admin tell thread.", 8);
                    LogThreadExit();
                }));
                StartAndLogThread(nonAdminSayThread);
            }
            else
            {
                AdminTellMessage(message, displayProconChat);
            }
            return nonAdminsTold;
        }

        public Boolean OnlineAdminSayMessage(String message)
        {
            ProconChatWrite(Log.CMaroon(Log.FBold(message)));
            Boolean adminsTold = false;
            foreach (AdKatsPlayer player in FetchOnlineAdminSoldiers())
            {
                adminsTold = true;
                PlayerSayMessage(player.player_name, message, true, 1);
            }
            return adminsTold;
        }

        public Boolean OnlineAdminYellMessage(String message)
        {
            ProconChatWrite(Log.CMaroon(Log.FBold(message)));
            Boolean adminsTold = false;
            foreach (AdKatsPlayer player in FetchOnlineAdminSoldiers())
            {
                adminsTold = true;
                PlayerYellMessage(player.player_name, message, true, 1);
            }
            return adminsTold;
        }

        public Boolean OnlineAdminTellMessage(String message)
        {
            ProconChatWrite(Log.CMaroon(Log.FBold(message)));
            Boolean adminsTold = false;
            foreach (AdKatsPlayer player in FetchOnlineAdminSoldiers())
            {
                adminsTold = true;
                PlayerTellMessage(player.player_name, message, true, 1);
            }
            return adminsTold;
        }

        public void AdminSayMessage(String message)
        {
            AdminSayMessage(message, true);
        }

        public void AdminSayMessage(String message, Boolean displayProconChat)
        {
            Log.Debug(() => "Entering adminSay", 7);
            try
            {
                if (String.IsNullOrEmpty(message))
                {
                    Log.Error("message null in adminSay");
                    return;
                }
                var spambotMessage = false;
                if (message.Contains("[SpamBotMessage]")) {
                    message = message.Replace("[SpamBotMessage]", "");
                    spambotMessage = true;
                }
                const string bypassPrefix = "[whitelistbypass]";
                while (message.Contains(bypassPrefix))
                {
                    message = message.Replace(bypassPrefix, "");
                }
                if (displayProconChat) {
                    ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Say > " + message);
                }
                string[] messageSplit = message.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                int maxLineLength = 127;
                foreach (String subMessage in messageSplit)
                {
                    int charCount = 0;
                    IEnumerable<string> lines = subMessage.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).GroupBy(w => (charCount += w.Length + 1) / maxLineLength).Select(g => string.Join(" ", g.ToArray()));
                    foreach (string line in lines)
                    {
                        ExecuteCommand("procon.protected.send", "admin.say", line, "all");
                        _threadMasterWaitHandle.WaitOne(25);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while sending admin say.", e));
            }
            Log.Debug(() => "Exiting adminSay", 7);
        }

        public void PlayerSayMessage(String target, String message)
        {
            PlayerSayMessage(target, message, true, 1);
        }

        public void PlayerSayMessage(String target, String message, Boolean displayProconChat, Int32 spamCount)
        {
            Log.Debug(() => "Entering playerSayMessage", 7);
            try
            {
                if (String.IsNullOrEmpty(target) || String.IsNullOrEmpty(message))
                {
                    Log.Error("target or message null in playerSayMessage");
                    return;
                }
                var spambotMessage = false;
                if (message.Contains("[SpamBotMessage]")) {
                    message = message.Replace("[SpamBotMessage]", "");
                    spambotMessage = true;
                }
                const string bypassPrefix = "[whitelistbypass]";
                while (message.Contains(bypassPrefix))
                {
                    message = message.Replace(bypassPrefix, "");
                }
                if (displayProconChat) {
                    ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Say > " + target + " > " + message);
                }
                string[] messageSplit = message.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                int maxLineLength = 127;
                foreach (String subMessage in messageSplit)
                {
                    int charCount = 0;
                    IEnumerable<string> lines = subMessage.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).GroupBy(w => (charCount += w.Length + 1) / maxLineLength).Select(g => string.Join(" ", g.ToArray()));
                    foreach (string line in lines)
                    {
                        ExecuteCommand("procon.protected.send", "admin.say", line, "player", target);
                        _threadMasterWaitHandle.WaitOne(25);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while sending message to player.", e));
            }
            Log.Debug(() => "Exiting playerSayMessage", 7);
        }

        public void AdminYellMessage(String message)
        {
            AdminYellMessage(message, true);
        }

        public void AdminYellMessage(String message, Boolean displayProconChat)
        {
            Log.Debug(() => "Entering adminYell", 7);
            try
            {
                if (String.IsNullOrEmpty(message))
                {
                    Log.Error("message null in adminYell");
                    return;
                }
                var spambotMessage = false;
                if (message.Contains("[SpamBotMessage]")) {
                    message = message.Replace("[SpamBotMessage]", "");
                    spambotMessage = true;
                }
                const string bypassPrefix = "[whitelistbypass]";
                while (message.Contains(bypassPrefix))
                {
                    message = message.Replace(bypassPrefix, "");
                }
                if (displayProconChat) {
                    ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Yell[" + _YellDuration + "s] > " + message);
                }
                ExecuteCommand("procon.protected.send", "admin.yell", ((_gameVersion == GameVersion.BF4) ? (Environment.NewLine) : ("")) + message.ToUpper(), _YellDuration + "", "all");
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while sending admin yell.", e));
            }
            Log.Debug(() => "Exiting adminYell", 7);
        }

        public void PlayerYellMessage(String target, String message)
        {
            PlayerYellMessage(target, message, true, 1);
        }

        public void PlayerYellMessage(String target, String message, Boolean displayProconChat, Int32 spamCount)
        {
            Log.Debug(() => "Entering adminYell", 7);
            try
            {
                if (String.IsNullOrEmpty(message))
                {
                    Log.Error("message null in adminYell");
                    return;
                }
                var spambotMessage = false;
                if (message.Contains("[SpamBotMessage]")) {
                    message = message.Replace("[SpamBotMessage]", "");
                    spambotMessage = true;
                }
                const string bypassPrefix = "[whitelistbypass]";
                while (message.Contains(bypassPrefix))
                {
                    message = message.Replace(bypassPrefix, "");
                }
                if (displayProconChat) {
                    ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Yell[" + _YellDuration + "s] > " + target + " > " + message);
                }
                for (int count = 0; count < spamCount; count++)
                {
                    ExecuteCommand("procon.protected.send", "admin.yell", ((_gameVersion != GameVersion.BF3) ? (Environment.NewLine) : ("")) + message.ToUpper(), _YellDuration + "", "player", target);
                    _threadMasterWaitHandle.WaitOne(50);
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while sending admin yell.", e));
            }
            Log.Debug(() => "Exiting adminYell", 7);
        }

        public void AdminTellMessage(String message)
        {
            AdminTellMessage(message, true);
        }

        public void AdminTellMessage(String message, Boolean displayProconChat) {
            var spambotMessage = false;
            if (message.Contains("[SpamBotMessage]")) {
                message = message.Replace("[SpamBotMessage]", "");
                spambotMessage = true;
            }
            const string bypassPrefix = "[whitelistbypass]";
            while (message.Contains(bypassPrefix))
            {
                message = message.Replace(bypassPrefix, "");
            }
            if (displayProconChat) {
                ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Tell[" + _YellDuration + "s] > " + message);
            }
            AdminSayMessage(message, false);
            AdminYellMessage(message, false);
        }

        public void PlayerTellMessage(String target, String message)
        {
            PlayerTellMessage(target, message, true, 1);
        }

        public void PlayerTellMessage(String target, String message, Boolean displayProconChat, Int32 spamCount) {
            var spambotMessage = false;
            if (message.Contains("[SpamBotMessage]")) {
                message = message.Replace("[SpamBotMessage]", "");
                spambotMessage = true;
            }
            const string bypassPrefix = "[whitelistbypass]";
            while (message.Contains(bypassPrefix))
            {
                message = message.Replace(bypassPrefix, "");
            }
            if (displayProconChat) {
                ProconChatWrite(((spambotMessage) ? (Log.FBold("SpamBot") + " ") : ("")) + "Tell[" + _YellDuration + "s] > " + target + " > " + message);
            }
            PlayerSayMessage(target, message, false, spamCount);
            PlayerYellMessage(target, message, false, spamCount);
        }

        private void QueueMessageForParsing(AdKatsChatMessage messageObject)
        {
            Log.Debug(() => "Entering queueMessageForParsing", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue message for parsing", 6);
                    lock (_UnparsedMessageQueue)
                    {
                        _UnparsedMessageQueue.Enqueue(messageObject);
                        Log.Debug(() => "Message queued for parsing.", 6);
                        _MessageParsingWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing chat message for parsing.", e));
            }
            Log.Debug(() => "Exiting queueMessageForParsing", 7);
        }

        private void QueueCommandForParsing(AdKatsChatMessage chatMessage)
        {
            Log.Debug(() => "Entering queueCommandForParsing", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue command for parsing", 6);
                    lock (_UnparsedCommandQueue)
                    {
                        _UnparsedCommandQueue.Enqueue(chatMessage);
                        Log.Debug(() => "Command sent to unparsed commands.", 6);
                        _CommandParsingWaitHandle.Set();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing command for parsing.", e));
            }
            Log.Debug(() => "Exiting queueCommandForParsing", 7);
        }

        private void MessagingThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Messaging Thread", 1);
                Thread.CurrentThread.Name = "Messaging";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering Messaging Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }

                        //Get all unparsed inbound messages
                        Queue<AdKatsChatMessage> inboundMessages;
                        if (_UnparsedMessageQueue.Count > 0)
                        {
                            Log.Debug(() => "Preparing to lock messaging to retrive new messages", 7);
                            lock (_UnparsedMessageQueue)
                            {
                                Log.Debug(() => "Inbound messages found. Grabbing.", 6);
                                //Grab all messages in the queue
                                inboundMessages = new Queue<AdKatsChatMessage>(_UnparsedMessageQueue.ToArray());
                                //Clear the queue for next run
                                _UnparsedMessageQueue.Clear();
                            }
                        }
                        else
                        {
                            Log.Debug(() => "No inbound messages. Waiting for Input.", 6);
                            //Wait for input
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _MessageParsingWaitHandle.Reset();
                            _MessageParsingWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                            loopStart = UtcNow();
                            continue;
                        }

                        //Loop through all messages in order that they came in
                        while (inboundMessages.Count > 0)
                        {
                            if (!_pluginEnabled)
                            {
                                break;
                            }
                            Log.Debug(() => "begin reading message", 6);
                            //Dequeue the first/next message
                            AdKatsChatMessage messageObject = inboundMessages.Dequeue();

                            AdKatsPlayer aPlayer;
                            if (_PlayerDictionary.TryGetValue(messageObject.Speaker, out aPlayer))
                            {
                                if (aPlayer.player_guid == "EA_18141AAC8A0A9BB2A2C8093F6E00B936" && messageObject.Message.ToLower().Contains("obama"))
                                {
                                    ExecuteCommand("procon.protected.send", "admin.killPlayer", aPlayer.player_name);
                                }
                                if (!_AFKIgnoreChat)
                                {
                                    //Update player last action
                                    aPlayer.lastAction = UtcNow();
                                }
                            }

                            Boolean isCommand = false;
                            //Check if the message is a command
                            if (messageObject.Message.StartsWith("@") || messageObject.Message.StartsWith("!") || messageObject.Message.StartsWith("."))
                            {
                                messageObject.Message = messageObject.Message.Substring(1);
                                isCommand = true;
                            }
                            else if (messageObject.Message.StartsWith("/@") || messageObject.Message.StartsWith("/!") || messageObject.Message.StartsWith("/."))
                            {
                                messageObject.Message = messageObject.Message.Substring(2);
                                isCommand = true;
                            }
                            else if (messageObject.Message.StartsWith("/"))
                            {
                                messageObject.Message = messageObject.Message.Substring(1);
                                isCommand = true;
                            }

                            if (isCommand && _threadsReady && _firstPlayerListComplete)
                            {
                                String[] splitMessage = messageObject.Message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                                if (splitMessage.Length == 3 && splitMessage[0] == "AdKatsInstanceCheck" && _enforceSingleInstance)
                                {
                                    //Message is an instance check, confirm it is from this instance
                                    if (splitMessage[1] == _instanceKey)
                                    {
                                        Log.Debug(() => "Instance confirmed. " + splitMessage[2], 7);
                                    }
                                    else
                                    {
                                        //There is another instance of AdKats running on this server, check which is superior
                                        String onlineDurationString = splitMessage[2];
                                        Int32 onlineDurationInt;
                                        if (Int32.TryParse(onlineDurationString, out onlineDurationInt))
                                        {
                                            if (onlineDurationInt > Math.Round((UtcNow() - _AdKatsRunningTime).TotalSeconds))
                                            {
                                                //Other instance has been online longer, disable this instance
                                                OnlineAdminSayMessage("Shutting down this AdKats instance, another instance is already online.");
                                                Log.Warn("Shutting down this AdKats instance, another instance is already online.");
                                                _useKeepAlive = false;
                                                Disable();
                                            }
                                            else
                                            {
                                                OnlineAdminSayMessage("Warning, another running instance of AdKats was detected on this server. That instance will terminate shortly.");
                                            }
                                        }
                                        else
                                        {
                                            Log.Error("Unable to parse plugin instance duration.");
                                        }
                                    }
                                }
                            }

                            if (_PostStatLoggerChatManually)
                            {
                                //Upload the chat message
                                UploadChatLog(messageObject);
                            }

                            //check for player mute case
                            //ignore if it's a server call
                            if (messageObject.Speaker != "Server")
                            {
                                lock (_RoundMutedPlayers)
                                {
                                    //Check if the player is muted
                                    Log.Debug(() => "Checking for mute case.", 7);
                                    if (_RoundMutedPlayers.ContainsKey(messageObject.Speaker))
                                    {
                                        if (_MutedPlayerIgnoreCommands && isCommand)
                                        {
                                            Log.Debug(() => "Player muted, but ignoring since message is command.", 3);
                                        }
                                        else
                                        {
                                            Log.Debug(() => "Player is muted and valid. Acting.", 7);
                                            //Increment the muted chat count
                                            _RoundMutedPlayers[messageObject.Speaker] = _RoundMutedPlayers[messageObject.Speaker] + 1;
                                            //Create record
                                            AdKatsRecord record = new AdKatsRecord();
                                            record.record_time = UtcNow();
                                            record.record_source = AdKatsRecord.Sources.InternalAutomated;
                                            record.server_id = _serverInfo.ServerID;
                                            record.source_name = "PlayerMuteSystem";
                                            _PlayerDictionary.TryGetValue(messageObject.Speaker, out record.target_player);
                                            record.target_name = messageObject.Speaker;
                                            if (_RoundMutedPlayers[messageObject.Speaker] > _MutedPlayerChances)
                                            {
                                                record.record_message = _MutedPlayerKickMessage;
                                                record.command_type = GetCommandByKey("player_kick");
                                                record.command_action = GetCommandByKey("player_kick");
                                            }
                                            else
                                            {
                                                record.record_message = _MutedPlayerKillMessage;
                                                record.command_type = GetCommandByKey("player_kill");
                                                record.command_action = GetCommandByKey("player_kill");
                                                AdminSayMessage(record.GetTargetNames() + " killed for talking while muted. They can speak again next round.");
                                            }
                                            QueueRecordForProcessing(record);
                                            continue;
                                        }
                                    }
                                }
                                if (_serverInfo.ServerType != "OFFICIAL")
                                {
                                    if (_isTestingAuthorized && !isCommand)
                                    {
                                        string lowerM = " " + messageObject.Message.ToLower() + " ";
                                        if (lowerM.Contains(" ping")) {
                                            if (!PlayerIsAdmin(aPlayer)) {
                                                if (_serverInfo.ServerID == 1 || _serverInfo.ServerID == 6) {
                                                    PlayerTellMessage(messageObject.Speaker, "Ping limit is 150 during US primetime and missing pings are kicked when the server is full.");
                                                } else {
                                                    PlayerTellMessage(messageObject.Speaker, "Ping limit is 300 and missing pings are kicked when the server is full.");
                                                }
                                                continue;
                                            }
                                        }
                                        if (lowerM.Contains(" plng") || lowerM.Contains(" p|ng")) {
                                            if (!PlayerIsAdmin(aPlayer)) {
                                                PlayerTellMessage(messageObject.Speaker, "Really? Bypassing the ping message?");
                                                continue;
                                            }
                                        }
                                        if (lowerM.Contains(" hack") ||
                                            lowerM.Contains(" cheat") ||
                                            lowerM.Contains(" aimbot") ||
                                            lowerM.Contains(" bot ") ||
                                            lowerM.Contains(" botting ") ||
                                            lowerM.Contains(" macro") ||
                                            lowerM.Contains(" hax")) {
                                            if (!PlayerIsAdmin(aPlayer)) {
                                                if (messageObject.Subset == AdKatsChatMessage.ChatSubset.Global) {
                                                    PlayerYellMessage(messageObject.Speaker, "If you think a player is cheating use !report playername reason. Otherwise, it's chat spam.");
                                                    AdminSayMessage("If you think a player is cheating use !report playername reason. Otherwise, it's chat spam.");
                                                } else {
                                                    PlayerTellMessage(messageObject.Speaker, "If you think a player is cheating use !report playername reason. Otherwise, it's chat spam.");
                                                }
                                                continue;
                                            }
                                        }
                                    }
                                }
                            }
                            if (isCommand)
                            {
                                QueueCommandForParsing(messageObject);
                            }
                            else
                            {
                                Log.Debug(() => "Message is regular chat. Ignoring.", 7);
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("Messaging thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in Messaging thread. Skipping current loop.", e));
                    }
                }
                Log.Debug(() => "Ending Messaging Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in messaging thread.", e));
            }
        }

        private void QueuePlayerForForceMove(CPlayerInfo player)
        {
            Log.Debug(() => "Entering queuePlayerForForceMove", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to queue " + player.SoldierName + " for TeamSwap ", 6);
                    lock (_TeamswapForceMoveQueue)
                    {
                        _TeamswapForceMoveQueue.Enqueue(player);
                        _TeamswapWaitHandle.Set();
                        Log.Debug(() => player.SoldierName + " queued for TeamSwap", 6);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing player for force-move.", e));
            }
            Log.Debug(() => "Exiting queuePlayerForForceMove", 7);
        }

        private void QueuePlayerForMove(CPlayerInfo player)
        {
            Log.Debug(() => "Entering queuePlayerForMove", 7);
            try
            {
                if (_pluginEnabled)
                {
                    Log.Debug(() => "Preparing to add " + player.SoldierName + " to 'on-death' move dictionary.", 6);
                    lock (_TeamswapOnDeathCheckingQueue)
                    {
                        if (!_TeamswapOnDeathMoveDic.ContainsKey(player.SoldierName))
                        {
                            _TeamswapOnDeathMoveDic.Add(player.SoldierName, player);
                            _TeamswapWaitHandle.Set();
                            Log.Debug(() => player.SoldierName + " added to 'on-death' move dictionary.", 6);
                        }
                        else
                        {
                            Log.Debug(() => player.SoldierName + " already in 'on-death' move dictionary.", 6);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing player for move.", e));
            }
            Log.Debug(() => "Exiting queuePlayerForMove", 7);
        }

        //runs through both team swap queues and performs the swapping
        public void TeamswapThreadLoop()
        {
            //assume the max player count per team is 32 if no server info has been provided
            Int32 maxTeamPlayerCount = 32;
            try
            {
                Log.Debug(() => "Starting TeamSwap Thread", 1);
                Thread.CurrentThread.Name = "TeamSwap";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering TeamSwap Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }
                        AdKatsTeam team1;
                        AdKatsTeam team2;
                        if (!_teamDictionary.TryGetValue(1, out team1))
                        {
                            if (_roundState == RoundState.Playing)
                            {
                                Log.Debug(() => "Team 1 was not found. Unable to continue.", 1);
                            }
                            _threadMasterWaitHandle.WaitOne(5000);
                            continue;
                        }
                        if (!_teamDictionary.TryGetValue(2, out team2))
                        {
                            if (_roundState == RoundState.Playing)
                            {
                                Log.Debug(() => "Team 2 was not found. Unable to continue.", 1);
                            }
                            _threadMasterWaitHandle.WaitOne(5000);
                            continue;
                        }

                        //Refresh Max Player Count, needed for responsive server size
                        if (_serverInfo.InfoObject != null && _serverInfo.InfoObject.MaxPlayerCount != maxTeamPlayerCount)
                        {
                            maxTeamPlayerCount = _serverInfo.InfoObject.MaxPlayerCount / 2;
                        }

                        //Get players who died that need moving
                        if ((_TeamswapOnDeathMoveDic.Count > 0 && _TeamswapOnDeathCheckingQueue.Count > 0) || _TeamswapForceMoveQueue.Count > 0)
                        {
                            Log.Debug(() => "Preparing to lock TeamSwap queues", 4);

                            _PlayerListUpdateWaitHandle.Reset();
                            //Wait for listPlayers to finish, max 10 seconds
                            if (!_PlayerListUpdateWaitHandle.WaitOne(TimeSpan.FromSeconds(10)))
                            {
                                Log.Debug(() => "ListPlayers ran out of time for TeamSwap. 10 sec.", 4);
                            }

                            Queue<CPlayerInfo> movingQueue;
                            Queue<CPlayerInfo> checkingQueue;
                            lock (_TeamswapForceMoveQueue)
                            {
                                movingQueue = new Queue<CPlayerInfo>(_TeamswapForceMoveQueue.ToArray());
                                _TeamswapForceMoveQueue.Clear();
                            }
                            lock (_TeamswapOnDeathCheckingQueue)
                            {
                                checkingQueue = new Queue<CPlayerInfo>(_TeamswapOnDeathCheckingQueue.ToArray());
                                _TeamswapOnDeathCheckingQueue.Clear();
                            }

                            //Check for "on-death" move players
                            while (_TeamswapOnDeathMoveDic.Count > 0 && checkingQueue.Count > 0)
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                //Dequeue the first/next player
                                String playerName = checkingQueue.Dequeue().SoldierName;
                                CPlayerInfo player;
                                //If they are 
                                if (_TeamswapOnDeathMoveDic.TryGetValue(playerName, out player))
                                {
                                    //Player has died, remove from the dictionary
                                    _TeamswapOnDeathMoveDic.Remove(playerName);
                                    //Add to move queue
                                    movingQueue.Enqueue(player);
                                }
                            }

                            while (movingQueue.Count > 0)
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                CPlayerInfo player = movingQueue.Dequeue();
                                switch (player.TeamID)
                                {
                                    case 1:
                                        if (!ContainsCPlayerInfo(_Team1MoveQueue, player.SoldierName))
                                        {
                                            _Team1MoveQueue.Enqueue(player);
                                            PlayerSayMessage(player.SoldierName, "Added to (" + team1.TeamKey + " -> " + team2.TeamKey + ") TeamSwap queue in position " + (IndexOfCPlayerInfo(_Team1MoveQueue, player.SoldierName) + 1) + ".");
                                        }
                                        else
                                        {
                                            PlayerSayMessage(player.SoldierName, team2.TeamKey + " Team Full (" + team2.TeamPlayerCount + "/" + maxTeamPlayerCount + "). You are in queue position " + (IndexOfCPlayerInfo(_Team1MoveQueue, player.SoldierName) + 1));
                                        }
                                        break;
                                    case 2:
                                        if (!ContainsCPlayerInfo(_Team2MoveQueue, player.SoldierName))
                                        {
                                            _Team2MoveQueue.Enqueue(player);
                                            PlayerSayMessage(player.SoldierName, "Added to (" + team2.TeamKey + " -> " + team1.TeamKey + ") TeamSwap queue in position " + (IndexOfCPlayerInfo(_Team2MoveQueue, player.SoldierName) + 1) + ".");
                                        }
                                        else
                                        {
                                            PlayerSayMessage(player.SoldierName, team1.TeamKey + " Team Full (" + team1.TeamPlayerCount + "/" + maxTeamPlayerCount + "). You are in queue position " + (IndexOfCPlayerInfo(_Team2MoveQueue, player.SoldierName) + 1));
                                        }
                                        break;
                                }
                            }
                        }
                        Log.Debug(() => "Team Info: " + team1.TeamKey + ": " + team1.TeamPlayerCount + "/" + maxTeamPlayerCount + " " + team2.TeamKey + ": " + team2.TeamPlayerCount + "/" + maxTeamPlayerCount, 5);
                        if (_Team2MoveQueue.Count > 0 || _Team1MoveQueue.Count > 0)
                        {
                            //Perform player moving
                            do
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                if (_Team2MoveQueue.Count > 0)
                                {
                                    if (team1.TeamPlayerCount < maxTeamPlayerCount)
                                    {
                                        CPlayerInfo player = _Team2MoveQueue.Dequeue();
                                        AdKatsPlayer dicPlayer;
                                        if (_PlayerDictionary.TryGetValue(player.SoldierName, out dicPlayer))
                                        {
                                            if (dicPlayer.frostbitePlayerInfo.TeamID == 1)
                                            {
                                                //Skip the kill/swap if they are already on the goal team by some other means
                                                continue;
                                            }
                                        }
                                        if (String.IsNullOrEmpty(player.SoldierName))
                                        {
                                            Log.Error("soldiername null in team 2 -> 1 teamswap");
                                        }
                                        else
                                        {
                                            Log.Debug(() => "MULTIBalancer Unswitcher Disabled", 3);
                                            ExecuteCommand("procon.protected.plugins.call", "MULTIbalancer", "UpdatePluginData", "AdKats", "bool", "DisableUnswitcher", "True");
                                            _MULTIBalancerUnswitcherDisabled = true;
                                            PlayerSayMessage(player.SoldierName, "Swapping you from team " + team2.TeamName + " to team " + team1.TeamName);
                                            if (dicPlayer != null && team1.TeamTicketCount <= team2.TeamTicketCount)
                                            {
                                                AdKatsRecord assistRecord = dicPlayer.TargetedRecords.FirstOrDefault(record => record.command_type.command_key == "self_assist" && record.command_action.command_key == "self_assist_unconfirmed");
                                                if (assistRecord != null) {
                                                    AdminSayMessage(assistRecord.target_player.GetVerboseName() + ", thank you for assisting " + team1.TeamName + "!");
                                                    assistRecord.command_action = GetCommandByKey("self_assist");
                                                    QueueRecordForProcessing(assistRecord);
                                                }
                                            }
                                            ExecuteCommand("procon.protected.send", "admin.movePlayer", player.SoldierName, "1", "1", "true");
                                            dicPlayer.RequiredTeam = team1;
                                            _LastPlayerMoveIssued = UtcNow();
                                            team1.TeamPlayerCount++;
                                            team2.TeamPlayerCount--;
                                        }
                                        _threadMasterWaitHandle.WaitOne(100);
                                    }
                                }
                                if (_Team1MoveQueue.Count > 0)
                                {
                                    if (team2.TeamPlayerCount < maxTeamPlayerCount)
                                    {
                                        CPlayerInfo player = _Team1MoveQueue.Dequeue();
                                        AdKatsPlayer dicPlayer;
                                        if (_PlayerDictionary.TryGetValue(player.SoldierName, out dicPlayer))
                                        {
                                            if (dicPlayer.frostbitePlayerInfo.TeamID == 2)
                                            {
                                                //Skip the kill/swap if they are already on the goal team by some other means
                                                continue;
                                            }
                                        }
                                        if (String.IsNullOrEmpty(player.SoldierName))
                                        {
                                            Log.Error("soldiername null in team 1 -> 2 teamswap");
                                        }
                                        else
                                        {
                                            Log.Debug(() => "MULTIBalancer Unswitcher Disabled", 3);
                                            ExecuteCommand("procon.protected.plugins.call", "MULTIbalancer", "UpdatePluginData", "AdKats", "bool", "DisableUnswitcher", "True");
                                            _MULTIBalancerUnswitcherDisabled = true;
                                            PlayerSayMessage(player.SoldierName, "Swapping you from team " + team1.TeamName + " to team " + team2.TeamName);
                                            if (dicPlayer != null && team2.TeamTicketCount <= team1.TeamTicketCount)
                                            {
                                                AdKatsRecord assistRecord = dicPlayer.TargetedRecords.FirstOrDefault(record => record.command_type.command_key == "self_assist" && record.command_action.command_key == "self_assist_unconfirmed");
                                                if (assistRecord != null) {
                                                    AdminSayMessage(assistRecord.target_player.GetVerboseName() + ", thank you for assisting " + team2.TeamName + "!");
                                                    assistRecord.command_action = GetCommandByKey("self_assist");
                                                    QueueRecordForProcessing(assistRecord);
                                                }
                                            }
                                            ExecuteCommand("procon.protected.send", "admin.movePlayer", player.SoldierName, "2", "1", "true");
                                            dicPlayer.RequiredTeam = team2;
                                            _LastPlayerMoveIssued = UtcNow();
                                            team2.TeamPlayerCount++;
                                            team1.TeamPlayerCount--;
                                        }
                                    }
                                }
                            } while (false);
                        }
                        else
                        {
                            Log.Debug(() => "No players to swap. Waiting for Input.", 6);
                            //There are no players to swap, wait.
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _TeamswapWaitHandle.Reset();
                            _TeamswapWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                            loopStart = UtcNow();
                            continue;
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("TeamSwap thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in TeamSwap thread. Skipping current loop.", e));
                    }
                    _TeamswapWaitHandle.Reset();
                    _TeamswapWaitHandle.WaitOne(TimeSpan.FromSeconds(10));
                }
                Log.Debug(() => "Ending TeamSwap Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in teamswap thread.", e));
            }
        }

        //Whether a move queue contains a given player
        private bool ContainsCPlayerInfo(Queue<CPlayerInfo> queueList, String player)
        {
            Log.Debug(() => "Entering containsCPlayerInfo", 7);
            try
            {
                CPlayerInfo[] playerArray = queueList.ToArray();
                for (Int32 index = 0; index < queueList.Count; index++)
                {
                    if (playerArray[index].SoldierName == player)
                    {
                        return true;
                    }
                }
                return false;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while checking for player in teamswap queue.", e));
            }
            Log.Debug(() => "Exiting containsCPlayerInfo", 7);
            return false;
        }

        //The index of a player in the move queue
        private Int32 IndexOfCPlayerInfo(Queue<CPlayerInfo> queueList, String player)
        {
            Log.Debug(() => "Entering getCPlayerInfo", 7);
            try
            {
                CPlayerInfo[] playerArray = queueList.ToArray();
                for (Int32 i = 0; i < queueList.Count; i++)
                {
                    if (playerArray[i].SoldierName == player)
                    {
                        return i;
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while getting index of player in teamswap queue.", e));
            }
            Log.Debug(() => "Exiting getCPlayerInfo", 7);
            return -1;
        }

        private void QueueRecordForProcessing(AdKatsRecord record)
        {
            Log.Debug(() => "Entering queueRecordForProcessing", 7);
            try
            {
                if (record.command_action == null)
                {
                    if (record.command_type == null)
                    {
                        record.record_exception = HandleException(new AdKatsException("Attempted to create a record with no command. " + ((String.IsNullOrEmpty(record.source_name)) ? ("NOSOURCE") : (record.source_name)) + "|" + ((String.IsNullOrEmpty(record.record_message)) ? ("NOMESSAGE") : (record.record_message))));
                        FinalizeRecord(record);
                        return;
                    }
                    record.command_action = record.command_type;
                }
                if (!record.record_action_executed)
                {
                    //Check for command lock
                    if (record.target_player != null && record.target_player.IsLocked() && record.target_player.GetLockSource() != record.source_name) 
                    {
                        SendMessageToSource(record, record.GetTargetNames() + " is command locked by " + record.target_player.GetLockSource() + ". Please wait for unlock [" + FormatTimeString(record.target_player.GetLockRemaining(), 3) + "].");
                        FinalizeRecord(record);
                        return;
                    }
                    //Power level exclusion
                    if (record.source_player != null && record.target_player != null && record.source_player.player_role.role_powerLevel < record.target_player.player_role.role_powerLevel && (record.command_type.command_key == "player_kill" || record.command_type.command_key == "player_kick" || record.command_type.command_key == "player_ban_temp" || record.command_type.command_key == "player_ban_perm" || record.command_type.command_key == "player_ban_perm_future" || record.command_type.command_key == "player_punish" || record.command_type.command_key == "player_forgive" || record.command_type.command_key == "player_mute" || record.command_type.command_key == "player_move" || record.command_type.command_key == "player_fmove" || record.command_type.command_key == "self_lead" || record.command_type.command_key == "player_pull" || record.command_type.command_key == "player_lock"))
                    {
                        SendMessageToSource(record, "You cannot issue " + record.command_type.command_name + " on " + record.target_player.GetVerboseName() + " their power level (" + record.target_player.player_role.role_powerLevel + ") is higher than yours (" + record.source_player.player_role.role_powerLevel + ")");
                        FinalizeRecord(record);
                        return;
                    }
                    if (record.target_player != null && _CommandTargetWhitelistCommands.Contains(record.command_type.command_text) && GetMatchingVerboseASPlayersOfGroup("whitelist_commandtarget", record.target_player).Any())
                    {
                        SendMessageToSource(record, record.command_type.command_name + " cannot be issued on " + record.target_player.GetVerboseName());
                        FinalizeRecord(record);
                        return;
                    }
                    //Command timeouts
                    if (record.command_action != null && _commandTimeoutDictionary.ContainsKey(record.command_action.command_key) && !record.record_action_executed)
                    {
                        if (record.target_player != null && !record.TargetPlayersLocal.Any())
                        {
                            //Cancel call if record is on timeout for single player
                            if (record.target_player.TargetedRecords.Any(aRecord => aRecord.command_action.command_key == record.command_action.command_key && aRecord.record_time.AddSeconds(Math.Abs(_commandTimeoutDictionary[record.command_action.command_key](this))) > UtcNow()))
                            {
                                SendMessageToSource(record, record.command_type.command_name + " on timeout for " + record.GetTargetNames());
                                FinalizeRecord(record);
                                return;
                            }
                        }
                        else if (record.TargetPlayersLocal.Any())
                        {
                            //Cancel call if record is on timeout for any targeted players
                            foreach (AdKatsPlayer aPlayer in record.TargetPlayersLocal)
                            {
                                if (aPlayer.TargetedRecords.Any(aRecord => aRecord.command_action.command_key == record.command_action.command_key && aRecord.record_time.AddSeconds(Math.Abs(_commandTimeoutDictionary[record.command_action.command_key](this))) > UtcNow()))
                                {
                                    SendMessageToSource(record, record.command_type.command_name + " on timeout for " + aPlayer.GetVerboseName());
                                    FinalizeRecord(record);
                                    return;
                                }
                            }
                        }
                    }
                    if (record.target_player != null && (record.command_type.command_key == "player_report" || record.command_type.command_key == "player_calladmin") && record.target_player.TargetedRecords.Any(targetedRecord => (targetedRecord.command_action.command_key == "player_kill" || targetedRecord.command_action.command_key == "player_kill_lowpop" || targetedRecord.command_action.command_key == "player_kill_repeat" || targetedRecord.command_action.command_key == "player_kill_force" || targetedRecord.command_action.command_key == "player_kick" || targetedRecord.command_action.command_key == "player_ban_temp" || targetedRecord.command_action.command_key == "player_ban_perm" || targetedRecord.command_action.command_key == "player_ban_perm_future" || targetedRecord.command_action.command_key == "player_punish" || targetedRecord.command_action.command_key == "player_mute" || targetedRecord.command_action.command_key == "player_say" || targetedRecord.command_action.command_key == "player_yell" || targetedRecord.command_action.command_key == "player_tell") && (UtcNow() - targetedRecord.record_time).TotalSeconds < 60))
                    {
                        OnlineAdminSayMessage("Report on " + record.GetTargetNames() + " blocked. Player already acted on.");
                        SendMessageToSource(record, "Report on " + record.GetTargetNames() + " blocked. Player already acted on.");
                        FinalizeRecord(record);
                        return;
                    }
                    //Special command case
                    Log.Debug(() => "Preparing to check " + record.command_type.command_key + " record for pre-upload processing.", 5);
                    switch (record.command_type.command_key)
                    {
                        case "self_rules":
                            {
                                if (record.source_name != record.target_name && record.target_player != null)
                                {
                                    if (PlayerIsAdmin(record.target_player))
                                    {
                                        SendMessageToSource(record, ((record.source_name.ToLower().Contains("pepsi")) ? ("Bad Pepsi. ") : ("")) + record.GetTargetNames() + " is an admin, they already know the server rules.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    if (record.target_player.player_reputation > _reputationThresholdGood)
                                    {
                                        SendMessageToSource(record, record.GetTargetNames() + " is reputable, they know the server rules.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                }
                            }
                            break;
                        case "player_forgive":
                            {
                                if (_isTestingAuthorized && record.target_player != null && FetchPoints(record.target_player, _CombineServerPunishments, true) <= 0)
                                {
                                    SendMessageToSource(record, record.GetTargetNames() + " does not have any infractions to forgive.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (record.source_name == record.target_name && record.source_name != _debugSoldierName)
                                {
                                    SendMessageToSource(record, "You may not issue forgives against yourself, contant another administrator.");
                                    FinalizeRecord(record);
                                    return;
                                }
                            }
                            break;
                        case "player_report":
                        case "player_calladmin":
                            {
                                if (record.target_player != null && !record.target_player.player_online && record.target_player.TargetedRecords.Any(aRecord => (aRecord.command_action.command_key == "player_kick" || aRecord.command_action.command_key == "player_ban_temp" || aRecord.command_action.command_key == "player_ban_perm") && (UtcNow() - aRecord.record_time).TotalSeconds < 300))
                                {
                                    SendMessageToSource(record, record.GetTargetNames() + " has already been removed from the server by an admin.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (record.target_player != null && GetMatchingVerboseASPlayersOfGroup("whitelist_report", record.target_player).Any())
                                {
                                    SendMessageToSource(record, record.GetTargetNames() + " is whitelisted from reports. Please contact an admin directly if this is urgent.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (record.source_player != null && GetMatchingVerboseASPlayersOfGroup("blacklist_report", record.source_player).Any()) {
                                    SendMessageToSource(record, "You may not report players at this time.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (record.source_name == record.target_name) {
                                    SendMessageToSource(record, "You may not report yourself.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (_isTestingAuthorized) {
                                    if (_serverInfo.ServerID == 1 && _roundID >= 25000 && _roundID <= 25009) {
                                        SendMessageToSource(record, "ROUND 25,000 EVENT. REPORT DISABLED.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    string lowerM = " " + record.record_message.ToLower() + " ";
                                    if (lowerM.Contains("headgl") || lowerM.Contains("head gl")) {
                                        SendMessageToSource(record, "'Head Glitching' related actions are not bannable.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    if (lowerM.Contains(" ping") || lowerM.Contains(" pings")) {
                                        SendMessageToSource(record, "Automatic system handles ping, do not report for it.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    //Block reports for false reports
                                    if (lowerM.Contains(" false r")) {
                                        SendMessageToSource(record, "Do not report for false reports, use !contest.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    //Block report wars
                                    if (record.target_player != null &&
                                        record.target_player.TargetedRecords.Count(aRecord =>
                                            aRecord.source_name == record.source_name &&
                                            (aRecord.command_type.command_key == "player_report" ||
                                                aRecord.command_type.command_key == "player_calladmin") &&
                                            NowDuration(aRecord.record_time).TotalMinutes < 5 &&
                                            aRecord.command_action.command_key != "player_report_confirm") >= 1 &&
                                        record.source_player != null &&
                                        record.source_player.TargetedRecords.Count(aRecord =>
                                            aRecord.source_name == record.target_name &&
                                            (aRecord.command_type.command_key == "player_report" ||
                                                aRecord.command_type.command_key == "player_calladmin") &&
                                            NowDuration(aRecord.record_time).TotalMinutes < 5 &&
                                            aRecord.command_action.command_key != "player_report_confirm") >= 1) {
                                        SendMessageToSource(record, "Do not have report wars. If this is urgent please contact an admin in teamspeak; @ts for the address.");
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_log"),
                                            command_numeric = 0,
                                            target_name = record.source_name,
                                            target_player = record.source_player,
                                            source_name = "AutoAdmin",
                                            record_message = "Report war blocked bwetween " + record.GetSourceName() + " and " + record.GetTargetNames(),
                                            record_time = UtcNow()
                                        });
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    //Block multiple reports of the same player from one source
                                    if (record.target_player != null &&
                                        record.target_player.TargetedRecords.Count(aRecord =>
                                            aRecord.source_name == record.source_name &&
                                            (aRecord.command_type.command_key == "player_report" ||
                                                aRecord.command_type.command_key == "player_calladmin") &&
                                            NowDuration(aRecord.record_time).TotalMinutes < 5 &&
                                            aRecord.command_action.command_key != "player_report_confirm") >= 2) {
                                        SendMessageToSource(record, "You already reported " + record.target_player.GetVerboseName() + ". If this is urgent please contact an admin in teamspeak; @ts for the address.");
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_log"),
                                            command_numeric = 0,
                                            target_name = record.source_name,
                                            target_player = record.source_player,
                                            source_name = "AutoAdmin",
                                            record_message = "Report spam blocked on " + record.GetTargetNames(),
                                            record_time = UtcNow()
                                        });
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    //Block multiple reports of the same player from multiple sources
                                    if (record.target_player != null &&
                                        record.target_player.TargetedRecords.Count(aRecord =>
                                            (aRecord.command_type.command_key == "player_report" ||
                                                aRecord.command_type.command_key == "player_calladmin") &&
                                            NowDuration(aRecord.record_time).TotalMinutes < 5 &&
                                            aRecord.command_action.command_key != "player_report_confirm") >= 3) {
                                        SendMessageToSource(record, record.target_player.GetVerboseName() + " has already been reported. If this is urgent please contact an admin in teamspeak; @ts for the address.");
                                        QueueRecordForProcessing(new AdKatsRecord {
                                            record_source = AdKatsRecord.Sources.InternalAutomated,
                                            server_id = _serverInfo.ServerID,
                                            command_type = GetCommandByKey("player_log"),
                                            command_numeric = 0,
                                            target_name = record.source_name,
                                            target_player = record.source_player,
                                            source_name = "AutoAdmin",
                                            record_message = "Report spam blocked on " + record.GetTargetNames(),
                                            record_time = UtcNow()
                                        });
                                        FinalizeRecord(record);
                                        return;
                                    }
                                }
                            }
                            break;
                        case "player_pm_send":
                            {
                                if (record.target_player != null && record.source_player != null)
                                {
                                    if (record.target_player.player_guid == record.source_player.player_guid)
                                    {
                                        SendMessageToSource(record, "foreveralone.jpg (You can't start a conversation with yourself)");
                                    }
                                }
                                else
                                {
                                    SendMessageToSource(record, "Invalid players when trying to start conversation.");
                                    FinalizeRecord(record);
                                    return;
                                }
                            }
                            break;
                        case "player_lock":
                            {
                                //Check if already locked
                                if (record.target_player != null && record.target_player.IsLocked())
                                {
                                    SendMessageToSource(record, record.GetTargetNames() + " is already locked by " + record.target_player.GetLockSource() + " for " + FormatTimeString(record.target_player.GetLockRemaining(), 3) + ".");
                                    FinalizeRecord(record);
                                    return;
                                }
                            }
                            break;
                        case "player_unlock":
                            {
                                //Check if already locked
                                if (record.target_player != null && record.target_player.IsLocked() && record.target_player.GetLockSource() != record.source_name)
                                {
                                    SendMessageToSource(record, record.GetTargetNames() + " is locked by " + record.target_player.GetLockSource() + ", either they can unlock them, or after " + FormatTimeString(record.target_player.GetLockRemaining(), 3) + " the player will be automatically unlocked.");
                                    FinalizeRecord(record);
                                    return;
                                }
                            }
                            break;
                        case "self_surrender":
                        case "self_votenext":
                            {
                                if (!_surrenderVoteEnable)
                                {
                                    SendMessageToSource(record, "Surrender Vote must be enabled in AdKats settings to use this command.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (_roundState != RoundState.Playing)
                                {
                                    SendMessageToSource(record, "Round state must be playing to use surrender. Current: " + _roundState);
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (record.source_player != null && record.source_player.player_type == PlayerType.Spectator && !PlayerIsAdmin(record.source_player))
                                {
                                    SendMessageToSource(record, "You cannot use !" + GetCommandByKey("self_surrender").command_text + " or !" + GetCommandByKey("self_votenext").command_text + " as a spectator.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (_surrenderVoteSucceeded)
                                {
                                    SendMessageToSource(record, "Surrender already succeeded.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (_surrenderVoteList.Contains(record.source_name))
                                {
                                    SendMessageToSource(record, "You already voted! You can cancel your vote with @" + GetCommandByKey("command_cancel").command_text);
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (!_surrenderVoteActive)
                                {
                                    Int32 playerCount = _PlayerDictionary.Values.Count(player => player.player_type == PlayerType.Player);
                                    if (playerCount < _surrenderVoteMinimumPlayerCount)
                                    {
                                        SendMessageToSource(record, _surrenderVoteMinimumPlayerCount + " players needed to start Surrender Vote. Current: " + playerCount);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    AdKatsTeam team1, team2;
                                    if (!GetTeamByID(1, out team1))
                                    {
                                        if (_roundState == RoundState.Playing)
                                        {
                                            Log.Error("Teams not loaded when they should be.");
                                        }
                                        return;
                                    }
                                    if (!GetTeamByID(2, out team2))
                                    {
                                        if (_roundState == RoundState.Playing)
                                        {
                                            Log.Error("Teams not loaded when they should be.");
                                        }
                                        return;
                                    }
                                    Int32 ticketGap = Math.Abs(team1.TeamTicketCount - team2.TeamTicketCount);
                                    if (ticketGap < _surrenderVoteMinimumTicketGap)
                                    {
                                        SendMessageToSource(record, _surrenderVoteMinimumTicketGap + " ticket gap needed to start Surrender Vote. Current: " + ticketGap);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Double ticketRateGap = Math.Abs(team1.GetTicketDifferenceRate() - team2.GetTicketDifferenceRate());
                                    if (_surrenderVoteTicketRateGapEnable && ticketRateGap < _surrenderVoteMinimumTicketRateGap)
                                    {
                                        SendMessageToSource(record, _surrenderVoteMinimumTicketRateGap + " ticket rate gap needed to start Surrender Vote. Current: " + Math.Round(ticketRateGap, 2));
                                        FinalizeRecord(record);
                                        return;
                                    }
                                }
                                //Replace type if needed
                                AdKatsCommand surrenderCommand = GetCommandByKey("self_surrender");
                                AdKatsCommand votenextCommand = GetCommandByKey("self_votenext");
                                if (record.source_player == null)
                                {
                                    //Record is external, votenext must me used
                                    if (record.command_type.command_key == surrenderCommand.command_key)
                                    {
                                        record.command_type = votenextCommand;
                                        record.command_action = votenextCommand;
                                        record.record_message = "Player Voted for Next Round";
                                    }
                                }
                                else if (PlayerIsWinning(record.source_player))
                                {
                                    //Player is winning, votenext must me used
                                    if (record.command_type.command_key == surrenderCommand.command_key)
                                    {
                                        record.command_type = votenextCommand;
                                        record.command_action = votenextCommand;
                                        record.record_message = "Player Voted for Next Round";
                                    }
                                }
                                else
                                {
                                    //Player is losing, surrender must me used
                                    if (record.command_type.command_key == votenextCommand.command_key)
                                    {
                                        record.command_type = surrenderCommand;
                                        record.command_action = surrenderCommand;
                                        record.record_message = "Player Voted for Surrender";
                                    }
                                }
                            }
                            break;
                        case "self_nosurrender":
                            {
                                if (!_surrenderVoteEnable)
                                {
                                    SendMessageToSource(record, "Surrender Vote must be enabled in AdKats settings to use this command.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (_roundState != RoundState.Playing)
                                {
                                    SendMessageToSource(record, "Round state must be playing to vote against surrender. Current: " + _roundState);
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (_surrenderVoteSucceeded)
                                {
                                    SendMessageToSource(record, "Surrender already succeeded.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (_nosurrenderVoteList.Contains(record.source_name))
                                {
                                    SendMessageToSource(record, "You already voted against surrender!");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (!_surrenderVoteActive)
                                {
                                    SendMessageToSource(record, "A surrender vote must be active to vote against it.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (record.source_player != null && PlayerIsWinning(record.source_player))
                                {
                                    SendMessageToSource(record, "You cannot use !" + GetCommandByKey("self_nosurrender").command_text + " from the winning team.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (record.source_player != null && record.source_player.player_type == PlayerType.Spectator && !PlayerIsAdmin(record.source_player))
                                {
                                    SendMessageToSource(record, "You cannot use !" + GetCommandByKey("self_nosurrender").command_text + " as a spectator.");
                                    FinalizeRecord(record);
                                    return;
                                }
                            }
                            break;
                        case "player_join":
                            if (record.target_name == record.source_name)
                            {
                                SendMessageToSource(record, "You are already in squad with yourself.");
                                FinalizeRecord(record);
                                return;
                            }
                            if (record.target_player != null && 
                                record.source_player != null && 
                                record.target_player.frostbitePlayerInfo.TeamID == record.source_player.frostbitePlayerInfo.TeamID &&
                                record.target_player.frostbitePlayerInfo.SquadID == record.source_player.frostbitePlayerInfo.SquadID)
                            {
                                SendMessageToSource(record, "You are already in squad with " + record.target_player.GetVerboseName() + ".");
                                FinalizeRecord(record);
                                return;
                            }
                            break;
                        case "self_battlecry":
                        case "player_battlecry":
                            if (String.IsNullOrEmpty(record.record_message) && String.IsNullOrEmpty(record.target_player.player_battlecry))
                            {
                                SendMessageToSource(record, "You do not have a battlecry to remove.");
                                FinalizeRecord(record);
                                return;
                            }
                            break;
                        case "player_whitelistreport":
                            if (GetMatchingASPlayersOfGroup("whitelist_report", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the Report whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistspambot":
                            if (GetMatchingASPlayersOfGroup("whitelist_spambot", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the SpamBot whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistaa":
                            if (GetMatchingASPlayersOfGroup("whitelist_adminassistant", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the Admin Assistant whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistping":
                            if (GetMatchingASPlayersOfGroup("whitelist_ping", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the Ping whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelisthackerchecker":
                            if (GetMatchingASPlayersOfGroup("whitelist_hackerchecker", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the Hacker-Checker whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_slotspectator":
                            if (GetMatchingASPlayersOfGroup("slot_spectator", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in spectator slot list for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_slotreserved":
                            if (GetMatchingASPlayersOfGroup("slot_reserved", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in reserved slot list for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistbalance":
                            if (GetMatchingASPlayersOfGroup("whitelist_multibalancer", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the autobalance whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_blacklistdisperse":
                            if (GetMatchingASPlayersOfGroup("blacklist_dispersion", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already under autobalance dispersion for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistpopulator":
                            if (GetMatchingASPlayersOfGroup("whitelist_populator", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already under populator whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistteamkill":
                            if (GetMatchingASPlayersOfGroup("whitelist_teamkill", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already under TeamKillTracker whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistreport_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_report", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the Report whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistspambot_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_spambot", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the SpamBot whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistaa_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_adminassistant", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the Admin Assistant whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistping_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_ping", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the Ping whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelisthackerchecker_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_hackerchecker", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the Hacker-Checker whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_slotspectator_remove":
                            if (!GetMatchingASPlayersOfGroup("slot_spectator", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in spectator slot list for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_slotreserved_remove":
                            if (!GetMatchingASPlayersOfGroup("slot_reserved", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in reserved slot list for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistbalance_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_multibalancer", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the autobalance whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_blacklistdisperse_remove":
                            if (!GetMatchingASPlayersOfGroup("blacklist_dispersion", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not under autobalance dispersion for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistpopulator_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_populator", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not under populator whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistteamkill_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_teamkill", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not under TeamKillTracker whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_blacklistspectator":
                            if (GetMatchingASPlayersOfGroup("blacklist_spectator", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the spectator blacklist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_blacklistspectator_remove":
                            if (!GetMatchingASPlayersOfGroup("blacklist_spectator", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the spectator blacklist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_blacklistreport":
                            if (GetMatchingASPlayersOfGroup("blacklist_report", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the report source blacklist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_blacklistreport_remove":
                            if (!GetMatchingASPlayersOfGroup("blacklist_report", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the report source blacklist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistcommand":
                            if (GetMatchingASPlayersOfGroup("whitelist_commandtarget", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the command target whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_whitelistcommand_remove":
                            if (!GetMatchingASPlayersOfGroup("whitelist_commandtarget", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the command target whitelist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_blacklistautoassist":
                            if (GetMatchingASPlayersOfGroup("blacklist_autoassist", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player already in the auto-assist blacklist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                        case "player_blacklistautoassist_remove":
                            if (!GetMatchingASPlayersOfGroup("blacklist_autoassist", record.target_player).Any())
                            {
                                SendMessageToSource(record, "Matching player not in the auto-assist blacklist for this server.");
                                FinalizeRecord(record);
                                return;
                            }
                            Log.Debug(() => record.command_type.command_key + " record allowed to continue processing.", 5);
                            break;
                    }
                    //Conditional command replacement (single target only)
                    if (_isTestingAuthorized && _populationStatus == PopulationState.Low && record.target_player != null && record.command_type.command_key == "player_punish")
                    {
                        int punishCount = record.target_player.TargetedRecords.Count(aRecord => aRecord.command_type.command_key == "player_punish");
                        int killCount = record.target_player.TargetedRecords.Count(aRecord => aRecord.command_type.command_key == "player_kill");
                        if (killCount < 2 || (killCount < 4 && punishCount == 1))
                        {
                            if (record.source_name == "AutoAdmin" || record.source_name == "ProconAdmin")
                            {
                                AdminSayMessage("Punishing " + record.GetTargetNames() + " for " + record.record_message);
                            }
                            else
                            {
                                AdminSayMessage(record.GetTargetNames() + " PUNISHED by " + record.GetSourceName() + " for " + record.record_message);
                            }
                            record.command_type = GetCommandByKey("player_kill");
                            record.command_action = GetCommandByKey("player_kill");
                        }
                        else if (killCount >= 4 && punishCount >= 2)
                        {
                            record.command_type = GetCommandByKey("player_kick");
                            record.command_action = GetCommandByKey("player_kick");
                        }
                    }
                    if (record.target_player != null)
                    {
                        //Add the record to the player's targeted records
                        record.target_player.TargetedRecords.Add(record);
                    }
                }
                if (_pluginVersionStatus == VersionStatus.OutdatedBuild && !record.record_action_executed && (record.source_player == null || PlayerIsAdmin(record.source_player)))
                {
                    if (_pluginUpdatePatched)
                    {
                        SendMessageToSource(record, "AdKats has been updated to version " + _latestPluginVersion + "! Reboot PRoCon to activate this patch.");
                    }
                    else
                    {
                        SendMessageToSource(record, "You are running an outdated version of AdKats. Update " + _latestPluginVersion + " is released.");
                    }
                }
                Log.Debug(() => "Preparing to queue " + record.command_type.command_key + " record for processing", 6);
                //Set the record update time
                record.record_time_update = UtcNow();
                lock (_UnprocessedRecordQueue)
                {
                    //Queue the record for processing
                    _UnprocessedRecordQueue.Enqueue(record);
                    Log.Debug(() => "Record queued for processing", 6);
                    _DbCommunicationWaitHandle.Set();
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while queueing record for processing.", e);
                HandleException(record.record_exception);
            }
            Log.Debug(() => "Exiting queueRecordForProcessing", 7);
        }

        private void QueueStatisticForProcessing(AdKatsStatistic aStat)
        {
            Log.Debug(() => "Entering QueueStatisticForProcessing", 6);
            try
            {
                Log.Debug(() => "Preparing to queue statistic for processing", 6);
                lock (_UnprocessedStatisticQueue)
                {
                    //Queue the statistic for processing
                    _UnprocessedStatisticQueue.Enqueue(aStat);
                    Log.Debug(() => "Statistic queued for processing", 6);
                    _DbCommunicationWaitHandle.Set();
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queuing statistic for processing.", e));
            }
            Log.Debug(() => "Exiting QueueStatisticForProcessing", 6);
        }

        private void CommandParsingThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Command Parsing Thread", 1);
                Thread.CurrentThread.Name = "Command";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering Command Parsing Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }

                        //Sleep for 10ms
                        _threadMasterWaitHandle.WaitOne(10);

                        //Get all unparsed inbound messages
                        if (_UnparsedCommandQueue.Count > 0)
                        {
                            Log.Debug(() => "Preparing to lock command queue to retrive new commands", 7);
                            Queue<AdKatsChatMessage> unparsedCommands;
                            lock (_UnparsedCommandQueue)
                            {
                                Log.Debug(() => "Inbound commands found. Grabbing.", 6);
                                //Grab all messages in the queue
                                unparsedCommands = new Queue<AdKatsChatMessage>(_UnparsedCommandQueue.ToArray());
                                //Clear the queue for next run
                                _UnparsedCommandQueue.Clear();
                            }

                            //Loop through all commands in order that they came in
                            while (unparsedCommands.Count > 0)
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                Log.Debug(() => "begin reading command", 6);
                                //Dequeue the first/next command
                                AdKatsChatMessage commandMessage = unparsedCommands.Dequeue();

                                AdKatsRecord record;
                                if (commandMessage.Speaker == "Server")
                                {
                                    record = new AdKatsRecord
                                    {
                                        record_source = AdKatsRecord.Sources.ServerCommand,
                                        record_access = AdKatsRecord.AccessMethod.HiddenExternal,
                                        source_name = "ProconAdmin",
                                        record_time = UtcNow()
                                    };
                                }
                                else
                                {
                                    record = new AdKatsRecord
                                    {
                                        record_source = AdKatsRecord.Sources.InGame,
                                        source_name = commandMessage.Speaker,
                                        record_time = UtcNow()
                                    };
                                    //Assign access method
                                    if (commandMessage.Hidden)
                                    {
                                        if (commandMessage.Subset == AdKatsChatMessage.ChatSubset.Global)
                                        {
                                            record.record_access = AdKatsRecord.AccessMethod.HiddenGlobal;
                                        }
                                        else if (commandMessage.Subset == AdKatsChatMessage.ChatSubset.Team)
                                        {
                                            record.record_access = AdKatsRecord.AccessMethod.HiddenTeam;
                                        }
                                        else if (commandMessage.Subset == AdKatsChatMessage.ChatSubset.Squad)
                                        {
                                            record.record_access = AdKatsRecord.AccessMethod.HiddenSquad;
                                        }
                                    }
                                    else
                                    {
                                        if (commandMessage.Subset == AdKatsChatMessage.ChatSubset.Global)
                                        {
                                            record.record_access = AdKatsRecord.AccessMethod.PublicGlobal;
                                        }
                                        else if (commandMessage.Subset == AdKatsChatMessage.ChatSubset.Team)
                                        {
                                            record.record_access = AdKatsRecord.AccessMethod.PublicTeam;
                                        }
                                        else if (commandMessage.Subset == AdKatsChatMessage.ChatSubset.Squad)
                                        {
                                            record.record_access = AdKatsRecord.AccessMethod.PublicSquad;
                                        }
                                    }
                                }

                                //Complete the record creation
                                CompleteRecordInformation(record, commandMessage.Message);
                            }
                        }
                        else
                        {
                            Log.Debug(() => "No inbound commands, ready.", 7);
                            //No commands to parse, ready.
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _CommandParsingWaitHandle.Reset();
                            _CommandParsingWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                            loopStart = UtcNow();
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("Command thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in Command thread. Skipping current loop.", e));
                    }
                }
                Log.Debug(() => "Ending Command Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in command parsing thread.", e));
            }
        }

        //Before calling this, the record is initialized, and command_source/source_name are filled
        public void CompleteRecordInformation(AdKatsRecord record, String message)
        {
            try
            {
                //Initial split of command by whitespace
                String[] splitMessage = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                if (splitMessage.Length < 1)
                {
                    Log.Debug(() => "Completely blank command entered", 5);
                    SendMessageToSource(record, "You entered a completely blank command.");
                    FinalizeRecord(record);
                    return;
                }
                String commandString = splitMessage[0].ToLower();
                Log.Debug(() => "Raw " + commandString, 6);
                String remainingMessage = message.TrimStart(splitMessage[0].ToCharArray()).Trim();

                record.server_id = _serverInfo.ServerID;
                record.record_time = UtcNow();

                //GATE 1: Add Command
                AdKatsCommand commandType = null;
                if (_CommandTextDictionary.TryGetValue(commandString, out commandType) && commandType.command_active == AdKatsCommand.CommandActive.Active)
                {
                    record.command_type = commandType;
                    record.command_action = commandType;
                    Log.Debug(() => "Command parsed. Command is " + commandType.command_key + ".", 5);
                }
                else
                {
                    //If command not parsable, return without creating
                    Log.Debug(() => "Command not parsable", 6);
                    if (record.record_source == AdKatsRecord.Sources.ExternalPlugin)
                    {
                        SendMessageToSource(record, "Command not parsable.");
                    }
                    FinalizeRecord(record);
                    return;
                }

                //GATE 2: Check Access Rights
                if (record.record_source == AdKatsRecord.Sources.ServerCommand && !_AllowAdminSayCommands)
                {
                    SendMessageToSource(record, "Access to commands using that method has been disabled in AdKats settings.");
                    FinalizeRecord(record);
                    return;
                }
                if (!_firstPlayerListComplete)
                {
                    if (!_PlayersRequestingCommands.Contains(record.source_name))
                    {
                        _PlayersRequestingCommands.Add(record.source_name);
                    }
                    if (_startupDurations.Count() >= 2)
                    {
                        var averageStartupDuration = TimeSpan.FromSeconds(_startupDurations.Average(span => span.TotalSeconds));
                        var currentStartupDuration = NowDuration(_AdKatsStartTime);
                        if (averageStartupDuration > currentStartupDuration)
                        {
                            //Give estimated remaining time
                            SendMessageToSource(record, "AdKats starting up; ~" + 
                                Math.Round(currentStartupDuration.TotalSeconds / averageStartupDuration.TotalSeconds * 100) + "% ready, ~" + 
                                FormatTimeString(averageStartupDuration - currentStartupDuration, 3) + " remaining.");
                        }
                        else
                        {
                            //Just say 'shortly'
                            SendMessageToSource(record, "AdKats starting up; Ready shortly.");
                        }
                    }
                    else
                    {
                        if (!_firstUserListComplete)
                        {
                            SendMessageToSource(record, "AdKats starting up; 1/3 ready, " + FormatTimeString(UtcNow() - _AdKatsStartTime, 3) + " elapsed.");
                        }
                        else
                        {
                            SendMessageToSource(record, "AdKats starting up; 2/3 ready, " + FormatTimeString(UtcNow() - _AdKatsStartTime, 3) + " elapsed.");
                        }
                    }
                    FinalizeRecord(record);
                    return;
                }
                _PlayersRequestingCommands.Clear();
                //Check if player has the right to perform what he's asking, only perform for InGame actions
                if (record.record_source == AdKatsRecord.Sources.InGame)
                {
                    //Attempt to fetch the source player
                    if (!_PlayerDictionary.TryGetValue(record.source_name, out record.source_player))
                    {
                        Log.Error("Source player not found in server for in-game " + record.command_type.command_key + " command, unable to complete command.");
                        FinalizeRecord(record);
                        return;
                    }
                    if (!HasAccess(record.source_player, record.command_type))
                    {
                        Log.Debug(() => "No rights to call command", 6);
                        //Only tell the user they dont have access if the command is active
                        if (record.command_type.command_active == AdKatsCommand.CommandActive.Active)
                        {
                            SendMessageToSource(record, "Your role " + record.source_player.player_role.role_name + " (Power Level " + record.source_player.player_role.role_powerLevel + ") cannot use " + record.command_type.command_name + ".");
                        }
                        FinalizeRecord(record);
                        return;
                    }
                }

                //GATE 3: Command access method
                if (record.record_source == AdKatsRecord.Sources.InGame)
                {
                    switch (record.command_type.command_access)
                    {
                        case AdKatsCommand.CommandAccess.AnyHidden:
                            //Require source to be any hidden
                            if (record.record_access != AdKatsRecord.AccessMethod.HiddenExternal && record.record_access != AdKatsRecord.AccessMethod.HiddenGlobal && record.record_access != AdKatsRecord.AccessMethod.HiddenTeam && record.record_access != AdKatsRecord.AccessMethod.HiddenSquad)
                            {
                                SendMessageToSource(record, "Use /" + record.command_type.command_text + " to access the " + record.command_type.command_name + " command.");
                                FinalizeRecord(record);
                                return;
                            }
                            break;
                        case AdKatsCommand.CommandAccess.AnyVisible:
                            //Require source to be any visible
                            if (record.record_access != AdKatsRecord.AccessMethod.PublicExternal && record.record_access != AdKatsRecord.AccessMethod.PublicGlobal && record.record_access != AdKatsRecord.AccessMethod.PublicTeam && record.record_access != AdKatsRecord.AccessMethod.PublicSquad)
                            {
                                SendMessageToSource(record, "Use !" + record.command_type.command_text + ", @" + record.command_type.command_text + ", or ." + record.command_type.command_text + " to access the " + record.command_type.command_name + " command.");
                                FinalizeRecord(record);
                                return;
                            }
                            break;
                        case AdKatsCommand.CommandAccess.GlobalVisible:
                            //Require source to be global visible
                            if (record.record_access != AdKatsRecord.AccessMethod.PublicGlobal)
                            {
                                SendMessageToSource(record, "Use !" + record.command_type.command_text + ", @" + record.command_type.command_text + ", or ." + record.command_type.command_text + " in GLOBAL chat to access the " + record.command_type.command_name + " command.");
                                FinalizeRecord(record);
                                return;
                            }
                            break;
                        case AdKatsCommand.CommandAccess.TeamVisible:
                            //Require source to be global visible
                            if (record.record_access != AdKatsRecord.AccessMethod.PublicTeam)
                            {
                                SendMessageToSource(record, "Use !" + record.command_type.command_text + ", @" + record.command_type.command_text + ", or ." + record.command_type.command_text + " in TEAM chat to access the " + record.command_type.command_name + " command.");
                                FinalizeRecord(record);
                                return;
                            }
                            break;
                        case AdKatsCommand.CommandAccess.SquadVisible:
                            //Require source to be global visible
                            if (record.record_access != AdKatsRecord.AccessMethod.PublicSquad)
                            {
                                SendMessageToSource(record, "Use !" + record.command_type.command_text + ", @" + record.command_type.command_text + ", or ." + record.command_type.command_text + " in SQUAD chat to access the " + record.command_type.command_name + " command.");
                                FinalizeRecord(record);
                                return;
                            }
                            break;
                    }
                }
                Log.Debug(() => "Access type " + record.record_access + " is allowed for " + record.command_type.command_key + ".", 4);

                //GATE 4: Specific data based on command type.
                switch (record.command_type.command_key)
                {
                    case "player_move":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (_isTestingAuthorized && _serverInfo.ServerID == 1 && _roundState == RoundState.Playing) {
                                AdKatsTeam team1, team2, winningTeam, losingTeam;
                                if (GetTeamByID(1, out team1) && 
                                    GetTeamByID(2, out team2) &&
                                    (team1.TeamTicketCount < 450 || team2.TeamTicketCount < 450)) {
                                    SendMessageToSource(record, "Too late in round to perform moves.");
                                    FinalizeRecord(record);
                                    return;
                                }
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        break;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, false, false);
                                    break;
                                case 1:
                                    record.record_message = "MovePlayer";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_fmove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (_isTestingAuthorized && _serverInfo.ServerID == 1 && _roundState == RoundState.Playing) {
                                AdKatsTeam team1, team2;
                                if (GetTeamByID(1, out team1) &&
                                    GetTeamByID(2, out team2) &&
                                    (team1.TeamTicketCount < 450 || team2.TeamTicketCount < 450)) {
                                    SendMessageToSource(record, "Too late in round to perform moves.");
                                    FinalizeRecord(record);
                                    return;
                                }
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, false, false);
                                    break;
                                case 1:
                                    record.record_message = "ForceMovePlayer";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_teamswap":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //May only call this command from in-game
                            if (record.record_source != AdKatsRecord.Sources.InGame)
                            {
                                SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                FinalizeRecord(record);
                                return;
                            }
                            record.record_message = "TeamSwap";
                            record.target_name = record.source_name;
                            CompleteTargetInformation(record, false, false, false);
                        }
                        break;
                    case "self_assist":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //May only call this command from in-game
                            if (record.record_source != AdKatsRecord.Sources.InGame || record.source_player == null)
                            {
                                SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Cannot call this command when game not active
                            if (_roundState != RoundState.Playing)
                            {
                                SendMessageToSource(record, "You can't use assist unless a round is active.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Player Info Check
                            record.record_message = "Assist Losing Team";
                            record.target_name = record.source_name;
                            if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                            {
                                SendMessageToSource(record, "Player information not found. Unable to process command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //May only call this command from in-game
                            if (record.source_player.player_type != PlayerType.Player)
                            {
                                SendMessageToSource(record, "You must be a player to use assist.");
                                FinalizeRecord(record);
                                return;
                            }

                            Int32 minAssistMinutes = 4;
                            if (_isTestingAuthorized && _serverInfo.GetRoundElapsedTime().TotalMinutes < minAssistMinutes) {
                                SendMessageToSource(record, "Please wait at least " + minAssistMinutes + " minutes into the round to use assist. [" + FormatTimeString(_serverInfo.GetRoundElapsedTime(), 2) + "]");
                                FinalizeRecord(record);
                                return;
                            }

                            //Team Info Check
                            AdKatsTeam team1, team2;
                            if (!GetTeamByID(1, out team1))
                            {
                                if (_roundState == RoundState.Playing)
                                {
                                    Log.Error("Teams not loaded when they should be.");
                                }
                                return;
                            }
                            if (!GetTeamByID(2, out team2))
                            {
                                if (_roundState == RoundState.Playing)
                                {
                                    Log.Error("Teams not loaded when they should be.");
                                }
                                return;
                            }
                            AdKatsTeam winningTeam, losingTeam;
                            if (team1.TeamTicketCount > team2.TeamTicketCount)
                            {
                                winningTeam = team1;
                                losingTeam = team2;
                            }
                            else
                            {
                                winningTeam = team2;
                                losingTeam = team1;
                            }
                            AdKatsTeam friendlyTeam, enemyTeam;
                            if (record.target_player.frostbitePlayerInfo.TeamID == team1.TeamID)
                            {
                                friendlyTeam = team1;
                                enemyTeam = team2;
                            }
                            else if (record.target_player.frostbitePlayerInfo.TeamID == team2.TeamID)
                            {
                                friendlyTeam = team2;
                                enemyTeam = team1;
                            }
                            else
                            {
                                SendMessageToSource(record, "Invalid teams when attempting to assist.");
                                FinalizeRecord(record);
                                return;
                            }

                            record.record_message = "Assist Weak Team [" + winningTeam.TeamTicketCount + ":" + losingTeam.TeamTicketCount + "][" + FormatTimeString(_serverInfo.GetRoundElapsedTime(), 3) + "]";
                            Boolean canAssist = true;
                            String rejectionMessage = "team ";
                            var newPowerDiff = Math.Round(Math.Abs(enemyTeam.getTeamPower(null, record.target_player) - friendlyTeam.getTeamPower(record.target_player, null)));
                            var oldPowerDiff = Math.Round(Math.Abs(enemyTeam.getTeamPower() - friendlyTeam.getTeamPower()));
                            Boolean enemyWinning = (record.target_player.frostbitePlayerInfo.TeamID == losingTeam.TeamID);
                            Boolean enemyMapPower = enemyTeam.GetTicketDifferenceRate() > friendlyTeam.GetTicketDifferenceRate();
                            Boolean ticketBypass = Math.Abs(winningTeam.TeamTicketCount - losingTeam.TeamTicketCount) > (_startingTicketCount > 0 ? (_startingTicketCount / 4.0) : 250);
                            if (enemyWinning)
                            {
                                canAssist = false;
                                if (enemyMapPower)
                                {
                                    rejectionMessage += "is already winning and strong.";
                                }
                                else
                                {
                                    rejectionMessage += "is losing ground, but still winning the match.";
                                }
                            }
                            else if (_UseTopPlayerMonitor)
                            {
                                if (newPowerDiff > oldPowerDiff)
                                {
                                    canAssist = false;
                                    rejectionMessage += "would be too strong with them on it.";
                                }
                            }
                            else
                            {
                                if (enemyMapPower)
                                {
                                    canAssist = false;
                                    rejectionMessage += "is losing, but is making a comeback.";
                                }
                            }
                            if (canAssist)
                            {
                                //Timeout or over-queueing
                                var assists = _roundAssists.Values;
                                if (assists.Any())
                                {
                                    if (assists.Any(aRecord => aRecord.command_action.command_key == "self_assist_unconfirmed"))
                                    {
                                        SendMessageToSource(record, "Another player is already queued for assist. Please wait for them to be moved. Thank you.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Double secondTimeout = _UseTopPlayerMonitor ? 20 : 60;
                                    Double timeout = (secondTimeout - (UtcNow() - assists.Max(aRecord => aRecord.record_time_update)).TotalSeconds);
                                    if (timeout > 0)
                                    {
                                        SendMessageToSource(record, "Assist recently used. Please wait " + Math.Ceiling(timeout) + " seconds before using it. Thank you.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                }
                                SendMessageToSource(record, "Queuing you to assist the weak team. Thank you.");
                                OnlineAdminSayMessage(record.GetTargetNames() + " assist to " + enemyTeam.TeamKey + " accepted " + (_UseTopPlayerMonitor ? "(" + newPowerDiff + "<" + oldPowerDiff + ")" : "") + ", queueing.");
                            } 
                            else
                            {
                                AdminSayMessage(record.GetSourceName() + " assist to " + enemyTeam.TeamKey + " rejected, " + rejectionMessage);
                                FinalizeRecord(record);
                                return;
                            }

                            //Assist is currently unconfirmed
                            record.command_action = GetCommandByKey("self_assist_unconfirmed");

                            QueueRecordForProcessing(record);
                        }
                        break;
                    case "self_kill":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //May only call this command from in-game
                            if (record.record_source != AdKatsRecord.Sources.InGame)
                            {
                                SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                FinalizeRecord(record);
                                return;
                            }

                            record.record_message = "Self-Inflicted";
                            record.target_name = record.source_name;
                            CompleteTargetInformation(record, false, false, false);
                        }
                        break;
                    case "player_kill":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                    }
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, false, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_kill_force":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                    }
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, false, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_warn":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Warning Yourself";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                    }
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, false, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_kick":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, false, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_ban_temp":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            //Default is minutes
                            Double recordDuration = 0.0;
                            Double durationMultiplier = 1.0;
                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration.EndsWith("s"))
                                {
                                    stringDuration = stringDuration.TrimEnd('s');
                                    durationMultiplier = (1.0 / 60.0);
                                }
                                else if (stringDuration.EndsWith("m"))
                                {
                                    stringDuration = stringDuration.TrimEnd('m');
                                    durationMultiplier = 1.0;
                                }
                                else if (stringDuration.EndsWith("h"))
                                {
                                    stringDuration = stringDuration.TrimEnd('h');
                                    durationMultiplier = 60.0;
                                }
                                else if (stringDuration.EndsWith("d"))
                                {
                                    stringDuration = stringDuration.TrimEnd('d');
                                    durationMultiplier = 1440.0;
                                }
                                else if (stringDuration.EndsWith("w"))
                                {
                                    stringDuration = stringDuration.TrimEnd('w');
                                    durationMultiplier = 10080.0;
                                }
                                else if (stringDuration.EndsWith("y"))
                                {
                                    stringDuration = stringDuration.TrimEnd('y');
                                    durationMultiplier = 525949.0;
                                }
                                if (!Double.TryParse(stringDuration, out recordDuration))
                                {
                                    SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                record.command_numeric = (int)(recordDuration * durationMultiplier);
                                if (record.command_numeric > 5259490.0)
                                {
                                    SendMessageToSource(record, "You cannot temp ban for longer than 10 years. Issue a permanent ban instead.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                if (record.command_numeric > _MaxTempBanDuration.TotalMinutes)
                                {
                                    SendMessageToSource(record, "You cannot temp ban for longer than " + FormatTimeString(_MaxTempBanDuration, 2) + ". Defaulting to max temp ban time.");
                                    record.command_numeric = (int)_MaxTempBanDuration.TotalMinutes;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    //Target is source
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, false, false);
                                    break;
                                case 2:
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                case 3:
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    Log.Debug(() => "reason: " + record.record_message, 6);

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_ban_perm":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_ban_perm_future":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }
                            if (!_UseBanEnforcer || !_UseBanEnforcerPreviousState)
                            {
                                SendMessageToSource(record, " can only be used when ban enforcer is enabled.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            //Default is minutes
                            Double recordDuration = 0.0;
                            Double durationMultiplier = 1.0;
                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration.EndsWith("s"))
                                {
                                    stringDuration = stringDuration.TrimEnd('s');
                                    durationMultiplier = (1.0 / 60.0);
                                }
                                else if (stringDuration.EndsWith("m"))
                                {
                                    stringDuration = stringDuration.TrimEnd('m');
                                    durationMultiplier = 1.0;
                                }
                                else if (stringDuration.EndsWith("h"))
                                {
                                    stringDuration = stringDuration.TrimEnd('h');
                                    durationMultiplier = 60.0;
                                }
                                else if (stringDuration.EndsWith("d"))
                                {
                                    stringDuration = stringDuration.TrimEnd('d');
                                    durationMultiplier = 1440.0;
                                }
                                else if (stringDuration.EndsWith("w"))
                                {
                                    stringDuration = stringDuration.TrimEnd('w');
                                    durationMultiplier = 10080.0;
                                }
                                else if (stringDuration.EndsWith("y"))
                                {
                                    stringDuration = stringDuration.TrimEnd('y');
                                    durationMultiplier = 525949.0;
                                }
                                if (!Double.TryParse(stringDuration, out recordDuration))
                                {
                                    SendMessageToSource(record, "Invalid time given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                }
                                record.command_numeric = (int)(recordDuration * durationMultiplier);
                            }
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    //Target is source
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, false, false);
                                    break;
                                case 2:
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);

                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                case 3:
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);

                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    Log.Debug(() => "reason: " + record.record_message, 6);

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_unban":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }
                            if (!_UseBanEnforcer || !_UseBanEnforcerPreviousState)
                            {
                                SendMessageToSource(record, "The unban command can only be used when ban enforcer is enabled.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            String partialName;
                            List<AdKatsBan> matchingBans;
                            switch (parameters.Length)
                            {
                                case 0:
                                    //Unban the last player you've banned
                                    SendMessageToSource(record, "Unbanning the last person you banned is not implemented yet.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //Unban the target player
                                    partialName = parameters[0];
                                    record.record_message = "Admin Unban";
                                    break;
                                case 2:
                                    //Unban the target player
                                    partialName = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }

                            if (String.IsNullOrEmpty(partialName) || partialName.Length < 3)
                            {
                                SendMessageToSource(record, "Name search must be at least 3 characters.");
                                FinalizeRecord(record);
                                return;
                            }
                            SendMessageToSource(record, "Fetching matching bans. Please wait.");
                            matchingBans = FetchMatchingBans(partialName, 4);
                            if (matchingBans.Count == 0)
                            {
                                SendMessageToSource(record, "No players matching '" + partialName + "' have active bans.");
                                FinalizeRecord(record);
                                return;
                            }
                            if (matchingBans.Count <= 3)
                            {
                                foreach (AdKatsBan innerBan in matchingBans)
                                {
                                    SendMessageToSource(record, innerBan.ban_record.GetTargetNames() + " | " + innerBan.ban_record.record_time.ToShortDateString() + " | " + innerBan.ban_record.record_message);
                                }
                                AdKatsBan aBan = matchingBans[0];
                                record.target_name = aBan.ban_record.target_player.player_name;
                                record.target_player = aBan.ban_record.target_player;
                                ConfirmActionWithSource(record);
                            }
                            else
                            {
                                SendMessageToSource(record, "Too many banned players match your search, try again.");
                                FinalizeRecord(record);
                            }
                        }
                        break;
                    case "player_whitelisthackerchecker":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Hacker-Checker Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistping":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (!_pingEnforcerEnable)
                            {
                                SendMessageToSource(record, "Enable Ping Enforcer to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Ping Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistaa":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_EnableAdminAssistants)
                            {
                                SendMessageToSource(record, "Enable Admin Assistants to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Admin Assistant Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistreport":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            String defaultReason = "Report Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistspambot":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_spamBotExcludeAdminsAndWhitelist)
                            {
                                SendMessageToSource(record, "'Exclude Admins and Whitelist from Spam' must be enabled to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Spambot Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_blacklistspectator":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Spectator Blacklist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_blacklistreport":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            String defaultReason = "Report Source Blacklist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistcommand":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            String defaultReason = "Command Target Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_blacklistautoassist":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            String defaultReason = "Auto-Assist Blacklist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistpopulator":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_PopulatorMonitor)
                            {
                                SendMessageToSource(record, "'Monitor Populator Players' must be enabled to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Populator Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistteamkill":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (!_FeedTeamKillTrackerWhitelist)
                            {
                                SendMessageToSource(record, "'Feed TeamKillTracker Whitelist' must be enabled to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "TeamKillTracker Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_punish":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (!_dbTimingValid)
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed when database timing is mismatched.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, true);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_forgive":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, true);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_mute":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Self-Inflicted";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, false, true);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record))
                                    {
                                        SendMessageToSource(record, "No reason given, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        if (record.record_message.Length >= _RequiredReasonLength)
                                        {
                                            CompleteTargetInformation(record, false, false, true);
                                        }
                                        else
                                        {
                                            SendMessageToSource(record, "Reason too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_join":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (record.source_player != null && record.source_player.player_type == PlayerType.Spectator)
                            {
                                SendMessageToSource(record, "You cannot use !" + GetCommandByKey("player_pull").command_text + " as a spectator.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (record.source_player != null && (record.source_player.player_type == PlayerType.CommanderMobile || record.source_player.player_type == PlayerType.CommanderPC))
                            {
                                SendMessageToSource(record, "You cannot use !" + GetCommandByKey("player_pull").command_text + " as a commander.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "You are already in squad with yourself.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Joining Player";
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_pull":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (record.source_player != null && record.source_player.player_type == PlayerType.Spectator)
                            {
                                SendMessageToSource(record, "You cannot use !" + GetCommandByKey("player_pull").command_text + " as a spectator.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (record.source_player != null && (record.source_player.player_type == PlayerType.CommanderMobile || record.source_player.player_type == PlayerType.CommanderPC))
                            {
                                SendMessageToSource(record, "You cannot use !" + GetCommandByKey("player_pull").command_text + " as a commander.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "foreveralone.jpg (You cannot pull yourself.)");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use this command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = parameters[0];
                                    record.record_message = "Pulling Player";
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_roundwhitelist":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            SendMessageToSource(record, "This command has been permanently disabled. - ColColonCleaner");
                            FinalizeRecord(record);
                        }
                        break;
                    case "player_report":
                        {
                            //Get the command text for report
                            String command = GetCommandByKey("player_report").command_text;

                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "Format must be: @" + command + " playername reason");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    SendMessageToSource(record, "Format must be: @" + command + " playername reason");
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], false);

                                    Log.Debug(() => "reason: " + record.record_message, 6);

                                    //Only 1 character reasons are required for reports and admin calls
                                    if (record.record_message.Length >= 1)
                                    {
                                        CompleteTargetInformation(record, true, false, false);
                                    }
                                    else
                                    {
                                        Log.Debug(() => "reason too short", 6);
                                        SendMessageToSource(record, "Reason too short, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_calladmin":
                        {
                            //Get the command text for call admin
                            String command = GetCommandByKey("player_calladmin").command_text;

                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "Format must be: @" + command + " playername reason");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    SendMessageToSource(record, "Format must be: @" + command + " playername reason");
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], false);

                                    Log.Debug(() => "reason: " + record.record_message, 6);
                                    //Only 1 character reasons are required for reports and admin calls
                                    if (record.record_message.Length >= 1)
                                    {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    else
                                    {
                                        Log.Debug(() => "reason too short", 6);
                                        SendMessageToSource(record, "Reason too short, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_info":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Fetching Own Info";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Fetching Player Info";
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_perks":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 1:
                                    if (record.source_player != null && !PlayerIsAdmin(record.source_player))
                                    {
                                        SendMessageToSource(record, "You cannot see another player's perks. Admin only.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = parameters[0];
                                    record.record_message = "Fetching Player Perks";
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Fetching Own Perks";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                            }
                        }
                        break;
                    case "player_chat":
                        {
                            /*
                                 * This command will get chat history for a player. Comes in 4 variations. 
                                 * Variable number of seconds between printed lines, based on the number of characters in the message. 
                                 * Oldest to newest. Default last 5 lines, max 30. Spam protection enabled.
                                 *  
                                 * /pchat - returns your chat history, default length.
                                 * /pchat (#) - returns your chat history, custom length.
                                 * /pchat (playername) - returns player chat history, default length.
                                 * /pchat (#) (playername) - returns player chat history, custom length.
                                 * /pchat self (playername) - returns last conversation between you and player, default length.
                                 * /pchat (#) self (playername) - returns last conversation between you and player, custom length.
                                 * /pchat (playernameA) (playernameB) - returns last conversation between playerA and playerB, default length.
                                 * /pchat (#) (playernameA) (playernameB) - returns last conversation between playerA and playerB, custom length.
                                 */

                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            Int32 numeric;

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);
                            switch (parameters.Length)
                            {
                                case 0:
                                    //One case, assign to self
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Fetching own chat history";
                                    record.target_name = record.source_name;
                                    record.command_numeric = 5;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    //Two cases
                                    if (Int32.TryParse(parameters[0], out numeric) && numeric <= 30)
                                    {
                                        //Case numeric, assign to duration
                                        record.record_message = "Fetching own chat history";
                                        record.target_name = record.source_name;
                                        record.command_numeric = numeric;
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    else
                                    {
                                        //Case player, assign to target name
                                        record.record_message = "Fetching player chat history";
                                        record.target_name = parameters[0];
                                        record.command_numeric = 5;
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                case 2:
                                    //Three cases
                                    if (Int32.TryParse(parameters[0], out numeric) && numeric <= 30)
                                    {
                                        //Case numeric, assign to duration
                                        record.record_message = "Fetching player chat history";
                                        record.target_name = parameters[1];
                                        record.command_numeric = numeric;
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    else
                                    {
                                        SendMessageToSource(record, "");
                                        //Two target case, assign both players
                                        if (parameters[0].ToLower() == "self")
                                        {
                                            //Players are self and target
                                            record.record_message = "Fetching own conversation history.";
                                            record.TargetNamesLocal.Add(record.source_name);
                                            record.TargetNamesLocal.Add(parameters[0]);
                                            record.command_numeric = 5;
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                        else
                                        {
                                            //Players are target 1 and target 2
                                            record.record_message = "Fetching player conversation history.";
                                            record.TargetNamesLocal.Add(parameters[0]);
                                            record.TargetNamesLocal.Add(parameters[1]);
                                            record.command_numeric = 5;
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                    }
                                    break;
                                case 3:
                                    //Two cases
                                    if (Int32.TryParse(parameters[0], out numeric) && numeric <= 30)
                                    {
                                        //Two target case, assign both players
                                        if (parameters[1].ToLower() == "self")
                                        {
                                            //Players are self and target
                                            record.record_message = "Fetching own conversation history.";
                                            record.TargetNamesLocal.Add(record.source_name);
                                            record.TargetNamesLocal.Add(parameters[2]);
                                            record.command_numeric = numeric;
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                        else
                                        {
                                            //Players are target 1 and target 2
                                            record.record_message = "Fetching player conversation history.";
                                            record.TargetNamesLocal.Add(parameters[1]);
                                            record.TargetNamesLocal.Add(parameters[2]);
                                            record.command_numeric = numeric;
                                            CompleteTargetInformation(record, false, true, true);
                                        }
                                    }
                                    else
                                    {
                                        SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                        FinalizeRecord(record);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_find":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Finding Self";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Finding Player";
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_lock":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "You can't lock yourself...");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Locking Player";
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_unlock":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "You can't unlock yourself...");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Unlocking Player";
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_mark": {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length) {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame) {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Marking Self";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Marking Player";
                                    if (!HandleRoundReport(record)) {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_loadout": {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length) {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame) {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Loadout Fetching Self";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Loadout Fetching Player";
                                    if (!HandleRoundReport(record)) {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_loadout_force": {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length) {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame) {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Loadout Forcing Self";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Loadout Forcing Player";
                                    if (!HandleRoundReport(record)) {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_log": {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length) {
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!HandleRoundReport(record)) {
                                        SendMessageToSource(record, "No log message given, unable to submit.");
                                    }
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];

                                    //attempt to handle via pre-message ID
                                    record.record_message = GetPreMessage(parameters[1], _RequirePreMessageUse);
                                    if (record.record_message == null) {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }

                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record)) {
                                        if (record.record_message.Length >= _RequiredReasonLength) {
                                            CompleteTargetInformation(record, false, true, true);
                                        } else {
                                            SendMessageToSource(record, "Log message too short, unable to submit.");
                                            FinalizeRecord(record);
                                        }
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_feedback": {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length) {
                                case 1:
                                    record.record_message = parameters[0];
                                    record.target_name = "Server";
                                    if (record.record_message.Length < 5) {
                                        SendMessageToSource(record, "Feedback message too short, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "server_afk":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (_AFKAutoKickEnable)
                                    {
                                        SendMessageToSource(record, "AFK players are being managed automatically; Disable to use this command.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Manage AFK Players";
                                    record.target_name = "Server";
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "server_nuke":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_roundState != RoundState.Playing && record.source_name != "ProconAdmin")
                            {
                                SendMessageToSource(record, record.command_type.command_key + " cannot be used between rounds.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    String targetTeam = parameters[0];
                                    record.record_message = "Nuke Server";
                                    Log.Debug(() => "target: " + targetTeam, 6);
                                    List<AdKatsTeam> validTeams = _teamDictionary.Values.Where(aTeam => aTeam.TeamID == 1 || aTeam.TeamID == 2).ToList();
                                    AdKatsTeam matchingTeam = validTeams.FirstOrDefault(aTeam => aTeam.TeamKey.ToLower() == targetTeam.ToLower());
                                    if (matchingTeam != null)
                                    {
                                        record.target_name = matchingTeam.TeamName;
                                        record.command_numeric = matchingTeam.TeamID;
                                        record.record_message += " (" + matchingTeam.TeamName + ")";
                                    }
                                    else if (targetTeam.ToLower() == "all")
                                    {
                                        record.target_name = "Everyone";
                                        record.record_message += " (Everyone)";
                                    }
                                    else
                                    {
                                        SendMessageToSource(record, "Team " + targetTeam.ToUpper() + " not found. Available: " + String.Join(", ", validTeams.Select(aTeam => aTeam.TeamKey).ToArray()));
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    //Have the admin confirm the action
                                    ConfirmActionWithSource(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "server_countdown":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 3:
                                    String targetSubset = parameters[0].ToLower().Trim();
                                    if (String.IsNullOrEmpty(targetSubset))
                                    {
                                        SendMessageToSource(record, "Invalid target, must be squad, team, or all. Unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "target: " + targetSubset, 6);
                                    List<AdKatsTeam> validTeams = _teamDictionary.Values.Where(aTeam => aTeam.TeamID == 1 || aTeam.TeamID == 2).ToList();
                                    AdKatsTeam matchingTeam = validTeams.FirstOrDefault(aTeam => aTeam.TeamKey.ToLower() == targetSubset.ToLower());
                                    if (matchingTeam != null) {
                                        record.target_name = matchingTeam.TeamKey;
                                    } else {
                                        switch (targetSubset) {
                                            case "squad":
                                                if (record.source_player == null || !record.source_player.player_online || !_PlayerDictionary.ContainsKey(record.source_player.player_name) || record.source_player.player_type == PlayerType.Spectator) {
                                                    SendMessageToSource(record, "Must be a player to use squad option. Unable to submit.");
                                                    FinalizeRecord(record);
                                                    return;
                                                }
                                                record.target_name = "Squad";
                                                break;
                                            case "team":
                                                if (record.source_player == null || !record.source_player.player_online || !_PlayerDictionary.ContainsKey(record.source_player.player_name) || record.source_player.player_type == PlayerType.Spectator) {
                                                    SendMessageToSource(record, "Must be a player to use team option. Unable to submit.");
                                                    FinalizeRecord(record);
                                                    return;
                                                }
                                                record.target_name = "Team";
                                                break;
                                            case "all":
                                                record.target_name = "All";
                                                break;
                                            default:
                                                SendMessageToSource(record, "Invalid target, must be squad, team, or all. Unable to submit.");
                                                FinalizeRecord(record);
                                                return;
                                                break;
                                        }
                                    }
                                    //Max 30 seconds
                                    Int32 countdownSeconds;
                                    if (!Int32.TryParse(parameters[1], out countdownSeconds) || countdownSeconds < 1 || countdownSeconds > 30)
                                    {
                                        SendMessageToSource(record, "Invalid duration, must be 1-30. Unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = countdownSeconds;
                                    String countdownMessage = parameters[2];
                                    if (String.IsNullOrEmpty(countdownMessage))
                                    {
                                        SendMessageToSource(record, "Invalid countdown message, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = countdownMessage;

                                    //Have the admin confirm the action
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "server_kickall":
                        CancelSourcePendingAction(record);

                        if (_serverInfo.ServerType == "OFFICIAL")
                        {
                            SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                            FinalizeRecord(record);
                            return;
                        }

                        record.target_name = "Non-Admins";
                        record.record_message = "Kick All Players";
                        ConfirmActionWithSource(record);
                        break;
                    case "server_swapnuke":
                        CancelSourcePendingAction(record);

                        if (_serverInfo.ServerType == "OFFICIAL")
                        {
                            SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                            FinalizeRecord(record);
                            return;
                        }

                        /*if ((_playerDictionary.Count + 1) >= _serverInfo.MaxPlayerCount)
                        {
                            SendMessageToSource(record, record.command_type.command_key + " be performed without an open slot in the server to move players.");
                            FinalizeRecord(record);
                            return;
                        }*/

                        record.target_name = "Everyone";
                        record.record_message = "TeamSwap All Players";
                        ConfirmActionWithSource(record);
                        break;
                    case "round_end":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    String targetTeam = parameters[0];
                                    Log.Debug(() => "target team: " + targetTeam, 6);
                                    record.record_message = "End Round";
                                    List<AdKatsTeam> validTeams = _teamDictionary.Values.Where(aTeam => aTeam.TeamID == 1 || aTeam.TeamID == 2).ToList();
                                    AdKatsTeam matchingTeam = validTeams.FirstOrDefault(aTeam => aTeam.TeamKey.ToLower() == targetTeam.ToLower());
                                    if (matchingTeam != null)
                                    {
                                        record.target_name = matchingTeam.TeamName;
                                        record.command_numeric = matchingTeam.TeamID;
                                        record.record_message += " (" + matchingTeam.TeamName + ")";
                                    }
                                    else
                                    {
                                        SendMessageToSource(record, "Team " + targetTeam.ToUpper() + " not found. Available: " + String.Join(", ", validTeams.Select(aTeam => aTeam.TeamKey).ToArray()));
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                            //Have the admin confirm the action
                            ConfirmActionWithSource(record);
                        }
                        break;
                    case "round_restart":
                        CancelSourcePendingAction(record);

                        if (_serverInfo.ServerType == "OFFICIAL")
                        {
                            SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                            FinalizeRecord(record);
                            return;
                        }

                        record.target_name = "Server";
                        record.record_message = "Restart Round";
                        ConfirmActionWithSource(record);
                        break;
                    case "round_next":
                        CancelSourcePendingAction(record);

                        if (_serverInfo.ServerType == "OFFICIAL")
                        {
                            SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                            FinalizeRecord(record);
                            return;
                        }

                        record.target_name = "Server";
                        record.record_message = "Run Next Map";
                        ConfirmActionWithSource(record);
                        break;
                    case "self_whatis":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.record_message = GetPreMessage(parameters[0], true);
                                    if (record.record_message == null)
                                    {
                                        AdKatsCommand aCommand;
                                        if (_CommandTextDictionary.TryGetValue(parameters[0], out aCommand))
                                        {
                                            if (record.source_player == null || HasAccess(record.source_player, aCommand))
                                            {
                                                record.record_message = _CommandDescriptionDictionary[aCommand.command_key];
                                            }
                                            else
                                            {
                                                record.record_message = "Your user role " + record.source_player.player_role.role_name + " does not have access to " + aCommand.command_name + ".";
                                            }
                                        }
                                        else
                                        {
                                            record.record_message = "Invalid PreMessage ID or command name. !" + GetCommandByKey("self_help").command_text + " for command list. Valid PreMessage IDs are 1-" + _PreMessageList.Count;
                                        }
                                    }
                                    SendMessageToSource(record, record.record_message);
                                    FinalizeRecord(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                            //This type is not processed
                        }
                        break;
                    case "self_voip":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Send them voip information
                            SendMessageToSource(record, _ServerVoipAddress);
                            FinalizeRecord(record);
                        }
                        break;
                    case "self_rules":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = record.source_name;
                                    record.record_message = "Player Requested Rules";
                                    if (record.record_source == AdKatsRecord.Sources.InGame)
                                    {
                                        if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                        {
                                            SendMessageToSource(record, "Source player not found, unable to submit.");
                                            FinalizeRecord(record);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        record.target_name = "ExternalSource";
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Telling Player Rules";
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_surrender":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_surrenderVoteEnable)
                            {
                                SendMessageToSource(record, "Surrender Vote must be enabled in AdKats settings to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 0);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = record.source_name;
                                    record.record_message = "Player Voted for Surrender";
                                    if (record.record_source == AdKatsRecord.Sources.InGame)
                                    {
                                        if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                        {
                                            SendMessageToSource(record, "Source player not found, unable to submit.");
                                            FinalizeRecord(record);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        record.target_name = "ExternalSource";
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_votenext":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_surrenderVoteEnable)
                            {
                                SendMessageToSource(record, "Surrender Vote must be enabled in AdKats settings to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 0);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = record.source_name;
                                    record.record_message = "Player Voted for Next Round";
                                    if (record.record_source == AdKatsRecord.Sources.InGame)
                                    {
                                        if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                        {
                                            SendMessageToSource(record, "Source player not found, unable to submit.");
                                            FinalizeRecord(record);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        record.target_name = "ExternalSource";
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_nosurrender":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_surrenderVoteEnable)
                            {
                                SendMessageToSource(record, "Surrender Vote must be enabled in AdKats settings to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 0);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = record.source_name;
                                    record.record_message = "Player Voted against Surrender";
                                    if (record.record_source == AdKatsRecord.Sources.InGame)
                                    {
                                        if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                        {
                                            SendMessageToSource(record, "Source player not found, unable to submit.");
                                            FinalizeRecord(record);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        record.target_name = "ExternalSource";
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_help":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = record.source_name;
                                    record.record_message = "Player Requested Commands";
                                    if (record.record_source == AdKatsRecord.Sources.InGame)
                                    {
                                        if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                        {
                                            SendMessageToSource(record, "Source player not found, unable to submit.");
                                            FinalizeRecord(record);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        record.target_name = "ExternalSource";
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Telling Player Commands";
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_rep":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = record.source_name;
                                    record.record_message = "Player Requested Reputation";
                                    if (record.record_source == AdKatsRecord.Sources.InGame)
                                    {
                                        if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                        {
                                            SendMessageToSource(record, "Source player not found, unable to submit.");
                                            FinalizeRecord(record);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                case 1:
                                    if (record.source_player != null && !PlayerIsAdmin(record.source_player))
                                    {
                                        SendMessageToSource(record, "You cannot see another player's reputation. Admin only.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = parameters[0];
                                    record.record_message = "Requesting Player Reputation";
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_isadmin":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = record.source_name;
                                    record.record_message = "Requesting Admin Status";
                                    if (record.record_source == AdKatsRecord.Sources.InGame)
                                    {
                                        if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                        {
                                            SendMessageToSource(record, "Source player not found, unable to submit.");
                                            FinalizeRecord(record);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Requesting Player Admin Status";
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_uptime":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            record.record_message = "Player Requested Uptime";
                            if (record.record_source == AdKatsRecord.Sources.InGame)
                            {
                                record.target_name = record.source_name;
                                if (_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                {
                                    record.target_name = record.target_player.player_name;
                                }
                                else
                                {
                                    Log.Error("48204928 this error should never happen.");
                                    FinalizeRecord(record);
                                    return;
                                }
                            }
                            else
                            {
                                record.target_name = "ExternalSource";
                            }
                            QueueRecordForProcessing(record);
                        }
                        break;
                    case "self_contest":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //May only call this command from in-game
                            if (record.record_source != AdKatsRecord.Sources.InGame)
                            {
                                SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Player Info Check
                            record.record_message = "Player Contested Report";
                            record.target_name = record.source_name;
                            if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                            {
                                SendMessageToSource(record, "Player information not found. Unable to process command.");
                                FinalizeRecord(record);
                                return;
                            }

                            AdKatsRecord aRecord = null;
                            foreach (AdKatsRecord reportRecord in _RoundReports.Values)
                            {
                                if (reportRecord.target_player.player_id == record.target_player.player_id)
                                {
                                    if (aRecord == null || reportRecord.record_time > aRecord.record_time)
                                    {
                                        aRecord = reportRecord;
                                    }
                                }
                            }

                            if (aRecord == null)
                            {
                                SendMessageToSource(record, "You have no reports to contest.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Assign the report ID housed in command numeric
                            record.command_numeric = aRecord.command_numeric;
                            //Set Contested
                            aRecord.isContested = true;
                            //Inform All Parties
                            SendMessageToSource(aRecord, aRecord.GetTargetNames() + " has contested your report against them.");
                            SendMessageToSource(record, "You have contested " + aRecord.GetSourceName() + "'s report against you.");
                            OnlineAdminSayMessage(record.GetSourceName() + " has contested report [" + aRecord.command_numeric + "] for " + aRecord.record_message);

                            QueueRecordForProcessing(record);
                        }
                        break;
                    case "self_admins":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            record.record_message = "Player Requested Online Admins";
                            if (record.record_source == AdKatsRecord.Sources.InGame)
                            {
                                record.target_name = record.source_name;
                                CompleteTargetInformation(record, false, false, false);
                            }
                            else
                            {
                                record.target_name = "ExternalSource";
                                QueueRecordForProcessing(record);
                            }
                        }
                        break;
                    case "self_lead":
                        {
                            //Remove previous commands awaiting confirmationf
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = "Player Taking Squad Lead";
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Giving Player Squad Lead";
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, false, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_reportlist":
                        {
                            //Remove previous commands awaiting confirmationf
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.record_message = "Listing Round Reports";
                                    if (record.record_source == AdKatsRecord.Sources.InGame)
                                    {
                                        record.target_name = record.source_name;
                                        CompleteTargetInformation(record, false, false, false);
                                    }
                                    else
                                    {
                                        record.target_name = "ExternalSource";
                                        QueueRecordForProcessing(record);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "admin_accept":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "Report ID must be given. Unable to submit.");
                                    FinalizeRecord(record);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!AcceptRoundReport(record))
                                    {
                                        SendMessageToSource(record, "Invalid report ID given, unable to submit.");
                                    }
                                    FinalizeRecord(record);
                                    return;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                            record.record_action_executed = true;
                        }
                        break;
                    case "admin_deny":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "Report ID must be given. Unable to submit.");
                                    FinalizeRecord(record);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!DenyRoundReport(record))
                                    {
                                        SendMessageToSource(record, "Invalid report ID given, unable to submit.");
                                    }
                                    FinalizeRecord(record);
                                    return;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                            record.record_action_executed = true;
                        }
                        break;
                    case "admin_ignore":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "Report ID must be given. Unable to submit.");
                                    FinalizeRecord(record);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    //Handle based on report ID as only option
                                    if (!IgnoreRoundReport(record))
                                    {
                                        SendMessageToSource(record, "Invalid report ID given, unable to submit.");
                                    }
                                    FinalizeRecord(record);
                                    return;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                            record.record_action_executed = true;
                        }
                        break;
                    case "admin_say":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.record_message = GetPreMessage(parameters[0], false);
                                    Log.Debug(() => "" + record.record_message, 6);
                                    record.target_name = "Server";
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_say":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    SendMessageToSource(record, "No message given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    record.record_message = GetPreMessage(parameters[1], false);
                                    Log.Debug(() => "" + record.record_message, 6);

                                    CompleteTargetInformation(record, false, false, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "admin_yell":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.record_message = GetPreMessage(parameters[0], false);
                                    Log.Debug(() => "" + record.record_message, 6);
                                    record.target_name = "Server";
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_yell":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    SendMessageToSource(record, "No message given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    record.record_message = GetPreMessage(parameters[1], false);
                                    Log.Debug(() => "" + record.record_message, 6);

                                    CompleteTargetInformation(record, false, false, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "admin_tell":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.record_message = GetPreMessage(parameters[0], false);
                                    Log.Debug(() => "" + record.record_message, 6);
                                    record.target_name = "Server";
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_tell":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    SendMessageToSource(record, "No message given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    record.record_message = GetPreMessage(parameters[1], false);
                                    Log.Debug(() => "" + record.record_message, 6);

                                    CompleteTargetInformation(record, false, false, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_pm_send":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (record.record_source != AdKatsRecord.Sources.InGame)
                            {
                                SendMessageToSource(record, "You can't start private conversations from outside the game. Use player say.");
                                break;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    SendMessageToSource(record, "No message given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 2:
                                    record.target_name = parameters[0];
                                    Log.Debug(() => "target: " + record.target_name, 6);

                                    record.record_message = GetPreMessage(parameters[1], false);
                                    Log.Debug(() => "" + record.record_message, 6);

                                    CompleteTargetInformation(record, false, false, false, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_pm_reply":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (record.record_source != AdKatsRecord.Sources.InGame)
                            {
                                SendMessageToSource(record, "You can't reply to private conversations from outside the game. Use player say.");
                                break;
                            }

                            if (record.source_player == null || record.source_player.conversationPartner == null)
                            {
                                SendMessageToSource(record, "You are not in a private conversation. Use /" + GetCommandByKey("player_pm_send").command_text + " player message, to start one.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.record_message = GetPreMessage(parameters[0], false);
                                    record.target_name = record.source_player.conversationPartner.player_name;
                                    record.target_player = record.source_player.conversationPartner;
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "admin_pm_send":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.record_message = GetPreMessage(parameters[0], false);
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_dequeue":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Dequeueing Self";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                case 1:
                                    record.target_name = parameters[0];
                                    record.record_message = "Dequeueing Player";
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    CompleteTargetInformation(record, false, false, false);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_blacklistdisperse":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (_serverInfo.ServerType == "OFFICIAL")
                            {
                                SendMessageToSource(record, record.command_type.command_name + " cannot be performed on official servers.");
                                FinalizeRecord(record);
                                return;
                            }

                            if (!_FeedMultiBalancerDisperseList)
                            {
                                SendMessageToSource(record, "Enable 'Feed MULTIBalancer Even Dispersion List' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Autobalancer Dispersion";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistbalance":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_FeedMultiBalancerWhitelist)
                            {
                                SendMessageToSource(record, "Enable 'Feed MULTIBalancer Whitelist' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Autobalancer Whitelist";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_slotreserved":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_FeedServerReservedSlots)
                            {
                                SendMessageToSource(record, "Enable 'Feed Server Reserved Slots' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Reserved Slot";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_slotspectator":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_FeedServerSpectatorList)
                            {
                                SendMessageToSource(record, "Enable 'Feed Server Spectator Slots' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            String defaultReason = "Spectator Slot";

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 3);

                            if (parameters.Length > 0)
                            {
                                String stringDuration = parameters[0].ToLower();
                                Log.Debug(() => "Raw Duration: " + stringDuration, 6);
                                if (stringDuration == "perm")
                                {
                                    //20 years in minutes
                                    record.command_numeric = 10518984;
                                    defaultReason = "Permanent " + defaultReason;
                                }
                                else
                                {
                                    //Default is minutes
                                    Double recordDuration = 0.0;
                                    Double durationMultiplier = 1.0;
                                    if (stringDuration.EndsWith("s"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('s');
                                        durationMultiplier = (1.0 / 60.0);
                                    }
                                    else if (stringDuration.EndsWith("m"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('m');
                                        durationMultiplier = 1.0;
                                    }
                                    else if (stringDuration.EndsWith("h"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('h');
                                        durationMultiplier = 60.0;
                                    }
                                    else if (stringDuration.EndsWith("d"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('d');
                                        durationMultiplier = 1440.0;
                                    }
                                    else if (stringDuration.EndsWith("w"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('w');
                                        durationMultiplier = 10080.0;
                                    }
                                    else if (stringDuration.EndsWith("y"))
                                    {
                                        stringDuration = stringDuration.TrimEnd('y');
                                        durationMultiplier = 525949.0;
                                    }
                                    if (!Double.TryParse(stringDuration, out recordDuration))
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.command_numeric = (int)(recordDuration * durationMultiplier);
                                    if (record.command_numeric <= 0)
                                    {
                                        SendMessageToSource(record, "Invalid duration given, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    defaultReason = FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2) + " " + defaultReason;
                                }
                            }

                            switch (parameters.Length)
                            {
                                case 0:
                                    //No parameters
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    //time
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.target_name = record.source_name;
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 2:
                                    //time
                                    //player
                                    record.target_name = parameters[1];
                                    record.record_message = defaultReason;
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                case 3:
                                    //time
                                    //player
                                    //reason
                                    record.target_name = parameters[1];
                                    Log.Debug(() => "target: " + record.target_name, 6);
                                    record.record_message = GetPreMessage(parameters[2], _RequirePreMessageUse);
                                    if (record.record_message == null)
                                    {
                                        SendMessageToSource(record, "Invalid PreMessage ID, valid PreMessage IDs are 1-" + _PreMessageList.Count);
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    Log.Debug(() => "" + record.record_message, 6);
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistreport_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Report Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Report Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistspambot_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_spamBotExcludeAdminsAndWhitelist)
                            {
                                SendMessageToSource(record, "'Exclude Admins and Whitelist from Spam' must be enabled to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing SpamBot Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing SpamBot Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_blacklistspectator_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Spectator Blacklist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Spectator Blacklist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_blacklistreport_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Report Source Blacklist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Report Source Blacklist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistcommand_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Command Target Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Report Target Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_blacklistautoassist_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Auto-Assist Blacklist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Auto-Assist Blacklist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistaa_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_EnableAdminAssistants)
                            {
                                SendMessageToSource(record, "Enable Admin Assistants to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Admin Assistant Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Admin Assistant Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistping_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_pingEnforcerEnable)
                            {
                                SendMessageToSource(record, "Enable Ping Enforcer to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Ping Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Ping Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelisthackerchecker_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Hacker-Checker Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Hacker-Checker Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_slotspectator_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_FeedServerSpectatorList)
                            {
                                SendMessageToSource(record, "Enable 'Feed Server Spectator Slots' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Spectator Slot";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Spectator Slot";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_slotreserved_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_FeedServerReservedSlots)
                            {
                                SendMessageToSource(record, "Enable 'Feed Server Reserved Slots' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Reserved Slot";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Reserved Slot";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistbalance_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_FeedMultiBalancerWhitelist)
                            {
                                SendMessageToSource(record, "Enable 'Feed MULTIBalancer Whitelist' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Autobalance Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Autobalance Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_blacklistdisperse_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_FeedMultiBalancerDisperseList)
                            {
                                SendMessageToSource(record, "Enable 'Feed MULTIBalancer Even Dispersion List' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Autobalance Dispersion";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Autobalance Dispersion";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistpopulator_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_PopulatorMonitor)
                            {
                                SendMessageToSource(record, "'Monitor Populator Players' must be enabled to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing Populator Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing Populator Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_whitelistteamkill_remove":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (!_FeedTeamKillTrackerWhitelist)
                            {
                                SendMessageToSource(record, "Enable 'Feed TeamKillTracker Whitelist' to use this command.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    if (record.record_source != AdKatsRecord.Sources.InGame)
                                    {
                                        SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    record.record_message = "Removing TeamKillTracker Whitelist";
                                    record.target_name = record.source_name;
                                    CompleteTargetInformation(record, true, true, false);
                                    break;
                                case 1:
                                    record.record_message = "Removing TeamKillTracker Whitelist";
                                    record.target_name = parameters[0];
                                    //Handle based on report ID if possible
                                    if (!HandleRoundReport(record))
                                    {
                                        CompleteTargetInformation(record, false, true, true);
                                    }
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "plugin_restart":
                        {
                            //Remove previous commands awaiting confirmationf
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = "AdKats";
                                    record.record_message = "Restart AdKats";
                                    ConfirmActionWithSource(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "plugin_update":
                        {
                            //Remove previous commands awaiting confirmationf
                            CancelSourcePendingAction(record);

                            record.target_name = "AdKats";
                            record.record_message = "Update AdKats";
                            QueueRecordForProcessing(record);
                        }
                        break;
                    case "server_shutdown":
                        {
                            //Remove previous commands awaiting confirmationf
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.target_name = "Server";
                                    record.record_message = "Shutdown Server";
                                    ConfirmActionWithSource(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "self_battlecry":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            if (record.record_source != AdKatsRecord.Sources.InGame)
                            {
                                SendMessageToSource(record, "You can't use a self-targeted command from outside the game.");
                                FinalizeRecord(record);
                                return;
                            }

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 1);
                            switch (parameters.Length)
                            {
                                case 0:
                                    record.record_message = "";
                                    record.target_name = record.source_name;
                                    if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                    {
                                        SendMessageToSource(record, "Source player not found, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                case 1:
                                    record.record_message = GetPreMessage(parameters[0], false);
                                    if (record.record_message.Length > _battlecryMaxLength)
                                    {
                                        SendMessageToSource(record, "Battlecries cannot be longer than " + _battlecryMaxLength + " characters.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    var messageLower = record.record_message.Trim().ToLowerInvariant();
                                    foreach (String deniedWord in _battlecryDeniedWords)
                                    {
                                        if (!String.IsNullOrEmpty(deniedWord.Trim()) && messageLower.Contains(deniedWord.Trim().ToLowerInvariant()))
                                        {
                                            SendMessageToSource(record, "Your battlecry contains denied words. Talk to an admin if this message is in error.");
                                            FinalizeRecord(record);
                                            return;
                                        }
                                    }
                                    record.target_name = record.source_name;
                                    if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                    {
                                        SendMessageToSource(record, "Source player not found, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "player_battlecry":
                        {
                            //Remove previous commands awaiting confirmation
                            CancelSourcePendingAction(record);

                            //Parse parameters using max param count
                            String[] parameters = ParseParameters(remainingMessage, 2);
                            switch (parameters.Length)
                            {
                                case 0:
                                    SendMessageToSource(record, "No parameters given, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                                case 1:
                                    record.record_message = "";
                                    record.target_name = record.source_name;
                                    if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player))
                                    {
                                        SendMessageToSource(record, "Source player not found, unable to submit.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    QueueRecordForProcessing(record);
                                    break;
                                case 2:
                                    record.target_name = parameters[0];
                                    record.record_message = GetPreMessage(parameters[1], false);
                                    if (record.record_message.Length > _battlecryMaxLength)
                                    {
                                        SendMessageToSource(record, "Battlecries cannot be longer than " + _battlecryMaxLength + " characters.");
                                        FinalizeRecord(record);
                                        return;
                                    }
                                    CompleteTargetInformation(record, false, true, true);
                                    break;
                                default:
                                    SendMessageToSource(record, "Invalid parameters, unable to submit.");
                                    FinalizeRecord(record);
                                    return;
                            }
                        }
                        break;
                    case "command_confirm":
                        Log.Debug(() => "attempting to confirm command", 6);
                        AdKatsRecord recordAttempt = null;
                        _ActionConfirmDic.TryGetValue(record.source_name, out recordAttempt);
                        if (recordAttempt != null)
                        {
                            Log.Debug(() => "command found, calling processing", 6);
                            _ActionConfirmDic.Remove(record.source_name);
                            QueueRecordForProcessing(recordAttempt);
                            FinalizeRecord(record);
                            return;
                        }
                        FinalizeRecord(record);
                        break;
                    case "command_cancel":
                        Log.Debug(() => "attempting to cancel command", 6);
                        if (_ActionConfirmDic.Remove(record.source_name))
                        {
                            SendMessageToSource(record, "Previous command cancelled.");
                        }
                        else if (!_surrenderVoteSucceeded && _surrenderVoteList.Contains(record.source_name))
                        {
                            if (_surrenderVoteList.Remove(record.source_name))
                            {
                                SendMessageToSource(record, "Your vote has been removed!");
                                Int32 requiredVotes = (Int32)((_PlayerDictionary.Count / 2.0) * (_surrenderVoteMinimumPlayerPercentage / 100.0));
                                Int32 voteCount = _surrenderVoteList.Count - _nosurrenderVoteList.Count;
                                OnlineAdminSayMessage(record.GetSourceName() + " removed their surrender vote.");
                                AdminSayMessage((requiredVotes - voteCount) + " votes needed for surrender/scramble. Use @" + GetCommandByKey("self_surrender").command_text + ", @" + GetCommandByKey("self_votenext").command_text + ", or @" + GetCommandByKey("self_nosurrender").command_text + " to vote.");
                                AdminYellMessage((requiredVotes - voteCount) + " votes needed for surrender/scramble");
                            }
                        }
                        FinalizeRecord(record);
                        break;
                    default:
                        Log.Error("Unable to complete record for " + record.command_type.command_key + ", handler not found.");
                        FinalizeRecord(record);
                        return;
                }
            }
            catch (Exception e)
            {
                record.record_exception = HandleException(new AdKatsException("Error occured while completing record information.", e));
                FinalizeRecord(record);
            }
        }

        private AdKatsTeam GetTeamByKey(String teamKey)
        {
            return _teamDictionary.Values.FirstOrDefault(dTeam => dTeam.TeamKey == teamKey);
        }

        public void FinalizeRecord(AdKatsRecord record)
        {
            Log.Debug(() => "Entering FinalizeRecord", 7);
            try
            {
                //Make sure commands are assigned properly
                if (record.command_action == null)
                {
                    if (record.command_type != null)
                    {
                        record.command_action = record.command_type;
                    }
                    else
                    {
                        //Record has no command. Ignore it.
                        return;
                    }
                }
                if (record.external_responseRequested)
                {
                    Hashtable responseHashtable = new Hashtable {
                        {"caller_identity", "AdKats"},
                        {"response_requested", false},
                        {"response_type", "IssueCommand"},
                        {"response_value", CPluginVariable.EncodeStringArray(record.debugMessages.ToArray())}
                    };
                    ExecuteCommand("procon.protected.plugins.call", record.external_responseClass, record.external_responseMethod, "AdKats", JSON.JsonEncode(responseHashtable));
                }
                //Performance testing area
                if (record.source_name == _debugSoldierName)
                {
                    SendMessageToSource(record, "Duration: " + ((int)UtcNow().Subtract(_commandStartTime).TotalMilliseconds) + "ms");
                }
                if (record.record_source == AdKatsRecord.Sources.InGame || record.record_source == AdKatsRecord.Sources.InternalAutomated)
                {
                    Log.Debug(() => "In-Game/Automated " + record.command_action.command_key + " record took " + Math.Round((DateTime.UtcNow - record.record_creationTime).TotalMilliseconds) + "ms to complete actions.", 3);
                }
                //Add event log
                if (String.IsNullOrEmpty(record.target_name))
                {
                    if (record.target_player != null)
                    {
                        record.target_name = record.target_player.player_name;
                    }
                    else
                    {
                        record.target_name = "UnknownTarget";
                    }
                }
                if (String.IsNullOrEmpty(record.source_name))
                {
                    if (record.source_player != null)
                    {
                        record.source_name = record.source_player.player_name;
                    }
                    else
                    {
                        record.source_name = "UnknownSource";
                    }
                }
                String message;
                if (record.record_action_executed)
                {
                    message = record.GetSourceName() + " issued " + record.command_action.command_name + " on " + record.GetTargetNames() + " for " + record.record_message;
                }
                else
                {
                    message = record.GetSourceName() + " FAILED to issue " + record.command_action.command_name + " on " + record.GetTargetNames() + " for " + record.record_message;
                }
                ExecuteCommand("procon.protected.events.write", "Plugins", "PluginAction", message, record.GetSourceName());
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while finalizing record.", e));
            }
            Log.Debug(() => "Exiting FinalizeRecord", 7);
        }

        public void CompleteTargetInformation(AdKatsRecord record, Boolean requireConfirm, Boolean externalFetch, Boolean externalOnlineFetch)
        {
            CompleteTargetInformation(record, true, requireConfirm, externalFetch, externalOnlineFetch);
        }

        public void CompleteTargetInformation(AdKatsRecord record, Boolean includeLeftPlayers, Boolean requireConfirm, Boolean externalFetch, Boolean externalOnlineFetch)
        {
            try
            {
                Boolean confirmNeeded = false;
                //Multiple target case
                if (record.TargetNamesLocal.Any())
                {
                    foreach (string targetName in record.TargetNamesLocal)
                    {
                        //Attempt to get the player object
                        AdKatsPlayer aPlayer;
                        String resultMessage;
                        Boolean curConfirm;
                        if (FetchPlayerFromName(targetName, includeLeftPlayers, externalFetch, externalOnlineFetch, out aPlayer, out curConfirm, out resultMessage))
                        {
                            record.TargetPlayersLocal.Add(aPlayer);
                            if (curConfirm)
                            {
                                SendMessageToSource(record, resultMessage);
                                confirmNeeded = true;
                            }
                        }
                        else
                        {
                            SendMessageToSource(record, resultMessage);
                        }
                    }
                    //Ensure main target player is null
                    record.target_player = null;
                }
                //Single target case
                else
                {
                    //Attempt to get the player object
                    AdKatsPlayer aPlayer;
                    String resultMessage;
                    Boolean curConfirm;
                    if (FetchPlayerFromName(record.target_name, includeLeftPlayers, externalFetch, externalOnlineFetch, out aPlayer, out curConfirm, out resultMessage))
                    {
                        record.target_name = aPlayer.player_name;
                        record.target_player = aPlayer;
                        if (curConfirm)
                        {
                            SendMessageToSource(record, resultMessage);
                            confirmNeeded = true;
                        }
                    }
                    else
                    {
                        SendMessageToSource(record, resultMessage);
                        FinalizeRecord(record);
                        return;
                    }
                }
                if (confirmNeeded)
                {
                    ConfirmActionWithSource(record);
                }
                else
                {
                    QueueRecordForProcessing(record);
                }
            }
            catch (Exception e)
            {
                record.record_exception = HandleException(new AdKatsException("Error while completing target information.", e));
                FinalizeRecord(record);
            }
        }

        public Boolean FetchPlayerFromName(String playerNameInput, Boolean includeLeftPlayers, Boolean externalFetch, Boolean externalOnlineFetch, out AdKatsPlayer aPlayer, out Boolean confirmNeeded, out String resultMessage)
        {
            //Set default return values
            resultMessage = "No valid player found for '" + playerNameInput + "'";
            confirmNeeded = false;
            aPlayer = null;
            try
            {
                if (!IsSoldierNameValid(playerNameInput))
                {
                    resultMessage = "'" + playerNameInput + "' is an invalid player name.";
                    return false;
                }
                //Check for an exact match
                if (_PlayerDictionary.TryGetValue(playerNameInput, out aPlayer))
                {
                    aPlayer.LastUsage = UtcNow();
                    return true;
                }
                if (includeLeftPlayers && _PlayerLeftDictionary.TryGetValue(playerNameInput, out aPlayer))
                {
                    aPlayer.LastUsage = UtcNow();
                    return true;
                }
                //Check online players for substring match
                List<String> currentPlayerNames = _PlayerDictionary.Keys.ToList();
                List<String> leftPlayerNames = _PlayerLeftDictionary.Keys.ToList();
                //Get all subString matches
                List<string> subStringMatches = new List<string>();
                subStringMatches.AddRange(currentPlayerNames.Where(playerName => Regex.Match(playerName, playerNameInput, RegexOptions.IgnoreCase).Success));
                if (subStringMatches.Count == 1)
                {
                    //Only one subString match, call processing without confirmation if able
                    if (_PlayerDictionary.TryGetValue(subStringMatches[0], out aPlayer))
                    {
                        aPlayer.LastUsage = UtcNow();
                        resultMessage = "Player match found for '" + playerNameInput + "'";
                        return true;
                    }
                    Log.Error("Error fetching player for substring match.");
                    resultMessage = "Error fetching player for substring match.";
                    return false;
                }
                if (subStringMatches.Count > 1)
                {
                    //Multiple players matched the query, choose correct one
                    String msg = "'" + playerNameInput + "' matches multiple players: ";
                    bool first = true;
                    String suggestion = null;
                    foreach (String playerName in subStringMatches)
                    {
                        if (first)
                        {
                            msg = msg + playerName;
                            first = false;
                        }
                        else
                        {
                            msg = msg + ", " + playerName;
                        }
                        //Suggest player names that start with the text admins entered over others
                        if (playerName.ToLower().StartsWith(playerNameInput.ToLower()))
                        {
                            suggestion = playerName;
                        }
                    }
                    if (suggestion == null)
                    {
                        //If no player id starts with what admins typed, suggest subString id with lowest Levenshtein distance
                        Int32 bestDistance = Int32.MaxValue;
                        foreach (String playerName in subStringMatches)
                        {
                            Int32 distance = LevenshteinDistance(playerNameInput, playerName);
                            if (distance < bestDistance)
                            {
                                bestDistance = distance;
                                suggestion = playerName;
                            }
                        }
                    }
                    //If the suggestion is still null, something has failed
                    if (suggestion == null)
                    {
                        Log.Error("Name suggestion system failed substring match");
                        resultMessage = "Name suggestion system failed substring match";
                        return false;
                    }

                    //Use suggestion for target
                    if (_PlayerDictionary.TryGetValue(suggestion, out aPlayer))
                    {
                        resultMessage = msg;
                        confirmNeeded = true;
                        aPlayer.LastUsage = UtcNow();
                        return true;
                    }
                    Log.Error("Substring match fetch failed.");
                    resultMessage = "Substring match fetch failed.";
                    return false;
                }
                if (includeLeftPlayers)
                {
                    //There were no players found in the online dictionary. Run a search on the offline dictionary
                    //Get all subString matches
                    List<string> subStringLeftMatches = new List<string>();
                    subStringLeftMatches.AddRange(leftPlayerNames.Where(playerName => Regex.Match(playerName, playerNameInput, RegexOptions.IgnoreCase).Success));
                    if (subStringLeftMatches.Count == 1)
                    {
                        //Only one subString match, call processing without confirmation if able
                        if (_PlayerLeftDictionary.TryGetValue(subStringLeftMatches[0], out aPlayer))
                        {
                            resultMessage = "OFFLINE player match found for '" + playerNameInput + "'";
                            confirmNeeded = true;
                            aPlayer.LastUsage = UtcNow();
                            return true;
                        }
                        Log.Error("Error fetching player for substring match.");
                        resultMessage = "Error fetching player for substring match.";
                        return false;
                    }
                    if (subStringLeftMatches.Count > 1)
                    {
                        //Multiple players matched the query, choose correct one
                        String msg = "'" + playerNameInput + "' matches multiple OFFLINE players: ";
                        bool first = true;
                        String suggestion = null;
                        foreach (String playerName in subStringLeftMatches)
                        {
                            if (first)
                            {
                                msg = msg + playerName;
                                first = false;
                            }
                            else
                            {
                                msg = msg + ", " + playerName;
                            }
                            //Suggest player names that start with the text admins entered over others
                            if (playerName.ToLower().StartsWith(playerNameInput.ToLower()))
                            {
                                suggestion = playerName;
                            }
                        }
                        if (suggestion == null)
                        {
                            //If no player id starts with what admins typed, suggest subString id with lowest Levenshtein distance
                            Int32 bestDistance = Int32.MaxValue;
                            foreach (String playerName in subStringLeftMatches)
                            {
                                Int32 distance = LevenshteinDistance(playerNameInput, playerName);
                                if (distance < bestDistance)
                                {
                                    bestDistance = distance;
                                    suggestion = playerName;
                                }
                            }
                        }
                        //If the suggestion is still null, something has failed
                        if (suggestion == null)
                        {
                            Log.Error("Name suggestion system failed subString match");
                            resultMessage = "Name suggestion system failed subString match";
                            return false;
                        }

                        //Use suggestion for target
                        if (_PlayerLeftDictionary.TryGetValue(suggestion, out aPlayer))
                        {
                            resultMessage = msg;
                            confirmNeeded = true;
                            aPlayer.LastUsage = UtcNow();
                            return true;
                        }
                        Log.Error("Substring match fetch failed.");
                        resultMessage = "Substring match fetch failed.";
                        return false;
                    }
                }
                if (externalFetch)
                {
                    if (playerNameInput.Length < 3)
                    {
                        resultMessage = "No matching online player found, offline search must be at least 3 characters long.";
                        return false;
                    }
                    //No online or left player found, run external fetch over checking for fuzzy match
                    aPlayer = FetchPlayer(false, false, true, null, -1, playerNameInput, null, null);
                    if (aPlayer != null) {
                        resultMessage = "Offline player found.";
                        aPlayer.player_online = false;
                        aPlayer.LiveKills.Clear();
                        aPlayer.player_server = null;
                        confirmNeeded = true;
                        aPlayer.LastUsage = UtcNow();
                        return true;
                    }
                }
                if (externalOnlineFetch)
                {
                    //No online or left player found, run external online player fetch over checking for fuzzy match
                    aPlayer = FetchMatchingExternalOnlinePlayer(playerNameInput);
                    if (aPlayer != null) {
                        resultMessage = "Online player found in '" + aPlayer.player_server.ServerName.Substring(0, 20) + "'.";
                        confirmNeeded = true;
                        aPlayer.LastUsage = UtcNow();
                        return true;
                    }
                }
                //No other option, run fuzzy match
                if (currentPlayerNames.Count > 0)
                {
                    //Player not found in either dictionary, run a fuzzy search using Levenshtein Distance on all players in server
                    String fuzzyMatch = null;
                    Int32 bestFuzzyDistance = Int32.MaxValue;
                    foreach (String playerName in currentPlayerNames)
                    {
                        Int32 distance = LevenshteinDistance(playerNameInput, playerName);
                        if (distance < bestFuzzyDistance)
                        {
                            bestFuzzyDistance = distance;
                            fuzzyMatch = playerName;
                        }
                    }
                    //If the suggestion is still null, something has failed
                    if (fuzzyMatch == null)
                    {
                        Log.Error("Name suggestion system failed fuzzy match");
                        resultMessage = "Name suggestion system failed fuzzy match";
                        return false;
                    }
                    if (_PlayerDictionary.TryGetValue(fuzzyMatch, out aPlayer))
                    {
                        resultMessage = "Fuzzy player match found for '" + playerNameInput + "'";
                        confirmNeeded = true;
                        aPlayer.LastUsage = UtcNow();
                        return true;
                    }
                    Log.Error("Player suggestion found matching player, but it could not be fetched.");
                    resultMessage = "Player suggestion found matching player, but it could not be fetched.";
                    return false;
                }
                if (includeLeftPlayers && leftPlayerNames.Count > 0)
                {
                    //No players in the online dictionary, but there are players in the offline dictionary,
                    //run a fuzzy search using Levenshtein Distance on all players who have left
                    String fuzzyMatch = null;
                    Int32 bestFuzzyDistance = Int32.MaxValue;
                    foreach (String playerName in leftPlayerNames)
                    {
                        Int32 distance = LevenshteinDistance(playerNameInput, playerName);
                        if (distance < bestFuzzyDistance)
                        {
                            bestFuzzyDistance = distance;
                            fuzzyMatch = playerName;
                        }
                    }
                    //If the suggestion is still null, something has failed
                    if (fuzzyMatch == null)
                    {
                        Log.Error("Name suggestion system failed fuzzy match");
                        resultMessage = "Name suggestion system failed fuzzy match";
                        return false;
                    }
                    if (_PlayerLeftDictionary.TryGetValue(fuzzyMatch, out aPlayer))
                    {
                        resultMessage = "Fuzzy player match found for '" + playerNameInput + "'";
                        confirmNeeded = true;
                        aPlayer.LastUsage = UtcNow();
                        return true;
                    }
                    Log.Error("Player suggestion found matching player, but it could not be fetched.");
                    resultMessage = "Player suggestion found matching player, but it could not be fetched.";
                    return false;
                }
                Log.Error("Unable to find a matching player.");
                resultMessage = "Unable to find a matching player.";
                return false;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching player from name.", e));
            }
            return false;
        }

        public void ConfirmActionWithSource(AdKatsRecord record)
        {
            Log.Debug(() => "Entering confirmActionWithSource", 7);
            try
            {
                if (_bypassCommandConfirmation)
                {
                    QueueRecordForProcessing(record);
                    return;
                }
                lock (_ActionConfirmDic)
                {
                    //Cancel any source pending action
                    CancelSourcePendingAction(record);
                    //Send record to attempt list
                    _ActionConfirmDic.Add(record.source_name, record);

                    SendMessageToSource(record, record.command_type.command_name + "->" + record.GetTargetNames() + " for " + record.record_message + "?");
                }
            }
            catch (Exception e)
            {
                record.record_exception = HandleException(new AdKatsException("Error while confirming action with record source.", e));
            }
            Log.Debug(() => "Exiting confirmActionWithSource", 7);
        }

        public void CancelSourcePendingAction(AdKatsRecord record)
        {
            Log.Debug(() => "Entering cancelSourcePendingAction", 7);
            try
            {
                Log.Debug(() => "attempting to cancel command", 6);
                lock (_ActionConfirmDic)
                {
                    if (_ActionConfirmDic.Remove(record.source_name))
                    {
                        SendMessageToSource(record, "Previous command Canceled.");
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = HandleException(new AdKatsException("Error while canceling source pending action.", e));
            }
            Log.Debug(() => "Exiting cancelSourcePendingAction", 7);
        }

        public AdKatsRecord FetchRoundReport(String reportID, Boolean remove)
        {
            AdKatsRecord reportedRecord = null;
            try
            {
                lock (_RoundReports)
                {
                    if (_RoundReports.TryGetValue(reportID, out reportedRecord) && remove)
                    {
                        if (_RoundReports.Remove(reportID))
                        {
                            Log.Debug(() => "Round report [" + reportID + "] removed.", 3);
                            _RoundReportHistory.Add(reportID);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching round report.", e));
            }
            return reportedRecord;
        }

        public Boolean DenyRoundReport(AdKatsRecord record)
        {
            try
            {
                Log.Debug(() => "Attempting to handle based on round report.", 6);
                AdKatsRecord reportedRecord = FetchRoundReport(record.target_name, true);
                if (reportedRecord != null)
                {
                    Log.Debug(() => "Denying round report.", 5);
                    reportedRecord.command_action = GetCommandByKey("player_report_deny");
                    UpdateRecord(reportedRecord);
                    SendMessageToSource(reportedRecord, "Your report [" + reportedRecord.command_numeric + "] has been denied.");
                    OnlineAdminSayMessage("Report [" + reportedRecord.command_numeric + "] has been denied by " + record.GetSourceName() + ".");

                    record.target_name = reportedRecord.source_name;
                    record.target_player = reportedRecord.source_player;
                    QueueRecordForProcessing(record);
                    return true;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while denying round report.", e));
            }
            return false;
        }

        public Boolean IgnoreRoundReport(AdKatsRecord record)
        {
            try
            {
                Log.Debug(() => "Attempting to handle based on round report.", 6);
                AdKatsRecord reportedRecord = FetchRoundReport(record.target_name, true);
                if (reportedRecord != null)
                {
                    Log.Debug(() => "Ignoring round report.", 5);
                    reportedRecord.command_action = GetCommandByKey("player_report_ignore");
                    UpdateRecord(reportedRecord);
                    //Do not inform the player their report was ignored
                    //SendMessageToSource(reportedRecord, "Your report [" + reportedRecord.command_numeric + "] has been ignored.");
                    OnlineAdminSayMessage("Report [" + reportedRecord.command_numeric + "] has been ignored by " + record.GetSourceName() + ".");

                    record.target_name = reportedRecord.source_name;
                    record.target_player = reportedRecord.source_player;
                    QueueRecordForProcessing(record);
                    return true;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while ignoring round report.", e));
            }
            return false;
        }

        public Boolean AcceptRoundReport(AdKatsRecord record)
        {
            try
            {
                Log.Debug(() => "Attempting to handle based on round report.", 6);
                AdKatsRecord reportedRecord = FetchRoundReport(record.target_name, true);
                if (reportedRecord != null)
                {
                    Log.Debug(() => "Accepting round report.", 5);
                    reportedRecord.command_action = GetCommandByKey("player_report_confirm");
                    UpdateRecord(reportedRecord);
                    SendMessageToSource(reportedRecord, "Your report [" + reportedRecord.command_numeric + "] has been accepted. Thank you.");
                    OnlineAdminSayMessage("Report [" + reportedRecord.command_numeric + "] has been accepted by " + record.GetSourceName() + ".");

                    record.target_name = reportedRecord.source_name;
                    record.target_player = reportedRecord.source_player;

                    record.record_action_executed = true;
                    QueueRecordForProcessing(record);
                    return true;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while denying round report.", e));
            }
            return false;
        }

        public Boolean HandleRoundReport(AdKatsRecord record)
        {
            try
            {
                Log.Debug(() => "Attempting to handle based on round report.", 6);
                AdKatsRecord reportedRecord = FetchRoundReport(record.target_name, false);
                if (reportedRecord != null)
                {
                    if (record.source_player != null && !PlayerIsAdmin(record.source_player))
                    {
                        return false;
                    }
                    if ((UtcNow() - reportedRecord.record_time).TotalSeconds < _MinimumReportHandleSeconds)
                    {
                        SendMessageToSource(record, "Report [" + record.target_name + "] cannot be acted on. " + FormatTimeString(TimeSpan.FromSeconds(_MinimumReportHandleSeconds - (UtcNow() - reportedRecord.record_time).TotalSeconds), 2) + " remaining.");
                        return true;
                    }
                    if (_RoundReports.Remove(record.target_name))
                    {
                        Log.Debug(() => "Round report [" + record.target_name + "] removed.", 3);
                        _RoundReportHistory.Add(record.target_name);
                    }
                    if (reportedRecord.isContested)
                    {
                        SendMessageToSource(record, "Report [" + reportedRecord.command_numeric + "] is contested. Please investigate.");
                        if (record.source_player != null)
                        {
                            PlayerYellMessage(record.source_player.player_name, "Report [" + reportedRecord.command_numeric + "] is contested. Please investigate.");
                        }
                        return true;
                    }
                    Log.Debug(() => "Handling round report.", 5);
                    SendMessageToSource(reportedRecord, "Your report [" + reportedRecord.command_numeric + "] has been acted on. Thank you.");
                    OnlineAdminSayMessage("Report [" + reportedRecord.command_numeric + "] has been acted on by " + record.GetSourceName() + ".");
                    reportedRecord.command_action = GetCommandByKey("player_report_confirm");
                    UpdateRecord(reportedRecord);

                    record.target_name = reportedRecord.target_name;
                    record.target_player = reportedRecord.target_player;
                    if (String.IsNullOrEmpty(record.record_message) || record.record_message.Length < _RequiredReasonLength)
                    {
                        record.record_message = reportedRecord.record_message;
                    }
                    QueueRecordForProcessing(record);
                    return true;
                }
                if (_RoundReportHistory.Contains(record.target_name))
                {
                    SendMessageToSource(record, "Report [" + record.target_name + "] has already been acted on.");
                    return true;
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while handling round report.", e);
                HandleException(record.record_exception);
            }
            return false;
        }

        //replaces the message with a pre-message
        public String GetPreMessage(String message, Boolean required)
        {
            Log.Debug(() => "Entering getPreMessage", 7);
            try
            {
                if (!string.IsNullOrEmpty(message))
                {
                    //Attempt to fill the message via pre-message ID
                    Int32 preMessageID = 0;
                    Log.Debug(() => "Raw preMessageID: " + message, 6);
                    Boolean valid = Int32.TryParse(message, out preMessageID);
                    if (valid && (preMessageID > 0) && (preMessageID <= _PreMessageList.Count))
                    {
                        message = _PreMessageList[preMessageID - 1];
                    }
                    else if (required)
                    {
                        return null;
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while getting pre-message.", e));
            }
            Log.Debug(() => "Exiting getPreMessage", 7);
            return message;
        }

        private void QueuePlayerForIPInfoFetch(AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "Entering QueuePlayerForIPInfoFetch", 6);
            try
            {
                Log.Debug(() => "Preparing to queue player for IP info fetch.", 6);
                lock (_IPInfoFetchQueue)
                {
                    if (_IPInfoFetchQueue.Count() > 70) {
                        //There are more players in the queue than can exist in the server, empty the queue
                        //If players require an info fetch, they will be re-queued by player listing
                        _IPInfoFetchQueue.Clear();
                    }
                    if (//Player is already in the queue, don't re-queue them
                        _IPInfoFetchQueue.Any(qPlayer => 
                        aPlayer.player_id == qPlayer.player_id || 
                        aPlayer.player_guid == qPlayer.player_guid) ||
                        //Player is marked as not online, don't re-queue them
                        !aPlayer.player_online ||
                        //Player is not in the online player dictionary, don't re-queue them
                        !_PlayerDictionary.Values.Any(dPlayer =>
                        aPlayer.player_id == dPlayer.player_id ||
                        aPlayer.player_guid == dPlayer.player_guid))
                    {
                        return;
                    }
                    _IPInfoFetchQueue.Enqueue(aPlayer);
                    Log.Debug(() => "Player queued for IP info fetch.", 6);
                    _IPInfoWaitHandle.Set();
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queuing player for IP info fetch.", e));
            }
            Log.Debug(() => "Exiting QueuePlayerForIPInfoFetch", 6);
        }

        public void IPAPICommThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting IP API Comm Thread", 1);
                Thread.CurrentThread.Name = "IPAPIComm";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering IP API Comm Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }
                        //Sleep for 10ms
                        _threadMasterWaitHandle.WaitOne(10);

                        //Handle Inbound player fetches
                        if (_IPInfoFetchQueue.Count > 0)
                        {
                            Queue<AdKatsPlayer> unprocessedPlayers;
                            lock (_IPInfoFetchQueue)
                            {
                                Log.Debug(() => "Inbound players found. Grabbing.", 6);
                                //Grab all items in the queue
                                unprocessedPlayers = new Queue<AdKatsPlayer>(_IPInfoFetchQueue.ToArray());
                                //Clear the queue for next run
                                _IPInfoFetchQueue.Clear();
                            }
                            //Loop through all players in order that they came in
                            while (unprocessedPlayers.Count > 0)
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                Log.Debug(() => "Preparing to fetch IP API info for player", 6);
                                //Dequeue the record
                                AdKatsPlayer aPlayer = unprocessedPlayers.Dequeue();
                                //Run the appropriate action
                                FetchIPLocation(aPlayer);
                            }
                        }
                        else
                        {
                            Log.Debug(() => "No inbound players. Waiting.", 6);
                            //Wait for new actions
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _IPInfoWaitHandle.Reset();
                            _IPInfoWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                            loopStart = UtcNow();
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("IP API comm thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in IP API comm thread. Skipping current loop.", e));
                    }
                }
                Log.Debug(() => "Ending IP API Comm Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in IP API comm thread.", e));
            }
        }

        private void QueuePlayerForBattlelogInfoFetch(AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "Entering QueuePlayerForBattlelogInfoFetch", 6);
            try
            {
                Log.Debug(() => "Preparing to queue player for battlelog info fetch.", 6);
                lock (_BattlelogFetchQueue)
                {
                    _BattlelogFetchQueue.Enqueue(aPlayer);
                    Log.Debug(() => "Player queued for battlelog info fetch.", 6);
                    _BattlelogCommWaitHandle.Set();
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queuing player for battlelog info fetch.", e));
            }
            Log.Debug(() => "Exiting QueuePlayerForBattlelogInfoFetch", 6);
        }

        public void BattlelogCommThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Battlelog Comm Thread", 1);
                Thread.CurrentThread.Name = "BattlelogComm";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering Battlelog Comm Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }
                        //Sleep for 10ms
                        _threadMasterWaitHandle.WaitOne(10);

                        //Handle Inbound player fetches
                        if (_BattlelogFetchQueue.Count > 0) 
                        {
                            AdKatsPlayer aPlayer;

                            lock (_BattlelogFetchQueue)
                            {
                                //Dequeue the record
                                aPlayer = _BattlelogFetchQueue.Dequeue();
                            }

                            Log.Debug(() => "Preparing to fetch battlelog info for player", 6);

                            if (aPlayer.blInfoFetched) {
                                continue;
                            }

                            //Old Tag
                            String oldTag = aPlayer.player_clanTag;
                            //Run the appropriate action
                            if (!FetchPlayerBattlelogInformation(aPlayer)) {
                                //No info found/error, requeue them for fetching
                                Log.Debug(() => "Battlelog info fetch for " + aPlayer.GetVerboseName() + " failed. Requeueing.", 6);
                                Thread.Sleep(TimeSpan.FromSeconds(1.0));
                                QueuePlayerForBattlelogInfoFetch(aPlayer);
                            }

                            Log.Debug(() => "Battlelog info fetched for " + aPlayer.GetVerboseName() + ".", 6);
                            //Update database with clan tag
                            if (!String.IsNullOrEmpty(aPlayer.player_clanTag) && (String.IsNullOrEmpty(oldTag) || aPlayer.player_clanTag != oldTag)) {
                                UpdatePlayer(aPlayer);
                            }
                        }
                        else
                        {
                            Log.Debug(() => "No inbound players. Waiting.", 6);
                            //Wait for new actions
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _BattlelogCommWaitHandle.Reset();
                            _BattlelogCommWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                            loopStart = UtcNow();
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("Battlelog comm thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in Battlelog comm thread. Skipping current loop.", e));
                    }
                }
                Log.Debug(() => "Ending Battlelog Comm Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in battlelog comm thread.", e));
            }
        }

        private void QueueRecordForActionHandling(AdKatsRecord record)
        {
            Log.Debug(() => "Entering queueRecordForActionHandling", 6);
            try
            {
                Log.Debug(() => "Preparing to queue record for action handling", 6);
                lock (_UnprocessedActionQueue)
                {
                    _UnprocessedActionQueue.Enqueue(record);
                    Log.Debug(() => "Record queued for action handling", 6);
                    _ActionHandlingWaitHandle.Set();
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while queuing record for action handling.", e);
                HandleException(record.record_exception);
            }
            Log.Debug(() => "Exiting queueRecordForActionHandling", 6);
        }

        private void ActionHandlingThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Action Thread", 1);
                Thread.CurrentThread.Name = "ActionHandling";
                DateTime loopStart = UtcNow();
                while (true)
                {
                    try
                    {
                        Log.Debug(() => "Entering Action Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }
                        //Sleep for 10ms
                        _threadMasterWaitHandle.WaitOne(10);

                        //Handle Inbound Actions
                        if (_UnprocessedActionQueue.Count > 0)
                        {
                            Queue<AdKatsRecord> unprocessedActions;
                            lock (_UnprocessedActionQueue)
                            {
                                Log.Debug(() => "Inbound actions found. Grabbing.", 6);
                                //Grab all messages in the queue
                                unprocessedActions = new Queue<AdKatsRecord>(_UnprocessedActionQueue.ToArray());
                                //Clear the queue for next run
                                _UnprocessedActionQueue.Clear();
                            }
                            //Loop through all records in order that they came in
                            while (unprocessedActions.Count > 0)
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                Log.Debug(() => "Preparing to Run Actions for record", 6);
                                //Dequeue the record
                                AdKatsRecord record = unprocessedActions.Dequeue();
                                //Run the appropriate action
                                RunAction(record);
                                //If more processing is needed, then perform it
                                //If any errors exist in the record, do not re-queue
                                if (record.record_exception == null)
                                {
                                    QueueRecordForProcessing(record);
                                }
                                else
                                {
                                    Log.Debug(() => "Record has errors, not re-queueing after action.", 3);
                                }
                            }
                        }
                        else
                        {
                            Log.Debug(() => "No inbound actions. Waiting.", 6);
                            //Wait for new actions
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _ActionHandlingWaitHandle.Reset();
                            _ActionHandlingWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                            loopStart = UtcNow();
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("Action Handling thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in Action Handling thread. Skipping current loop.", e));
                    }
                }
                Log.Debug(() => "Ending Action Handling Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in action handling thread.", e));
            }
        }

        private void RunAction(AdKatsRecord record)
        {
            Log.Debug(() => "Entering runAction", 6);
            try
            {
                //Make sure record has an action
                if (record.command_action == null)
                {
                    record.command_action = record.command_type;
                }
                //Automatic player locking
                if (!record.record_action_executed && 
                    record.target_player != null && 
                    record.source_name != record.target_name &&
                    (record.source_player == null || PlayerIsAdmin(record.source_player)) && 
                    _playerLockingAutomaticLock && 
                    !record.target_player.IsLocked())
                {
                    record.target_player.Lock(record.source_name, TimeSpan.FromMinutes(_playerLockingAutomaticDuration));
                }
                //Perform Actions
                switch (record.command_action.command_key)
                {
                    case "player_move":
                        MoveTarget(record);
                        break;
                    case "player_fmove":
                        ForceMoveTarget(record);
                        break;
                    case "self_teamswap":
                        ForceMoveTarget(record);
                        break;
                    case "self_assist":
                    case "self_assist_unconfirmed":
                        AssistWeakTeam(record);
                        break;
                    case "self_kill":
                        ForceKillTarget(record);
                        break;
                    case "player_kill":
                        KillTarget(record);
                        break;
                    case "player_kill_force":
                        ForceKillTarget(record);
                        break;
                    case "player_warn":
                        WarnTarget(record);
                        break;
                    case "player_kill_lowpop":
                        KillTarget(record);
                        break;
                    case "player_kill_repeat":
                        KillTarget(record);
                        break;
                    case "player_kick":
                        KickTarget(record);
                        break;
                    case "player_ban_temp":
                        TempBanTarget(record);
                        break;
                    case "player_ban_perm":
                        PermaBanTarget(record);
                        break;
                    case "player_ban_perm_future":
                        FuturePermaBanTarget(record);
                        break;
                    case "player_unban":
                        UnBanTarget(record);
                        break;
                    case "player_punish":
                        PunishTarget(record);
                        break;
                    case "player_forgive":
                        ForgiveTarget(record);
                        break;
                    case "player_mute":
                        MuteTarget(record);
                        break;
                    case "player_join":
                        JoinTarget(record);
                        break;
                    case "player_pull":
                        PullTarget(record);
                        break;
                    case "player_report":
                        ReportTarget(record);
                        break;
                    case "player_calladmin":
                        CallAdminOnTarget(record);
                        break;
                    case "player_info":
                        SendTargetInfo(record);
                        break;
                    case "player_perks":
                        SendTargetPerks(record);
                        break;
                    case "player_chat":
                        SendTargetChat(record);
                        break;
                    case "player_find":
                        FindTarget(record);
                        break;
                    case "player_lock":
                        LockTarget(record);
                        break;
                    case "player_unlock":
                        UnlockTarget(record);
                        break;
                    case "player_mark":
                        MarkTarget(record);
                        break;
                    case "player_loadout":
                        LoadoutFetchTarget(record);
                        break;
                    case "player_loadout_force":
                        LoadoutForceTarget(record);
                        break;
                    case "server_afk":
                        ManageAFKPlayers(record);
                        break;
                    case "round_restart":
                        RestartLevel(record);
                        break;
                    case "round_next":
                        NextLevel(record);
                        break;
                    case "round_end":
                        EndLevel(record);
                        break;
                    case "server_nuke":
                        NukeTarget(record);
                        break;
                    case "server_countdown":
                        CountdownTarget(record);
                        break;
                    case "server_kickall":
                        KickAllPlayers(record);
                        break;
                    case "server_swapnuke":
                        SwapNukeServer(record);
                        break;
                    case "admin_say":
                        AdminSay(record);
                        break;
                    case "player_say":
                        PlayerSay(record);
                        break;
                    case "admin_yell":
                        AdminYell(record);
                        break;
                    case "player_yell":
                        PlayerYell(record);
                        break;
                    case "admin_tell":
                        AdminTell(record);
                        break;
                    case "player_tell":
                        PlayerTell(record);
                        break;
                    case "player_pm_send":
                        PMSendTarget(record);
                        break;
                    case "player_pm_reply":
                        PMReplyTarget(record);
                        break;
                    case "player_pm_start":
                        PMStartTarget(record);
                        break;
                    case "player_pm_cancel":
                        PMCancelTarget(record);
                        break;
                    case "player_pm_transmit":
                        PMTransmitTarget(record);
                        break;
                    case "admin_pm_send":
                        PMOnlineAdmins(record);
                        break;
                    case "player_dequeue":
                        DequeueTarget(record);
                        break;
                    case "player_blacklistdisperse":
                        BalanceDisperseTarget(record);
                        break;
                    case "player_whitelistbalance":
                        BalanceWhitelistTarget(record);
                        break;
                    case "player_slotreserved":
                        ReservedSlotTarget(record);
                        break;
                    case "player_slotspectator":
                        SpectatorSlotTarget(record);
                        break;
                    case "player_whitelisthackerchecker":
                        HackerCheckerWhitelistTarget(record);
                        break;
                    case "player_whitelistping":
                        PingWhitelistTarget(record);
                        break;
                    case "player_whitelistaa":
                        AAWhitelistTarget(record);
                        break;
                    case "player_whitelistreport":
                        ReportWhitelistTarget(record);
                        break;
                    case "player_whitelistspambot":
                        SpamBotWhitelistTarget(record);
                        break;
                    case "player_whitelistspambot_remove":
                        SpamBotWhitelistRemoveTarget(record);
                        break;
                    case "player_blacklistspectator":
                        SpectatorBlacklistTarget(record);
                        break;
                    case "player_blacklistspectator_remove":
                        SpectatorBlacklistRemoveTarget(record);
                        break;
                    case "player_blacklistreport":
                        ReportSourceBlacklistTarget(record);
                        break;
                    case "player_blacklistreport_remove":
                        ReportSourceBlacklistRemoveTarget(record);
                        break;
                    case "player_whitelistcommand":
                        CommandTargetWhitelistTarget(record);
                        break;
                    case "player_whitelistcommand_remove":
                        CommandTargetWhitelistRemoveTarget(record);
                        break;
                    case "player_blacklistautoassist":
                        AutoAssistBlacklistTarget(record);
                        break;
                    case "player_blacklistautoassist_remove":
                        AutoAssistBlacklistRemoveTarget(record);
                        break;
                    case "player_whitelistreport_remove":
                        ReportWhitelistRemoveTarget(record);
                        break;
                    case "player_whitelistaa_remove":
                        AAWhitelistRemoveTarget(record);
                        break;
                    case "player_whitelistping_remove":
                        PingWhitelistRemoveTarget(record);
                        break;
                    case "player_whitelisthackerchecker_remove":
                        HackerCheckerWhitelistRemoveTarget(record);
                        break;
                    case "player_slotspectator_remove":
                        SpectatorSlotRemoveTarget(record);
                        break;
                    case "player_slotreserved_remove":
                        ReservedSlotRemoveTarget(record);
                        break;
                    case "player_whitelistbalance_remove":
                        BalanceWhitelistRemoveTarget(record);
                        break;
                    case "player_blacklistdisperse_remove":
                        BalanceDisperseRemoveTarget(record);
                        break;
                    case "player_whitelistpopulator":
                        PopulatorWhitelistTarget(record);
                        break;
                    case "player_whitelistpopulator_remove":
                        PopulatorWhitelistRemoveTarget(record);
                        break;
                    case "player_whitelistteamkill":
                        TeamKillTrackerWhitelistTarget(record);
                        break;
                    case "player_whitelistteamkill_remove":
                        TeamKillTrackerWhitelistRemoveTarget(record);
                        break;
                    case "player_log":
                        SendMessageToSource(record, "Log saved for " + record.GetTargetNames());
                        break;
                    case "self_feedback":
                        SendMessageToSource(record, "Feedback saved for the server.");
                        break;
                    case "player_population_success":
                        SendPopulationSuccess(record);
                        break;
                    case "self_rules":
                        SendServerRules(record);
                        break;
                    case "self_surrender":
                        SourceVoteSurrender(record);
                        break;
                    case "self_nosurrender":
                        SourceVoteNoSurrender(record);
                        break;
                    case "self_votenext":
                        SourceVoteSurrender(record);
                        break;
                    case "self_help":
                        SendServerCommands(record);
                        break;
                    case "self_rep":
                        SendTargetRep(record);
                        break;
                    case "player_isadmin":
                        SendTargetIsAdmin(record);
                        break;
                    case "self_uptime":
                        SendUptime(record);
                        break;
                    case "self_admins":
                        SendOnlineAdmins(record);
                        break;
                    case "self_lead":
                        LeadCurrentSquad(record);
                        break;
                    case "self_reportlist":
                        SendRoundReports(record);
                        break;
                    case "plugin_restart":
                        RebootPlugin(record);
                        break;
                    case "plugin_update":
                        UpdatePlugin(record);
                        break;
                    case "server_shutdown":
                        ShutdownServer(record);
                        break;
                    case "adkats_exception":
                        record.record_action_executed = true;
                        break;
                    case "self_battlecry":
                        UpdatePlayerBattlecry(record);
                        break;
                    case "player_battlecry":
                        UpdatePlayerBattlecry(record);
                        break;
                    case "player_changename":
                    case "player_changeip":
                    case "admin_accept":
                    case "admin_deny":
                    case "admin_ignore":
                    case "self_contest":
                    case "banenforcer_enforce":
                    case "player_repboost":
                    case "server_map_detriment":
                    case "server_map_benefit":
                        record.record_action_executed = true;
                        //Don't do anything here
                        break;
                    default:
                        record.record_action_executed = true;
                        SendMessageToSource(record, "Command not recognized when running " + record.command_action.command_key + " action.");
                        record.record_exception = HandleException(new AdKatsException("Command " + record.command_action + " not found in runAction. Record ID " + record.record_id));
                        FinalizeRecord(record);
                        break;
                }
                Log.Debug(() => record.command_type.command_key + " last used " + FormatTimeString(UtcNow() - _commandUsageTimes[record.command_type.command_key], 10) + " ago.", 3);
                _commandUsageTimes[record.command_type.command_key] = UtcNow();
            }
            catch (Exception e)
            {
                record.record_exception = HandleException(new AdKatsException("Error while choosing action for record.", e));
            }
            Log.Debug(() => "Exiting runAction", 6);
        }

        public void MoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering moveTarget", 6);
            try
            {
                record.record_action_executed = true;
                if (_gameVersion != GameVersion.BF3 && !record.isAliveChecked)
                {
                    if (!_ActOnIsAliveDictionary.ContainsKey(record.target_player.player_name))
                    {
                        lock (_ActOnIsAliveDictionary)
                        {
                            _ActOnIsAliveDictionary.Add(record.target_player.player_name, record);
                        }
                    }
                    ExecuteCommand("procon.protected.send", "player.isAlive", record.target_name);
                    return;
                }

                QueuePlayerForMove(record.target_player.frostbitePlayerInfo);
                PlayerSayMessage(record.target_name, "On your next death you will be moved to the opposing team.");
                SendMessageToSource(record, record.GetTargetNames() + " will be sent to TeamSwap on their next death.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for move record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting moveTarget", 6);
        }

        public void ForceMoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering forceMoveTarget", 6);
            String message = null;
            try
            {
                record.record_action_executed = true;
                if (record.command_type == GetCommandByKey("self_teamswap"))
                {
                    if ((record.source_player != null && HasAccess(record.source_player, GetCommandByKey("self_teamswap"))) || ((_TeamSwapTicketWindowHigh >= _highestTicketCount) && (_TeamSwapTicketWindowLow <= _lowestTicketCount)))
                    {
                        message = "Calling Teamswap on self";
                        Log.Debug(() => message, 6);
                        QueuePlayerForForceMove(record.target_player.frostbitePlayerInfo);
                    }
                    else
                    {
                        message = "Player unable to TeamSwap";
                        Log.Debug(() => message, 6);
                        SendMessageToSource(record, "You cannot TeamSwap at this time. Game outside ticket window [" + _TeamSwapTicketWindowLow + ", " + _TeamSwapTicketWindowHigh + "].");
                    }
                }
                else
                {
                    message = "TeamSwap called on " + record.GetTargetNames();
                    Log.Debug(() => "Calling Teamswap on target", 6);
                    SendMessageToSource(record, "" + record.GetTargetNames() + " sent to TeamSwap.");
                    QueuePlayerForForceMove(record.target_player.frostbitePlayerInfo);
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for force-move/teamswap record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting forceMoveTarget", 6);
        }

        public void AssistWeakTeam(AdKatsRecord record)
        {
            Log.Debug(() => "Entering AssistLosingTeam", 6);
            try
            {
                record.record_action_executed = true;
                //Team Info Check
                AdKatsTeam team1, team2;
                if (!GetTeamByID(1, out team1))
                {
                    if (_roundState == RoundState.Playing)
                    {
                        Log.Error("Teams not loaded when they should be.");
                    }
                    return;
                }
                if (!GetTeamByID(2, out team2))
                {
                    if (_roundState == RoundState.Playing)
                    {
                        Log.Error("Teams not loaded when they should be.");
                    }
                    return;
                }
                AdKatsTeam winningTeam, losingTeam;
                if (team1.TeamTicketCount > team2.TeamTicketCount)
                {
                    winningTeam = team1;
                    losingTeam = team2;
                }
                else
                {
                    winningTeam = team2;
                    losingTeam = team1;
                }
                AdKatsTeam friendlyTeam, enemyTeam;
                if (record.target_player.frostbitePlayerInfo.TeamID == team1.TeamID)
                {
                    friendlyTeam = team1;
                    enemyTeam = team2;
                }
                else if (record.target_player.frostbitePlayerInfo.TeamID == team2.TeamID)
                {
                    friendlyTeam = team2;
                    enemyTeam = team1;
                }
                else
                {
                    SendMessageToSource(record, "Invalid teams when attempting to assist.");
                    record.record_message += " [Rejected]";
                    return;
                }
                if (friendlyTeam.TeamID == losingTeam.TeamID && !_UseTopPlayerMonitor)
                {
                    SendMessageToSource(record, "Player already on losing team, rejecting switch attempt.");
                    record.record_message += " [Rejected]";
                    return;
                }
                if (record.source_name == record.target_name)
                {
                    _roundAssists[record.target_player.player_name] = record;
                }
                QueuePlayerForForceMove(record.target_player.frostbitePlayerInfo);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for assist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting AssistLosingTeam", 6);
        }

        public void KillTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering killTarget", 6);
            String message = null;
            try
            {
                record.record_action_executed = true;
                if (record.source_name != record.target_name)
                {
                    switch (_gameVersion)
                    {
                        case GameVersion.BF3:
                            if (record.command_type.command_key == "player_punish")
                            {
                                if (record.source_name == "AutoAdmin" || record.source_name == "ProconAdmin")
                                {
                                    AdminSayMessage("Punishing " + record.GetTargetNames() + " for " + record.record_message);
                                }
                                else
                                {
                                    AdminSayMessage(record.GetTargetNames() + " PUNISHED by " + ((_ShowAdminNameInAnnouncement || record.source_name == "AutoAdmin") ? (record.GetSourceName()) : ("admin")) + " for " + record.record_message);
                                }
                            }
                            int seconds = (int)UtcNow().Subtract(record.target_player.lastDeath).TotalSeconds;
                            Log.Debug(() => "Killing player. Player last died " + seconds + " seconds ago.", 3);
                            if (seconds < 6 && record.command_action.command_key != "player_kill_repeat")
                            {
                                Log.Debug(() => "Queueing player for kill on spawn. (" + seconds + ")&(" + record.command_action + ")", 3);
                                if (!_ActOnSpawnDictionary.ContainsKey(record.target_player.player_name))
                                {
                                    lock (_ActOnSpawnDictionary)
                                    {
                                        record.command_action = GetCommandByKey("player_kill_repeat");
                                        _ActOnSpawnDictionary.Add(record.target_player.player_name, record);
                                    }
                                }
                            }
                            break;
                        case GameVersion.BF4:
                        case GameVersion.BFHL:
                            if (!record.isAliveChecked)
                            {
                                if (record.command_type.command_key == "player_punish")
                                {
                                    if (record.source_name == "AutoAdmin" || record.source_name == "ProconAdmin")
                                    {
                                        AdminSayMessage("Punishing " + record.GetTargetNames() + " for " + record.record_message);
                                    }
                                    else
                                    {
                                        AdminSayMessage(record.GetTargetNames() + " PUNISHED by " + ((_ShowAdminNameInAnnouncement || record.source_name == "AutoAdmin") ? (record.GetSourceName()) : ("admin")) + " for " + record.record_message);
                                    }
                                }
                                if (!_ActOnIsAliveDictionary.ContainsKey(record.target_player.player_name))
                                {
                                    lock (_ActOnIsAliveDictionary)
                                    {
                                        _ActOnIsAliveDictionary.Add(record.target_player.player_name, record);
                                    }
                                }
                                ExecuteCommand("procon.protected.send", "player.isAlive", record.target_name);
                                return;
                            }
                            break;
                        default:
                            Log.Error("Invalid game version in killtarget");
                            return;
                    }
                }

                //Perform actions
                if (String.IsNullOrEmpty(record.target_player.player_name))
                {
                    Log.Error("playername null in 5437");
                }
                else
                {
                    ExecuteCommand("procon.protected.send", "admin.killPlayer", record.target_player.player_name);
                    if (record.source_name != record.target_name || record.command_type.command_key == "player_punish")
                    {
                        PlayerTellMessage(record.target_name, "Killed by " + (record.source_name == "AutoAdmin" ? "AutoAdmin" : "admin") + " for " + record.record_message);
                        SendMessageToSource(record, "You KILLED " + record.GetTargetNames() + " for " + record.record_message);
                    }
                    else
                    {
                        PlayerTellMessage(record.target_name, "You killed yourself");
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for kill record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting killTarget", 6);
        }

        public void ForceKillTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ForceKillTarget", 6);
            String message = null;
            try
            {
                record.record_action_executed = true;
                //Perform actions
                if (String.IsNullOrEmpty(record.target_player.player_name))
                {
                    Log.Error("playername null in 14491");
                }
                else
                {
                    ExecuteCommand("procon.protected.send", "admin.killPlayer", record.target_player.player_name);
                    if (record.source_name != record.target_name)
                    {
                        PlayerTellMessage(record.target_name, "Killed by " + (record.source_name == "AutoAdmin" ? "AutoAdmin" : "admin") + " for " + record.record_message);
                        SendMessageToSource(record, "You KILLED " + record.GetTargetNames() + " for " + record.record_message);
                    }
                    else
                    {
                        PlayerTellMessage(record.target_name, "You killed yourself");
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for kill record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ForceKillTarget", 6);
        }

        public void WarnTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering WarnTarget", 6);
            String message = null;
            try
            {
                record.record_action_executed = true;
                //Perform actions
                if (String.IsNullOrEmpty(record.target_player.player_name))
                {
                    Log.Error("playername null in 14526");
                }
                else
                {
                    SendMessageToSource(record, "You WARNED " + record.GetTargetNames() + " for " + record.record_message);
                    AdminSayMessage(record.GetTargetNames() + " WARNED by " + ((_ShowAdminNameInAnnouncement || record.source_name == "AutoAdmin") ? (record.GetSourceName()) : ("admin")) + " for " + record.record_message);
                    PlayerTellMessage(record.target_name, "Warned by admin for " + record.record_message, true, 3);
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for warn record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting WarnTarget", 6);
        }

        public void DequeueTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering DequeueTarget", 6);
            try
            {
                record.record_action_executed = true;
                if (record.target_player != null)
                {
                    DequeuePlayer(record.target_player);
                    PlayerSayMessage(record.target_name, "All queued actions canceled.");
                    SendMessageToSource(record, "All queued actions for " + record.GetTargetNames() + " canceled.");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for dequeue record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting DequeueTarget", 6);
        }

        public void DequeuePlayer(AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "Entering DequeuePlayer", 6);
            try
            {
                //Handle spawn action
                if (_ActOnSpawnDictionary.ContainsKey(aPlayer.player_name))
                {
                    _ActOnSpawnDictionary.Remove(aPlayer.player_name);
                }
                //Handle teamswap action
                lock (_Team1MoveQueue)
                {
                    CPlayerInfo info = _Team1MoveQueue.FirstOrDefault(playerInfo => playerInfo.SoldierName == aPlayer.player_name);
                    if (info != null)
                    {
                        _Team1MoveQueue = new Queue<CPlayerInfo>(_Team1MoveQueue.Where(p => p != info));
                    }
                }
                lock (_Team2MoveQueue)
                {
                    CPlayerInfo info = _Team2MoveQueue.FirstOrDefault(playerInfo => playerInfo.SoldierName == aPlayer.player_name);
                    if (info != null)
                    {
                        _Team2MoveQueue = new Queue<CPlayerInfo>(_Team2MoveQueue.Where(p => p != info));
                    }
                }
                lock (_TeamswapForceMoveQueue)
                {
                    CPlayerInfo info = _TeamswapForceMoveQueue.FirstOrDefault(playerInfo => playerInfo.SoldierName == aPlayer.player_name);
                    if (info != null)
                    {
                        _TeamswapForceMoveQueue = new Queue<CPlayerInfo>(_TeamswapForceMoveQueue.Where(p => p != info));
                    }
                }
                lock (_TeamswapOnDeathCheckingQueue)
                {
                    CPlayerInfo info = _TeamswapOnDeathCheckingQueue.FirstOrDefault(playerInfo => playerInfo.SoldierName == aPlayer.player_name);
                    if (info != null)
                    {
                        _TeamswapOnDeathCheckingQueue = new Queue<CPlayerInfo>(_TeamswapOnDeathCheckingQueue.Where(p => p != info));
                    }
                }
                if (_TeamswapOnDeathMoveDic.ContainsKey(aPlayer.player_name))
                {
                    _TeamswapOnDeathMoveDic.Remove(aPlayer.player_name);
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while dequeuing player.", e));
            }
            Log.Debug(() => "Exiting DequeuePlayer", 6);
        }

        public void KickTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering kickTarget", 6);
            try
            {
                record.record_action_executed = true;
                String kickReason = GenerateKickReason(record);
                //Perform Actions
                Log.Debug(() => "Kick '" + kickReason + "'", 3);
                if (String.IsNullOrEmpty(record.target_player.player_name) || String.IsNullOrEmpty(kickReason))
                {
                    Log.Error("Item null in 5464");
                }
                else
                {
                    ExecuteCommand("procon.protected.send", "admin.kickPlayer", record.target_player.player_name, kickReason);
                    if (record.target_name != record.source_name && record.source_name != "AFKManager" && record.source_name != "PingEnforcer" && record.source_name != "SpectatorManager")
                    {
                        AdminSayMessage(record.GetTargetNames() + " was KICKED by " + ((_ShowAdminNameInAnnouncement || record.source_name == "AutoAdmin") ? (record.GetSourceName()) : ("admin")) + " for " + record.record_message);
                    }
                    if (record.target_player.frostbitePlayerInfo != null)
                    {
                        SendMessageToSource(record, "You KICKED " + record.GetTargetNames() + " from " + GetPlayerTeamName(record.target_player) + " for " + record.record_message);
                    }
                    else
                    {
                        SendMessageToSource(record, "You KICKED " + record.GetTargetNames() + " for " + record.record_message);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for kick record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting kickTarget", 6);
        }

        public void TempBanTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering tempBanTarget", 6);
            try
            {
                record.record_action_executed = true;
                //Subtract 1 second for visual effect
                Int32 seconds = (record.command_numeric * 60) - 1;

                //Perform Actions
                //Only post to ban enforcer if there are no exceptions
                if (_UseBanEnforcer && record.record_exception == null)
                {
                    //Update the ban enforcement depending on available information
                    Boolean nameAvailable = !String.IsNullOrEmpty(record.target_player.player_name);
                    Boolean guidAvailable = !String.IsNullOrEmpty(record.target_player.player_guid);
                    Boolean ipAvailable = !String.IsNullOrEmpty(record.target_player.player_ip);

                    //Create the ban
                    AdKatsBan aBan = new AdKatsBan
                    {
                        ban_record = record,
                        ban_enforceName = nameAvailable && (_DefaultEnforceName || (!guidAvailable && !ipAvailable)),
                        ban_enforceGUID = guidAvailable && (_DefaultEnforceGUID || (!nameAvailable && !ipAvailable)),
                        ban_enforceIP = ipAvailable && (_DefaultEnforceIP || (!nameAvailable && !guidAvailable))
                    };

                    //Queue the ban for upload
                    QueueBanForProcessing(aBan);
                }
                else
                {
                    if (record.record_exception != null)
                    {
                        HandleException(new AdKatsException("Defaulting to procon banlist usage since exceptions existed in record"));
                    }
                    //Trim the ban message if necessary
                    String banMessage = record.record_message + " [" + record.source_name + "]";
                    Int32 cutLength = banMessage.Length - 80;
                    if (cutLength > 0)
                    {
                        banMessage = banMessage.Substring(0, banMessage.Length - cutLength);
                    }
                    Log.Debug(() => "Ban '" + banMessage + "'", 3);
                    if (!String.IsNullOrEmpty(record.target_player.player_guid))
                    {
                        ExecuteCommand("procon.protected.send", "banList.add", "guid", record.target_player.player_guid, "seconds", seconds + "", banMessage);
                        ExecuteCommand("procon.protected.send", "banList.save");
                        ExecuteCommand("procon.protected.send", "banList.list");
                    }
                    else if (!String.IsNullOrEmpty(record.target_player.player_ip))
                    {
                        ExecuteCommand("procon.protected.send", "banList.add", "ip", record.target_player.player_ip, "seconds", seconds + "", banMessage);
                        ExecuteCommand("procon.protected.send", "banList.save");
                        ExecuteCommand("procon.protected.send", "banList.list");
                    }
                    else if (!String.IsNullOrEmpty(record.target_player.player_name))
                    {
                        ExecuteCommand("procon.protected.send", "banList.add", "id", record.target_player.player_name, "seconds", seconds + "", banMessage);
                        ExecuteCommand("procon.protected.send", "banList.save");
                        ExecuteCommand("procon.protected.send", "banList.list");
                    }
                    else
                    {
                        Log.Error("Player has no information to ban with.");
                        SendMessageToSource(record, "ERROR");
                    }
                }
                if (record.target_name != record.source_name)
                {
                    AdminSayMessage(record.GetTargetNames() + " was BANNED by " + ((_ShowAdminNameInAnnouncement || record.source_name == "AutoAdmin") ? (record.GetSourceName()) : ("admin")) + " for " + record.record_message);
                }
                SendMessageToSource(record, "You TEMP BANNED " + record.GetTargetNames() + " for " + FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 3));
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for TempBan record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting tempBanTarget", 6);
        }

        public void PermaBanTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering permaBanTarget", 6);
            try
            {
                record.record_action_executed = true;
                //Perform Actions
                //Only post to ban enforcer if there are no exceptions
                if (_UseBanEnforcer && record.record_exception == null)
                {
                    //Update the ban enforcement depending on available information
                    Boolean nameAvailable = !String.IsNullOrEmpty(record.target_player.player_name);
                    Boolean guidAvailable = !String.IsNullOrEmpty(record.target_player.player_guid);
                    Boolean ipAvailable = !String.IsNullOrEmpty(record.target_player.player_ip);

                    //Create the ban
                    AdKatsBan aBan = new AdKatsBan
                    {
                        ban_record = record,
                        ban_enforceName = nameAvailable && (_DefaultEnforceName || (!guidAvailable && !ipAvailable)),
                        ban_enforceGUID = guidAvailable && (_DefaultEnforceGUID || (!nameAvailable && !ipAvailable)),
                        ban_enforceIP = ipAvailable && (_DefaultEnforceIP || (!nameAvailable && !guidAvailable))
                    };

                    //Queue the ban for upload
                    QueueBanForProcessing(aBan);
                }
                else
                {
                    if (record.record_exception != null)
                    {
                        HandleException(new AdKatsException("Defaulting to procon banlist usage since exceptions existed in record"));
                    }
                    //Trim the ban message if necessary
                    String banMessage = record.record_message + " [" + record.source_name + "]";
                    Int32 cutLength = banMessage.Length - 80;
                    if (cutLength > 0)
                    {
                        banMessage = banMessage.Substring(0, banMessage.Length - cutLength);
                    }
                    Log.Debug(() => "Ban '" + banMessage + "'", 3);
                    if (!String.IsNullOrEmpty(record.target_player.player_guid))
                    {
                        ExecuteCommand("procon.protected.send", "banList.add", "guid", record.target_player.player_guid, "perm", banMessage);
                        ExecuteCommand("procon.protected.send", "banList.save");
                        ExecuteCommand("procon.protected.send", "banList.list");
                    }
                    else if (!String.IsNullOrEmpty(record.target_player.player_ip))
                    {
                        ExecuteCommand("procon.protected.send", "banList.add", "ip", record.target_player.player_ip, "perm", banMessage);
                        ExecuteCommand("procon.protected.send", "banList.save");
                        ExecuteCommand("procon.protected.send", "banList.list");
                    }
                    else if (!String.IsNullOrEmpty(record.target_player.player_name))
                    {
                        ExecuteCommand("procon.protected.send", "banList.add", "id", record.target_player.player_name, "perm", banMessage);
                        ExecuteCommand("procon.protected.send", "banList.save");
                        ExecuteCommand("procon.protected.send", "banList.list");
                    }
                    else
                    {
                        Log.Error("Player has no information to ban with.");
                        SendMessageToSource(record, "ERROR");
                    }
                }
                if (record.target_name != record.source_name)
                {
                    AdminSayMessage(record.GetTargetNames() + " was BANNED by " + ((_ShowAdminNameInAnnouncement || record.source_name == "AutoAdmin") ? (record.GetSourceName()) : ("admin")) + " for " + record.record_message);
                }
                SendMessageToSource(record, "You PERMA BANNED " + record.GetTargetNames());
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for PermaBan record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting permaBanTarget", 6);
        }

        public void FuturePermaBanTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering permaBanTarget", 6);
            try
            {
                record.record_action_executed = true;
                if (_UseBanEnforcer && record.record_exception == null)
                {
                    Boolean nameAvailable = !String.IsNullOrEmpty(record.target_player.player_name);
                    Boolean guidAvailable = !String.IsNullOrEmpty(record.target_player.player_guid);
                    Boolean ipAvailable = !String.IsNullOrEmpty(record.target_player.player_ip);
                    AdKatsBan aBan = new AdKatsBan
                    {
                        ban_record = record,
                        ban_enforceName = nameAvailable && (_DefaultEnforceName || (!guidAvailable && !ipAvailable)),
                        ban_enforceGUID = guidAvailable && (_DefaultEnforceGUID || (!nameAvailable && !ipAvailable)),
                        ban_enforceIP = ipAvailable && (_DefaultEnforceIP || (!nameAvailable && !guidAvailable))
                    };
                    QueueBanForProcessing(aBan);
                    DateTime endTime = record.record_time + TimeSpan.FromMinutes(record.command_numeric);
                    SendMessageToSource(record, "You FUTURE BANNED " + record.GetTargetNames() + ". Their ban will activate at " + endTime + " UTC.");
                }
                else
                {
                    SendMessageToSource(record, "Future ban cannot be posted.");
                    FinalizeRecord(record);
                    return;
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for PermaBan record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting permaBanTarget", 6);
        }

        public void UnBanTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering UnBanTarget", 6);
            try
            {
                record.record_action_executed = true;
                //Cancel call if not using ban enforcer
                if (!_UseBanEnforcer || !_UseBanEnforcerPreviousState)
                {
                    Log.Error("Attempted to issue unban when ban enforcer is disabled.");
                    return;
                }
                if (record.target_player == null)
                {
                    Log.Error("Player was null when attempting to unban.");
                    FinalizeRecord(record);
                    return;
                }
                List<AdKatsBan> banList = FetchPlayerBans(record.target_player);
                if (banList.Count == 0)
                {
                    FinalizeRecord(record);
                    return;
                }
                foreach (AdKatsBan aBan in banList)
                {
                    aBan.ban_status = "Disabled";
                    UpdateBanStatus(aBan);
                    if (aBan.ban_record.command_action.command_key == "player_ban_perm" || aBan.ban_record.command_action.command_key == "player_ban_perm_future")
                    {
                        aBan.ban_record.command_action = GetCommandByKey("player_ban_perm_old");
                    }
                    else if (aBan.ban_record.command_action.command_key == "player_ban_temp")
                    {
                        aBan.ban_record.command_action = GetCommandByKey("player_ban_temp_old");
                    }
                    UpdateRecord(aBan.ban_record);

                    //Submit ban removal to metabans
                    if (_useMetabans && !String.IsNullOrEmpty(_metabansUsername) && !String.IsNullOrEmpty(_metabansAPIKey))
                    {
                        SubmitToMetabans(aBan, AssessmentTypes.none);
                    }
                }
                SendMessageToSource(record, record.GetTargetNames() + " is now unbanned.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for UnBan record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting UnBanTarget", 6);
        }

        public void EnforceBan(AdKatsBan aBan, Boolean verbose)
        {
            Log.Debug(() => "Entering enforceBan", 6);
            try
            {
                //Create the total kick message
                String generatedBanReason = GenerateBanReason(aBan);
                Log.Debug(() => "Ban Enforce '" + generatedBanReason + "'", 3);

                //Perform Actions
                ExecuteCommand("procon.protected.send", "admin.kickPlayer", aBan.ban_record.target_player.player_name, generatedBanReason);
                if (_PlayerDictionary.ContainsKey(aBan.ban_record.target_player.player_name) && aBan.ban_startTime < UtcNow())
                {
                    //Inform the server of the enforced ban
                    if (verbose)
                    {
                        String banDurationString;
                        //If ban time > 1000 days just say perm
                        TimeSpan remainingTime = GetRemainingBanTime(aBan);
                        TimeSpan totalTime = aBan.ban_endTime.Subtract(aBan.ban_startTime);
                        if (remainingTime.TotalDays > 500.0)
                        {
                            banDurationString = "permanent";
                        }
                        else
                        {
                            banDurationString = FormatTimeString(totalTime, 2) + " (" + FormatTimeString(remainingTime, 2) + ")";
                        }
                        AdminSayMessage("Enforcing " + banDurationString + " ban on " + aBan.ban_record.GetTargetNames() + " for " + aBan.ban_record.record_message);
                    }
                }
            }
            catch (Exception e)
            {
                aBan.ban_exception = new AdKatsException("Error while enforcing ban.", e);
                HandleException(aBan.ban_exception);
            }
            Log.Debug(() => "Exiting enforceBan", 6);
        }

        public void PunishTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PunishTarget", 6);
            try
            {
                record.record_action_executed = true;
                //If the record has any exceptions, skip everything else and just kill the player
                if (record.record_exception == null)
                {
                    //Get number of points the player from server
                    Int32 points = FetchPoints(record.target_player, false, true);
                    Log.Debug(() => record.GetTargetNames() + " has " + points + " points.", 5);
                    //Get the proper action to take for player punishment
                    String action = "noaction";
                    String skippedAction = null;
                    if (points > (_PunishmentHierarchy.Length - 1))
                    {
                        action = _PunishmentHierarchy[_PunishmentHierarchy.Length - 1];
                    }
                    else if (points > 1)
                    {
                        action = _PunishmentHierarchy[points - 1];
                        if (record.isIRO)
                        {
                            skippedAction = _PunishmentHierarchy[points - 2];
                        }
                    }
                    else
                    {
                        action = _PunishmentHierarchy[0];
                    }

                    //Handle the case where and IRO punish skips higher level punishment for a lower one, use the higher one
                    if (skippedAction != null && _PunishmentSeverityIndex.IndexOf(skippedAction) > _PunishmentSeverityIndex.IndexOf(action))
                    {
                        action = skippedAction;
                    }
                    if (_isTestingAuthorized && 
                        record.target_player.player_reputation > 15 &&
                        record.source_name == "AutoAdmin")
                    {
                        action = "repwarn";
                    }

                    //Set additional message
                    String pointMessage = " [" + ((record.isIRO) ? ("IRO ") : ("")) + points + "pts]";
                    if (!record.record_message.Contains(pointMessage))
                    {
                        record.record_message += pointMessage;
                    }

                    Boolean isLowPop = _OnlyKillOnLowPop && (_PlayerDictionary.Count < _highPopulationPlayerCount);
                    Boolean iroOverride = record.isIRO && _IROOverridesLowPop;

                    Log.Debug(() => "Server low population: " + isLowPop + " (" + _PlayerDictionary.Count + " <? " + _highPopulationPlayerCount + ") | Override: " + iroOverride, 5);

                    //Call correct action
                    if (action == "repwarn")
                    {
                        record.command_action = GetCommandByKey("player_warn");
                        WarnTarget(record);
                        _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(1));
                        PlayerTellMessage(record.target_name, "Your reputation protected you from a punish, but has been reduced. Inform an admin!", true, 3);
                    }
                    else if (action == "warn")
                    {
                        record.command_action = GetCommandByKey("player_warn");
                        WarnTarget(record);
                    }
                    else if ((action == "kill" || (isLowPop && !iroOverride)) && !action.Equals("ban"))
                    {
                        record.command_action = (isLowPop) ? (GetCommandByKey("player_kill_lowpop")) : (GetCommandByKey("player_kill"));
                        if (_subscribedClients.Any(client => client.ClientName == "AdKatsLRT" && client.SubscriptionEnabled))
                        {
                            ExecuteCommand("procon.protected.plugins.call", "AdKatsLRT", "CallLoadoutCheckOnPlayer", "AdKats", JSON.JsonEncode(new Hashtable {
                                {"caller_identity", "AdKats"},
                                {"response_requested", false},
                                {"player_name", record.target_player.player_name},
                                {"loadoutCheck_reason", "punished"}
                            }));
                        }
                        KillTarget(record);
                    }
                    else if (action == "kick")
                    {
                        record.command_action = GetCommandByKey("player_kick");
                        KickTarget(record);
                    }
                    else if (action == "tban60")
                    {
                        record.command_numeric = 60;
                        record.command_action = GetCommandByKey("player_ban_temp");
                        TempBanTarget(record);
                    }
                    else if (action == "tban120")
                    {
                        record.command_numeric = 120;
                        record.command_action = GetCommandByKey("player_ban_temp");
                        TempBanTarget(record);
                    }
                    else if (action == "tbanday")
                    {
                        record.command_numeric = 1440;
                        record.command_action = GetCommandByKey("player_ban_temp");
                        TempBanTarget(record);
                    }
                    else if (action == "tban2days")
                    {
                        record.command_numeric = 2880;
                        record.command_action = GetCommandByKey("player_ban_temp");
                        TempBanTarget(record);
                    }
                    else if (action == "tban3days")
                    {
                        record.command_numeric = 4320;
                        record.command_action = GetCommandByKey("player_ban_temp");
                        TempBanTarget(record);
                    }
                    else if (action == "tbanweek")
                    {
                        record.command_numeric = 10080;
                        record.command_action = GetCommandByKey("player_ban_temp");
                        TempBanTarget(record);
                    }
                    else if (action == "tban2weeks")
                    {
                        record.command_numeric = 20160;
                        record.command_action = GetCommandByKey("player_ban_temp");
                        TempBanTarget(record);
                    }
                    else if (action == "tbanmonth")
                    {
                        record.command_numeric = 43200;
                        record.command_action = GetCommandByKey("player_ban_temp");
                        TempBanTarget(record);
                    }
                    else if (action == "ban")
                    {
                        record.command_action = GetCommandByKey("player_ban_perm");
                        PermaBanTarget(record);
                    }
                    else
                    {
                        record.command_action = GetCommandByKey("player_kill");
                        if (_subscribedClients.Any(client => client.ClientName == "AdKatsLRT" && client.SubscriptionEnabled) &&
                            record.target_player != null &&
                            record.target_player.player_reputation <= 0 &&
                            record.target_player.player_online)
                        {
                            ExecuteCommand("procon.protected.plugins.call", "AdKatsLRT", "CallLoadoutCheckOnPlayer", "AdKats", JSON.JsonEncode(new Hashtable {
                                {"caller_identity", "AdKats"},
                                {"response_requested", false},
                                {"player_name", record.target_player.player_name},
                                {"loadoutCheck_reason", "punished"}
                            }));
                        }
                        KillTarget(record);
                        record.record_exception = new AdKatsException("Punish options are set incorrectly. '" + action + "' not found. Inform plugin setting manager.");
                        HandleException(record.record_exception);
                    }
                    record.target_player.LastPunishment = record;
                }
                else
                {
                    //Exception found, just kill the player
                    record.command_action = GetCommandByKey("player_kill");
                    KillTarget(record);
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Punish record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PunishTarget", 6);
        }

        public void ForgiveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering forgiveTarget", 6);
            try
            {
                record.record_action_executed = true;
                //If the record has any exceptions, skip everything
                if (record.record_exception == null)
                {
                    Int32 points = FetchPoints(record.target_player, false, true);
                    PlayerSayMessage(record.target_player.player_name, "Forgiven 1 infraction point. You now have " + points + " point(s) against you.");
                    SendMessageToSource(record, "Forgive Logged for " + record.GetTargetNames() + ". They now have " + points + " infraction points.");
                    record.target_player.LastForgive = record;
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Forgive record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting forgiveTarget", 6);
        }

        public void BalanceDisperseTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering DisperseTarget", 6);
            try
            {
                record.record_action_executed = true;
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
                            `player_server`,
                            `player_identifier`,
                            `player_effective`,
                            `player_expiration`
                        )
                        VALUES
                        (
	                        'blacklist_dispersion',
	                        @player_id,
                            @player_server,
                            @player_identifier,
                            UTC_TIMESTAMP(),
                            DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_server", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@player_identifier", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " autobalance dispersion on this server.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to even dispersion. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Disperse record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting DisperseTarget", 6);
        }

        public void BalanceWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering BalanceWhitelistTarget", 6);
            try
            {
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_multibalancer", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already under autobalance whitelist for this server.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
                            `player_server`,
                            `player_identifier`,
                            `player_effective`,
                            `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_multibalancer',
	                        @player_id,
                            @player_server,
	                        @player_name,
                            UTC_TIMESTAMP(),
                            DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_server", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " autobalance whitelist on this server.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to autobalance whitelist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Balance Whitelist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting BalanceWhitelistTarget", 6);
        }

        public void ReservedSlotTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ReservedSlotTarget", 6);
            try
            {
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("slot_reserved", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in reserved slot list for this server.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
                            `player_server`,
                            `player_identifier`,
                            `player_effective`,
                            `player_expiration`
                        )
                        VALUES
                        (
	                        'slot_reserved',
	                        @player_id,
                            @player_server,
	                        @player_name,
                            UTC_TIMESTAMP(),
                            DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_server", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " reserved slot on this server.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to reserved slot. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Reserved Slot record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ReservedSlotTarget", 6);
        }

        public void SpectatorSlotTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SpectatorSlotTarget", 6);
            try
            {
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("slot_spectator", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in spectator slot list for this server.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
                            `player_server`,
                            `player_identifier`,
                            `player_effective`,
                            `player_expiration`
                        )
                        VALUES
                        (
	                        'slot_spectator',
	                        @player_id,
                            @player_server,
	                        @player_name,
                            UTC_TIMESTAMP(),
                            DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_server", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " spectator slot on this server.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to spectator slot. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Spectator Slot record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SpectatorSlotTarget", 6);
        }

        public void HackerCheckerWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering HackerCheckerWhitelistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "HackerCheckerWhitelistTarget not available for multiple targets.");
                    Log.Error("HackerCheckerWhitelistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_hackerchecker", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in hacker checker whitelist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_hackerchecker',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " hacker-checker whitelist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to hacker-checker whitelist. Error uploading.");
                        }
                    }
                }
                //Unban the player
                UnBanTarget(record);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Hacker-Checker Whitelist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting HackerCheckerWhitelistTarget", 6);
        }

        public void PingWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PingWhitelistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "PingWhitelistTarget not available for multiple targets.");
                    Log.Error("PingWhitelistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_ping", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the ping whitelist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_ping',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " ping whitelist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to ping whitelist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Ping Whitelist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PingWhitelistTarget", 6);
        }

        public void AAWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering AAWhitelistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "AAWhitelistTarget not available for multiple targets.");
                    Log.Error("AAWhitelistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_adminassistant", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the Admin Assistant whitelist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_adminassistant',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " admin assistant whitelist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to Admin Assistant whitelist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Admin Assistant Whitelist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting AAWhitelistTarget", 6);
        }

        public void ReportWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ReportWhitelistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "ReportWhitelistTarget not available for multiple targets.");
                    Log.Error("ReportWhitelistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_report", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the report whitelist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_report',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " report whitelist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to Report whitelist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Report Whitelist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ReportWhitelistTarget", 6);
        }

        public void SpamBotWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SpamBotWhitelistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "SpamBotWhitelistTarget not available for multiple targets.");
                    Log.Error("SpamBotWhitelistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_spambot", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the SpamBot whitelist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_spambot',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " spambot whitelist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to SpamBot whitelist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for SpamBot Whitelist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SpamBotWhitelistTarget", 6);
        }

        public void SpamBotWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SpamBotWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "SpamBotWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("SpamBotWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_spambot", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the SpamBot whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from SpamBot whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from SpamBot whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from SpamBot whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SpamBotWhitelistRemoveTarget", 6);
        }

        public void SpectatorBlacklistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SpectatorBlacklistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "SpectatorBlacklistTarget not available for multiple targets.");
                    Log.Error("SpectatorBlacklistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("blacklist_spectator", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the spectator blacklist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'blacklist_spectator',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " spectator blacklist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to spectator blacklist. Error uploading.");
                        }
                    }
                }
                //Kick target if they are currently spectating
                if (record.target_player.player_online && record.target_player.player_type == PlayerType.Spectator)
                {
                    QueueRecordForProcessing(new AdKatsRecord
                    {
                        record_source = AdKatsRecord.Sources.InternalAutomated,
                        server_id = _serverInfo.ServerID,
                        command_type = GetCommandByKey("player_kick"),
                        command_numeric = 0,
                        target_name = record.target_player.player_name,
                        target_player = record.target_player,
                        source_name = "SpectatorManager",
                        record_message = "You may not spectate the server at this time.",
                        record_time = UtcNow()
                    });
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for spectator blacklist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SpectatorBlacklistTarget", 6);
        }

        public void SpectatorBlacklistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SpectatorBlacklistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "SpectatorBlacklistRemoveTarget not available for multiple targets.");
                    Log.Error("SpectatorBlacklistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("blacklist_spectator", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the spectator blacklist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from spectator blacklist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from spectator blacklist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from spectator blacklist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SpectatorBlacklistRemoveTarget", 6);
        }

        public void ReportSourceBlacklistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ReportSourceBlacklistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "ReportSourceBlacklistTarget not available for multiple targets.");
                    Log.Error("ReportSourceBlacklistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("blacklist_report", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the report source blacklist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'blacklist_report',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " report source blacklist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to report source blacklist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for report source blacklist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ReportSourceBlacklistTarget", 6);
        }

        public void ReportSourceBlacklistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ReportSourceBlacklistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "ReportSourceBlacklistRemoveTarget not available for multiple targets.");
                    Log.Error("ReportSourceBlacklistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("blacklist_report", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the report source blacklist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from report source blacklist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from report source blacklist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from report source blacklist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ReportSourceBlacklistRemoveTarget", 6);
        }

        public void CommandTargetWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering CommandTargetWhitelistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "CommandTargetWhitelistTarget not available for multiple targets.");
                    Log.Error("CommandTargetWhitelistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_commandtarget", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the command target whitelist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_commandtarget',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " command target whitelist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to command target whitelist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for command target whitelist.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting CommandTargetWhitelistTarget", 6);
        }

        public void CommandTargetWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering CommandTargetWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "CommandTargetWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("CommandTargetWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_commandtarget", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the command target whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from command target whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from command target whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from command target whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting CommandTargetWhitelistRemoveTarget", 6);
        }

        public void AutoAssistBlacklistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering AutoAssistBlacklistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "AutoAssistBlacklistTarget not available for multiple targets.");
                    Log.Error("AutoAssistBlacklistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("blacklist_autoassist", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the auto-assist blacklist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'blacklist_autoassist',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " auto-assist blacklist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                            FetchAllAccess(true);
                        }
                        else
                        {
                            Log.Error("Unable to add player to auto-assist blacklist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for command target whitelist.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting AutoAssistBlacklistTarget", 6);
        }

        public void AutoAssistBlacklistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering AutoAssistBlacklistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "AutoAssistBlacklistRemoveTarget not available for multiple targets.");
                    Log.Error("AutoAssistBlacklistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("blacklist_autoassist", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the auto-assist blacklist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from auto-assist blacklist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from auto-assist blacklist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from auto-assist blacklist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting AutoAssistBlacklistRemoveTarget", 6);
        }

        public void ReportWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ReportWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "ReportWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("ReportWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_report", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the Report whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from Report whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from Report whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from Report whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ReportWhitelistRemoveTarget", 6);
        }

        public void AAWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering AAWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "AAWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("AAWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_adminassistant", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the Admin Assistant whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from Admin Assistant whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from Admin Assistant whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from Admin Assistant whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting AAWhitelistRemoveTarget", 6);
        }

        public void PingWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PingWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "PingWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("PingWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_ping", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the Ping whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from Ping whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from Ping whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from Ping whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PingWhitelistRemoveTarget", 6);
        }

        public void HackerCheckerWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering HackerCheckerWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "HackerCheckerWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("HackerCheckerWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_hackerchecker", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the Hacker-Checker whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from Hacker-Checker whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from Hacker-Checker whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from Hacker-Checker whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting HackerCheckerWhitelistRemoveTarget", 6);
        }

        public void SpectatorSlotRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SpectatorSlotRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "SpectatorSlotRemoveTarget not available for multiple targets.");
                    Log.Error("SpectatorSlotRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("slot_spectator", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the spectator slot list for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from spectator slot list.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from spectator slot list. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from spectator slot list.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SpectatorSlotRemoveTarget", 6);
        }

        public void ReservedSlotRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ReservedSlotRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "ReservedSlotRemoveTarget not available for multiple targets.");
                    Log.Error("ReservedSlotRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("slot_reserved", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the reserved slot list for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from reserved slot list.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from reserved slot list. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from reserved slot list.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ReservedSlotRemoveTarget", 6);
        }

        public void BalanceWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering BalanceWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "BalanceWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("BalanceWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_multibalancer", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the autobalance whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from autobalance whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from autobalance whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from autobalance whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting BalanceWhitelistRemoveTarget", 6);
        }

        public void BalanceDisperseRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering BalanceDisperseRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "BalanceDisperseRemoveTarget not available for multiple targets.");
                    Log.Error("BalanceDisperseRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("blacklist_dispersion", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not under autobalance dispersion for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from autobalance dispersion.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from autobalance dispersion. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from autobalance dispersion.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting BalanceDisperseRemoveTarget", 6);
        }

        public void PopulatorWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PopulatorWhitelistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "PopulatorWhitelistTarget not available for multiple targets.");
                    Log.Error("PopulatorWhitelistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_populator", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the populator whitelist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_populator',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " populator whitelist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                        }
                        else
                        {
                            Log.Error("Unable to add player to Populator whitelist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Populator Whitelist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PopulatorWhitelistTarget", 6);
        }

        public void PopulatorWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PopulatorWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "PopulatorWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("PopulatorWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_populator", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the populator whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from populator whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from populator whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from populator whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PopulatorWhitelistRemoveTarget", 6);
        }

        public void TeamKillTrackerWhitelistTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering TeamKillTrackerWhitelistTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "TeamKillTrackerWhitelistTarget not available for multiple targets.");
                    Log.Error("TeamKillTrackerWhitelistTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_teamkill", record.target_player);
                if (matchingPlayers.Count > 0)
                {
                    SendMessageToSource(record, matchingPlayers.Count + " matching player(s) already in the TeamKillTracker whitelist.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        INSERT INTO
	                        `adkats_specialplayers`
                        (
	                        `player_group`,
	                        `player_id`,
	                        `player_identifier`,
	                        `player_effective`,
	                        `player_expiration`
                        )
                        VALUES
                        (
	                        'whitelist_teamkill',
	                        @player_id,
	                        @player_name,
	                        UTC_TIMESTAMP(),
	                        DATE_ADD(UTC_TIMESTAMP(), INTERVAL @duration_minutes MINUTE)
                        )";
                        if (record.target_player.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when assigning special player entry. Unable to complete.");
                            SendMessageToSource(record, "Player ID invalid when assigning special player entry. Unable to complete.");
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.command_numeric > 10518984)
                        {
                            record.command_numeric = 10518984;
                        }
                        command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                        command.Parameters.AddWithValue("@player_name", record.target_player.player_name);
                        command.Parameters.AddWithValue("@duration_minutes", record.command_numeric);

                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            String message = "Player " + record.GetTargetNames() + " given " + ((record.command_numeric == 10518984) ? ("permanent") : (FormatTimeString(TimeSpan.FromMinutes(record.command_numeric), 2))) + " TeamKillTracker whitelist for all servers.";
                            SendMessageToSource(record, message);
                            Log.Debug(() => message, 3);
                        }
                        else
                        {
                            Log.Error("Unable to add player to TeamKillTracker whitelist. Error uploading.");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for TeamKillTracker Whitelist record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting TeamKillTrackerWhitelistTarget", 6);
        }

        public void TeamKillTrackerWhitelistRemoveTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering TeamKillTrackerWhitelistRemoveTarget", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "TeamKillTrackerWhitelistRemoveTarget not available for multiple targets.");
                    Log.Error("TeamKillTrackerWhitelistRemoveTarget not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingASPlayersOfGroup("whitelist_teamkill", record.target_player);
                if (!matchingPlayers.Any())
                {
                    SendMessageToSource(record, "Matching player not in the TeamKillTracker whitelist for this server.");
                    FinalizeRecord(record);
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    Boolean updated = false;
                    foreach (AdKatsSpecialPlayer asPlayer in matchingPlayers)
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"DELETE FROM `adkats_specialplayers` WHERE `specialplayer_id` = @sp_id";
                            command.Parameters.AddWithValue("@sp_id", asPlayer.specialplayer_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "Player " + record.GetTargetNames() + " removed from TeamKillTracker whitelist.";
                                Log.Debug(() => message, 3);
                                updated = true;
                            }
                            else
                            {
                                Log.Error("Unable to remove player from TeamKillTracker whitelist. Error uploading.");
                            }
                        }
                    }
                    if (updated)
                    {
                        String message = "Player " + record.GetTargetNames() + " removed from TeamKillTracker whitelist.";
                        SendMessageToSource(record, message);
                        FetchAllAccess(true);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for " + record.command_action.command_name + " record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting TeamKillTrackerWhitelistRemoveTarget", 6);
        }

        public void UpdatePlayerBattlecry(AdKatsRecord record)
        {
            Log.Debug(() => "Entering UpdatePlayerBattlecry", 6);
            try
            {
                //Case for multiple targets
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "UpdatePlayerBattlecry not available for multiple targets.");
                    Log.Error("UpdatePlayerBattlecry not available for multiple targets.");
                    FinalizeRecord(record);
                    return;
                }
                record.record_action_executed = true;
                if (record.target_player.player_id <= 0)
                {
                    Log.Error("Player ID invalid when assigning player battlecry. Unable to complete.");
                    SendMessageToSource(record, "Player ID invalid when assigning player battlecry. Unable to complete.");
                    FinalizeRecord(record);
                    return;
                }

                //Update the player's battlecry on the object
                record.target_player.player_battlecry = record.record_message;

                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        if (String.IsNullOrEmpty(record.target_player.player_battlecry))
                        {
                            command.CommandText = @"DELETE FROM `adkats_battlecries` WHERE `player_id` = @player_id";
                            command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                if (record.source_name == record.target_name)
                                {
                                    SendMessageToSource(record, "Your battlecry has been removed.");
                                }
                                else
                                {
                                    SendMessageToSource(record, record.GetTargetNames() + "'s battlecry has been removed.");
                                }
                            }
                            else
                            {
                                Log.Error("Unable to remove player battlecry.");
                                SendMessageToSource(record, "Unable to remove your battlecry.");
                            }
                        }
                        else
                        {
                            command.CommandText = @"
                            REPLACE INTO
	                            `adkats_battlecries`
                            (
	                            `player_id`,
	                            `player_battlecry`
                            )
                            VALUES
                            (
	                            @player_id,
	                            @player_battlecry
                            )";
                            command.Parameters.AddWithValue("@player_id", record.target_player.player_id);
                            command.Parameters.AddWithValue("@player_battlecry", record.target_player.player_battlecry);
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0)
                            {
                                String message = "'" + record.target_player.player_battlecry + "'.";
                                if (record.source_name == record.target_name)
                                {
                                    message = "Your new battlecry: " + message;
                                }
                                else
                                {
                                    message = record.GetTargetNames() + "'s new battlecry: " + message;
                                }
                                SendMessageToSource(record, message);
                            }
                            else
                            {
                                Log.Error("Unable to update player battlecry. Error uploading.");
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Player Battlecry record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting UpdatePlayerBattlecry", 6);
        }

        public void MuteTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering muteTarget", 6);
            try
            {
                record.record_action_executed = true;
                if (!HasAccess(record.target_player, GetCommandByKey("player_mute")))
                {
                    if (!_RoundMutedPlayers.ContainsKey(record.target_player.player_name))
                    {
                        _RoundMutedPlayers.Add(record.target_player.player_name, 0);
                        PlayerSayMessage(record.target_player.player_name, _MutedPlayerMuteMessage);
                        SendMessageToSource(record, record.GetTargetNames() + " has been muted for this round.");
                    }
                    else
                    {
                        SendMessageToSource(record, record.GetTargetNames() + " already muted for this round.");
                    }
                }
                else
                {
                    SendMessageToSource(record, "You can't mute an admin.");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Mute record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting muteTarget", 6);
        }

        public void JoinTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering joinTarget", 6);
            try
            {
                record.record_action_executed = true;
                //Get source player
                AdKatsPlayer sourcePlayer = null;
                if (_PlayerDictionary.TryGetValue(record.source_name, out sourcePlayer))
                {
                    sourcePlayer.LastUsage = UtcNow();
                    //If the source has access to move players, then the squad will be unlocked for their entry
                    if (HasAccess(record.source_player, GetCommandByKey("player_move")))
                    {
                        //Unlock target squad
                        SendMessageToSource(record, "Unlocking target squad if needed, please wait.");
                        ExecuteCommand("procon.protected.send", "squad.private", record.target_player.frostbitePlayerInfo.TeamID + "", record.target_player.frostbitePlayerInfo.SquadID + "", "false");
                        //If anything longer is needed...tisk tisk
                        _threadMasterWaitHandle.WaitOne(500);
                    }
                    //Check for player access to change teams
                    if (record.target_player.frostbitePlayerInfo.TeamID != sourcePlayer.frostbitePlayerInfo.TeamID && !HasAccess(record.source_player, GetCommandByKey("self_teamswap")))
                    {
                        SendMessageToSource(record, "Target player is not on your team, you need @" + GetCommandByKey("self_teamswap").command_text + "/TeamSwap access to join them.");
                    }
                    else
                    {
                        //Move to specific squad
                        Log.Debug(() => "MULTIBalancer Unswitcher Disabled", 3);
                        ExecuteCommand("procon.protected.plugins.call", "MULTIbalancer", "UpdatePluginData", "AdKats", "bool", "DisableUnswitcher", "True");
                        _MULTIBalancerUnswitcherDisabled = true;
                        AdKatsTeam targetTeam;
                        if (GetTeamByID(record.target_player.frostbitePlayerInfo.TeamID, out targetTeam)) {
                            record.target_player.RequiredTeam = targetTeam;
                            _LastPlayerMoveIssued = UtcNow();
                            SendMessageToSource(record, "Attempting to join " + record.GetTargetNames());
                            ExecuteCommand("procon.protected.send", "admin.movePlayer", record.source_name, record.target_player.frostbitePlayerInfo.TeamID + "", record.target_player.frostbitePlayerInfo.SquadID + "", "true");
                        }
                    }
                }
                else
                {
                    SendMessageToSource(record, "Unable to find you in the player list, please try again.");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Join record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting joinTarget", 6);
        }

        public void PullTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PullTarget", 6);
            try
            {
                record.record_action_executed = true;
                //Unlock squad
                SendMessageToSource(record, "Unlocking source squad for player entry.");
                ExecuteCommand("procon.protected.send", "squad.private", record.source_player.frostbitePlayerInfo.TeamID + "", record.source_player.frostbitePlayerInfo.SquadID + "", "false");
                _threadMasterWaitHandle.WaitOne(500);
                //Move to specific squad
                Log.Debug(() => "MULTIBalancer Unswitcher Disabled", 3);
                ExecuteCommand("procon.protected.plugins.call", "MULTIbalancer", "UpdatePluginData", "AdKats", "bool", "DisableUnswitcher", "True");
                _MULTIBalancerUnswitcherDisabled = true;
                AdKatsTeam targetTeam;
                if (GetTeamByID(record.source_player.frostbitePlayerInfo.TeamID, out targetTeam)) {
                    record.source_player.RequiredTeam = targetTeam;
                    _LastPlayerMoveIssued = UtcNow();
                    SendMessageToSource(record, "Attempting to pull " + record.GetTargetNames());
                    ExecuteCommand("procon.protected.send", "admin.movePlayer", record.target_name, record.source_player.frostbitePlayerInfo.TeamID + "", record.source_player.frostbitePlayerInfo.SquadID + "", "true");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Join record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PullTarget", 6);
        }

        public void ReportTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering reportTarget", 6);
            try
            {
                Random random = new Random();
                Int32 reportID = record.command_numeric;
                if (record.command_numeric == 0)
                {
                    do
                    {
                        reportID = random.Next(100, 999);
                    } while (_RoundReports.ContainsKey(reportID + ""));
                    record.command_numeric = reportID;
                    _RoundReports.Add(reportID + "", record);
                }
                record.record_action_executed = true;
                if (_subscribedClients.Any(client => client.ClientName == "AdKatsLRT" && client.SubscriptionEnabled) &&
                    record.target_player != null &&
                    record.target_player.player_reputation <= 0 &&
                    record.target_player.player_online)
                {
                    Log.Info("Running loadout case for report record " + reportID);
                    if (!record.isLoadoutChecked) {
                        lock (_LoadoutConfirmDictionary) {
                            _LoadoutConfirmDictionary[record.target_player.player_name] = record;
                        }
                        Log.Info("Report " + reportID + " waiting for loadout confirmation.");
                        ExecuteCommand("procon.protected.plugins.call", "AdKatsLRT", "CallLoadoutCheckOnPlayer", "AdKats", JSON.JsonEncode(new Hashtable {
                            {"caller_identity", "AdKats"},
                            {"response_requested", false},
                            {"player_name", record.target_player.player_name},
                            {"loadoutCheck_reason", "reported"}
                        }));
                        return;
                    }
                    if (record.targetLoadoutActed)
                    {
                        SendMessageToSource(record, "Your report [" + reportID + "] has been acted on. Thank you.");
                        OnlineAdminSayMessage("Report " + reportID + " is being acted on by Loadout Enforcer.");
                        record.command_action = GetCommandByKey("player_report_confirm");
                        UpdateRecord(record);
                        return;
                    }
                }
                AttemptReportAutoAction(record, reportID + "");
                String sourceAAIdentifier = (record.source_player != null && record.source_player.player_aa) ? ("(AA)") : ("");
                String targetAAIdentifier = (record.target_player != null && record.target_player.player_aa) ? ("(AA)") : ("");
                String slotID = (record.target_player != null) ? (record.target_player.player_slot) : (null);
                if (!String.IsNullOrEmpty(slotID))
                {
                    ExecuteCommand("procon.protected.send", "punkBuster.pb_sv_command", "pb_sv_getss " + slotID);
                }
                String sourcePlayerInfo = "";
                if (record.source_player != null && record.source_player.frostbitePlayerInfo != null)
                {
                    if (record.source_player.player_online)
                    {
                        sourcePlayerInfo = " (" + Math.Round(record.source_player.player_reputation, 1) + ")(" + GetPlayerTeamKey(record.source_player) + "/" + (_PlayerDictionary.Values.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == record.source_player.frostbitePlayerInfo.TeamID).OrderBy(aPlayer => aPlayer.frostbitePlayerInfo.Score).Reverse().ToList().IndexOf(record.target_player) + 1) + ")";
                    }
                    else
                    {
                        sourcePlayerInfo = " (OFFLINE)";
                    }
                }
                String targetPlayerInfo = "";
                if (record.target_player != null && record.target_player.frostbitePlayerInfo != null)
                {
                    if (record.target_player.player_online)
                    {
                        targetPlayerInfo = " (" + Math.Round(record.target_player.player_reputation, 1) + ")(" + GetPlayerTeamKey(record.target_player) + "/" + (_PlayerDictionary.Values.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == record.target_player.frostbitePlayerInfo.TeamID).OrderBy(aPlayer => aPlayer.frostbitePlayerInfo.Score).Reverse().ToList().IndexOf(record.target_player) + 1) + ")";
                    }
                    else
                    {
                        targetPlayerInfo = " (OFFLINE)";
                    }
                }
                OnlineAdminSayMessage("R[" + reportID + "] Source: " + sourceAAIdentifier + record.GetSourceName() + sourcePlayerInfo);
                OnlineAdminSayMessage("R[" + reportID + "] Target: " + targetAAIdentifier + record.GetTargetNames() + targetPlayerInfo);
                OnlineAdminSayMessage("R[" + reportID + "] Reason: " + record.record_message);
                if (record.isLoadoutChecked)
                {
                    if (record.target_player.loadout_valid)
                    {
                        OnlineAdminSayMessage("R[" + reportID + "] Loadout(VALID): " + record.target_player.loadout_items);
                    }
                    else
                    {
                        OnlineAdminSayMessage("R[" + reportID + "] Loadout(INVALID): " + record.target_player.loadout_deniedItems);
                    }
                }
                if (_isTestingAuthorized && record.target_player != null && (record.target_player.player_reputation > _reputationThresholdGood || PlayerIsAdmin(record.target_player)))
                {
                    //Set Contested
                    record.isContested = true;
                    //Inform All Parties
                    SendMessageToSource(record, record.GetTargetNames() + "'s reputation has automatically contested your report against them.");
                    PlayerTellMessage(record.target_player.player_name, "Your reputation has automatically contested " + record.GetSourceName() + "'s report against you.");
                    OnlineAdminSayMessage(record.GetTargetNames() + "'s reputation has automatically contested report [" + record.command_numeric + "]");
                }
                else if (_InformReportedPlayers)
                {
                    String mesLow = record.record_message.ToLower();
                    if (!_PlayerInformExclusionStrings.Any(exc => mesLow.Contains(exc.ToLower())) && record.source_name != "AutoAdmin")
                    {
                        PlayerTellMessage(record.target_name, record.GetSourceName() + " reported you for " + record.record_message, true, 6);
                    }
                }
                if (_UseEmail) {
                    if (_EmailReportsOnlyWhenAdminless && FetchOnlineAdminSoldiers().Any()) {
                        Log.Debug(() => "Email cancelled, admins online.", 3);
                    } else {
                        Log.Debug(() => "Preparing to send report email.", 3);
                        _EmailHandler.SendReport(record);
                    }
                }
                if (_UsePushBullet) {
                    if (_PushBulletReportsOnlyWhenAdminless && FetchOnlineAdminSoldiers().Any()) {
                        Log.Debug(() => "PushBullet report cancelled, admins online.", 3);
                    } else {
                        Log.Debug(() => "Preparing to send PushBullet report.", 3);
                        _PushBulletHandler.PushReport(record);
                    }
                }
                if (record.source_player != null && record.source_name != record.target_name && record.source_player.player_type == PlayerType.Spectator)
                {
                    //Custom record to boost rep for reporting from spectator mode
                    AdKatsRecord repRecord = new AdKatsRecord
                    {
                        record_source = AdKatsRecord.Sources.InternalAutomated,
                        server_id = _serverInfo.ServerID,
                        command_type = GetCommandByKey("player_repboost"),
                        command_numeric = 0,
                        target_name = record.source_player.player_name,
                        target_player = record.source_player,
                        source_name = "RepManager",
                        record_message = "Player reported from Spectator Mode",
                        record_time = UtcNow()
                    };
                    UploadRecord(repRecord);
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Report record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting reportTarget", 6);
        }

        public void CallAdminOnTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering callAdminOnTarget", 6);
            try
            {
                Random random = new Random();
                Int32 reportID = record.command_numeric;
                if (record.command_numeric == 0)
                {
                    do
                    {
                        reportID = random.Next(100, 999);
                    } while (_RoundReports.ContainsKey(reportID + ""));
                    record.command_numeric = reportID;
                    _RoundReports.Add(reportID + "", record);
                }
                record.record_action_executed = true;
                if (_subscribedClients.Any(client => client.ClientName == "AdKatsLRT" && client.SubscriptionEnabled) && 
                    record.target_player != null && 
                    record.target_player.player_reputation <= 0 &&
                    record.target_player.player_online)
                {
                    Log.Info("Running loadout case for report record " + reportID);
                    if (!record.isLoadoutChecked)
                    {
                        if (!_LoadoutConfirmDictionary.ContainsKey(record.target_player.player_name)) {
                            lock (_LoadoutConfirmDictionary) {
                                _LoadoutConfirmDictionary[record.target_player.player_name] = record;
                            }
                            Log.Info("Admin call " + reportID + " waiting for loadout confirmation.");
                            ExecuteCommand("procon.protected.plugins.call", "AdKatsLRT", "CallLoadoutCheckOnPlayer", "AdKats", JSON.JsonEncode(new Hashtable {
                                {"caller_identity", "AdKats"},
                                {"response_requested", false},
                                {"player_name", record.target_player.player_name},
                                {"loadoutCheck_reason", "reported"}
                            }));
                        }
                        return;
                    }
                    if (record.targetLoadoutActed)
                    {
                        SendMessageToSource(record, "Your report [" + reportID + "] has been acted on. Thank you.");
                        OnlineAdminSayMessage("Report " + reportID + " is being acted on by Loadout Enforcer.");
                        record.command_action = GetCommandByKey("player_report_confirm");
                        UpdateRecord(record);
                        return;
                    }
                }
                AttemptReportAutoAction(record, reportID + "");
                String sourceAAIdentifier = (record.source_player != null && record.source_player.player_aa) ? ("(AA)") : ("");
                String targetAAIdentifier = (record.target_player != null && record.target_player.player_aa) ? ("(AA)") : ("");
                String slotID = (record.target_player != null) ? (record.target_player.player_slot) : (null);
                if (!String.IsNullOrEmpty(slotID))
                {
                    ExecuteCommand("procon.protected.send", "punkBuster.pb_sv_command", "pb_sv_getss " + slotID);
                }
                String sourcePlayerInfo = "";
                if (record.source_player != null && record.source_player.frostbitePlayerInfo != null)
                {
                    if (record.source_player.player_online)
                    {
                        sourcePlayerInfo = " (" + Math.Round(record.source_player.player_reputation, 1) + ")(" + GetPlayerTeamKey(record.source_player) + "/" + (_PlayerDictionary.Values.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == record.source_player.frostbitePlayerInfo.TeamID).OrderBy(aPlayer => aPlayer.frostbitePlayerInfo.Score).Reverse().ToList().IndexOf(record.source_player) + 1) + ")";
                    }
                    else
                    {
                        sourcePlayerInfo = " (OFFLINE)";
                    }
                }
                String targetPlayerInfo = "";
                if (record.target_player != null && record.target_player.frostbitePlayerInfo != null)
                {
                    if (record.target_player.player_online)
                    {
                        targetPlayerInfo = " (" + Math.Round(record.target_player.player_reputation, 1) + ")(" + GetPlayerTeamKey(record.target_player) + "/" + (_PlayerDictionary.Values.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == record.target_player.frostbitePlayerInfo.TeamID).OrderBy(aPlayer => aPlayer.frostbitePlayerInfo.Score).Reverse().ToList().IndexOf(record.target_player) + 1) + ")";
                    }
                    else
                    {
                        targetPlayerInfo = " (OFFLINE)";
                    }
                }
                OnlineAdminSayMessage("A[" + reportID + "] Source: " + sourceAAIdentifier + record.GetSourceName() + sourcePlayerInfo);
                OnlineAdminSayMessage("A[" + reportID + "] Target: " + targetAAIdentifier + record.GetTargetNames() + targetPlayerInfo);
                OnlineAdminSayMessage("A[" + reportID + "] Reason: " + record.record_message);
                if (record.isLoadoutChecked)
                {
                    if (record.target_player.loadout_valid)
                    {
                        OnlineAdminSayMessage("A[" + reportID + "] Loadout(VALID): " + record.target_player.loadout_items);
                    }
                    else
                    {
                        OnlineAdminSayMessage("A[" + reportID + "] Loadout(INVALID): " + record.target_player.loadout_deniedItems);
                    }
                }
                if (_InformReportedPlayers)
                {
                    String mesLow = record.record_message.ToLower();
                    if (!_PlayerInformExclusionStrings.Any(exc => mesLow.Contains(exc.ToLower())))
                    {
                        PlayerTellMessage(record.target_name, record.GetSourceName() + " reported you for " + record.record_message, true, 6);
                    }
                }
                if (_UseEmail) {
                    if (_EmailReportsOnlyWhenAdminless && FetchOnlineAdminSoldiers().Any()) {
                        Log.Debug(() => "Email cancelled, admins online.", 3);
                    } else {
                        Log.Debug(() => "Preparing to send report email.", 3);
                        _EmailHandler.SendReport(record);
                    }
                }
                if (_UsePushBullet) {
                    if (_PushBulletReportsOnlyWhenAdminless && FetchOnlineAdminSoldiers().Any()) {
                        Log.Debug(() => "PushBullet report cancelled, admins online.", 3);
                    } else {
                        Log.Debug(() => "Preparing to send PushBullet report.", 3);
                        _PushBulletHandler.PushReport(record);
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for CallAdmin record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting callAdminOnTarget", 6);
        }

        public void AttemptReportAutoAction(AdKatsRecord record, String reportID)
        {
            Boolean sourceAA = record.source_player != null && record.source_player.player_aa;
            Int32 onlineAdminCount = FetchOnlineAdminSoldiers().Count;
            String messageLower = record.record_message.ToLower();
            Boolean canAutoHandle = _UseAAReportAutoHandler && sourceAA && _AutoReportHandleStrings.Any() && !String.IsNullOrEmpty(_AutoReportHandleStrings[0]) && _AutoReportHandleStrings.Any(messageLower.Contains) && !record.target_player.player_aa && !PlayerIsAdmin(record.target_player);
            Boolean adminsOnline = onlineAdminCount > 0;
            String reportMessage = "";
            if (!_isTestingAuthorized || !sourceAA || !adminsOnline)
            {
                reportMessage = "REPORT [" + reportID + "] sent on " + record.GetTargetNames() + " for " + record.record_message;
            }
            else
            {
                reportMessage = "REPORT [" + reportID + "] on " + record.GetTargetNames() + " sent to " + onlineAdminCount + " in-game admin" + ((onlineAdminCount > 1) ? ("s") : ("")) + ". " + ((canAutoHandle) ? ("Admins have 45 seconds before auto-handling.") : (""));
            }
            SendMessageToSource(record, reportMessage);
            if (!canAutoHandle)
            {
                //Log.Warn("canceling auto-handler.");
                return;
            }
            Thread reportAutoHandler = new Thread(new ThreadStart(delegate
            {
                //Log.Warn("Starting report auto-handler thread.");
                try
                {
                    Thread.CurrentThread.Name = "ReportAutoHandler";
                    //If admins are online, act after 45 seconds. If they are not, act after 5 seconds.
                    _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds((adminsOnline) ? (45.0) : (5.0)));
                    //Get the reported record
                    AdKatsRecord reportedRecord;
                    if (_RoundReports.TryGetValue(reportID, out reportedRecord) && _useExperimentalTools)
                    {
                        if (CanPunish(reportedRecord, 90) || !adminsOnline)
                        {
                            //Remove it from the reports for this round
                            _RoundReports.Remove(reportID);
                            //Update it in the database
                            reportedRecord.command_action = GetCommandByKey("player_report_confirm");
                            UpdateRecord(reportedRecord);
                            //Get target information
                            AdKatsRecord aRecord = new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = _serverInfo.ServerID,
                                command_type = GetCommandByKey("player_punish"),
                                command_numeric = 0,
                                target_name = reportedRecord.target_player.player_name,
                                target_player = reportedRecord.target_player,
                                source_name = "ProconAdmin",
                                record_message = reportedRecord.record_message,
                                record_time = UtcNow()
                            };
                            //Inform the reporter that they helped the admins
                            SendMessageToSource(reportedRecord, "Your report [" + reportedRecord.command_numeric + "] has been acted on. Thank you.");
                            //Queue for processing
                            QueueRecordForProcessing(aRecord);
                        }
                        else
                        {
                            SendMessageToSource(reportedRecord, "Reported player has already been acted on.");
                        }
                    }
                }
                catch (Exception)
                {
                    HandleException(new AdKatsException("Error while auto-handling report."));
                }
                Log.Debug(() => "Exiting a report auto-handler.", 5);
            }));

            //Start the thread
            StartAndLogThread(reportAutoHandler);
        }

        public void RestartLevel(AdKatsRecord record)
        {
            Log.Debug(() => "Entering restartLevel", 6);
            try
            {
                record.record_action_executed = true;
                ExecuteCommand("procon.protected.send", "mapList.restartRound");
                SendMessageToSource(record, "Round Restarted.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for RestartLevel record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting restartLevel", 6);
        }

        public void NextLevel(AdKatsRecord record)
        {
            Log.Debug(() => "Entering nextLevel", 6);
            try
            {
                record.record_action_executed = true;
                ExecuteCommand("procon.protected.send", "mapList.runNextRound");
                SendMessageToSource(record, "Next round has been run.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for NextLevel record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting nextLevel", 6);
        }

        public void EndLevel(AdKatsRecord record)
        {
            Log.Debug(() => "Entering EndLevel", 6);
            try
            {
                record.record_action_executed = true;
                ExecuteCommand("procon.protected.send", "mapList.endRound", record.command_numeric + "");
                SendMessageToSource(record, "Ended round with " + record.GetTargetNames() + " winning.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for EndLevel record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting EndLevel", 6);
        }

        public void NukeTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering NukeTarget", 6);
            try
            {
                record.record_action_executed = true;

                if (_NukeCountdownDurationSeconds > 0)
                {
                    //Start the thread
                    StartAndLogThread(new Thread(new ThreadStart(delegate
                    {
                        Log.Debug(() => "Starting a nuke countdown printer.", 5);
                        try
                        {
                            Thread.CurrentThread.Name = "NukeCountdownPrinter";
                            for (Int32 countdown = _NukeCountdownDurationSeconds; countdown > 0; countdown--)
                            {
                                if (!_pluginEnabled)
                                {
                                    LogThreadExit();
                                    return;
                                }
                                AdminTellMessage("Nuking " + record.GetTargetNames() + " team in " + countdown + "...", false);
                                _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(1));
                            }
                            AdminTellMessage(record.source_name == "RoundManager" ? record.record_message : "Nuking " + record.GetTargetNames() + " team NOW!");
                            foreach (AdKatsPlayer player in _PlayerDictionary.Values.ToList().Where(player => (player.frostbitePlayerInfo.TeamID == record.command_numeric) || (record.target_name == "Everyone")))
                            {
                                ExecuteCommand("procon.protected.send", "admin.killPlayer", player.player_name);
                            }
                        }
                        catch (Exception)
                        {
                            HandleException(new AdKatsException("Error while printing nuke countdown"));
                        }
                        Log.Debug(() => "Exiting a nuke countdown printer.", 5);
                        LogThreadExit();
                    })));
                }
                else
                {
                    foreach (AdKatsPlayer player in _PlayerDictionary.Values.ToList().Where(player => (player.frostbitePlayerInfo.TeamID == record.command_numeric) || (record.target_name == "Everyone")))
                    {
                        ExecuteCommand("procon.protected.send", "admin.killPlayer", player.player_name);
                    }
                    AdminTellMessage(record.source_name == "RoundManager" ? record.record_message : "Nuking " + record.GetTargetNames() + " team!");
                }
                SendMessageToSource(record, "You NUKED " + record.GetTargetNames() + ".");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for NukeServer record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting NukeTarget", 6);
        }

        public void CountdownTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering CountdownTarget", 6);
            try
            {
                record.record_action_executed = true;
                if (record.command_numeric < 1 || record.command_numeric > 30)
                {
                    SendMessageToSource(record, "Invalid duration, must be 1-30. Unable to act.");
                    FinalizeRecord(record);
                    return;
                }
                if (String.IsNullOrEmpty(record.record_message))
                {
                    SendMessageToSource(record, "Invalid countdown message, unable to act.");
                    FinalizeRecord(record);
                    return;
                }
                List<AdKatsPlayer> targetedPlayers = new List<AdKatsPlayer>();
                switch (record.target_name) {
                    case "Squad":
                        if (record.source_player == null || !record.source_player.player_online || !_PlayerDictionary.ContainsKey(record.source_player.player_name) || record.source_player.player_type == PlayerType.Spectator) {
                            SendMessageToSource(record, "Source must be an online player to use squad option. Unable to act.");
                            FinalizeRecord(record);
                            return;
                        }
                        targetedPlayers.AddRange(_PlayerDictionary.Values.ToList().Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == record.source_player.frostbitePlayerInfo.TeamID && aPlayer.frostbitePlayerInfo.SquadID == record.source_player.frostbitePlayerInfo.SquadID).ToList());
                        break;
                    case "Team":
                        if (record.source_player == null || !record.source_player.player_online || !_PlayerDictionary.ContainsKey(record.source_player.player_name) || record.source_player.player_type == PlayerType.Spectator) {
                            SendMessageToSource(record, "Source must be an online player to use team option. Unable to act.");
                            FinalizeRecord(record);
                            return;
                        }
                        targetedPlayers.AddRange(_PlayerDictionary.Values.ToList().Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == record.source_player.frostbitePlayerInfo.TeamID).ToList());
                        break;
                    case "All":
                        //All players, so include spectators and commanders
                        break;
                    default:
                        //Check for specific team targeting
                        var teamTarget = GetTeamByKey(record.target_name);
                        if (teamTarget != null) {
                            //Send to target and neutral team
                            targetedPlayers.AddRange(_PlayerDictionary.Values.ToList().Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == teamTarget.TeamID || aPlayer.frostbitePlayerInfo.TeamID == 0).ToList());
                        } else {
                            SendMessageToSource(record, "Invalid target, must be Squad, Team, or All. Unable to Act.");
                            FinalizeRecord(record);
                            return;
                        }
                        break;
                }
                //Start the thread
                StartAndLogThread(new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting a countdown printer thread.", 5);
                    try
                    {
                        Thread.CurrentThread.Name = "CountdownPrinter";
                        for (Int32 countdown = record.command_numeric; countdown > 0; countdown--) {
                            if (!_pluginEnabled)
                            {
                                LogThreadExit();
                                return;
                            }
                            if (record.target_name == "All")
                            {
                                AdminTellMessage(record.record_message + " in " + countdown + "...", false);
                            }
                            else
                            {
                                //Threads spawned from threads...oh god
                                StartAndLogThread(new Thread(new ThreadStart(delegate {
                                    try {
                                        Thread.CurrentThread.Name = "CountdownPrinter_Private";
                                        var inCount = countdown;
                                        foreach (AdKatsPlayer aPlayer in targetedPlayers) {
                                            PlayerTellMessage(aPlayer.player_name, record.record_message + " in " + inCount + "...", false, 1);
                                        }
                                    } catch (Exception) {
                                        HandleException(new AdKatsException("Error while printing private countdown"));
                                    }
                                    LogThreadExit();
                                })));
                            }
                            _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(1));
                        }
                        if (record.target_name == "All")
                        {
                            AdminTellMessage(record.record_message + " NOW!", false);
                        }
                        else
                        {
                            foreach (AdKatsPlayer aPlayer in targetedPlayers)
                            {
                                PlayerTellMessage(aPlayer.player_name, record.record_message + " NOW!", false, 1);
                            }
                        }
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while printing server countdown"));
                    }
                    Log.Debug(() => "Exiting a countdown printer.", 5);
                    LogThreadExit();
                })));
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for ServerCountdown record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting CountdownTarget", 6);
        }

        public void SwapNukeServer(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SwapNukeServer", 6);
            try
            {
                record.record_action_executed = true;
                foreach (AdKatsPlayer player in _PlayerDictionary.Values.ToList().Where(aPlayer => aPlayer.player_type == PlayerType.Player)) {
                    QueuePlayerForForceMove(player.frostbitePlayerInfo);
                }
                SendMessageToSource(record, "You SwapNuked the server.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for SwapNuke record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SwapNukeServer", 6);
        }

        public void KickAllPlayers(AdKatsRecord record)
        {
            Log.Debug(() => "Entering kickAllPlayers", 6);
            try
            {
                record.record_action_executed = true;
                foreach (AdKatsPlayer player in _PlayerDictionary.Values.ToList().Where(player => player.player_role.role_key == "guest_default")) {
                    _threadMasterWaitHandle.WaitOne(50);
                    ExecuteCommand("procon.protected.send", "admin.kickPlayer", player.player_name, "(" + record.source_name + ") " + record.record_message);
                }
                AdminSayMessage("All guest players have been kicked.");
                SendMessageToSource(record, "You KICKED EVERYONE for '" + record.record_message + "'");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for KickAll record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting kickAllPlayers", 6);
        }

        public void AdminSay(AdKatsRecord record)
        {
            Log.Debug(() => "Entering adminSay", 6);
            try
            {
                record.record_action_executed = true;
                AdminSayMessage(record.record_message);
                if (record.record_source != AdKatsRecord.Sources.InGame && record.record_source != AdKatsRecord.Sources.ServerCommand)
                {
                    SendMessageToSource(record, "Server has been told '" + record.record_message + "' by SAY");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for AdminSay record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting adminSay", 6);
        }

        public void PlayerSay(AdKatsRecord record)
        {
            Log.Debug(() => "Entering playerSay", 6);
            try
            {
                record.record_action_executed = true;
                PlayerSayMessage(record.target_player.player_name, record.record_message);
                SendMessageToSource(record, record.GetTargetNames() + " has been told '" + record.record_message + "' by SAY");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for playerSay record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting playerSay", 6);
        }

        public void PMSendTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PMSendTarget", 6);
            try
            {
                record.record_action_executed = true;

                AdKatsPlayer sender = record.source_player;
                AdKatsPlayer partner = record.target_player;
                Boolean adminInformedChange = false;

                //Check sender conditions
                if (sender.conversationPartner == null)
                {
                    //No conversation partner exists. Inform of the new one.
                    if (PlayerIsAdmin(sender) && !PlayerIsAdmin(partner) && !adminInformedChange)
                    {
                        OnlineAdminSayMessage("Admin " + sender.GetVerboseName() + " is now in a private conversation with " + partner.GetVerboseName());
                        adminInformedChange = true;
                    }
                    else
                    {
                        PlayerSayMessage(sender.player_name, "You are now in a private conversation with " + partner.GetVerboseName() + ". Use /" + GetCommandByKey("player_pm_reply").command_text + " msg to reply.");
                    }
                }
                else
                {
                    //Conversation partner exists. Cancel that conversation.
                    AdKatsPlayer oldPartner = sender.conversationPartner;

                    if (oldPartner.player_guid != partner.player_guid)
                    {
                        if (PlayerIsAdmin(sender) && !PlayerIsAdmin(partner) && !adminInformedChange)
                        {
                            OnlineAdminSayMessage("Admin " + sender.GetVerboseName() + " is now in a private conversation with " + partner.GetVerboseName());
                            adminInformedChange = true;
                        }
                        else
                        {
                            PlayerSayMessage(sender.player_name, "Private conversation partner changed from " + oldPartner.GetVerboseName() + " to " + partner.GetVerboseName());
                        }
                    }
                    else
                    {
                        PlayerSayMessage(sender.player_name, "You are already in a conversation with " + oldPartner.GetVerboseName() + ". Use /" + GetCommandByKey("player_pm_reply").command_text + " msg to reply.");
                        return;
                    }

                    if (PlayerIsExternal(sender.conversationPartner))
                    {
                        QueueRecordForProcessing(new AdKatsRecord
                        {
                            record_source = AdKatsRecord.Sources.InternalAutomated,
                            server_id = oldPartner.player_server.ServerID,
                            record_orchestrate = true,
                            command_type = GetCommandByKey("player_pm_cancel"),
                            command_numeric = 0,
                            target_name = oldPartner.player_name,
                            target_player = oldPartner,
                            source_name = sender.player_name,
                            source_player = sender,
                            record_message = sender.GetVerboseName() + " has left the private conversation.",
                            record_time = UtcNow()
                        });
                    }
                    else
                    {
                        PlayerSayMessage(oldPartner.player_name, sender.GetVerboseName() + " has left the private conversation.");
                        oldPartner.conversationPartner = null;
                    }
                }
                //Assign local conversation partner
                sender.conversationPartner = partner;

                //Check for external case on new conversation partner
                if (PlayerIsExternal(partner))
                {
                    //Player is external, have that instance handle the needed actions
                    QueueRecordForProcessing(new AdKatsRecord
                    {
                        record_source = AdKatsRecord.Sources.InternalAutomated,
                        server_id = partner.player_server.ServerID,
                        record_orchestrate = true,
                        command_type = GetCommandByKey("player_pm_start"),
                        command_numeric = 0,
                        target_name = partner.player_name,
                        target_player = partner,
                        source_name = sender.player_name,
                        source_player = sender,
                        record_message = record.record_message,
                        record_time = UtcNow()
                    });
                }
                else
                {
                    //Player is local, inform them of the conversation start/change.
                    if (partner.conversationPartner == null)
                    {
                        //No conversation partner exists. Inform of the new one.
                        if (PlayerIsAdmin(partner) && !PlayerIsAdmin(sender) && !adminInformedChange)
                        {
                            OnlineAdminSayMessage("Admin " + sender.GetVerboseName() + " is now in a private conversation with " + partner.GetVerboseName());
                            adminInformedChange = true;
                        }
                        else
                        {
                            PlayerSayMessage(partner.player_name, "You are now in a private conversation with " + sender.GetVerboseName() + ". Use /" + GetCommandByKey("player_pm_reply").command_text + " msg to reply.");
                        }
                        partner.conversationPartner = sender;
                    }
                    else
                    {
                        //Conversation partner exists. Cancel that conversation. Inform all parties.
                        AdKatsPlayer oldPartner = partner.conversationPartner;

                        if (oldPartner.player_guid != sender.player_guid)
                        {
                            //Inform partner of change
                            PlayerSayMessage(partner.player_name, "Private conversation partner changed from " + oldPartner.GetVerboseName() + " to " + sender.GetVerboseName());

                            //Cancel oldPartner conversation
                            if (PlayerIsExternal(oldPartner))
                            {
                                QueueRecordForProcessing(new AdKatsRecord
                                {
                                    record_source = AdKatsRecord.Sources.InternalAutomated,
                                    server_id = oldPartner.player_server.ServerID,
                                    record_orchestrate = true,
                                    command_type = GetCommandByKey("player_pm_cancel"),
                                    command_numeric = 0,
                                    target_name = oldPartner.player_name,
                                    target_player = oldPartner,
                                    source_name = sender.player_name,
                                    source_player = sender,
                                    record_message = partner.GetVerboseName() + " has left the private conversation.",
                                    record_time = UtcNow()
                                });
                            }
                            else
                            {
                                PlayerSayMessage(oldPartner.player_name, partner.GetVerboseName() + " has left the private conversation.");
                                oldPartner.conversationPartner = null;
                            }
                        }
                        else
                        {
                            Log.Error("Code 14211: Inform ColColonCleaner");
                            return;
                        }
                    }
                    partner.conversationPartner = sender;
                }

                //Post the first message to the sender
                PlayerSayMessage(sender.player_name, "(MSG)(" + sender.player_name + "): " + record.record_message);
                //Post the first message to the partner
                if (!PlayerIsExternal(partner))
                {
                    PlayerSayMessage(partner.player_name, "(MSG)(" + sender.player_name + "): " + record.record_message);
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Private Message record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PMSendTarget", 6);
        }

        public void PMReplyTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PMReplyTarget", 6);
            try
            {
                record.record_action_executed = true;
                AdKatsPlayer sender = record.source_player;
                AdKatsPlayer partner = record.target_player;
                if (PlayerIsExternal(partner))
                {
                    QueueRecordForProcessing(new AdKatsRecord
                    {
                        record_source = AdKatsRecord.Sources.InternalAutomated,
                        server_id = partner.player_server.ServerID,
                        record_orchestrate = true,
                        command_type = GetCommandByKey("player_pm_transmit"),
                        command_numeric = 0,
                        target_name = partner.player_name,
                        target_player = partner,
                        source_name = sender.player_name,
                        source_player = sender,
                        record_message = record.record_message,
                        record_time = UtcNow()
                    });
                }
                else
                {
                    PlayerSayMessage(partner.player_name, "(MSG)(" + sender.player_name + "): " + record.record_message);
                }
                PlayerSayMessage(sender.player_name, "(MSG)(" + sender.player_name + "): " + record.record_message);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Private Message Reply record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PMReplyTarget", 6);
        }

        public void PMStartTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PMStartTarget", 6);
            try
            {
                record.record_action_executed = true;

                AdKatsPlayer sender = record.source_player;
                AdKatsPlayer partner = record.target_player;
                Boolean adminInformedChange = false;

                //Sender may not be in this server
                sender = FetchMatchingExternalOnlinePlayer(sender.player_name);

                if (sender == null)
                {
                    return;
                }

                //Inform partner of the conversation start/change.
                if (partner.conversationPartner == null)
                {
                    //No conversation partner exists. Inform of the new one.
                    if (PlayerIsAdmin(partner) && !PlayerIsAdmin(sender) && !adminInformedChange)
                    {
                        OnlineAdminSayMessage("Admin " + sender.GetVerboseName() + " is now in a private conversation with " + partner.GetVerboseName());
                        adminInformedChange = true;
                    }
                    else
                    {
                        PlayerSayMessage(partner.player_name, "You are now in a private conversation with " + sender.GetVerboseName() + ". Use /" + GetCommandByKey("player_pm_reply").command_text + " msg to reply.");
                    }
                    partner.conversationPartner = sender;
                }
                else
                {
                    //Conversation partner exists. Cancel that conversation. Inform all parties.
                    AdKatsPlayer oldPartner = partner.conversationPartner;

                    if (oldPartner.player_guid != sender.player_guid)
                    {
                        //Inform partner of change
                        PlayerSayMessage(partner.player_name, "Private conversation partner changed from " + oldPartner.GetVerboseName() + " to " + sender.GetVerboseName());

                        //Cancel oldPartner conversation
                        if (PlayerIsExternal(oldPartner))
                        {
                            QueueRecordForProcessing(new AdKatsRecord
                            {
                                record_source = AdKatsRecord.Sources.InternalAutomated,
                                server_id = oldPartner.player_server.ServerID,
                                record_orchestrate = true,
                                command_type = GetCommandByKey("player_pm_cancel"),
                                command_numeric = 0,
                                target_name = oldPartner.player_name,
                                target_player = oldPartner,
                                source_name = sender.player_name,
                                source_player = sender,
                                record_message = partner.GetVerboseName() + " has left the private conversation.",
                                record_time = UtcNow()
                            });
                        }
                        else
                        {
                            PlayerSayMessage(oldPartner.player_name, partner.GetVerboseName() + " has left the private conversation.");
                            oldPartner.conversationPartner = null;
                        }
                    }
                    else
                    {
                        PlayerSayMessage(sender.player_name, "You are already in a private conversation with " + partner.GetVerboseName() + ". Use /" + GetCommandByKey("player_pm_reply").command_text + " msg to reply.");
                        return;
                    }
                }
                partner.conversationPartner = sender;

                PlayerSayMessage(partner.player_name, "(MSG)(" + sender.player_name + "): " + record.record_message);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Private Message Start record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PMStartTarget", 6);
        }

        public void PMCancelTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PMCancelTarget", 6);
            try
            {
                record.record_action_executed = true;

                AdKatsPlayer sender = record.source_player;
                AdKatsPlayer partner = record.target_player;

                if (partner.conversationPartner != null)
                {
                    PlayerSayMessage(partner.player_name, record.record_message);
                    partner.conversationPartner = null;
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Private Message Cancel record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PMCancelTarget", 6);
        }

        public void PMTransmitTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PMTransmitTarget", 6);
            try
            {
                record.record_action_executed = true;

                AdKatsPlayer sender = record.source_player;
                AdKatsPlayer partner = record.target_player;
                Boolean adminInformedChange = false;

                //Sender may not be in this server
                sender = FetchMatchingExternalOnlinePlayer(sender.player_name);

                if (sender == null)
                {
                    return;
                }

                if (partner.conversationPartner == null || partner.conversationPartner.player_guid != sender.player_guid)
                {
                    //Cancel oldPartner conversation
                    if (PlayerIsExternal(sender))
                    {
                        QueueRecordForProcessing(new AdKatsRecord
                        {
                            record_source = AdKatsRecord.Sources.InternalAutomated,
                            server_id = sender.player_server.ServerID,
                            record_orchestrate = true,
                            command_type = GetCommandByKey("player_pm_cancel"),
                            command_numeric = 0,
                            target_name = sender.player_name,
                            target_player = sender,
                            source_name = partner.player_name,
                            source_player = partner,
                            record_message = partner.GetVerboseName() + " is not in a private conversation with you.",
                            record_time = UtcNow()
                        });
                    }
                    else
                    {
                        PlayerSayMessage(partner.player_name, partner.GetVerboseName() + " is not in a private conversation with you.");
                        sender.conversationPartner = null;
                    }
                }
                else
                {
                    PlayerSayMessage(partner.player_name, "(MSG)(" + sender.player_name + "): " + record.record_message);
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Private Message Transmit record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PMTransmitTarget", 6);
        }

        public void PMOnlineAdmins(AdKatsRecord record)
        {
            Log.Debug(() => "Entering PMAdmin", 6);
            try
            {
                record.record_action_executed = true;
                if (record.source_player != null && !PlayerIsAdmin(record.source_player))
                {
                    SendMessageToSource(record, "(MSG)(" + record.source_name + "): " + record.record_message);
                }
                OnlineAdminSayMessage("(MSG)(" + record.source_name + "): " + record.record_message);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for Private Message Admin record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting PMAdmin", 6);
        }

        public void AdminYell(AdKatsRecord record)
        {
            Log.Debug(() => "Entering adminYell", 6);
            try
            {
                record.record_action_executed = true;
                AdminYellMessage(record.record_message);
                if (record.record_source != AdKatsRecord.Sources.InGame && record.record_source != AdKatsRecord.Sources.ServerCommand)
                {
                    SendMessageToSource(record, "Server has been told '" + record.record_message + "' by YELL");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for AdminYell record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting adminYell", 6);
        }

        public void PlayerYell(AdKatsRecord record)
        {
            Log.Debug(() => "Entering playerYell", 6);
            try
            {
                record.record_action_executed = true;
                PlayerYellMessage(record.target_player.player_name, record.record_message);
                SendMessageToSource(record, record.GetTargetNames() + " has been told '" + record.record_message + "' by YELL");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for playerYell record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting playerYell", 6);
        }

        public void AdminTell(AdKatsRecord record)
        {
            Log.Debug(() => "Entering adminTell", 6);
            try
            {
                record.record_action_executed = true;
                AdminTellMessage(record.record_message);
                if (record.record_source != AdKatsRecord.Sources.InGame && record.record_source != AdKatsRecord.Sources.ServerCommand)
                {
                    SendMessageToSource(record, "Server has been told '" + record.record_message + "' by TELL");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for AdminYell record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting adminTell", 6);
        }

        public void PlayerTell(AdKatsRecord record)
        {
            Log.Debug(() => "Entering playerTell", 6);
            try
            {
                record.record_action_executed = true;
                PlayerTellMessage(record.target_player.player_name, record.record_message);
                SendMessageToSource(record, record.GetTargetNames() + " has been told '" + record.record_message + "' by TELL");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for playerTell record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting playerTell", 6);
        }

        public void SendPopulationSuccess(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendPopulationSuccess", 6);
            try
            {
                record.record_action_executed = true;
                if (_isTestingAuthorized)
                {
                    PlayerTellMessage(record.target_player.player_name, "Thank you for helping populate the server!");
                }
                else
                {
                    PlayerSayMessage(record.target_player.player_name, "Thank you for helping populate the server!");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while taking action for population success record.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendPopulationSuccess", 6);
        }

        public void SendServerRules(AdKatsRecord record)
        {
            Log.Debug(() => "Entering sendServerRules", 6);
            try
            {
                record.record_action_executed = true;
                //If server has rules
                if (_ServerRulesList.Length > 0)
                {
                    //If requesting rules on yourself as an admin, rules should be sent to the whole server.
                    Boolean sourceIsAdmin = ((record.source_player != null && PlayerIsAdmin(record.source_player) || record.source_player == null));
                    Boolean allPlayers = (sourceIsAdmin) && (record.target_player == null || record.target_name == record.source_name);
                    if (record.source_name != record.target_name)
                    {
                        if (!sourceIsAdmin)
                        {
                            SendMessageToSource(record, "Telling server rules to " + record.GetTargetNames());
                        }
                        OnlineAdminSayMessage(((sourceIsAdmin) ? ("Admin ") : ("")) + record.GetSourceName() + " told server rules to " + record.GetTargetNames() + ".");
                    }
                    else
                    {
                        OnlineAdminSayMessage(((sourceIsAdmin) ? ("Admin ") : ("")) + record.GetSourceName() + " requested server rules.");
                    }

                    Thread rulePrinter = new Thread(new ThreadStart(delegate
                    {
                        Log.Debug(() => "Starting a rule printer thread.", 5);
                        try
                        {
                            Thread.CurrentThread.Name = "RulePrinter";
                            //Wait the rule delay duration
                            _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(_ServerRulesDelay));
                            Int32 ruleIndex = 0;
                            IEnumerable<string> validRules = _ServerRulesList.Where(rule => !String.IsNullOrEmpty(rule));
                            foreach (string rule in validRules)
                            {
                                String currentPrefix = (_ServerRulesNumbers) ? ("(" + (++ruleIndex) + "/" + validRules.Count() + ") ") : ("");
                                if (allPlayers)
                                {
                                    AdminSayMessage(currentPrefix + GetPreMessage(rule, false));
                                }
                                else
                                {
                                    if (record.target_player != null)
                                    {
                                        if (_ServerRulesYell)
                                        {
                                            PlayerTellMessage(record.target_player.player_name, currentPrefix + GetPreMessage(rule, false));
                                        }
                                        else
                                        {
                                            PlayerSayMessage(record.target_player.player_name, currentPrefix + GetPreMessage(rule, false));
                                        }
                                    }
                                    else
                                    {
                                        SendMessageToSource(record, currentPrefix + GetPreMessage(rule, false));
                                    }
                                }
                                _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(_ServerRulesInterval));
                            }
                        }
                        catch (Exception)
                        {
                            HandleException(new AdKatsException("Error while printing server rules"));
                        }
                        Log.Debug(() => "Exiting a rule printer.", 5);
                        LogThreadExit();
                    }));

                    //Start the thread
                    StartAndLogThread(rulePrinter);
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending server rules.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting sendServerRules", 6);
        }

        public void SourceVoteSurrender(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SourceVoteSurrender", 6);
            try
            {
                record.record_action_executed = true;

                //Case for database added records 
                if (!_surrenderVoteEnable)
                {
                    SendMessageToSource(record, "Surrender Vote must be enabled in AdKats settings to use this command.");
                    FinalizeRecord(record);
                    return;
                }
                if (_roundState != RoundState.Playing)
                {
                    SendMessageToSource(record, "Round state must be playing to use surrender. Current: " + _roundState);
                    FinalizeRecord(record);
                    return;
                }
                if (_surrenderVoteSucceeded)
                {
                    SendMessageToSource(record, "Surrender already succeeded.");
                    FinalizeRecord(record);
                    return;
                }
                if (_surrenderVoteList.Contains(record.source_name))
                {
                    SendMessageToSource(record, "You already voted! You can cancel your vote with @" + GetCommandByKey("command_cancel").command_text);
                    FinalizeRecord(record);
                    return;
                }
                bool voteEnabled = false;
                AdKatsTeam team1, team2;
                if (!GetTeamByID(1, out team1))
                {
                    if (_roundState == RoundState.Playing)
                    {
                        Log.Error("Teams not loaded when they should be.");
                    }
                    return;
                }
                if (!GetTeamByID(2, out team2))
                {
                    if (_roundState == RoundState.Playing)
                    {
                        Log.Error("Teams not loaded when they should be.");
                    }
                    return;
                }
                AdKatsTeam winningTeam, losingTeam;
                if (team1.TeamTicketCount > team2.TeamTicketCount)
                {
                    winningTeam = team1;
                    losingTeam = team2;
                }
                else
                {
                    winningTeam = team2;
                    losingTeam = team1;
                }
                if (!_surrenderVoteActive)
                {
                    Int32 playerCount = _PlayerDictionary.Values.Count(player => player.player_type == PlayerType.Player);
                    if (playerCount < _surrenderVoteMinimumPlayerCount)
                    {
                        SendMessageToSource(record, _surrenderVoteMinimumPlayerCount + " players needed to start Surrender Vote. Current: " + playerCount);
                        FinalizeRecord(record);
                        return;
                    }
                    Int32 ticketGap = Math.Abs(team1.TeamTicketCount - team2.TeamTicketCount);
                    if (ticketGap < _surrenderVoteMinimumTicketGap)
                    {
                        SendMessageToSource(record, _surrenderVoteMinimumTicketGap + " ticket gap needed to start Surrender Vote. Current: " + ticketGap);
                        FinalizeRecord(record);
                        return;
                    }
                    Double ticketRateGap = Math.Abs(team1.GetTicketDifferenceRate() - team2.GetTicketDifferenceRate());
                    if (_surrenderVoteTicketRateGapEnable && ticketRateGap < _surrenderVoteMinimumTicketRateGap)
                    {
                        SendMessageToSource(record, _surrenderVoteMinimumTicketRateGap + " ticket rate gap needed to start Surrender Vote. Current: " + Math.Round(ticketRateGap, 2));
                        FinalizeRecord(record);
                        return;
                    }

                    _surrenderVoteActive = true;
                    voteEnabled = true;
                    _surrenderVoteStartTime = UtcNow();
                    if (_surrenderVoteTimeoutEnable)
                    {
                        Thread surrenderTimingThread = new Thread(new ThreadStart(delegate
                        {
                            Log.Debug(() => "Starting a surrender timing thread.", 5);
                            try
                            {
                                while (_pluginEnabled && (UtcNow() - _surrenderVoteStartTime).TotalMinutes < _surrenderVoteTimeoutMinutes && !_surrenderVoteSucceeded && _surrenderVoteActive)
                                {
                                    _threadMasterWaitHandle.WaitOne(500);
                                }
                                if (!_surrenderVoteSucceeded && _roundState == RoundState.Playing && _pluginEnabled)
                                {
                                    _surrenderVoteActive = false;
                                    _surrenderVoteList.Clear();
                                    AdminTellMessage("Surrender Vote Timed Out. Votes removed.");
                                }
                            }
                            catch (Exception)
                            {
                                HandleException(new AdKatsException("Error while running surrender timing."));
                            }
                            Log.Debug(() => "Exiting a surrender timing thread.", 5);
                            LogThreadExit();
                        }));
                        StartAndLogThread(surrenderTimingThread);
                    }
                }

                //Remove nosurrender vote if any
                _nosurrenderVoteList.Remove(record.source_name);
                //Add the vote
                _surrenderVoteList.Add(record.source_name);
                Int32 requiredVotes = (Int32)((_PlayerDictionary.Count / 2.0) * (_surrenderVoteMinimumPlayerPercentage / 100.0));
                Int32 voteCount = _surrenderVoteList.Count - _nosurrenderVoteList.Count;
                if (voteCount >= requiredVotes)
                {
                    //Vote succeeded, trigger winning team
                    _surrenderVoteSucceeded = true;
                    if (!_endingRound)
                    {
                        _endingRound = true;
                        Thread roundEndDelayThread = new Thread(new ThreadStart(delegate
                        {
                            Log.Debug(() => "Starting a round end delay thread.", 5);
                            try
                            {
                                Thread.CurrentThread.Name = "RoundEndDelay";
                                for (int i = 0; i < 8; i++)
                                {
                                    AdminTellMessage("Surrender Vote Succeeded. " + winningTeam.TeamName + " wins!");
                                    Thread.Sleep(50);
                                }
                                _threadMasterWaitHandle.WaitOne(7000);
                                AdKatsRecord repRecord = new AdKatsRecord
                                {
                                    record_source = AdKatsRecord.Sources.InternalAutomated,
                                    server_id = _serverInfo.ServerID,
                                    command_type = GetCommandByKey("round_end"),
                                    command_numeric = winningTeam.TeamID,
                                    target_name = winningTeam.TeamName,
                                    source_name = "RoundManager",
                                    record_message = "Surrender Vote (" + winningTeam.TeamKey + " Win)(" + winningTeam.TeamTicketCount + ":" + losingTeam.TeamTicketCount + ")(" + FormatTimeString(_serverInfo.GetRoundElapsedTime(), 3) + ")",
                                    record_time = UtcNow()
                                };
                                QueueRecordForProcessing(repRecord);
                            }
                            catch (Exception)
                            {
                                HandleException(new AdKatsException("Error while running round end delay."));
                            }
                            Log.Debug(() => "Exiting a round end delay thread.", 5);
                            LogThreadExit();
                        }));
                        StartAndLogThread(roundEndDelayThread);
                    }
                }
                else
                {
                    SendMessageToSource(record, "You voted to end the round!");
                    if (voteEnabled)
                    {
                        AdminTellMessage("Surrender Vote started! Use @" + GetCommandByKey("self_surrender").command_text + ", @" + GetCommandByKey("self_votenext").command_text + ", or @" + GetCommandByKey("self_nosurrender").command_text + " to vote.");
                    }
                    else
                    {
                        AdminSayMessage((requiredVotes - voteCount) + " votes needed for surrender/scramble. Use @" + GetCommandByKey("self_surrender").command_text + ", @" + GetCommandByKey("self_votenext").command_text + ", or @" + GetCommandByKey("self_nosurrender").command_text + " to vote.");
                        AdminYellMessage((requiredVotes - voteCount) + " votes needed for surrender/scramble");
                    }
                    OnlineAdminSayMessage(record.GetSourceName() + " voted for round surrender.");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while voting surrender.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SourceVoteSurrender", 6);
        }

        public void SourceVoteNoSurrender(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SourceVoteNoSurrender", 6);
            try
            {
                record.record_action_executed = true;

                //Case for database added records 
                if (!_surrenderVoteEnable)
                {
                    SendMessageToSource(record, "Surrender Vote must be enabled in AdKats settings to use this command.");
                    FinalizeRecord(record);
                    return;
                }
                if (_roundState != RoundState.Playing)
                {
                    SendMessageToSource(record, "Round state must be playing to vote against surrender. Current: " + _roundState);
                    FinalizeRecord(record);
                    return;
                }
                if (_surrenderVoteSucceeded)
                {
                    SendMessageToSource(record, "Surrender already succeeded.");
                    FinalizeRecord(record);
                    return;
                }
                if (_nosurrenderVoteList.Contains(record.source_name))
                {
                    SendMessageToSource(record, "You already voted against surrender!");
                    FinalizeRecord(record);
                    return;
                }
                if (!_surrenderVoteActive)
                {
                    SendMessageToSource(record, "A surrender vote must be active to vote against it.");
                    FinalizeRecord(record);
                    return;
                }

                //Remove surrender vote if any
                _surrenderVoteList.Remove(record.source_name);
                //Add the vote
                _nosurrenderVoteList.Add(record.source_name);
                Int32 requiredVotes = (Int32)((_PlayerDictionary.Count / 2.0) * (_surrenderVoteMinimumPlayerPercentage / 100.0));
                Int32 voteCount = _surrenderVoteList.Count - _nosurrenderVoteList.Count;
                SendMessageToSource(record, "You voted against ending the round!");
                AdminSayMessage((requiredVotes - voteCount) + " votes needed for surrender/scramble. Use @" + GetCommandByKey("self_surrender").command_text + ", @" + GetCommandByKey("self_votenext").command_text + ", or @" + GetCommandByKey("self_nosurrender").command_text + " to vote.");
                AdminYellMessage((requiredVotes - voteCount) + " votes needed for surrender/scramble");
                OnlineAdminSayMessage(record.GetSourceName() + " voted against round surrender.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while voting against surrender.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SourceVoteNoSurrender", 6);
        }

        public void SendServerCommands(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendServerCommands", 6);
            try
            {
                record.record_action_executed = true;
                Thread commandPrinter = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting a command printer thread.", 5);
                    try
                    {
                        Thread.CurrentThread.Name = "CommandPrinter";

                        List<string> fullCommandList = new List<String>();
                        foreach (AdKatsCommand aCommand in _CommandIDDictionary.Values)
                        {
                            if ((record.target_player == null && aCommand.command_active == AdKatsCommand.CommandActive.Active) || HasAccess(record.target_player, aCommand))
                            {
                                fullCommandList.Add("!" + aCommand.command_text);
                            }
                        }
                        if (record.target_player == null || PlayerIsAdmin(record.target_player))
                        {
                            fullCommandList.AddRange(_ExternalAdminCommands);
                        }
                        else
                        {
                            fullCommandList.AddRange(_ExternalPlayerCommands);
                        }
                        List<List<String>> commandSplits = fullCommandList.Select((x, i) => new
                        {
                            Index = i,
                            Value = x
                        }).GroupBy(x => x.Index / 5).Select(x => x.Select(v => v.Value).ToList()).ToList();

                        foreach (List<string> curCommands in commandSplits)
                        {
                            String curCommandsStr = "";
                            foreach (String cur in curCommands)
                            {
                                curCommandsStr += cur + ", ";
                            }
                            SendMessageToSource(record, curCommandsStr);
                            _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(2));
                        }
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while printing server commands"));
                    }
                    Log.Debug(() => "Exiting a command printer.", 5);
                    LogThreadExit();
                }));

                //Start the thread
                StartAndLogThread(commandPrinter);

                if (record.source_name != record.target_name)
                {
                    SendMessageToSource(record, "Telling server commands to " + record.GetTargetNames());
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending server commands.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendServerCommands", 6);
        }

        public void SendTargetRep(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendTargetRep", 6);
            try
            {
                record.record_action_executed = true;
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "Reputation fetch player not found, unable to continue.");
                    FinalizeRecord(record);
                    return;
                }
                record.command_numeric = (Int32)record.target_player.player_reputation;
                record.record_message = record.target_player.player_name + "'s reputation is " + Math.Round(record.target_player.player_reputation, 2);
                var isAdmin = PlayerIsAdmin(record.target_player);
                var points = FetchPoints(record.target_player, false, true);
                if (record.source_name == record.target_name) {
                    String repMessage = "Your server reputation is " + ((!isAdmin || !_isTestingAuthorized) ? (Math.Round(record.target_player.player_reputation, 2) + "") : (record.target_player.player_role.role_name)) + ", with ";
                    if (points > 0) {
                        repMessage += points + " infraction point(s). ";
                    } else {
                        repMessage += "a clean infraction record. ";
                    }
                    if (!isAdmin) {
                        if (_isTestingAuthorized) {
                            repMessage += Environment.NewLine;
                            if (record.target_player.player_reputation < _reputationThresholdGood) {
                                if (record.target_player.player_reputation > 15) {
                                    repMessage += "Thank you for helping the admins! At " + Math.Round(_reputationThresholdGood, 2) + " reputation you receive large perks.";
                                } else if (record.target_player.player_reputation > 0) {
                                    repMessage += "Thank you for helping the admins! At 15 reputation you receive small perks.";
                                } else {
                                    repMessage += "!" + GetCommandByKey("player_report").command_text + " rule breakers to increase reputation.";
                                }
                            } else {
                                repMessage += "You have report auto-contest and spambot whitelist. Thank you.";
                            }
                        } else if (points < 1 &&
                            record.target_player.player_reputation > _reputationThresholdBad) {
                            repMessage += "Thank you for helping the admins!";
                        }
                    }
                    if (points > 0 && _AutomaticForgives) {
                        var forgiveTime = UtcNow();
                        if (record.target_player.LastForgive != null) {
                            var forgiveDiff = record.target_player.LastForgive.record_time.AddDays(_AutomaticForgiveLastForgiveDays);
                            if (forgiveDiff > forgiveTime) {
                                forgiveTime = forgiveDiff;
                            }
                        }
                        if (record.target_player.LastPunishment != null) {
                            var punishDiff = record.target_player.LastPunishment.record_time.AddDays(_AutomaticForgiveLastPunishDays);
                            if (punishDiff > forgiveTime) {
                                forgiveTime = punishDiff;
                            }
                        }
                        repMessage += Environment.NewLine + "Next auto-forgive after you spawn " + FormatNowDuration(forgiveTime, 2) + " from now.";
                    }
                    SendMessageToSource(record, repMessage);
                }
                else {
                    String repMessage = record.GetTargetNames() + "'s server reputation is " + ((!isAdmin || !_isTestingAuthorized) ? (Math.Round(record.target_player.player_reputation, 2) + "") : (record.target_player.player_role.role_name)) + ", with ";
                    if (points > 0) {
                        repMessage += points + " infraction point(s). ";
                    } else {
                        repMessage += "a clean infraction record. ";
                    }
                    SendMessageToSource(record, repMessage);
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending server rep.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendTargetRep", 6);
        }

        public void SendTargetIsAdmin(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendTargetIsAdmin", 6);
            try
            {
                record.record_action_executed = true;
                if (record.target_player == null)
                {
                    SendMessageToSource(record, "Player not found, unable to continue.");
                    FinalizeRecord(record);
                    return;
                }
                if (record.source_name == record.target_name)
                {
                    SendMessageToSource(record, "You are " + ((PlayerIsAdmin(record.source_player))?(""):("not ")) + "an admin. [" + record.source_player.player_role.role_name + "]");
                }
                else 
                {
                    SendMessageToSource(record, record.target_player.GetVerboseName() + " is " + ((PlayerIsAdmin(record.target_player)) ? ("") : ("not ")) + "an admin. [" + record.target_player.player_role.role_name + "]");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending admin status.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendTargetIsAdmin", 6);
        }
        
        public void SendUptime(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendUptime", 6);
            try
            {
                record.record_action_executed = true;
                Thread uptimePrinter = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting a uptime printer thread.", 5);
                    try
                    {
                        Thread.CurrentThread.Name = "UptimePrinter";
                        SendMessageToSource(record, "Server: " + FormatTimeString(TimeSpan.FromSeconds(_serverInfo.InfoObject.ServerUptime), 10));
                        _threadMasterWaitHandle.WaitOne(3000);
                        SendMessageToSource(record, "Procon: " + FormatTimeString(UtcNow() - _proconStartTime, 10));
                        _threadMasterWaitHandle.WaitOne(3000);
                        SendMessageToSource(record, "AdKats " + PluginVersion + ": " + FormatTimeString(UtcNow() - _AdKatsRunningTime, 10));
                        _threadMasterWaitHandle.WaitOne(3000);
                        SendMessageToSource(record, "Last Player List: " + FormatTimeString(UtcNow() - _lastSuccessfulPlayerList, 10) + " ago");
                        _threadMasterWaitHandle.WaitOne(3000);
                        SendMessageToSource(record, "Server has been in " + _populationStatus.ToString().ToLower() + " population for " + FormatTimeString(UtcNow() - _populationTransitionTime, 3));
                        Double totalPopulationDuration = _populationDurations[PopulationState.Low].TotalSeconds + _populationDurations[PopulationState.Medium].TotalSeconds + _populationDurations[PopulationState.High].TotalSeconds;
                        if (totalPopulationDuration > 0)
                        {
                            _threadMasterWaitHandle.WaitOne(5000);
                            Int32 lowPopPercentage = (int)Math.Round(_populationDurations[PopulationState.Low].TotalSeconds / totalPopulationDuration * 100);
                            Int32 medPopPercentage = (int)Math.Round(_populationDurations[PopulationState.Medium].TotalSeconds / totalPopulationDuration * 100);
                            Int32 highPopPercentage = (int)Math.Round(_populationDurations[PopulationState.High].TotalSeconds / totalPopulationDuration * 100);
                            SendMessageToSource(record, "Population since AdKats start: " + lowPopPercentage + "% low. " + medPopPercentage + "% medium. " + highPopPercentage + "% high.");
                        }
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while printing uptime"));
                    }
                    Log.Debug(() => "Exiting a uptime printer.", 5);
                    LogThreadExit();
                }));

                //Start the thread
                StartAndLogThread(uptimePrinter);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending uptime.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendUptime", 6);
        }

        public void SendRoundReports(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendRoundReports", 6);
            try
            {
                record.record_action_executed = true;
                List<AdKatsRecord> lastMissedReports = _RoundReports.Values.OrderByDescending(aRecord => aRecord.record_time).Take(6).Reverse().ToList();
                Boolean listed = false;
                foreach (AdKatsRecord rRecord in lastMissedReports)
                {
                    String location;
                    if (rRecord.target_player.player_online)
                    {
                        location = GetPlayerTeamKey(rRecord.target_player) + "/" + (_PlayerDictionary.Values.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == rRecord.target_player.frostbitePlayerInfo.TeamID).OrderBy(aPlayer => aPlayer.frostbitePlayerInfo.Score).Reverse().ToList().IndexOf(rRecord.target_player) + 1);
                    }
                    else
                    {
                        location = "OFFLINE";
                    }
                    SendMessageToSource(record, "(" + rRecord.command_numeric + ")(" + FormatTimeString(UtcNow() - rRecord.record_time, 2) + ")(" + rRecord.GetTargetNames() + "/" + location + "):" + rRecord.record_message);
                    Thread.Sleep(30);
                    listed = true;
                }
                if (!listed)
                {
                    SendMessageToSource(record, "No missed round reports were found.");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending round reports.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendRoundReports", 6);
        }

        public void RebootPlugin(AdKatsRecord record)
        {
            Log.Debug(() => "Entering RebootPlugin", 6);
            try
            {
                record.record_action_executed = true;
                _pluginRebootOnDisable = true;
                if (record.record_source == AdKatsRecord.Sources.InGame)
                {
                    _pluginRebootOnDisableSource = record.source_name;
                }
                SendMessageToSource(record, "Rebooting AdKats shortly.");
                //Run the reboot delay thread
                StartAndLogThread(new Thread(new ThreadStart(delegate
                {
                    Thread.CurrentThread.Name = "RebootDelay";
                    Thread.Sleep(10000);
                    Disable();
                    LogThreadExit();
                })));
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while rebooting plugin.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting RebootPlugin", 6);
        }

        public void UpdatePlugin(AdKatsRecord record)
        {
            Log.Debug(() => "Entering UpdatePlugin", 6);
            try
            {
                record.record_action_executed = true;
                _pluginUpdateCaller = record;
                CheckForPluginUpdates(true);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while rebooting plugin.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting UpdatePlugin", 6);
        }

        public void ShutdownServer(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ShutdownServer", 6);
            try
            {
                record.record_action_executed = true;
                ExecuteCommand("procon.protected.send", "admin.shutDown");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while shutting down server.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ShutdownServer", 6);
        }

        public void SendTargetInfo(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendTargetInfo", 6);
            try
            {
                record.record_action_executed = true;
                Thread infoPrinter = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting a player info printer thread.", 5);
                    try
                    {
                        Thread.CurrentThread.Name = "PlayerInfoPrinter";
                        if (record.target_player == null)
                        {
                            Log.Error("Player null in player info printer.");
                            return;
                        }
                        _threadMasterWaitHandle.WaitOne(500);
                        String playerInfo = record.target_player.GetVerboseName() + ": " + record.target_player.player_id + ", " + record.target_player.player_role.role_name;
                        if (record.target_player != null && record.target_player.frostbitePlayerInfo != null)
                        {
                            if (record.target_player.player_online)
                            {
                                playerInfo += ", " + GetPlayerTeamName(record.target_player) + "/" + (_PlayerDictionary.Values.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == record.target_player.frostbitePlayerInfo.TeamID).OrderBy(aPlayer => aPlayer.frostbitePlayerInfo.Score).Reverse().ToList().IndexOf(record.target_player) + 1) + "/" + record.target_player.frostbitePlayerInfo.Score;
                            }
                            else
                            {
                                playerInfo += ", OFFLINE";
                            }
                        }
                        SendMessageToSource(record, playerInfo);
                        _threadMasterWaitHandle.WaitOne(2000);
                        SendMessageToSource(record, "First seen: " + FormatTimeString(UtcNow() - record.target_player.player_firstseen, 3) + " ago.");
                        _threadMasterWaitHandle.WaitOne(2000);
                        SendMessageToSource(record, "Time on server: " + FormatTimeString(record.target_player.player_serverplaytime, 3) + " + current session.");
                        _threadMasterWaitHandle.WaitOne(2000);
                        String playerLoc = "Unknown";
                        if (!String.IsNullOrEmpty(record.target_player.player_ip))
                        {
                            IPAPILocation loc = record.target_player.location;
                            if (loc != null && loc.status == "success")
                            {
                                playerLoc = String.Empty;
                                if (!String.IsNullOrEmpty(loc.city))
                                {
                                    playerLoc += loc.city + ", ";
                                }
                                if (!String.IsNullOrEmpty(loc.regionName))
                                {
                                    playerLoc += loc.regionName + ", ";
                                }
                                playerLoc += loc.country;
                                List<AdKatsRecord> locRecords = FetchRecentRecords(record.target_player.player_id, GetCommandByKey("player_changeip").command_id, 1000, 50, true, false).Where(aRecord => aRecord.record_message != "No previous IP on record").ToList();
                                if (locRecords.Any())
                                {
                                    playerLoc += " with " + locRecords.GroupBy(locRecord => locRecord.record_message).Select(group => group.First()).Count() + " different IPs.";
                                }
                            }
                        }
                        else
                        {
                            playerLoc = "Player IP not found";
                        }
                        SendMessageToSource(record, "Location: " + playerLoc);
                        _threadMasterWaitHandle.WaitOne(2000);
                        IEnumerable<AdKatsRecord> reportsFrom = _RoundReports.Values.Where(aRecord => aRecord.source_name == record.target_name);
                        IEnumerable<AdKatsRecord> reportsAgainst = _RoundReports.Values.Where(aRecord => aRecord.target_name == record.target_name);
                        String playerReps = "None from or against.";
                        if (reportsAgainst.Any() || reportsFrom.Any())
                        {
                            playerReps = String.Empty;
                            if (reportsAgainst.Any())
                            {
                                playerReps += "[" + reportsAgainst.Count() + " against:";
                                playerReps = reportsAgainst.Aggregate(playerReps, (current, playerRep) => current + (" (" + ((playerRep.isContested) ? ("-CONTESTED- ") : ("")) + playerRep.record_message + ")"));
                                playerReps += "]";
                            }
                            if (reportsFrom.Any())
                            {
                                playerReps += "[" + reportsFrom.Count() + " from:";
                                playerReps = reportsFrom.Aggregate(playerReps, (current, playerRep) => current + (" (" + ((playerRep.isContested) ? ("-CONTESTED- ") : ("")) + playerRep.record_message + ")"));
                                playerReps += "]";
                            }
                        }
                        SendMessageToSource(record, "Reports: " + playerReps);
                        _threadMasterWaitHandle.WaitOne(2000);
                        //Infraction Points
                        String playerInf = "Player in good standing.";
                        Int64 infPoints = FetchPoints(record.target_player, false, true);
                        if (infPoints > 0)
                        {
                            playerInf = infPoints + " points.";
                        }
                        SendMessageToSource(record, "Infractions: " + playerInf);
                        _threadMasterWaitHandle.WaitOne(2000);
                        //Last Punishment
                        String lastPunishText = "No punishments found.";
                        List<AdKatsRecord> punishments = FetchRecentRecords(record.target_player.player_id, GetCommandByKey("player_punish").command_id, 1000, 1, true, false);
                        if (punishments.Any())
                        {
                            AdKatsRecord lastPunish = punishments[0];
                            lastPunishText = FormatTimeString(UtcNow() - lastPunish.record_time, 2) + " ago by " + lastPunish.GetSourceName() + ": " + lastPunish.record_message;
                        }
                        SendMessageToSource(record, "Last Punishment: " + lastPunishText);
                        _threadMasterWaitHandle.WaitOne(2000);
                        //Last Forgive
                        String lastForgiveText = "No forgives found.";
                        List<AdKatsRecord> forgives = FetchRecentRecords(record.target_player.player_id, GetCommandByKey("player_forgive").command_id, 1000, 1, true, false);
                        if (forgives.Any())
                        {
                            AdKatsRecord lastForgive = forgives[0];
                            lastForgiveText = FormatTimeString(UtcNow() - lastForgive.record_time, 2) + " ago by " + lastForgive.GetSourceName() + ": " + lastForgive.record_message;
                        }
                        SendMessageToSource(record, "Last Forgive: " + lastForgiveText);
                        _threadMasterWaitHandle.WaitOne(2000);
                        //Rules requests
                        String rulesRequestsText = "Player has never requested rules.";
                        List<AdKatsRecord> rulesRequests = FetchRecentRecords(record.target_player.player_id, GetCommandByKey("self_rules").command_id, 1000, 50, true, false);
                        if (rulesRequests.Any(innerRecord => innerRecord.source_player != null && innerRecord.source_player.player_id == record.target_player.player_id))
                        {
                            AdKatsRecord lastRulesRequest = rulesRequests[0];
                            rulesRequestsText = FormatTimeString(UtcNow() - lastRulesRequest.record_time, 2) + " ago.";
                        }
                        SendMessageToSource(record, "Last Rules Request: " + rulesRequestsText);
                        _threadMasterWaitHandle.WaitOne(2000);
                        //Ping Kicks
                        String pingKicksText = "Player never kicked for ping.";
                        IEnumerable<AdKatsRecord> pingKicks = FetchRecentRecords(record.target_player.player_id, GetCommandByKey("player_kick").command_id, 1000, 50, true, false).Where(innerRecord => innerRecord.source_name == "PingEnforcer");
                        if (pingKicks.Any())
                        {
                            pingKicksText = "Kicked " + pingKicks.Count() + " time(s) for high ping.";
                        }
                        SendMessageToSource(record, "Ping Kicks: " + pingKicksText + " Current Ping [" + ((record.target_player.player_ping_avg > 0) ? (Math.Round(record.target_player.player_ping_avg, 2) + "") : ("Missing")) + "].");
                        _threadMasterWaitHandle.WaitOne(2000);
                        //Reputation
                        SendMessageToSource(record, "Reputation: " + ((!PlayerIsAdmin(record.target_player)) ? (Math.Round(record.target_player.player_reputation, 2) + "") : (record.target_player.player_role.role_name)));
                        _threadMasterWaitHandle.WaitOne(2000);
                        //Previous Names
                        String playerNames = "No previous names.";
                        List<AdKatsRecord> nameRecords = FetchRecentRecords(record.target_player.player_id, GetCommandByKey("player_changename").command_id, 1000, 50, true, false).GroupBy(nameRecord => nameRecord.record_message).Select(group => group.First()).ToList();
                        if (nameRecords.Any())
                        {
                            playerNames = nameRecords.Aggregate(record.target_name, (current, nameRecord) => current + (", " + nameRecord.record_message));
                        }
                        SendMessageToSource(record, "Previous names: " + playerNames);
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while printing player info"));
                    }
                    Log.Debug(() => "Exiting a player info printer.", 5);
                    LogThreadExit();
                }));

                //Start the thread
                StartAndLogThread(infoPrinter);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending player info.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendTargetInfo", 6);
        }

        public void SendTargetPerks(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendTargetPerks", 6);
            try
            {
                record.record_action_executed = true;
                Thread perkPrinter = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting a player perk printer thread.", 5);
                    try
                    {
                        Thread.CurrentThread.Name = "PlayerPerkPrinter";
                        if (record.target_player == null)
                        {
                            Log.Error("Player null in player perk printer.");
                            return;
                        }
                        _threadMasterWaitHandle.WaitOne(500);
                        var asPlayers = GetMatchingVerboseASPlayers(record.target_player);
                        if (!asPlayers.Any())
                        {
                            if (record.source_name == record.target_name)
                            {
                                SendMessageToSource(record, "You do not have any active perks. Contact your admin for more information!");
                            }
                            else
                            {
                                SendMessageToSource(record, record.target_player.GetVerboseName()+ " does not have any active perks.");
                            }
                            FinalizeRecord(record);
                            return;
                        }
                        if (record.source_name == record.target_name)
                        {
                            SendMessageToSource(record, "Showing your active perks:");
                        }
                        else
                        {
                            SendMessageToSource(record, "Showing " + record.target_player.GetVerboseName() + "'s active perks:");
                        }
                        foreach (var groupKey in _PerkSpecialPlayerGroups)
                        {
                            var asPlayer = asPlayers.FirstOrDefault(dPlayer => dPlayer.player_group.group_key == groupKey);
                            if (asPlayer != null)
                            {
                                _threadMasterWaitHandle.WaitOne(1000);
                                var expireDuration = NowDuration(asPlayer.player_expiration);
                                String expiration = (expireDuration.TotalDays > 500.0) ? ("Permanent") : (FormatTimeString(expireDuration, 3));
                                SendMessageToSource(record, asPlayer.player_group.group_name + ": " + expiration);
                            }
                        }
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while printing player perks"));
                    }
                    Log.Debug(() => "Exiting a player perk printer.", 5);
                    LogThreadExit();
                }));

                //Start the thread
                StartAndLogThread(perkPrinter);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending player perks.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendTargetPerks", 6);
        }

        public void SendTargetChat(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendTargetChat", 6);
            try
            {
                record.record_action_executed = true;
                Thread chatPrinter = new Thread(new ThreadStart(delegate
                {
                    Log.Debug(() => "Starting a player chat printer thread.", 5);
                    try
                    {
                        Thread.CurrentThread.Name = "PlayerChatPrinter";
                        if (record.target_player != null)
                        {
                            List<KeyValuePair<DateTime, string>> chatList = FetchChat(record.target_player.player_id, record.command_numeric, 30);
                            if (chatList.Any())
                            {
                                int index = 1;
                                foreach (KeyValuePair<DateTime, string> chatLine in chatList)
                                {
                                    SendMessageToSource(record, "(" + index++ + ") " + chatLine.Value);
                                    _threadMasterWaitHandle.WaitOne(2000);
                                }
                            }
                            else
                            {
                                SendMessageToSource(record, "Target player(s) have no chat to fetch.");
                            }
                        }
                        else if (record.TargetPlayersLocal.Count == 2)
                        {
                            long firstPlayerID = record.TargetPlayersLocal[0].player_id;
                            long secondPlayerID = record.TargetPlayersLocal[1].player_id;
                            List<KeyValuePair<DateTime, KeyValuePair<string, string>>> chatList = FetchConversation(firstPlayerID, secondPlayerID, record.command_numeric, 30);
                            if (chatList.Any())
                            {
                                int index = 1;
                                foreach (KeyValuePair<DateTime, KeyValuePair<string, string>> chatLine in chatList)
                                {
                                    SendMessageToSource(record, "(" + index++ + "/" + chatLine.Value.Key + ") " + chatLine.Value.Value);
                                    _threadMasterWaitHandle.WaitOne(2000);
                                }
                            }
                            else
                            {
                                SendMessageToSource(record, "Target player(s) have no chat to fetch.");
                            }
                        }
                        else
                        {
                            Log.Error("Invalid target conditions when printing chat.");
                            SendMessageToSource(record, "Unable to fetch chat for target players.");
                        }
                    }
                    catch (Exception)
                    {
                        HandleException(new AdKatsException("Error while printing player chat"));
                    }
                    Log.Debug(() => "Exiting a player chat printer.", 5);
                    LogThreadExit();
                }));

                //Start the thread
                StartAndLogThread(chatPrinter);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending player chat.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendTargetChat", 6);
        }

        public void FindTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering FindTarget", 6);
            try
            {
                record.record_action_executed = true;
                if (record.target_player == null)
                {
                    Log.Error("Player null when finding player.");
                    return;
                }
                String playerInfo = record.GetTargetNames() + ": ";
                if (record.target_player.player_online)
                {
                    playerInfo += GetPlayerTeamName(record.target_player) + "/" + (_PlayerDictionary.Values.Where(aPlayer => aPlayer.frostbitePlayerInfo.TeamID == record.target_player.frostbitePlayerInfo.TeamID).OrderBy(aPlayer => aPlayer.frostbitePlayerInfo.Score).Reverse().ToList().IndexOf(record.target_player) + 1) + "/" + record.target_player.frostbitePlayerInfo.Score;
                }
                else
                {
                    playerInfo += "OFFLINE";
                }
                SendMessageToSource(record, playerInfo);
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending player info.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting FindTarget", 6);
        }

        public void LockTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering LockTarget", 6);
            try
            {
                if (record.target_player == null)
                {
                    Log.Error("Player null when locking player.");
                    FinalizeRecord(record);
                    return;
                }
                if (String.IsNullOrEmpty(record.source_name) && record.source_player == null)
                {
                    SendMessageToSource(record, "No source provided to lock player. Unable to lock.");
                    FinalizeRecord(record);
                    return;
                }
                //Set the executed bool
                record.record_action_executed = true;
                //Check if already locked
                if (record.target_player.IsLocked())
                {
                    SendMessageToSource(record, record.GetTargetNames() + " is already locked by " + record.target_player.GetLockSource() + " for " + FormatTimeString(record.target_player.GetLockRemaining(), 3) + ".");
                    FinalizeRecord(record);
                    return;
                }
                //Assign the new lock
                TimeSpan duration = TimeSpan.FromMinutes(_playerLockingManualDuration);
                record.target_player.Lock(record.source_name, duration);
                SendMessageToSource(record, record.GetTargetNames() + " is now locked for " + FormatTimeString(duration, 3) + ", or until you unlock them.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while locking player.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting LockTarget", 6);
        }

        public void UnlockTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering UnlockTarget", 6);
            try
            {
                if (record.target_player == null)
                {
                    Log.Error("Player null when unlocking player.");
                    return;
                }
                //Set the executed bool
                record.record_action_executed = true;
                //Check if already locked
                if (!record.target_player.IsLocked())
                {
                    SendMessageToSource(record, record.GetTargetNames() + " is not locked.");
                    FinalizeRecord(record);
                    return;
                }
                record.target_player.Unlock();
                SendMessageToSource(record, record.GetTargetNames() + " is now unlocked.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while unlocking player.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting UnlockTarget", 6);
        }

        public void MarkTarget(AdKatsRecord record)
        {
            Log.Debug(() => "Entering MarkTarget", 6);
            try
            {
                if (record.target_player == null)
                {
                    Log.Error("Player null when marking player.");
                    return;
                }
                record.record_action_executed = true;
                SendMessageToSource(record, record.GetTargetNames() + " marked for leave notification.");
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while marking player.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting MarkTarget", 6);
        }

        public void LoadoutFetchTarget(AdKatsRecord record) {
            Log.Debug(() => "Entering LoadoutFetchTarget", 6);
            try {
                if (record.target_player == null) {
                    Log.Error("Player null when fetching loadout for player.");
                    SendMessageToSource(record, "Error checking loadout for " + record.GetTargetNames() + ".");
                    return;
                }
                record.record_action_executed = true;
                if (_subscribedClients.Any(client => client.ClientName == "AdKatsLRT" && client.SubscriptionEnabled)) {
                    lock (_LoadoutConfirmDictionary) {
                        _LoadoutConfirmDictionary[record.target_player.player_name] = record;
                    }
                    SendMessageToSource(record, "Fetching loadout for " + record.GetTargetNames() + ".");
                    ExecuteCommand("procon.protected.plugins.call", "AdKatsLRT", "CallLoadoutCheckOnPlayer", "AdKats", JSON.JsonEncode(new Hashtable {
                        {"caller_identity", "AdKats"},
                        {"response_requested", false},
                        {"player_name", record.target_player.player_name},
                        {"loadoutCheck_reason", "fetch"}
                    }));
                } else {
                    SendMessageToSource(record, "AdKatsLRT not installed/integrated, loadout for " + record.GetTargetNames() + " cannot be fetched.");
                }
            } catch (Exception e) {
                record.record_exception = new AdKatsException("Error while fetching loadout for player.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting LoadoutFetchTarget", 6);
        }

        public void LoadoutForceTarget(AdKatsRecord record) {
            Log.Debug(() => "Entering LoadoutForceTarget", 6);
            try {
                if (record.target_player == null) {
                    Log.Error("Player null when forcing loadout on player.");
                    SendMessageToSource(record, "Error forcing loadout on " + record.GetTargetNames() + ".");
                    return;
                }
                if (!record.target_player.player_online) {
                    SendMessageToSource(record, record.GetTargetNames() + " is not online, loadout cannot be forced.");
                    return;
                }
                record.record_action_executed = true;
                if (_subscribedClients.Any(client => client.ClientName == "AdKatsLRT" && client.SubscriptionEnabled)) {
                    ExecuteCommand("procon.protected.plugins.call", "AdKatsLRT", "CallLoadoutCheckOnPlayer", "AdKats", JSON.JsonEncode(new Hashtable {
                        {"caller_identity", "AdKats"},
                        {"response_requested", false},
                        {"player_name", record.target_player.player_name},
                        {"loadoutCheck_reason", "forced"}
                    }));
                    SendMessageToSource(record, record.GetTargetNames() + " forced up to trigger level loadout enforcement.");
                } else {
                    SendMessageToSource(record, "AdKatsLRT not installed/integrated, " + record.GetTargetNames() + " CANNOT be forced up to trigger level loadout enforcement.");
                }
            } catch (Exception e) {
                record.record_exception = new AdKatsException("Error while forcing loadout on player.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting LoadoutForceTarget", 6);
        }

        public void ManageAFKPlayers(AdKatsRecord record)
        {
            Log.Debug(() => "Entering ManageAFKPlayers", 6);
            try
            {
                record.record_action_executed = true;
                if (_PlayerDictionary.Count < _AFKTriggerMinimumPlayers)
                {
                    SendMessageToSource(record, "Server contains less than " + _AFKTriggerMinimumPlayers + ", unable to kick AFK players.");
                }
                List<AdKatsPlayer> afkPlayers = _PlayerDictionary.Values.Where(aPlayer => (UtcNow() - aPlayer.lastAction).TotalMinutes > _AFKTriggerDurationMinutes && aPlayer.player_type != PlayerType.Spectator && !PlayerIsAdmin(aPlayer)).Take(_PlayerDictionary.Count - _AFKTriggerMinimumPlayers).ToList();
                if (_AFKIgnoreUserList)
                {
                    IEnumerable<string> userSoldierGuids = FetchAllUserSoldiers().Select(aPlayer => aPlayer.player_guid);
                    afkPlayers = afkPlayers.Where(aPlayer => !userSoldierGuids.Contains(aPlayer.player_guid)).ToList();
                }
                else
                {
                    afkPlayers = afkPlayers.Where(aPlayer => !_AFKIgnoreRoles.Contains(aPlayer.player_role.role_key)).ToList();
                }
                if (afkPlayers.Any())
                {
                    foreach (AdKatsPlayer aPlayer in afkPlayers)
                    {
                        string afkTime = FormatTimeString(UtcNow() - aPlayer.lastAction, 2);
                        Log.Debug(() => "Kicking " + aPlayer.GetVerboseName() + " for being AFK " + afkTime + ".", 3);
                        AdKatsRecord kickRecord = new AdKatsRecord
                        {
                            record_source = AdKatsRecord.Sources.InternalAutomated,
                            server_id = _serverInfo.ServerID,
                            command_type = GetCommandByKey("player_kick"),
                            command_numeric = 0,
                            target_name = aPlayer.player_name,
                            target_player = aPlayer,
                            source_name = "AFKManager",
                            record_message = "AFK time exceeded [" + afkTime + "/" + GetPlayerTeamKey(aPlayer) + "]. Please rejoin once you return.",
                            record_time = UtcNow()
                        };
                        QueueRecordForProcessing(kickRecord);
                    }
                    SendMessageToSource(record, afkPlayers.Count() + " players kicked for being AFK.");
                }
                else
                {
                    SendMessageToSource(record, "No AFK players found or kickable.");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while managing AFK players.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting ManageAFKPlayers", 6);
        }

        public void SendOnlineAdmins(AdKatsRecord record)
        {
            Log.Debug(() => "Entering SendOnlineAdmins", 6);
            try
            {
                record.record_action_executed = true;
                List<AdKatsPlayer> onlineAdminList = FetchOnlineAdminSoldiers();
                String onlineAdmins = "Admins: [" + onlineAdminList.Count + " Online] ";
                onlineAdmins = onlineAdminList.Aggregate(onlineAdmins, (current, aPlayer) => current + (aPlayer.GetVerboseName() + " (" + GetPlayerTeamKey(aPlayer) + "/" + (_PlayerDictionary.Values.Where(innerPlayer => innerPlayer.frostbitePlayerInfo.TeamID == aPlayer.frostbitePlayerInfo.TeamID).OrderBy(innerPlayer => innerPlayer.frostbitePlayerInfo.Score).Reverse().ToList().IndexOf(aPlayer) + 1) + "), "));
                //Send online admins
                SendMessageToSource(record, onlineAdmins.Trim().TrimEnd(','));
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while sending online admins.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting SendOnlineAdmins", 6);
        }

        public void LeadCurrentSquad(AdKatsRecord record)
        {
            Log.Debug(() => "Entering LeadCurrentSquad", 6);
            try
            {
                record.record_action_executed = true;
                ExecuteCommand("procon.protected.send", "squad.leader", record.target_player.frostbitePlayerInfo.TeamID.ToString(), record.target_player.frostbitePlayerInfo.SquadID.ToString(), record.target_player.player_name);
                PlayerSayMessage(record.target_player.player_name, "You are now the leader of your current squad.");
                if (record.source_name != record.target_name)
                {
                    SendMessageToSource(record, record.GetTargetNames() + " is now the leader of their current squad.");
                }
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Error while leading curring squad.", e);
                HandleException(record.record_exception);
                FinalizeRecord(record);
            }
            Log.Debug(() => "Exiting LeadCurrentSquad", 6);
        }

        private void QueueUserForUpload(AdKatsUser user)
        {
            try
            {
                Log.Debug(() => "Preparing to queue user for access upload.", 6);
                lock (_UserUploadQueue)
                {
                    _UserUploadQueue.Enqueue(user);
                    Log.Debug(() => "User queued for access upload", 6);
                    _DbCommunicationWaitHandle.Set();
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queuing user upload.", e));
            }
        }

        private void QueueUserForRemoval(AdKatsUser user)
        {
            try
            {
                Log.Debug(() => "Preparing to queue user for access removal", 6);
                lock (_UserRemovalQueue)
                {
                    _UserRemovalQueue.Enqueue(user);
                    Log.Debug(() => "User queued for access removal", 6);
                    _DbCommunicationWaitHandle.Set();
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queuing access removal.", e));
            }
        }

        private Boolean HasAccess(AdKatsPlayer aPlayer, AdKatsCommand command)
        {
            try
            {
                if (aPlayer == null)
                {
                    Log.Error("player was null in hasAccess.");
                    return false;
                }
                if (aPlayer.player_name == _debugSoldierName)
                {
                    return true;
                }
                if (aPlayer.player_role == null)
                {
                    Log.Error("player role was null in hasAccess.");
                    return false;
                }
                if (command == null)
                {
                    Log.Error("Command was null in hasAccess.");
                    return false;
                }
                lock (aPlayer.player_role)
                {
                    lock (aPlayer.player_role.RoleAllowedCommands)
                    {
                        if (aPlayer.player_role.RoleAllowedCommands.ContainsKey(command.command_key))
                        {
                            return true;
                        }
                        if (aPlayer.player_role.ConditionalAllowedCommands.Values.Any(innerCommand => (innerCommand.Value.command_key == command.command_key) && innerCommand.Key(this, aPlayer)))
                        {
                            return true;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while checking command access on player.", e));
            }
            return false;
        }

        private void DatabaseCommunicationThreadLoop()
        {
            try
            {
                Log.Debug(() => "Starting Database Comm Thread", 1);
                Thread.CurrentThread.Name = "DatabaseComm";
                Boolean firstRun = true;
                DateTime loopStart;
                Stopwatch counter = new Stopwatch();
                while (true)
                {
                    loopStart = UtcNow();
                    try
                    {
                        Log.Debug(() => "Entering Database Comm Thread Loop", 7);
                        if (!_pluginEnabled)
                        {
                            Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                            break;
                        }
                        //Check if database connection settings have changed
                        if (_dbSettingsChanged)
                        {
                            Log.Debug(() => "DB Settings have changed, calling test.", 6);
                            if (TestDatabaseConnection())
                            {
                                Log.Debug(() => "Database Connection Good. Continuing Thread.", 6);
                            }
                            else
                            {
                                _dbSettingsChanged = true;
                                continue;
                            }
                        }
                        //On first run, pull all roles and commands, update database if needed
                        if (firstRun)
                        {
                            //Run any available SQL Updates
                            counter.Reset();
                            counter.Start();
                            RunSQLUpdates(false);
                            counter.Stop();
                            //Log.Write("RunSQLUpdates took " + counter.ElapsedMilliseconds + "ms");

                            counter.Reset();
                            counter.Start();

                            FetchCommands();
                            FetchRoles();

                            counter.Stop();
                            //Log.Write("Initial command fetch took " + counter.ElapsedMilliseconds + "ms");
                        }
                        counter.Reset();
                        counter.Start();
                        //FeedStatLoggerSettings();
                        //Log.Write("FeedStatLoggerSettings took " + counter.ElapsedMilliseconds + "ms");

                        //Update server ID
                        if (_serverInfo.ServerID <= 0)
                        {
                            //Checking for database server info
                            if (FetchDBServerInfo())
                            {
                                if (_serverInfo.ServerID <= 0)
                                {
                                    //Inform the user
                                    Log.Error("Database Server info could not be fetched! Make sure XpKiller's Stat Logger is running on this server!");
                                    //Disable the plugin
                                    Disable();
                                    break;
                                }
                                Log.Success("Database server info fetched. Server ID is " + _serverInfo.ServerID + ".");
                                //Push all settings for this instance to the database
                                UploadAllSettings();
                            }
                            else
                            {
                                //Inform the user
                                Log.Error("Database Server info could not be fetched! Make sure XpKiller's Stat Logger is running on this server!");
                                //Disable the plugin
                                Disable();
                                break;
                            }
                        }
                        else
                        {
                            Log.Debug(() => "Skipping server ID fetch. Server ID: " + _serverInfo.ServerID, 7);
                        }

                        //Check if settings need sync
                        if (firstRun || _settingImportID != _serverInfo.ServerID || _lastDbSettingFetch.AddSeconds(DbSettingFetchFrequency) < UtcNow())
                        {
                            Log.Debug(() => "Preparing to fetch settings from server " + _serverInfo.ServerID, 6);
                            //Fetch new settings from the database
                            FetchSettings(_settingImportID, _settingImportID != _serverInfo.ServerID);

                            counter.Reset();
                            counter.Start();
                            RunPluginOrchestration();
                            counter.Stop();
                            //Log.Write("RunPluginOrchestration took " + counter.ElapsedMilliseconds + "ms");
                            //Run any available SQL Updates
                            counter.Reset();
                            counter.Start();
                            RunSQLUpdates(true);
                            counter.Stop();
                            //Log.Write("RunSQLUpdates took " + counter.ElapsedMilliseconds + "ms");
                        }

                        Boolean displayUpdate = false;

                        counter.Reset();
                        counter.Start();
                        HandleSettingUploads();
                        counter.Stop();
                        //Log.Write("HandleSettingUploads took " + counter.ElapsedMilliseconds + "ms");

                        counter.Reset();
                        counter.Start();
                        if (HandleCommandUploads()) {
                            displayUpdate = true;
                        }
                        counter.Stop();
                        //Log.Write("HandleCommandUploads took " + counter.ElapsedMilliseconds + "ms");

                        counter.Reset();
                        counter.Start();
                        if (HandleRoleUploads()) {
                            displayUpdate = true;
                        }
                        counter.Stop();
                        //Log.Write("HandleRoleUploads took " + counter.ElapsedMilliseconds + "ms");

                        counter.Reset();
                        counter.Start();
                        if (HandleRoleRemovals()) {
                            displayUpdate = true; 
                        }
                        counter.Stop();
                        //Log.Write("HandleRoleRemovals took " + counter.ElapsedMilliseconds + "ms");

                        counter.Reset();
                        counter.Start();
                        HandleStatisticUploads();
                        counter.Stop();
                        //Log.Write("HandleStatisticUploads took " + counter.ElapsedMilliseconds + "ms");

                        if (displayUpdate) {
                            if (_isTestingAuthorized) {
                                Log.Info("26875");
                            }
                            UpdateSettingPage();
                        }

                        counter.Reset();
                        counter.Start();
                        //Check for new actions from the database at given interval
                        if (_fetchActionsFromDb && (UtcNow() > _lastDbActionFetch.AddSeconds(DbActionFetchFrequency)))
                        {
                            RunActionsFromDB();
                        }
                        else
                        {
                            Log.Debug(() => "Skipping DB action fetch", 7);
                        }
                        counter.Stop();
                        //Log.Write("RunActionsFromDB took " + counter.ElapsedMilliseconds + "ms");

                        HandleUserChanges();

                        //Start the other threads
                        if (firstRun)
                        {
                            //Set the start time
                            _AdKatsStartTime = UtcNow();

                            //Import round ID
                            FetchRoundID(false);

                            //Start other threads
                            StartAndLogThread(_PlayerListingThread);
                            StartAndLogThread(_AccessFetchingThread);
                            StartAndLogThread(_KillProcessingThread);
                            StartAndLogThread(_MessageProcessingThread);
                            StartAndLogThread(_CommandParsingThread);
                            StartAndLogThread(_ActionHandlingThread);
                            StartAndLogThread(_TeamSwapThread);
                            StartAndLogThread(_BanEnforcerThread);
                            StartAndLogThread(_HackerCheckerThread);

                            firstRun = false;
                            _threadsReady = true;
                        }

                        counter.Reset();
                        counter.Start();
                        if (_UseBanEnforcer)
                        {
                            HandleActiveBanEnforcer();
                        }
                        else
                        {
                            if (_UseBanEnforcerPreviousState)
                            {
                                RepopulateProconBanList();
                                _UseBanEnforcerPreviousState = false;
                            }
                        }
                        counter.Stop();
                        //Log.Write("HandleActiveBanEnforcer took " + counter.ElapsedMilliseconds + "ms");

                        if (_UnprocessedRecordQueue.Count > 0)
                        {
                            counter.Reset();
                            counter.Start();
                            Log.Debug(() => "Unprocessed Record: " + _UnprocessedRecordQueue.Count + " Current: 0", 4);
                            Log.Debug(() => "Preparing to lock inbound record queue to retrive new records", 7);
                            Queue<AdKatsRecord> inboundRecords;
                            lock (_UnprocessedRecordQueue)
                            {
                                Log.Debug(() => "Inbound records found. Grabbing.", 6);
                                //Grab all records in the queue
                                inboundRecords = new Queue<AdKatsRecord>(_UnprocessedRecordQueue.ToArray());
                                //Clear the queue for next run
                                _UnprocessedRecordQueue.Clear();
                            }
                            //Loop through all records in order that they came in
                            while (inboundRecords.Count > 0)
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                Log.Debug(() => "Unprocessed Record: " + _UnprocessedRecordQueue.Count + " Current: " + inboundRecords.Count, 4);
                                //Pull the next record
                                AdKatsRecord record = inboundRecords.Dequeue();
                                //Process the record message
                                record.record_message = ReplacePlayerInformation(record.record_message, record.target_player);
                                //Upload the record
                                Boolean success = HandleRecordUpload(record);
                                //Check for action handling needs
                                if (success && !record.record_action_executed && !record.record_orchestrate)
                                {
                                    //Action is only called after initial upload, not after update
                                    Log.Debug(() => "Upload success. Attempting to add to action queue.", 6);

                                    //Only queue the record for action handling if it's not an enforced ban
                                    if (record.command_type.command_key != "banenforcer_enforce")
                                    {
                                        QueueRecordForActionHandling(record);
                                    }
                                }
                                else
                                {
                                    Log.Debug(() => "Record does not need action handling by this server.", 6);
                                    //finalize the record
                                    FinalizeRecord(record);
                                }
                            }
                            counter.Stop();
                            //Log.Write("UnprocessedRecords took " + counter.ElapsedMilliseconds + "ms");
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                        }
                        else
                        {
                            counter.Reset();
                            counter.Start();
                            Log.Debug(() => "No unprocessed records. Waiting for input", 7);
                            _DbCommunicationWaitHandle.Reset();
                            if ((UtcNow() - loopStart).TotalMilliseconds > 1000)
                            {
                                Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                            }
                            _DbCommunicationWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                            counter.Stop();
                            //Log.Write("Waiting after complete took " + counter.ElapsedMilliseconds + "ms");
                        }
                    }
                    catch (Exception e)
                    {
                        if (e is ThreadAbortException)
                        {
                            HandleException(new AdKatsException("Database Comm thread aborted. Exiting."));
                            break;
                        }
                        HandleException(new AdKatsException("Error occured in Database Comm thread. Skipping current loop.", e));
                    }
                }
                Log.Debug(() => "Ending Database Comm Thread", 1);
                LogThreadExit();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error occured in database comm thread.", e));
            }
        }

        private void FeedStatLoggerSettings()
        {
            Log.Debug(() => "FeedStatLoggerSettings starting!", 6);
            //Every 60 minutes feed stat logger settings
            if (_lastStatLoggerStatusUpdateTime.AddMinutes(60) < UtcNow())
            {
                if (_aliveThreads.Values.Any(aThread => aThread.Name == "StatLoggerSettingsFeeder"))
                {
                    if (_isTestingAuthorized)
                    {
                        Log.Error("Attempted to start a stat logger setting feeder thread before a previous one was able to finish.");
                    }
                    return;
                }
                Thread statLoggerFeedingThread = new Thread(new ThreadStart(delegate
                {
                    try
                    {
                        Thread.CurrentThread.Name = "StatLoggerSettingsFeeder";
                        Thread.Sleep(250);
                        Log.Debug(() => "Starting a stat logger setting feeder thread.", 5);
                        _lastStatLoggerStatusUpdateTime = UtcNow();
                        if (_isTestingAuthorized)
                        {
                            _FeedStatLoggerSettings = true;
                            _PostStatLoggerChatManually = true;
                        }
                        if (_statLoggerVersion == "BF3")
                        {
                            SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Enable Livescoreboard in DB?", "Yes");
                            if (_FeedStatLoggerSettings)
                            {
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Enable Statslogging?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Enable Weaponstats?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Enable KDR correction?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "MapStats ON?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Session ON?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Save Sessiondata to DB?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Log playerdata only (no playerstats)?", "No");
                                Double slOffset = UtcNow().Subtract(DateTime.Now).TotalHours;
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Servertime Offset", slOffset + "");
                            }
                            if (_PostStatLoggerChatManually)
                            {
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Enable Chatlogging?", "No");
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Instant Logging of Chat Messages?", "No");
                            }
                            else if (_FeedStatLoggerSettings)
                            {
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Enable Chatlogging?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLoggerBF3", "Instant Logging of Chat Messages?", "Yes");
                            }
                        }
                        else if (_statLoggerVersion == "UNIVERSAL")
                        {
                            SetExternalPluginSetting("CChatGUIDStatsLogger", "Enable Livescoreboard in DB?", "Yes");
                            if (_FeedStatLoggerSettings)
                            {
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Enable Statslogging?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Enable Weaponstats?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Enable KDR correction?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "MapStats ON?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Session ON?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Save Sessiondata to DB?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Log playerdata only (no playerstats)?", "No");
                                Double slOffset = UtcNow().Subtract(DateTime.Now).TotalHours;
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Servertime Offset", slOffset + "");
                            }
                            if (_PostStatLoggerChatManually)
                            {
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Enable Chatlogging?", "No");
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Instant Logging of Chat Messages?", "No");
                            }
                            else if (_FeedStatLoggerSettings)
                            {
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Enable Chatlogging?", "Yes");
                                SetExternalPluginSetting("CChatGUIDStatsLogger", "Instant Logging of Chat Messages?", "Yes");
                            }
                        }
                        else
                        {
                            Log.Error("Stat logger version is unknown, unable to feed stat logger settings.");
                        }
                        //TODO put back in the future
                        //confirmStatLoggerSetup();
                        Log.Debug(() => "Exiting a stat logger setting feeder thread.", 5);
                    }
                    catch (Exception e)
                    {
                        HandleException(new AdKatsException("Error while feeding stat logger settings."));
                    }
                    LogThreadExit();
                }));
                StartAndLogThread(statLoggerFeedingThread);
            }
            Log.Debug(() => "FeedStatLoggerSettings finished!", 6);
        }

        private void HandleSettingUploads()
        {
            try
            {
                if (_SettingUploadQueue.Count > 0)
                {
                    if (_aliveThreads.Values.ToList().Any(aThread => aThread.Name == "SettingUploader"))
                    {
                        return;
                    }
                    StartAndLogThread(new Thread(new ThreadStart(delegate
                    {
                        Thread.CurrentThread.Name = "SettingUploader";
                        Thread.Sleep(250);
                        try
                        {
                            Log.Debug(() => "Preparing to lock inbound setting queue to get new settings", 7);
                            Queue<CPluginVariable> inboundSettingUpload;
                            lock (_SettingUploadQueue)
                            {
                                Log.Debug(() => "Inbound settings found. Grabbing.", 6);
                                //Grab all settings in the queue
                                inboundSettingUpload = new Queue<CPluginVariable>(_SettingUploadQueue.ToArray());
                                //Clear the queue for next run
                                _SettingUploadQueue.Clear();
                            }
                            //Loop through all settings in order that they came in
                            while (inboundSettingUpload.Count > 0)
                            {
                                if (!_pluginEnabled)
                                {
                                    break;
                                }
                                CPluginVariable setting = inboundSettingUpload.Dequeue();

                                UploadSetting(setting);
                            }
                        }
                        catch (Exception e)
                        {
                            HandleException(new AdKatsException("Error while uploading settings.", e));
                        }
                        LogThreadExit();
                    })));
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling setting uploads.", e));
            }
        }

        private Boolean HandleCommandUploads()
        {
            try
            {
                //Handle Inbound Command Uploads
                if (_CommandUploadQueue.Count > 0)
                {
                    Log.Debug(() => "Preparing to lock inbound command queue to get new commands", 7);
                    Queue<AdKatsCommand> inboundCommandUpload;
                    lock (_CommandUploadQueue)
                    {
                        Log.Debug(() => "Inbound commands found. Grabbing.", 6);
                        //Grab all commands in the queue
                        inboundCommandUpload = new Queue<AdKatsCommand>(_CommandUploadQueue.ToArray());
                        //Clear the queue for next run
                        _CommandUploadQueue.Clear();
                    }
                    //Loop through all commands in order that they came in
                    while (inboundCommandUpload.Count > 0)
                    {
                        AdKatsCommand command = inboundCommandUpload.Dequeue();
                        UploadCommand(command);
                    }
                    return true;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling command uploads."));
            }
            return false;
        }

        private void HandleStatisticUploads()
        {
            try
            {
                if (_UnprocessedStatisticQueue.Count > 0)
                {
                    Log.Debug(() => "Unprocessed Statistic: " + _UnprocessedStatisticQueue.Count + " Current: 0", 4);
                    Log.Debug(() => "Preparing to lock inbound statistic queue to retrive new records", 7);
                    Queue<AdKatsStatistic> inboundStats;
                    lock (_UnprocessedStatisticQueue)
                    {
                        Log.Debug(() => "Inbound statistics found. Grabbing.", 6);
                        //Grab all statistics in the queue
                        inboundStats = new Queue<AdKatsStatistic>(_UnprocessedStatisticQueue.ToArray());
                        //Clear the queue for next run
                        _UnprocessedStatisticQueue.Clear();
                    }
                    //Loop through all statistics in order that they came in
                    while (inboundStats.Count > 0)
                    {
                        if (!_pluginEnabled)
                        {
                            break;
                        }
                        Log.Debug(() => "Unprocessed Statistic: " + _UnprocessedStatisticQueue.Count + " Current: " + inboundStats.Count, 4);
                        //Pull the next statistic
                        AdKatsStatistic aStat = inboundStats.Dequeue();
                        //Upload the statistic
                        UploadStatistic(aStat);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling statistic uploads."));
            }
        }

        private Boolean HandleRoleUploads()
        {
            try
            {
                if (_RoleUploadQueue.Count > 0)
                {
                    Log.Debug(() => "Preparing to lock inbound role queue to get new roles", 7);
                    Queue<AdKatsRole> inboundRoleUpload;
                    lock (_RoleUploadQueue)
                    {
                        Log.Debug(() => "Inbound roles found. Grabbing.", 6);
                        //Grab all roles in the queue
                        inboundRoleUpload = new Queue<AdKatsRole>(_RoleUploadQueue.ToArray());
                        //Clear the queue for next run
                        _RoleUploadQueue.Clear();
                    }
                    //Loop through all roles in order that they came in
                    var uploaded = false;
                    while (inboundRoleUpload.Count > 0)
                    {
                        AdKatsRole aRole = inboundRoleUpload.Dequeue();
                        UploadRole(aRole);
                        lock (_RoleIDDictionary)
                        {
                            if (_RoleIDDictionary.ContainsKey(aRole.role_id))
                            {
                                _RoleIDDictionary[aRole.role_id] = aRole;
                            }
                            else
                            {
                                _RoleIDDictionary.Add(aRole.role_id, aRole);
                            }
                            if (_RoleKeyDictionary.ContainsKey(aRole.role_key))
                            {
                                _RoleKeyDictionary[aRole.role_key] = aRole;
                            }
                            else
                            {
                                _RoleKeyDictionary.Add(aRole.role_key, aRole);
                            }
                            if (_RoleNameDictionary.ContainsKey(aRole.role_name))
                            {
                                _RoleNameDictionary[aRole.role_name] = aRole;
                            }
                            else
                            {
                                _RoleNameDictionary.Add(aRole.role_name, aRole);
                            }
                        }
                        uploaded = true;
                    }
                    if (uploaded) {
                        FetchAllAccess(true);
                    }
                    return true;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling role uploads."));
            }
            return false;
        }

        private Boolean HandleRoleRemovals()
        {
            try
            {
                if (_RoleRemovalQueue.Count > 0)
                {
                    Log.Debug(() => "Preparing to lock removal role queue to get new roles", 7);
                    Queue<AdKatsRole> inboundRoleRemoval;
                    lock (_RoleRemovalQueue)
                    {
                        Log.Debug(() => "Inbound roles found. Grabbing.", 6);
                        //Grab all roles in the queue
                        inboundRoleRemoval = new Queue<AdKatsRole>(_RoleRemovalQueue.ToArray());
                        //Clear the queue for next run
                        _RoleRemovalQueue.Clear();
                    }
                    //Loop through all commands in order that they came in
                    while (inboundRoleRemoval.Count > 0)
                    {
                        AdKatsRole aRole = inboundRoleRemoval.Dequeue();
                        RemoveRole(aRole);
                        lock (_RoleIDDictionary)
                        {
                            if (_RoleIDDictionary.ContainsKey(aRole.role_id))
                            {
                                _RoleIDDictionary.Remove(aRole.role_id);
                            }
                            if (_RoleKeyDictionary.ContainsKey(aRole.role_key))
                            {
                                _RoleKeyDictionary.Remove(aRole.role_key);
                            }
                            if (_RoleNameDictionary.ContainsKey(aRole.role_name))
                            {
                                _RoleNameDictionary.Remove(aRole.role_name);
                            }
                        }
                    }
                    return true;
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling role removals."));
            }
            return false;
        }

        private void HandleUserChanges()
        {
            try
            {
                if (_UserUploadQueue.Count > 0 || _UserRemovalQueue.Count > 0)
                {
                    Log.Debug(() => "Inbound access changes found. Grabbing.", 6);
                    Queue<AdKatsUser> inboundUserUploads;
                    lock (_UserUploadQueue)
                    {
                        inboundUserUploads = new Queue<AdKatsUser>(_UserUploadQueue.ToArray());
                        _UserUploadQueue.Clear();
                    }
                    Queue<AdKatsUser> inboundUserRemoval;
                    lock (_UserRemovalQueue)
                    {
                        inboundUserRemoval = new Queue<AdKatsUser>(_UserRemovalQueue.ToArray());
                        _UserRemovalQueue.Clear();
                    }
                    //Loop through all records in order that they came in
                    while (inboundUserUploads.Count > 0)
                    {
                        AdKatsUser user = inboundUserUploads.Dequeue();
                        UploadUser(user);
                    }
                    //Loop through all records in order that they came in
                    while (inboundUserRemoval.Count > 0)
                    {
                        AdKatsUser user = inboundUserRemoval.Dequeue();
                        Log.Info("Removing user " + user.user_name);
                        RemoveUser(user);
                    }
                    FetchAllAccess(true);
                }
                else if (UtcNow() > _lastUserFetch.AddSeconds(DbUserFetchFrequency) || !_firstUserListComplete)
                {
                    FetchAllAccess(true);
                }
                else
                {
                    Log.Debug(() => "No inbound user changes.", 7);
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling user changes."));
            }
        }

        private void HandleActiveBanEnforcer()
        {
            try
            {
                //Call banlist at set interval (20 seconds)
                if (_UseBanEnforcerPreviousState && (UtcNow() > _lastBanListCall.AddSeconds(20)))
                {
                    _lastBanListCall = UtcNow();
                    Log.Debug(() => "banlist.list called at interval.", 6);
                    ExecuteCommand("procon.protected.send", "banList.list");

                    FetchNameBanCount();
                    FetchGUIDBanCount();
                    FetchIPBanCount();
                }
                if (!_UseBanEnforcerPreviousState || (UtcNow() > _lastDbBanFetch.AddSeconds(DbBanFetchFrequency)))
                {
                    //Load all bans on startup
                    if (!_UseBanEnforcerPreviousState)
                    {
                        //Get all bans from procon
                        Log.Info("Preparing to queue procon bans for import. Please wait.");
                        _DbCommunicationWaitHandle.Reset();
                        ExecuteCommand("procon.protected.send", "banList.list");
                        _DbCommunicationWaitHandle.WaitOne(TimeSpan.FromMinutes(5));
                        if (_CBanProcessingQueue.Count > 0)
                        {
                            Log.Write(_CBanProcessingQueue.Count + " procon bans queued for import. Import might take several minutes if you have many bans!");
                        }
                        else
                        {
                            Log.Write("No procon bans to import into Ban Enforcer.");
                        }
                    }
                }
                else
                {
                    Log.Debug(() => "Skipping DB ban fetch", 7);
                }

                //Handle Inbound Ban Comms
                if (_BanEnforcerProcessingQueue.Count > 0)
                {
                    Log.Debug(() => "Preparing to lock inbound ban enforcer queue to retrive new bans", 7);
                    Queue<AdKatsBan> inboundBans;
                    lock (_BanEnforcerProcessingQueue)
                    {
                        Log.Debug(() => "Inbound bans found. Grabbing.", 6);
                        //Grab all messages in the queue
                        inboundBans = new Queue<AdKatsBan>(_BanEnforcerProcessingQueue.ToArray());
                        //Clear the queue for next run
                        _BanEnforcerProcessingQueue.Clear();
                    }
                    Int32 index = 1;
                    //Loop through all bans in order that they came in
                    while (inboundBans.Count > 0)
                    {
                        if (!_pluginEnabled || !_UseBanEnforcer)
                        {
                            Log.Warn("Canceling ban import mid-operation.");
                            break;
                        }
                        //Grab the ban
                        AdKatsBan aBan = inboundBans.Dequeue();

                        Log.Debug(() => "Processing Frostbite Ban: " + index++, 6);

                        //Upload the ban
                        UploadBan(aBan);

                        //Only perform special action when ban is direct
                        //Indirect bans are through the procon banlist, so the player has already been kicked
                        if (aBan.ban_record.source_name != "BanEnforcer")
                        {
                            //Enforce the ban
                            EnforceBan(aBan, false);
                        }
                    }
                }

                //Handle BF3 Ban Manager imports
                if (!_UseBanEnforcerPreviousState)
                {
                    //Import all bans from BF3 Ban Manager
                    ImportBansFromBBM5108();
                }

                //Handle Inbound CBan Uploads
                if (_CBanProcessingQueue.Count > 0)
                {
                    if (!_UseBanEnforcerPreviousState)
                    {
                        Log.Warn("Do not disable AdKats or change any settings until upload is complete!");
                    }
                    Log.Debug(() => "Preparing to lock inbound cBan queue to retrive new cBans", 7);
                    Double totalCBans = 0;
                    Double bansImported = 0;
                    Boolean earlyExit = false;
                    DateTime startTime = UtcNow();
                    Queue<CBanInfo> inboundCBans;
                    lock (_CBanProcessingQueue)
                    {
                        Log.Debug(() => "Inbound cBans found. Grabbing.", 6);
                        //Grab all cBans in the queue
                        inboundCBans = new Queue<CBanInfo>(_CBanProcessingQueue.ToArray());
                        totalCBans = inboundCBans.Count;
                        //Clear the queue for next run
                        _CBanProcessingQueue.Clear();
                    }
                    //Loop through all cBans in order that they came in
                    Boolean bansFound = false;
                    while (inboundCBans.Count > 0)
                    {
                        //Break from the loop if the plugin is disabled or the setting is reverted.
                        if (!_pluginEnabled || !_UseBanEnforcer)
                        {
                            Log.Warn("You exited the ban upload process early, the process was not completed.");
                            earlyExit = true;
                            break;
                        }

                        bansFound = true;

                        CBanInfo cBan = inboundCBans.Dequeue();

                        //Create the record
                        AdKatsRecord record = new AdKatsRecord();
                        record.record_time = UtcNow();
                        record.record_source = AdKatsRecord.Sources.InternalAutomated;
                        //Permabans and Temp bans longer than 1 year will be defaulted to permaban
                        switch (cBan.BanLength.Subset)
                        {
                            case TimeoutSubset.TimeoutSubsetType.Seconds:
                                record.command_type = GetCommandByKey("player_ban_temp");
                                record.command_action = GetCommandByKey("player_ban_temp");
                                record.command_numeric = cBan.BanLength.Seconds / 60;
                                break;
                            case TimeoutSubset.TimeoutSubsetType.Permanent:
                                record.command_type = GetCommandByKey("player_ban_perm");
                                record.command_action = GetCommandByKey("player_ban_perm");
                                record.command_numeric = 0;
                                break;
                            case TimeoutSubset.TimeoutSubsetType.Round:
                                //Accept round ban as 1 hour timeban
                                record.command_type = GetCommandByKey("player_ban_temp");
                                record.command_action = GetCommandByKey("player_ban_temp");
                                record.command_numeric = 60;
                                break;
                            default:
                                //Ban type is unknown, unable to process
                                continue;
                        }
                        record.source_name = _CBanAdminName;
                        record.server_id = _serverInfo.ServerID;
                        if (String.IsNullOrEmpty(cBan.SoldierName) && String.IsNullOrEmpty(cBan.Guid) && String.IsNullOrEmpty(cBan.IpAddress))
                        {
                            Log.Error("Player did not contain any identifiers when processing CBan. Ignoring.");
                            continue;
                        }
                        record.target_player = FetchPlayer(true, false, false, null, -1, cBan.SoldierName, (!String.IsNullOrEmpty(cBan.Guid)) ? (cBan.Guid.ToUpper()) : (null), cBan.IpAddress);
                        if (record.target_player == null)
                        {
                            Log.Error("Player could not be found/added when processing CBan. Ignoring.");
                            continue;
                        }
                        if (!String.IsNullOrEmpty(record.target_player.player_name))
                        {
                            record.target_name = record.target_player.player_name;
                        }
                        record.isIRO = false;
                        record.record_message = cBan.Reason;

                        //Update the ban enforcement depending on available information
                        Boolean nameAvailable = !String.IsNullOrEmpty(record.target_player.player_name);
                        Boolean guidAvailable = !String.IsNullOrEmpty(record.target_player.player_guid);
                        Boolean ipAvailable = !String.IsNullOrEmpty(record.target_player.player_ip);

                        //Create the ban
                        AdKatsBan aBan = new AdKatsBan
                        {
                            ban_record = record,
                            ban_enforceName = nameAvailable && (_DefaultEnforceName || (!guidAvailable && !ipAvailable) || !String.IsNullOrEmpty(cBan.SoldierName)),
                            ban_enforceGUID = guidAvailable && (_DefaultEnforceGUID || (!nameAvailable && !ipAvailable) || !String.IsNullOrEmpty(cBan.Guid)),
                            ban_enforceIP = ipAvailable && (_DefaultEnforceIP || (!nameAvailable && !guidAvailable) || !String.IsNullOrEmpty(cBan.IpAddress))
                        };
                        if (!aBan.ban_enforceName && !aBan.ban_enforceGUID && !aBan.ban_enforceIP)
                        {
                            Log.Error("Unable to create ban, no proper player information");
                            continue;
                        }

                        //Check for duplicate ban posting
                        Boolean duplicateFound = false;
                        foreach (AdKatsBan storedBan in FetchPlayerBans(record.target_player))
                        {
                            if (storedBan.ban_record.record_message == record.record_message && storedBan.ban_record.source_name == record.source_name)
                            {
                                duplicateFound = true;
                            }
                        }
                        if (duplicateFound)
                        {
                            continue;
                        }

                        //Upload the ban
                        Log.Debug(() => "Uploading ban from procon.", 5);
                        UploadBan(aBan);

                        if (!_UseBanEnforcerPreviousState && (++bansImported % 25 == 0))
                        {
                            Log.Write(Math.Round(100 * bansImported / totalCBans, 2) + "% of bans uploaded. AVG " + Math.Round(bansImported / ((UtcNow() - startTime).TotalSeconds), 2) + " uploads/sec.");
                        }
                    }
                    if (bansFound && !earlyExit)
                    {
                        //If all bans have been queued for processing, clear the ban list
                        ExecuteCommand("procon.protected.send", "banList.clear");
                        ExecuteCommand("procon.protected.send", "banList.save");
                        ExecuteCommand("procon.protected.send", "banList.list");
                        if (!_UseBanEnforcerPreviousState)
                        {
                            Log.Success("All bans uploaded into AdKats database.");
                        }
                    }
                }
                _UseBanEnforcerPreviousState = true;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling active ban enforcer.", e));
            }
        }

        private void SubmitToMetabans(AdKatsBan aBan, AssessmentTypes type)
        {
            //Reject submitting the ban if the ban message does not contain trigger words
            var banReasonLower = aBan.ban_record.record_message.ToLowerInvariant();
            if (_metabansFilterStrings.Length > 0 && !_metabansFilterStrings.Any(fString => banReasonLower.Contains(fString.ToLowerInvariant()))) {
                Log.Debug(() => "Rejecting submission of " + aBan.ban_record.target_player.GetVerboseName() + "'s ban to metabans, ban reason not in filter strings.", 3);
                return;
            }

            Log.Debug(() => "^4Metabans (SubmitAssessment): Submitting assessment of GUID " + aBan.ban_record.target_player.player_guid, 3);

            MetabansAPI api = new MetabansAPI(_metabansUsername, _metabansAPIKey, enumBoolOnOff.On);
            api.ExecuteCommand += new MetabansAPI.ExecuteCommandHandler(api_ExecuteCommand);
            api.mb_assess_player_ok += new MetabansAPI.RequestSuccessHandler(api_mb_assess_player_ok);

            SupportedGames gameType;
            switch (_gameVersion)
            {
                case GameVersion.BF3:
                    gameType = SupportedGames.BF_3;
                    break;
                case GameVersion.BF4:
                    gameType = SupportedGames.BF_4;
                    break;
                case GameVersion.BFHL:
                    gameType = SupportedGames.BF_H;
                    break;
                default:
                    Log.Error("Invalid game version when posting to metabans.");
                    return;
                    break;
            }
            api.mb_assess_player(gameType, aBan.ban_record.target_player.player_guid, type, aBan.ban_record.record_message, (int)(aBan.ban_endTime - aBan.ban_startTime).TotalSeconds).Post();
        }

        public void api_ExecuteCommand(params string[] commands)
        {
            ExecuteCommand(commands);
        }

        public void api_mb_assess_player_ok(Hashtable request, Hashtable data)
        {
            try
            {
                Log.Info("^4Metabans (api_mb_assess_player_ok): Assessment accepted");
            }
            catch (Exception e)
            {
                Log.Warn("^1Metabans (api_mb_assess_player_ok): " + e.Message);
            }
        }

        private Boolean ConnectionCapable()
        {
            if (!string.IsNullOrEmpty(_mySqlSchemaName) && !string.IsNullOrEmpty(_mySqlHostname) && !string.IsNullOrEmpty(_mySqlPassword) && !string.IsNullOrEmpty(_mySqlPort) && !string.IsNullOrEmpty(_mySqlUsername))
            {
                Log.Debug(() => "MySql Connection capable. All variables in place.", 8);
                return true;
            }
            return false;
        }

        private MySqlConnection GetDatabaseConnection()
        {
            if (ConnectionCapable())
            {
                MySqlConnection conn = new MySqlConnection(PrepareMySqlConnectionString());
                conn.Open();
                return conn;
            }
            Log.Error("Attempted to connect to database without all variables in place.");
            return null;
        }

        private void UpdateMySqlConnectionStringBuilder()
        {
            lock (_dbCommStringBuilder)
            {
                UInt32 uintport = 3306;
                UInt32.TryParse(_mySqlPort, out uintport);
                //Add connection variables
                _dbCommStringBuilder.Port = uintport;
                _dbCommStringBuilder.Server = _mySqlHostname;
                _dbCommStringBuilder.UserID = _mySqlUsername;
                _dbCommStringBuilder.Password = _mySqlPassword;
                _dbCommStringBuilder.Database = _mySqlSchemaName;
                //Set up connection pooling
                if (UseConnectionPooling)
                {
                    _dbCommStringBuilder.Pooling = true;
                    _dbCommStringBuilder.MinimumPoolSize = Convert.ToUInt32(MinConnectionPoolSize);
                    _dbCommStringBuilder.MaximumPoolSize = Convert.ToUInt32(MaxConnectionPoolSize);
                    _dbCommStringBuilder.ConnectionLifeTime = 600;
                }
                else
                {
                    _dbCommStringBuilder.Pooling = false;
                }
                //Set Compression
                _dbCommStringBuilder.UseCompression = UseCompressedConnection;
                //Allow User Settings
                _dbCommStringBuilder.AllowUserVariables = true;
                //Set Timeout Settings
                _dbCommStringBuilder.DefaultCommandTimeout = 3600;
                _dbCommStringBuilder.ConnectionTimeout = 50;
            }
        }

        private String PrepareMySqlConnectionString()
        {
            return _dbCommStringBuilder.ConnectionString;
        }

        private Boolean TestDatabaseConnection()
        {
            Boolean databaseValid = false;
            Log.Debug(() => "testDatabaseConnection starting!", 6);
            if (ConnectionCapable())
            {
                Boolean success = false;
                Int32 attempt = 0;
                do
                {
                    if (!_pluginEnabled)
                    {
                        return false;
                    }
                    attempt++;
                    try
                    {
                        UpdateMySqlConnectionStringBuilder();
                        //Prepare the connection String and create the connection object
                        using (MySqlConnection connection = GetDatabaseConnection())
                        {
                            if (attempt > 1)
                            {
                                Log.Write("Attempting database connection. Attempt " + attempt + " of 5.");
                            }
                            //Attempt a ping through the connection
                            if (connection.Ping())
                            {
                                //Connection good
                                Log.Success("Database connection open.");
                                success = true;
                            }
                            else
                            {
                                //Connection poor
                                Log.Error("Database connection FAILED ping test.");
                            }
                        } //databaseConnection gets closed here
                        if (success)
                        {
                            //Make sure database structure is good
                            if (ConfirmDatabaseSetup())
                            {
                                //Confirm the database is valid
                                databaseValid = true;
                                //clear setting change monitor
                                _dbSettingsChanged = false;
                            }
                            else
                            {
                                Disable();
                                break;
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        //Only perform retries if the error was a timeout
                        if (e.ToString().Contains("Unable to connect"))
                        {
                            Log.Error("Database connection failed. Attempt " + attempt + " of 5. " + ((attempt <= 5) ? ("Retrying in 5 seconds. ") : ("")));
                            _threadMasterWaitHandle.WaitOne(5000);
                        }
                        else
                        {
                            break;
                        }
                    }
                } while (!success && attempt < 5);
                if (!success)
                {
                    //Invalid credentials or no connection to database
                    Log.Error("Database connection FAILED with EXCEPTION. Bad credentials, invalid hostname, or invalid port.");
                    Disable();
                }
                else
                {
                    TimeSpan diffDBUTC;
                    _dbTimingValid = TestDBTiming(true, out diffDBUTC);
                    _dbTimingOffset = diffDBUTC;
                }
            }
            else
            {
                Log.Error("Not DB connection capable yet, complete SQL connection variables.");
                Disable();
                _threadMasterWaitHandle.WaitOne(500);
            }
            Log.Debug(() => "testDatabaseConnection finished!", 6);

            return databaseValid;
        }

        private Boolean ConfirmDatabaseSetup()
        {
            Log.Debug(() => "Confirming Database Structure.", 3);
            try
            {
                if (!ConfirmStatLoggerTables())
                {
                    Log.Error("Tables from XPKiller's Stat Logger not present in the database. Enable that plugin then re-run AdKats!");
                    return false;
                }
                if (!ConfirmAdKatsTables())
                {
                    Log.Error("AdKats tables not present or valid in the database. Have you run the AdKats database setup script yet? If so, are your tables InnoDB?");
                    return false;
                }
                Log.Success("Database confirmed functional for AdKats use.");
                return true;
            }
            catch (Exception e)
            {
                Log.Error("ERROR in ConfirmDatabaseSetup: " + e);
                return false;
            }
        }

        private Boolean runDBSetupScript()
        {
            try
            {
                Log.Write("Running database setup script. You will not lose any data.");
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        WebClient client = new WebClient();
                        Log.Debug(() => "Fetching plugin changelog...", 2);
                        try
                        {
                            command.CommandText = ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/adkats.sql?cacherand=" + Environment.TickCount);
                            Log.Debug(() => "SQL setup script fetched.", 1);
                        }
                        catch (Exception)
                        {
                            try
                            {
                                command.CommandText = ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/sqlsetup?cacherand=" + Environment.TickCount);
                                Log.Debug(() => "SQL setup script fetched from backup location.", 1);
                            }
                            catch (Exception)
                            {
                                Log.Error("Failed to fetch SQL setup script.");
                                return false;
                            }
                        }
                        try
                        {
                            //Attempt to execute the query
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            Log.Write("Setup script successful, your database is now prepared for use by AdKats " + GetPluginVersion());
                            return true;
                        }
                        catch (Exception e)
                        {
                            HandleException(new AdKatsException("Your database did not accept the script. Does your account have access to table, trigger, and stored procedure creation?", e));
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Log.Error("Unable to set up the database for AdKats use." + e);
            }
            return false;
        }

        private Boolean ConfirmAdKatsTables()
        {
            if (_databaseConnectionCriticalState)
            {
                return false;
            }
            if (!ConfirmTable("adkats_battlecries"))
            {
                Log.Info("Battlecries table not found. Attempting to add.");
                SendNonQuery("Adding battlecries table", @"
                    CREATE TABLE IF NOT EXISTS `adkats_battlecries`( 
                      `player_id` int(10) UNSIGNED NOT NULL,
                      `player_battlecry` varchar(300) COLLATE utf8_unicode_ci DEFAULT NULL,
                      PRIMARY KEY (`player_id`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='AdKats - Battlecries List'", true);
                SendNonQuery("Adding battlecries table foreign keys", @"
                    ALTER TABLE `adkats_battlecries` ADD CONSTRAINT `adkats_battlecries_player_id` FOREIGN KEY (`player_id`) REFERENCES `tbl_playerdata`(`PlayerID`) ON UPDATE NO ACTION ON DELETE CASCADE", true);
            }
            if (!ConfirmTable("adkats_specialplayers"))
            {
                Log.Info("Special players table not found. Attempting to add.");
                SendNonQuery("Adding special soldiers table", @"
                    CREATE TABLE IF NOT EXISTS `adkats_specialplayers`( 
                      `specialplayer_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
                      `player_group` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
                      `player_id` int(10) UNSIGNED DEFAULT NULL,
                      `player_game` tinyint(4) UNSIGNED DEFAULT NULL,
                      `player_server` smallint(5) UNSIGNED DEFAULT NULL,
                      `player_identifier` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
                      `player_expiration` DATETIME NOT NULL,
                      PRIMARY KEY (`specialplayer_id`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='AdKats - Special Player List'", true);
                SendNonQuery("Adding special soldiers table foreign keys", @"
                    ALTER TABLE `adkats_specialplayers`
                        ADD CONSTRAINT `adkats_specialplayers_game_id` FOREIGN KEY (`player_game`) REFERENCES `tbl_games`(`GameID`) ON UPDATE NO ACTION ON DELETE CASCADE, 
                        ADD CONSTRAINT `adkats_specialplayers_server_id` FOREIGN KEY (`player_server`) REFERENCES `tbl_server`(`ServerID`) ON UPDATE NO ACTION ON DELETE CASCADE, 
                        ADD CONSTRAINT `adkats_specialplayers_player_id` FOREIGN KEY (`player_id`) REFERENCES `tbl_playerdata`(`PlayerID`) ON UPDATE NO ACTION ON DELETE CASCADE", true);
            }
            if (!ConfirmTable("adkats_player_reputation"))
            {
                Log.Info("Player reputation table not found. Attempting to add.");
                SendNonQuery("Adding player reputation table", @"
                    CREATE TABLE `adkats_player_reputation` (
                      `player_id` int(10) unsigned NOT NULL,
                      `game_id` tinyint(4) unsigned NOT NULL,
                      `target_rep` float NOT NULL,
                      `source_rep` float NOT NULL,
                      `total_rep` float NOT NULL,
                      `total_rep_co` float NOT NULL,
                      PRIMARY KEY (`player_id`),
                      KEY `game_id` (`game_id`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='AdKats - Player Reputation'", true);
                SendNonQuery("Adding player reputation table foreign keys", @"
                    ALTER TABLE `adkats_player_reputation`
                        ADD CONSTRAINT `adkats_player_reputation_ibfk_1` FOREIGN KEY (`player_id`) REFERENCES `tbl_playerdata` (`PlayerID`) ON DELETE CASCADE ON UPDATE CASCADE,
                        ADD CONSTRAINT `adkats_player_reputation_ibfk_2` FOREIGN KEY (`game_id`) REFERENCES `tbl_games` (`GameID`) ON DELETE CASCADE ON UPDATE CASCADE", true);
            }
            if (!ConfirmTable("adkats_orchestration"))
            {
                Log.Info("Plugin orchestration table not found. Attempting to add.");
                SendNonQuery("Adding plugin orchestration table", @"
                     CREATE TABLE `adkats_orchestration` (
                        `setting_id` int(10) NOT NULL AUTO_INCREMENT,
                        `setting_server` SMALLINT(5) NOT NULL,
                        `setting_plugin` VARCHAR(100) NOT NULL,
                        `setting_name` VARCHAR(100) NOT NULL,
                        `setting_value` VARCHAR (2000) NOT NULL,
                        PRIMARY KEY (`setting_id`),
                        UNIQUE(`setting_server`, `setting_plugin`, `setting_name`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='AdKats - Plugin Orchestration'", true);
            }
            if (!ConfirmTable("tbl_extendedroundstats"))
            {
                Log.Info("Extended round stats table not found. Attempting to add.");
                SendNonQuery("Adding extended round stats table", @"
                    CREATE TABLE `tbl_extendedroundstats` (
                        `roundstat_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
                        `server_id` smallint(5) unsigned NOT NULL,
                        `round_id` int(10) unsigned NOT NULL,
                        `round_elapsedTimeSec` int(10) unsigned NOT NULL,
                        `team1_count` int(10) unsigned NOT NULL,
                        `team2_count` int(10) unsigned NOT NULL,
                        `team1_score` int(10) NOT NULL,
                        `team2_score` int(10) NOT NULL,
                        `team1_spm` double NOT NULL,
                        `team2_spm` double NOT NULL,
                        `team1_tickets` int(10) NOT NULL,
                        `team2_tickets` int(10) NOT NULL,
                        `team1_tpm` double NOT NULL,
                        `team2_tpm` double NOT NULL,
                        `roundstat_time` datetime NOT NULL,
                        PRIMARY KEY (`roundstat_id`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='AdKats - Extended Round Stats'", true);
            }
            if (!ConfirmTable("adkats_statistics"))
            {
                Log.Info("AdKats statistics table not found. Attempting to add.");
                SendNonQuery("Adding AdKats statistics table", @"
                    CREATE TABLE `adkats_statistics` (
                      `stat_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
                      `server_id` SMALLINT(5) UNSIGNED NOT NULL,
                      `round_id` INT(10) UNSIGNED NOT NULL,
                      `stat_type` varchar(50) NOT NULL,
                      `target_name` varchar(50) NOT NULL,
                      `target_id` INT(10) UNSIGNED DEFAULT NULL,
                      `stat_value` FLOAT NOT NULL,
                      `stat_comment` TEXT,
                      `stat_time` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
                      PRIMARY KEY (`stat_id`),
                      KEY `server_id` (`server_id`),
                      KEY `stat_type` (`stat_type`),
                      KEY `target_id` (`target_id`),
                      KEY `stat_time` (`stat_time`),
                      CONSTRAINT `adkats_statistics_target_id_fk` FOREIGN KEY (`target_id`) REFERENCES `tbl_playerdata` (`PlayerID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
                      CONSTRAINT `adkats_statistics_server_id_fk` FOREIGN KEY (`server_id`) REFERENCES `tbl_server` (`ServerID`) ON DELETE NO ACTION ON UPDATE NO ACTION
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='AdKats - Statistics'", true);
            }
            if (!SendQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE ( TABLE_SCHEMA = '" + _mySqlSchemaName + "' AND TABLE_NAME = 'adkats_specialplayers' AND COLUMN_NAME = 'player_effective' )", false))
            {
                Log.Info("Special player effective not found. Attempting to add.");
                SendNonQuery("Adding special player effective.", "ALTER TABLE `adkats_specialplayers` ADD COLUMN `player_effective` DATETIME NOT NULL AFTER `player_identifier`", true);
                SendNonQuery("Adding initial special player effective values.", "UPDATE `adkats_specialplayers` SET `player_effective` = UTC_TIMESTAMP()", true);
            }
            if (!SendQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE ( TABLE_SCHEMA = '" + _mySqlSchemaName + "' AND TABLE_NAME = 'adkats_specialplayers' AND COLUMN_NAME = 'player_expiration' )", false))
            {
                Log.Info("Special player expiration not found. Attempting to add.");
                SendNonQuery("Adding special player expiration.", "ALTER TABLE `adkats_specialplayers` ADD COLUMN `player_expiration` DATETIME NOT NULL AFTER `player_effective`", true);
                SendNonQuery("Adding initial special player expiration values.", "UPDATE `adkats_specialplayers` SET `player_expiration` = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 20 YEAR)", true);
            }
            if (!ConfirmTable("adkats_rolegroups"))
            {
                Log.Info("AdKats role groups table not found. Attempting to add.");
                SendNonQuery("Adding AdKats role groups table", @"
                    CREATE TABLE `adkats_rolegroups` (
                      `role_id` int(11) unsigned NOT NULL,
                      `group_key` VARCHAR(100) NOT NULL,
                      PRIMARY KEY (`role_id`,`group_key`),
                      KEY `adkats_rolegroups_fk_role` (`role_id`),
                      KEY `adkats_rolegroups_fk_command` (`group_key`),
                      CONSTRAINT `adkats_rolegroups_fk_role` FOREIGN KEY (`role_id`) REFERENCES `adkats_roles` (`role_id`) ON DELETE CASCADE ON UPDATE CASCADE
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='AdKats - Connection of groups to roles'", true);
            }
            return ConfirmTable("adkats_bans") && ConfirmTable("adkats_commands") && ConfirmTable("adkats_infractions_global") && ConfirmTable("adkats_infractions_server") && ConfirmTable("adkats_records_debug") && ConfirmTable("adkats_records_main") && ConfirmTable("adkats_rolecommands") && ConfirmTable("adkats_roles") && ConfirmTable("adkats_settings") && ConfirmTable("adkats_users") && ConfirmTable("adkats_usersoldiers") && ConfirmTable("adkats_specialplayers") && ConfirmTable("adkats_player_reputation") && ConfirmTable("adkats_orchestration") && ConfirmTable("adkats_statistics") && ConfirmTable("adkats_rolegroups") && ConfirmTable("tbl_extendedroundstats") && !SendQuery("SELECT `TABLE_NAME` AS `table_name` FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA` = '" + _mySqlSchemaName + "' AND `TABLE_NAME` LIKE 'adkats_%' AND ENGINE <> 'InnoDB'", false);
        }

        private Boolean ConfirmStatLoggerTables()
        {
            Boolean confirmed = true;
            //All versions of stat logger should have these tables
            if (ConfirmTable("tbl_playerdata") && ConfirmTable("tbl_server") && ConfirmTable("tbl_chatlog"))
            {
                //The universal version has a tbl_games table, detect that
                if (ConfirmTable("tbl_games"))
                {
                    _statLoggerVersion = "UNIVERSAL";
                    Boolean gameIDFound = false;
                    using (MySqlConnection connection = GetDatabaseConnection())
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            //Attempt to execute the query
                            command.CommandText = @"
                            SELECT 
                                `GameID` AS `game_id`, 
                                `Name` AS `game_name` 
                            FROM 
                                `tbl_games`";
                            using (MySqlDataReader reader = SafeExecuteReader(command))
                            {
                                lock (_gameIDDictionary)
                                {
                                    _gameIDDictionary.Clear();
                                    while (reader.Read())
                                    {
                                        String gameName = reader.GetString("game_name");
                                        Int32 gameID = reader.GetInt32("game_id");
                                        if (!_gameIDDictionary.ContainsKey(gameID))
                                        {
                                            if (_gameVersion.ToString() == gameName)
                                            {
                                                _serverInfo.GameID = gameID;
                                                gameIDFound = true;
                                            }
                                            switch (gameName)
                                            {
                                                case "BF3":
                                                    _gameIDDictionary.Add(gameID, GameVersion.BF3);
                                                    break;
                                                case "BF4":
                                                    _gameIDDictionary.Add(gameID, GameVersion.BF4);
                                                    break;
                                                case "BFHL":
                                                    _gameIDDictionary.Add(gameID, GameVersion.BFHL);
                                                    break;
                                                default:
                                                    Log.Error("Game name " + gameName + " not recognized.");
                                                    break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        confirmed = gameIDFound;
                    }
                }
            }
            else
            {
                confirmed = false;
            }
            return confirmed;
        }

        private Boolean ConfirmTable(String tableName)
        {
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '" + _mySqlSchemaName + "' AND TABLE_NAME= '" + tableName + "'";
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            bool confirmed = reader.Read();
                            return confirmed;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while confirming table '" + tableName + "'", e));
                return false;
            }
        }

        private void UploadAllSettings()
        {
            if (!_pluginEnabled)
            {
                return;
            }
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                Log.Debug(() => "uploadAllSettings starting!", 6);
                QueueSettingForUpload(new CPluginVariable(@"Auto-Enable/Keep-Alive", typeof(Boolean), _useKeepAlive));
                QueueSettingForUpload(new CPluginVariable(@"Override Timing Confirmation", typeof(Boolean), _timingValidOverride));
                QueueSettingForUpload(new CPluginVariable(@"Debug level", typeof(int), Log.DebugLevel));
                QueueSettingForUpload(new CPluginVariable(@"Debug Soldier Name", typeof(String), _debugSoldierName));
                QueueSettingForUpload(new CPluginVariable(@"Server VOIP Address", typeof(String), _ServerVoipAddress));
                QueueSettingForUpload(new CPluginVariable(@"Rule Print Delay", typeof(Double), _ServerRulesDelay));
                QueueSettingForUpload(new CPluginVariable(@"Rule Print Interval", typeof(Double), _ServerRulesInterval));
                QueueSettingForUpload(new CPluginVariable(@"Server Rule List", typeof(String), CPluginVariable.EncodeStringArray(_ServerRulesList)));
                QueueSettingForUpload(new CPluginVariable(@"Server Rule Numbers", typeof(Boolean), _ServerRulesNumbers));
                QueueSettingForUpload(new CPluginVariable(@"Yell Server Rules", typeof(Boolean), _ServerRulesYell));
                QueueSettingForUpload(new CPluginVariable(@"Feed MULTIBalancer Whitelist", typeof(Boolean), _FeedMultiBalancerWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Feed MULTIBalancer Even Dispersion List", typeof(Boolean), _FeedMultiBalancerDisperseList));
                QueueSettingForUpload(new CPluginVariable(@"Automatic MULTIBalancer Whitelist for Admins", typeof(Boolean), _FeedMultiBalancerWhitelist_Admins));
                QueueSettingForUpload(new CPluginVariable(@"Feed TeamKillTracker Whitelist", typeof(Boolean), _FeedTeamKillTrackerWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Automatic TeamKillTracker Whitelist for Admins", typeof(Boolean), _FeedTeamKillTrackerWhitelist_Admins));
                QueueSettingForUpload(new CPluginVariable(@"Automatic Reserved Slot for Admins", typeof(Boolean), _FeedServerReservedSlots_Admins));
                QueueSettingForUpload(new CPluginVariable(@"Automatic VIP Kick Whitelist for Admins", typeof(Boolean), _FeedServerReservedSlots_Admins_Online));
                QueueSettingForUpload(new CPluginVariable(@"Automatic Spectator Slot for Admins", typeof(Boolean), _FeedServerSpectatorList_Admins));
                QueueSettingForUpload(new CPluginVariable(@"Feed Server Reserved Slots", typeof(Boolean), _FeedServerReservedSlots));
                QueueSettingForUpload(new CPluginVariable(@"Feed Server Spectator List", typeof(Boolean), _FeedServerSpectatorList));
                QueueSettingForUpload(new CPluginVariable(@"Feed Stat Logger Settings", typeof(Boolean), _FeedStatLoggerSettings));
                QueueSettingForUpload(new CPluginVariable(@"Post Stat Logger Chat Manually", typeof(Boolean), _PostStatLoggerChatManually));
                QueueSettingForUpload(new CPluginVariable(@"Post Server Chat Spam", typeof(Boolean), _PostStatLoggerChatManually_PostServerChatSpam));
                QueueSettingForUpload(new CPluginVariable(@"Exclude Commands from Chat Logs", typeof(Boolean), _PostStatLoggerChatManually_IgnoreCommands));
                QueueSettingForUpload(new CPluginVariable(@"Post Map Benefit/Detriment Statistics", typeof(Boolean), _PostMapBenefitStatistics));
                QueueSettingForUpload(new CPluginVariable(@"Monitor Populator Players", typeof(Boolean), _PopulatorMonitor));
                QueueSettingForUpload(new CPluginVariable(@"Monitor Specified Populators Only", typeof(Boolean), _PopulatorUseSpecifiedPopulatorsOnly));
                QueueSettingForUpload(new CPluginVariable(@"Monitor Populators of This Server Only", typeof(Boolean), _PopulatorPopulatingThisServerOnly));
                QueueSettingForUpload(new CPluginVariable(@"Count to Consider Populator Past Week", typeof(Int32), _PopulatorMinimumPopulationCountPastWeek));
                QueueSettingForUpload(new CPluginVariable(@"Count to Consider Populator Past 2 Weeks", typeof(Int32), _PopulatorMinimumPopulationCountPast2Weeks));
                QueueSettingForUpload(new CPluginVariable(@"Enable Populator Perks", typeof(Boolean), _PopulatorPerksEnable));
                QueueSettingForUpload(new CPluginVariable(@"Populator Perks - Reserved Slot", typeof(Boolean), _PopulatorPerksReservedSlot));
                QueueSettingForUpload(new CPluginVariable(@"Populator Perks - Autobalance Whitelist", typeof(Boolean), _PopulatorPerksBalanceWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Populator Perks - Ping Whitelist", typeof(Boolean), _PopulatorPerksPingWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Populator Perks - TeamKillTracker Whitelist", typeof(Boolean), _PopulatorPerksTeamKillTrackerWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Monitor Teamspeak Players", typeof(Boolean), _TeamspeakPlayerMonitorView));
                QueueSettingForUpload(new CPluginVariable(@"Enable Teamspeak Player Monitor", typeof(Boolean), _TeamspeakPlayerMonitorEnable));
                QueueSettingForUpload(new CPluginVariable(@"Use Custom Teamspeak Web Service", typeof(Boolean), _tsViewer.UseWebService));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Web Service URL", typeof(String), _tsViewer.WebServiceURL));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server IP", typeof(String), _tsViewer.Ts3ServerIp));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Port", typeof(Int32), _tsViewer.Ts3ServerPort));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Query Port", typeof(Int32), _tsViewer.Ts3QueryPort));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Query Username", typeof(String), _tsViewer.Ts3QueryUsername));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Query Password", typeof(String), _tsViewer.Ts3QueryPassword));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Server Query Nickname", typeof(String), _tsViewer.Ts3QueryNickname));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Main Channel Name", typeof(String), _tsViewer.Ts3MainChannelName));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Secondary Channel Names", typeof(String), CPluginVariable.EncodeStringArray(_tsViewer.Ts3SubChannelNames)));
                QueueSettingForUpload(new CPluginVariable(@"Debug Display Teamspeak Clients", typeof(Boolean), _tsViewer.DbgClients));
                QueueSettingForUpload(new CPluginVariable(@"TeamSpeak Player Join Announcement", typeof(String), _tsViewer.JoinDisplay.ToString()));
                QueueSettingForUpload(new CPluginVariable(@"TeamSpeak Player Join Message", typeof(String), _tsViewer.JoinDisplayMessage));
                QueueSettingForUpload(new CPluginVariable(@"TeamSpeak Player Update Seconds", typeof(Int32), _tsViewer.UpdateIntervalSeconds));
                QueueSettingForUpload(new CPluginVariable(@"Enable Teamspeak Player Perks", typeof(Boolean), _TeamspeakPlayerPerksEnable));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Player Perks - VIP Kick Whitelist", typeof(Boolean), _TeamspeakPlayerPerksVIPKickWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Player Perks - Autobalance Whitelist", typeof(Boolean), _TeamspeakPlayerPerksBalanceWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Player Perks - Ping Whitelist", typeof(Boolean), _TeamspeakPlayerPerksPingWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Teamspeak Player Perks - TeamKillTracker Whitelist", typeof(Boolean), _TeamspeakPlayerPerksTeamKillTrackerWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Monitor/Disperse Top Players", typeof(Boolean), _UseTopPlayerMonitor));
                QueueSettingForUpload(new CPluginVariable(@"Affected Top Players", typeof(String), _TopPlayersAffected));
                QueueSettingForUpload(new CPluginVariable(@"Top player team confirmation duration", typeof(Int32), _TopPlayersTeamConfirmationDuration));
                QueueSettingForUpload(new CPluginVariable(@"Round Timer: Enable", typeof(Boolean), _useRoundTimer));
                QueueSettingForUpload(new CPluginVariable(@"Round Timer: Round Duration Minutes", typeof(Double), _maxRoundTimeMinutes));
                QueueSettingForUpload(new CPluginVariable(@"Use NO EXPLOSIVES Limiter", typeof(Boolean), _UseWeaponLimiter));
                QueueSettingForUpload(new CPluginVariable(@"NO EXPLOSIVES Weapon String", typeof(String), _WeaponLimiterString));
                QueueSettingForUpload(new CPluginVariable(@"NO EXPLOSIVES Exception String", typeof(String), _WeaponLimiterExceptionString));
                QueueSettingForUpload(new CPluginVariable(@"Use AA Report Auto Handler", typeof(Boolean), _UseAAReportAutoHandler));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Report-Handler Strings", typeof(String), CPluginVariable.EncodeStringArray(_AutoReportHandleStrings)));
                QueueSettingForUpload(new CPluginVariable(@"Use Grenade Cook Catcher", typeof(Boolean), _UseGrenadeCookCatcher));
                QueueSettingForUpload(new CPluginVariable(@"HackerChecker: Use LIVE Anti Cheat System", typeof(Boolean), _useHackerCheckerLIVESystem));
                QueueSettingForUpload(new CPluginVariable(@"HackerChecker: DPS Checker: Ban Message", typeof(String), _HackerCheckerDPSBanMessage));
                QueueSettingForUpload(new CPluginVariable(@"HackerChecker: HSK Checker: Enable", typeof(Boolean), _UseHskChecker));
                QueueSettingForUpload(new CPluginVariable(@"HackerChecker: HSK Checker: Trigger Level", typeof(Double), _HskTriggerLevel));
                QueueSettingForUpload(new CPluginVariable(@"HackerChecker: HSK Checker: Ban Message", typeof(String), _HackerCheckerHSKBanMessage));
                QueueSettingForUpload(new CPluginVariable(@"HackerChecker: KPM Checker: Enable", typeof(Boolean), _UseKpmChecker));
                QueueSettingForUpload(new CPluginVariable(@"HackerChecker: KPM Checker: Trigger Level", typeof(Double), _KpmTriggerLevel));
                QueueSettingForUpload(new CPluginVariable(@"HackerChecker: KPM Checker: Ban Message", typeof(String), _HackerCheckerKPMBanMessage));
                QueueSettingForUpload(new CPluginVariable(@"AdkatsLRT Extension Token", typeof(String), _AdKatsLRTExtensionToken));
                QueueSettingForUpload(new CPluginVariable(@"Fetch Actions from Database", typeof(Boolean), _fetchActionsFromDb));
                QueueSettingForUpload(new CPluginVariable(@"Use Additional Ban Message", typeof(Boolean), _UseBanAppend));
                QueueSettingForUpload(new CPluginVariable(@"Additional Ban Message", typeof(String), _BanAppend));
                QueueSettingForUpload(new CPluginVariable(@"Procon Ban Admin Name", typeof(String), _CBanAdminName));
                QueueSettingForUpload(new CPluginVariable(@"Use Ban Enforcer", typeof(Boolean), _UseBanEnforcer));
                QueueSettingForUpload(new CPluginVariable(@"Enforce New Bans by NAME", typeof(Boolean), _DefaultEnforceName));
                QueueSettingForUpload(new CPluginVariable(@"Enforce New Bans by GUID", typeof(Boolean), _DefaultEnforceGUID));
                QueueSettingForUpload(new CPluginVariable(@"Enforce New Bans by IP", typeof(Boolean), _DefaultEnforceIP));
                QueueSettingForUpload(new CPluginVariable(@"Countdown Duration before a Nuke is fired", typeof(Int32), _NukeCountdownDurationSeconds));
                QueueSettingForUpload(new CPluginVariable(@"Minimum Required Reason Length", typeof(Int32), _RequiredReasonLength));
                QueueSettingForUpload(new CPluginVariable(@"Minimum Report Handle Seconds", typeof(Int32), _MinimumReportHandleSeconds));
                QueueSettingForUpload(new CPluginVariable(@"Banned Tags", typeof(String), CPluginVariable.EncodeStringArray(_BannedTags)));
                QueueSettingForUpload(new CPluginVariable(@"Punishment Hierarchy", typeof(String), CPluginVariable.EncodeStringArray(_PunishmentHierarchy)));
                QueueSettingForUpload(new CPluginVariable(@"Combine Server Punishments", typeof(Boolean), _CombineServerPunishments));
                QueueSettingForUpload(new CPluginVariable(@"Automatic Forgives", typeof(Boolean), _AutomaticForgives));
                QueueSettingForUpload(new CPluginVariable(@"Only Kill Players when Server in low population", typeof(Boolean), _OnlyKillOnLowPop));
                QueueSettingForUpload(new CPluginVariable(@"Low Population Value", typeof(Int32), _lowPopulationPlayerCount));
                QueueSettingForUpload(new CPluginVariable(@"High Population Value", typeof(Int32), _highPopulationPlayerCount));
                QueueSettingForUpload(new CPluginVariable(@"Use IRO Punishment", typeof(Boolean), _IROActive));
                QueueSettingForUpload(new CPluginVariable(@"IRO Punishment Overrides Low Pop", typeof(Boolean), _IROOverridesLowPop));
                QueueSettingForUpload(new CPluginVariable(@"IRO Timeout Minutes", typeof(Int32), _IROTimeout));
                QueueSettingForUpload(new CPluginVariable(@"Maximum Temp-Ban Duration Minutes", typeof(Double), _MaxTempBanDuration.TotalMinutes));
                QueueSettingForUpload(new CPluginVariable(@"Send Emails", typeof(Boolean), _UseEmail));
                QueueSettingForUpload(new CPluginVariable(@"Use SSL?", typeof(Boolean), _EmailHandler.UseSSL));
                QueueSettingForUpload(new CPluginVariable(@"SMTP-Server address", typeof(String), _EmailHandler.SMTPServer));
                QueueSettingForUpload(new CPluginVariable(@"SMTP-Server port", typeof(Int32), _EmailHandler.SMTPPort));
                QueueSettingForUpload(new CPluginVariable(@"Sender address", typeof(String), _EmailHandler.SenderEmail));
                QueueSettingForUpload(new CPluginVariable(@"SMTP-Server username", typeof(String), _EmailHandler.SMTPUser));
                QueueSettingForUpload(new CPluginVariable(@"SMTP-Server password", typeof(String), _EmailHandler.SMTPPassword));
                QueueSettingForUpload(new CPluginVariable(@"Custom HTML Addition", typeof(String), _EmailHandler.CustomHTMLAddition));
                QueueSettingForUpload(new CPluginVariable(@"Extra Recipient Email Addresses", typeof(String[]), _EmailHandler.RecipientEmails.ToArray()));
                QueueSettingForUpload(new CPluginVariable(@"Only Send Report Emails When Admins Offline", typeof(Boolean), _EmailReportsOnlyWhenAdminless));
                QueueSettingForUpload(new CPluginVariable(@"Send PushBullet Reports", typeof(Boolean), _UsePushBullet));
                QueueSettingForUpload(new CPluginVariable(@"PushBullet Access Token", typeof(String), _PushBulletHandler.AccessToken));
                QueueSettingForUpload(new CPluginVariable(@"PushBullet Note Target", typeof(String), _PushBulletHandler.DefaultTarget.ToString()));
                QueueSettingForUpload(new CPluginVariable(@"PushBullet Channel Tag", typeof(String), _PushBulletHandler.DefaultChannelTag));
                QueueSettingForUpload(new CPluginVariable(@"Only Send PushBullet Reports When Admins Offline", typeof(Boolean), _PushBulletReportsOnlyWhenAdminless));
                QueueSettingForUpload(new CPluginVariable(@"Use Metabans?", typeof(Boolean), _useMetabans));
                QueueSettingForUpload(new CPluginVariable(@"Metabans API Key", typeof(String), _metabansAPIKey));
                QueueSettingForUpload(new CPluginVariable(@"Metabans Username", typeof(String), _metabansUsername));
                QueueSettingForUpload(new CPluginVariable(@"Metabans Filter Strings", typeof(String), CPluginVariable.EncodeStringArray(_metabansFilterStrings)));
                QueueSettingForUpload(new CPluginVariable(@"On-Player-Muted Message", typeof(String), _MutedPlayerMuteMessage));
                QueueSettingForUpload(new CPluginVariable(@"On-Player-Killed Message", typeof(String), _MutedPlayerKillMessage));
                QueueSettingForUpload(new CPluginVariable(@"On-Player-Kicked Message", typeof(String), _MutedPlayerKickMessage));
                QueueSettingForUpload(new CPluginVariable(@"# Chances to give player before kicking", typeof(Int32), _MutedPlayerChances));
                QueueSettingForUpload(new CPluginVariable(@"Ignore commands for mute enforcement", typeof(Boolean), _MutedPlayerIgnoreCommands));
                QueueSettingForUpload(new CPluginVariable(@"Ticket Window High", typeof(Int32), _TeamSwapTicketWindowHigh));
                QueueSettingForUpload(new CPluginVariable(@"Ticket Window Low", typeof(Int32), _TeamSwapTicketWindowLow));
                QueueSettingForUpload(new CPluginVariable(@"Enable Admin Assistants", typeof(Boolean), _EnableAdminAssistants));
                QueueSettingForUpload(new CPluginVariable(@"Enable Admin Assistant Perk", typeof(Boolean), _EnableAdminAssistantPerk));
                QueueSettingForUpload(new CPluginVariable(@"Minimum Confirmed Reports Per Month", typeof(Int32), _MinimumRequiredMonthlyReports));
                QueueSettingForUpload(new CPluginVariable(@"Yell display time seconds", typeof(Int32), _YellDuration));
                QueueSettingForUpload(new CPluginVariable(@"Pre-Message List", typeof(String), CPluginVariable.EncodeStringArray(_PreMessageList.ToArray())));
                QueueSettingForUpload(new CPluginVariable(@"Require Use of Pre-Messages", typeof(Boolean), _RequirePreMessageUse));
                QueueSettingForUpload(new CPluginVariable(@"Use first spawn message", typeof(Boolean), _UseFirstSpawnMessage));
                QueueSettingForUpload(new CPluginVariable(@"First spawn message text", typeof(String), _FirstSpawnMessage));
                QueueSettingForUpload(new CPluginVariable(@"Use First Spawn Reputation and Infraction Message", typeof(Boolean), _useFirstSpawnRepMessage));
                QueueSettingForUpload(new CPluginVariable(@"Use Perk Expiration Notification", typeof(Boolean), _UsePerkExpirationNotify));
                QueueSettingForUpload(new CPluginVariable(@"Perk Expiration Notify Days Remaining", typeof(Int32), _PerkExpirationNotifyDays));
                QueueSettingForUpload(new CPluginVariable(@"SpamBot Enable", typeof(Boolean), _spamBotEnabled));
                QueueSettingForUpload(new CPluginVariable(@"SpamBot Say List", typeof(String), CPluginVariable.EncodeStringArray(_spamBotSayList.ToArray())));
                QueueSettingForUpload(new CPluginVariable(@"SpamBot Say Delay Seconds", typeof(Int32), _spamBotSayDelaySeconds));
                QueueSettingForUpload(new CPluginVariable(@"SpamBot Yell List", typeof(String), CPluginVariable.EncodeStringArray(_spamBotYellList.ToArray())));
                QueueSettingForUpload(new CPluginVariable(@"SpamBot Yell Delay Seconds", typeof(Int32), _spamBotYellDelaySeconds));
                QueueSettingForUpload(new CPluginVariable(@"SpamBot Tell List", typeof(String), CPluginVariable.EncodeStringArray(_spamBotTellList.ToArray())));
                QueueSettingForUpload(new CPluginVariable(@"SpamBot Tell Delay Seconds", typeof(Int32), _spamBotTellDelaySeconds));
                QueueSettingForUpload(new CPluginVariable(@"Exclude Admins and Whitelist from Spam", typeof(Boolean), _spamBotExcludeAdminsAndWhitelist));
                QueueSettingForUpload(new CPluginVariable(@"Player Battlecry Volume", typeof(String), _battlecryVolume.ToString()));
                QueueSettingForUpload(new CPluginVariable(@"Player Battlecry Max Length", typeof(Int32), _battlecryMaxLength));
                QueueSettingForUpload(new CPluginVariable(@"Player Battlecry Denied Words", typeof(String), CPluginVariable.EncodeStringArray(_battlecryDeniedWords)));
                QueueSettingForUpload(new CPluginVariable(@"Display Admin Name in Kick and Ban Announcement", typeof(Boolean), _ShowAdminNameInAnnouncement));
                QueueSettingForUpload(new CPluginVariable(@"Display New Player Announcement", typeof(Boolean), _ShowNewPlayerAnnouncement));
                QueueSettingForUpload(new CPluginVariable(@"Display Player Name Change Announcement", typeof(Boolean), _ShowPlayerNameChangeAnnouncement));
                QueueSettingForUpload(new CPluginVariable(@"Display Targeted Player Left Notification", typeof(Boolean), _ShowTargetedPlayerLeftNotification));
                QueueSettingForUpload(new CPluginVariable(@"Inform players of reports against them", typeof(Boolean), _InformReportedPlayers));
                QueueSettingForUpload(new CPluginVariable(@"Inform reputable players of admin joins", typeof(Boolean), _InformReputablePlayersOfAdminJoins));
                QueueSettingForUpload(new CPluginVariable(@"Inform admins of admin joins", typeof(Boolean), _InformAdminsOfAdminJoins));
                QueueSettingForUpload(new CPluginVariable(@"Player Inform Exclusion Strings", typeof(String), CPluginVariable.EncodeStringArray(_PlayerInformExclusionStrings)));
                QueueSettingForUpload(new CPluginVariable(@"Disable Automatic Updates", typeof(Boolean), _automaticUpdatesDisabled));
                QueueSettingForUpload(new CPluginVariable(@"Enforce Single Instance", typeof(Boolean), _enforceSingleInstance));
                QueueSettingForUpload(new CPluginVariable(@"Disable Version Tracking - Required For TEST Builds", typeof(Boolean), _versionTrackingDisabled));
                QueueSettingForUpload(new CPluginVariable(@"AFK System Enable", typeof(Boolean), _AFKManagerEnable));
                QueueSettingForUpload(new CPluginVariable(@"AFK Ignore Chat", typeof(Boolean), _AFKIgnoreChat));
                QueueSettingForUpload(new CPluginVariable(@"AFK Auto-Kick Enable", typeof(Boolean), _AFKAutoKickEnable));
                QueueSettingForUpload(new CPluginVariable(@"AFK Trigger Minutes", typeof(Double), _AFKTriggerDurationMinutes));
                QueueSettingForUpload(new CPluginVariable(@"AFK Minimum Players", typeof(Int32), _AFKTriggerMinimumPlayers));
                QueueSettingForUpload(new CPluginVariable(@"AFK Ignore User List", typeof(Boolean), _AFKIgnoreUserList));
                QueueSettingForUpload(new CPluginVariable(@"AFK Ignore Roles", typeof(String), CPluginVariable.EncodeStringArray(_AFKIgnoreRoles)));
                QueueSettingForUpload(new CPluginVariable(@"Ping Enforcer Enable", typeof(Boolean), _pingEnforcerEnable));
                QueueSettingForUpload(new CPluginVariable(@"Ping Moving Average Duration sec", typeof(Double), _pingMovingAverageDurationSeconds));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Low Population Trigger ms", typeof(Double), _pingEnforcerLowTriggerMS));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Medium Population Trigger ms", typeof(Double), _pingEnforcerMedTriggerMS));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick High Population Trigger ms", typeof(Double), _pingEnforcerHighTriggerMS));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Full Population Trigger ms", typeof(Double), _pingEnforcerFullTriggerMS));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Low Population Time Modifier", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerLowTimeModifier.Select(x => x.ToString()).ToArray())));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Medium Population Time Modifier", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerMedTimeModifier.Select(x => x.ToString()).ToArray())));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick High Population Time Modifier", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerHighTimeModifier.Select(x => x.ToString()).ToArray())));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Full Population Time Modifier", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerFullTimeModifier.Select(x => x.ToString()).ToArray())));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Minimum Players", typeof(Int32), _pingEnforcerTriggerMinimumPlayers));
                QueueSettingForUpload(new CPluginVariable(@"Kick Missing Pings", typeof(Boolean), _pingEnforcerKickMissingPings));
                QueueSettingForUpload(new CPluginVariable(@"Attempt Manual Ping when Missing", typeof(Boolean), _attemptManualPingWhenMissing));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Ignore User List", typeof(Boolean), _pingEnforcerIgnoreUserList));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Ignore Roles", typeof(String), CPluginVariable.EncodeStringArray(_pingEnforcerIgnoreRoles)));
                QueueSettingForUpload(new CPluginVariable(@"Ping Kick Message Prefix", typeof(String), _pingEnforcerMessagePrefix));
                QueueSettingForUpload(new CPluginVariable(@"Commander Manager Enable", typeof(Boolean), _CMDRManagerEnable));
                QueueSettingForUpload(new CPluginVariable(@"Minimum Players to Allow Commanders", typeof(Int32), _CMDRMinimumPlayers));
                QueueSettingForUpload(new CPluginVariable(@"Player Lock Manual Duration Minutes", typeof(Double), _playerLockingManualDuration));
                QueueSettingForUpload(new CPluginVariable(@"Automatically Lock Players on Admin Action", typeof(Boolean), _playerLockingAutomaticLock));
                QueueSettingForUpload(new CPluginVariable(@"Player Lock Automatic Duration Minutes", typeof(Double), _playerLockingAutomaticDuration));
                QueueSettingForUpload(new CPluginVariable(@"Display Ticket Rates in Procon Chat", typeof(Boolean), _DisplayTicketRatesInProconChat));
                QueueSettingForUpload(new CPluginVariable(@"Surrender Vote Enable", typeof(Boolean), _surrenderVoteEnable));
                QueueSettingForUpload(new CPluginVariable(@"Percentage Votes Needed for Surrender", typeof(Double), _surrenderVoteMinimumPlayerPercentage));
                QueueSettingForUpload(new CPluginVariable(@"Minimum Player Count to Enable Surrender", typeof(Int32), _surrenderVoteMinimumPlayerCount));
                QueueSettingForUpload(new CPluginVariable(@"Minimum Ticket Gap to Surrender", typeof(Int32), _surrenderVoteMinimumTicketGap));
                QueueSettingForUpload(new CPluginVariable(@"Enable Required Ticket Rate Gap to Surrender", typeof(Boolean), _surrenderVoteTicketRateGapEnable));
                QueueSettingForUpload(new CPluginVariable(@"Minimum Ticket Rate Gap to Surrender", typeof(Double), _surrenderVoteMinimumTicketRateGap));
                QueueSettingForUpload(new CPluginVariable(@"Surrender Vote Timeout Enable", typeof(Boolean), _surrenderVoteTimeoutEnable));
                QueueSettingForUpload(new CPluginVariable(@"Surrender Vote Timeout Minutes", typeof(Int32), _surrenderVoteTimeoutMinutes));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Enable", typeof(Boolean), _surrenderAutoEnable));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Use Optimal Values for Metro Conquest", typeof(Boolean), _surrenderAutoUseMetroValues));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Use Optimal Values for Locker Conquest", typeof(Boolean), _surrenderAutoUseLockerValues));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Reset Trigger Count on Cancel", typeof(Boolean), _surrenderAutoResetTriggerCountOnCancel));
                QueueSettingForUpload(new CPluginVariable(@"Reset Auto-Nuke Trigger Count on Fire", typeof(Boolean), _surrenderAutoResetTriggerCountOnFire));
                QueueSettingForUpload(new CPluginVariable(@"Nuke Winning Team Instead of Surrendering Losing Team", typeof(Boolean), _surrenderAutoNukeInstead));
                QueueSettingForUpload(new CPluginVariable(@"Fire Nuke Triggers if Winning Team up by X Tickets", typeof(Int32), _NukeWinningTeamUpTicketCount));
                QueueSettingForUpload(new CPluginVariable(@"Switch to surrender after max nukes", typeof(Boolean), _surrenderAutoNukeResolveAfterMax));
                QueueSettingForUpload(new CPluginVariable(@"Announce Nuke Preparation to Players", typeof(Boolean), _surrenderAutoAnnounceNukePrep));
                QueueSettingForUpload(new CPluginVariable(@"Allow Auto-Nuke to fire on losing teams", typeof(Boolean), _surrenderAutoNukeLosingTeams));
                QueueSettingForUpload(new CPluginVariable(@"Maximum Nuke Ticket Difference for Losing Team", typeof(Int32), _surrenderAutoNukeLosingMaxDiff));
                QueueSettingForUpload(new CPluginVariable(@"Start Surrender Vote Instead of Surrendering Losing Team", typeof(Boolean), _surrenderAutoTriggerVote));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Minimum Ticket Gap", typeof(Int32), _surrenderAutoMinimumTicketGap));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Minimum Ticket Count", typeof(Int32), _surrenderAutoMinimumTicketCount));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Maximum Ticket Count", typeof(Int32), _surrenderAutoMaximumTicketCount));
                QueueSettingForUpload(new CPluginVariable(@"Maximum Auto-Nukes Each Round", typeof(Int32), _surrenderAutoMaxNukesEachRound));
                QueueSettingForUpload(new CPluginVariable(@"Minimum Seconds Between Nukes", typeof(Int32), _surrenderAutoNukeMinBetween));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Losing Team Rate Window Max", typeof(Double), _surrenderAutoLosingRateMax));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Losing Team Rate Window Min", typeof(Double), _surrenderAutoLosingRateMin));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Winning Team Rate Window Max", typeof(Double), _surrenderAutoWinningRateMax));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Winning Team Rate Window Min", typeof(Double), _surrenderAutoWinningRateMin));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Message", typeof(String), _surrenderAutoMessage));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke Message", typeof(String), _surrenderAutoNukeMessage));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Trigger Count to Surrender", typeof(Int32), _surrenderAutoTriggerCountToSurrender));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Surrender Minimum Players", typeof(Int32), _surrenderAutoMinimumPlayers));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke High Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationHigh));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke Medium Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationMed));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke Low Pop Duration Seconds", typeof(Int32), _surrenderAutoNukeDurationLow));
                QueueSettingForUpload(new CPluginVariable(@"Auto-Nuke Consecutive Duration Increase", typeof(Int32), _surrenderAutoNukeDurationIncrease));
                QueueSettingForUpload(new CPluginVariable(@"Faction Randomizer: Enable", typeof(Boolean), _factionRandomizerEnable));
                QueueSettingForUpload(new CPluginVariable(@"Faction Randomizer: Restriction", typeof(String), _factionRandomizerRestriction.ToString()));
                QueueSettingForUpload(new CPluginVariable(@"Faction Randomizer: Allow Repeat Team Selections", typeof(Boolean), _factionRandomizerAllowRepeatSelection));
                Log.Debug(() => "uploadAllSettings finished!", 6);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing all settings for upload.", e));
            }
        }

        private void UploadSetting(CPluginVariable var)
        {
            Log.Debug(() => "uploadSetting starting!", 7);
            //Make sure database connection active
            if (_databaseConnectionCriticalState || !_settingsFetched)
            {
                return;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Check for length too great
                        if (var.Value.Length > 2999)
                        {
                            Log.Error("Unable to upload setting, length of setting too great. Really dude? It's 3000+ characters. This is battlefield, not a book club.");
                            return;
                        }
                        Log.Debug(() => var.Value, 7);
                        //Set the insert command structure
                        command.CommandText = @"
                        INSERT INTO `" + _mySqlSchemaName + @"`.`adkats_settings` 
                        (
                            `server_id`, 
                            `setting_name`, 
                            `setting_type`, 
                            `setting_value`
                        ) 
                        VALUES 
                        ( 
                            @server_id,
                            @setting_name, 
                            @setting_type, 
                            @setting_value
                        ) 
                        ON DUPLICATE KEY 
                        UPDATE 
                            `setting_value` = @setting_value";
                        command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@setting_name", var.Name);
                        command.Parameters.AddWithValue("@setting_type", var.Type);
                        command.Parameters.AddWithValue("@setting_value", var.Value);
                        //Attempt to execute the query
                        if (SafeExecuteNonQuery(command) > 0)
                        {
                            Log.Debug(() => "Setting " + var.Name + " pushed to database", 7);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while uploading setting to database.", e));
            }

            Log.Debug(() => "uploadSetting finished!", 7);
        }

        private void FetchSettings(long serverID, Boolean verbose)
        {
            Log.Debug(() => "fetchSettings starting!", 6);
            Boolean success = false;
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                //Success fetching settings
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        String sql = @"
                        SELECT  
                            `setting_name`, 
                            `setting_type`, 
                            `setting_value`
                        FROM 
                            `" + _mySqlSchemaName + @"`.`adkats_settings` 
                        WHERE 
                            `server_id` = " + serverID;
                        command.CommandText = sql;
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            //Grab the settings
                            while (reader.Read())
                            {
                                success = true;
                                //Create as variable in case needed later
                                CPluginVariable var = new CPluginVariable(reader.GetString("setting_name"), reader.GetString("setting_type"), reader.GetString("setting_value"));
                                SetPluginVariable(var.Name, var.Value);
                            }
                            if (success)
                            {
                                _lastDbSettingFetch = UtcNow();
                                UpdateSettingPage();
                            }
                            else if (verbose)
                            {
                                Log.Error("Settings could not be loaded. Server " + serverID + " invalid.");
                            }
                            UploadAllSettings();
                            _settingsFetched = true;
                            _settingImportID = _serverInfo.ServerID;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching settings from database.", e));
            }
            Log.Debug(() => "fetchSettings finished!", 6);
        }

        private void UploadCommand(AdKatsCommand aCommand)
        {
            Log.Debug(() => "uploadCommand starting!", 6);

            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Set the insert command structure
                        command.CommandText = @"
                        INSERT INTO 
                        `" + _mySqlSchemaName + @"`.`adkats_commands` 
                        (
	                        `command_id`,
	                        `command_active`,
	                        `command_key`,
	                        `command_logging`,
	                        `command_name`,
	                        `command_text`,
                            `command_playerInteraction`,
                            `command_access`
                        ) 
                        VALUES 
                        (
	                        @command_id,
	                        @command_active,
	                        @command_key,
	                        @command_logging,
	                        @command_name,
	                        @command_text,
                            @command_playerInteraction,
                            @command_access
                        ) 
                        ON DUPLICATE KEY 
                        UPDATE 
	                        `command_active` = @command_active, 
	                        `command_logging` = @command_logging, 
	                        `command_name` = @command_name, 
	                        `command_text` = @command_text,
                            `command_playerInteraction` = @command_playerInteraction,
                            `command_access` = @command_access";

                        //Fill the command
                        command.Parameters.AddWithValue("@command_id", aCommand.command_id);
                        command.Parameters.AddWithValue("@command_active", aCommand.command_active.ToString());
                        command.Parameters.AddWithValue("@command_key", aCommand.command_key);
                        command.Parameters.AddWithValue("@command_logging", aCommand.command_logging.ToString());
                        command.Parameters.AddWithValue("@command_name", aCommand.command_name);
                        command.Parameters.AddWithValue("@command_text", aCommand.command_text);
                        command.Parameters.AddWithValue("@command_playerInteraction", aCommand.command_playerInteraction);
                        command.Parameters.AddWithValue("@command_access", aCommand.command_access.ToString());
                        //Attempt to execute the query
                        if (SafeExecuteNonQuery(command) > 0)
                        {
                        }
                    }
                }

                Log.Debug(() => "uploadCommand finished!", 6);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Unexpected error uploading command.", e));
            }
        }

        private List<AdKatsPlayer> FetchAdminSoldiers()
        {
            List<AdKatsPlayer> adminSoldiers = new List<AdKatsPlayer>();
            try
            {
                //Loop over the user list
                foreach (AdKatsUser user in _userCache.Values.ToList().Where(UserIsAdmin)) 
                {
                    adminSoldiers.AddRange(user.soldierDictionary.Values);
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching admin soldiers.", e));
            }
            return adminSoldiers;
        }

        private List<AdKatsPlayer> FetchOnlineAdminSoldiers()
        {
            List<AdKatsPlayer> onlineAdminSoldiers = new List<AdKatsPlayer>();
            try
            {
                onlineAdminSoldiers.AddRange(_PlayerDictionary.Values.ToList().Where(PlayerIsAdmin));
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching online admin soldiers", e));
            }
            return onlineAdminSoldiers;
        }

        private List<AdKatsPlayer> FetchOnlineNonAdminSoldiers()
        {
            List<AdKatsPlayer> nonAdminSoldiers = new List<AdKatsPlayer>();
            try
            {
                nonAdminSoldiers.AddRange(_PlayerDictionary.Values.ToList().Where(aPlayer => !PlayerIsAdmin(aPlayer)));
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching online non-admin soldiers", e));
            }
            return nonAdminSoldiers;
        }

        private List<AdKatsPlayer> FetchElevatedSoldiers()
        {
            List<AdKatsPlayer> elevatedSoldiers = new List<AdKatsPlayer>();
            //Loop over the user list
            foreach (AdKatsUser aUser in _userCache.Values.ToList().Where(user => !UserIsAdmin(user) && user.user_role.role_key != "guest_default")) 
            {
                elevatedSoldiers.AddRange(aUser.soldierDictionary.Values);
            }
            return elevatedSoldiers;
        }

        private List<AdKatsPlayer> FetchSoldiersOfRole(AdKatsRole aRole)
        {
            List<AdKatsPlayer> roleSoldiers = new List<AdKatsPlayer>();
            //Loop over the user list
            foreach (AdKatsUser user in _userCache.Values.ToList().Where(user => user.user_role.role_key == aRole.role_key)) 
            {
                roleSoldiers.AddRange(user.soldierDictionary.Values);
            }
            return roleSoldiers;
        }

        private List<AdKatsPlayer> FetchAllUserSoldiers()
        {
            List<AdKatsPlayer> userSoldiers = new List<AdKatsPlayer>();
            //Loop over the user list
            foreach (AdKatsUser user in _userCache.Values.ToList().Where(aUser => aUser.user_role.role_key != "guest_default"))
            {
                userSoldiers.AddRange(user.soldierDictionary.Values);
            }
            return userSoldiers;
        }

        private Boolean HandleRecordUpload(AdKatsRecord record)
        {
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                record.record_exception = new AdKatsException("Database not connected.");
                return true;
            }
            try
            {
                Log.Debug(() => "Entering handle record upload", 5);
                if (record.record_id != -1 || record.record_action_executed)
                {
                    //Record already has a record ID, or action has already been taken, it can only be updated
                    if (record.command_type.command_logging != AdKatsCommand.CommandLogging.Ignore && record.command_type.command_logging != AdKatsCommand.CommandLogging.Unable && !record.record_orchestrate)
                    {
                        if (record.record_exception == null)
                        {
                            //Only call update if the record contained no errors
                            Log.Debug(() => "UPDATING record for " + record.command_type, 5);
                            //Update Record
                            UpdateRecord(record);
                            return false;
                        }
                        Log.Debug(() => "" + record.command_type + " record contained errors, skipping UPDATE", 4);
                    }
                    else
                    {
                        Log.Debug(() => "Skipping record UPDATE for " + record.command_type, 5);
                    }
                }
                else
                {
                    Log.Debug(() => "Record needs full upload, checking.", 5);
                    //No record ID. Perform full upload
                    switch (record.command_type.command_key)
                    {
                        //TODO: Add ability for multiple targets
                        case "player_punish":
                            //Upload for punish is required
                            if (CanPunish(record, 20))
                            {
                                //Check if the punish will be Double counted
                                Boolean iroStatus = _IROActive && FetchIROStatus(record);
                                if (iroStatus)
                                {
                                    record.isIRO = true;
                                    //Upload record twice
                                    Log.Debug(() => "UPLOADING IRO Punish", 5); //IRO - Immediate Repeat Offence
                                    UploadRecord(record);
                                    UploadRecord(record);
                                }
                                else
                                {
                                    //Upload record once
                                    Log.Debug(() => "UPLOADING Punish", 5);
                                    UploadRecord(record);
                                }
                            }
                            else
                            {
                                SendMessageToSource(record, record.GetTargetNames() + " already acted on in the last 20 seconds.");
                                FinalizeRecord(record);
                                return false;
                            }
                            break;
                        //TODO: Add ability for multiple targets
                        case "player_forgive":
                            //Upload for forgive is required
                            //No restriction on forgives/minute
                            Log.Debug(() => "UPLOADING Forgive", 5);
                            UploadRecord(record);
                            break;
                        default:
                            //Case for any other command
                            //Check logging setting for record command type
                            if (record.command_type.command_logging != AdKatsCommand.CommandLogging.Ignore && record.command_type.command_logging != AdKatsCommand.CommandLogging.Unable)
                            {
                                Log.Debug(() => "UPLOADING record for " + record.command_type, 5);
                                //Upload Record
                                UploadRecord(record);
                            }
                            else
                            {
                                Log.Debug(() => "Skipping record UPLOAD for " + record.command_type, 6);
                            }
                            break;
                    }
                }
            }
            catch (Exception e)
            {
                record.record_exception = HandleException(new AdKatsException("Error while handling record upload.", e));
            }
            return true;
        }

        private Boolean UploadRecord(AdKatsRecord record)
        {
            Boolean success = true;
            //If record has multiple targets, create a new record for each target
            if (record.TargetPlayersLocal.Any())
            {
                record.TargetInnerRecords.Clear();
                foreach (AdKatsPlayer aPlayer in record.TargetPlayersLocal)
                {
                    AdKatsRecord aRecord = new AdKatsRecord
                    {
                        isAliveChecked = record.isAliveChecked,
                        isConfirmed = record.isConfirmed,
                        isContested = record.isContested,
                        isDebug = record.isDebug,
                        isIRO = record.isIRO,
                        record_source = record.record_source,
                        record_access = record.record_access,
                        server_id = record.server_id,
                        command_type = record.command_type,
                        command_action = record.command_action,
                        command_numeric = record.command_numeric,
                        target_name = aPlayer.player_name,
                        target_player = aPlayer,
                        source_name = record.source_name,
                        source_player = record.source_player,
                        record_message = record.record_message,
                        record_action_executed = record.record_action_executed,
                        record_time = record.record_time
                    };
                    record.TargetInnerRecords.Add(aRecord);
                    if (!UploadInnerRecord(aRecord))
                    {
                        success = false;
                    }
                }
            }
            else
            {
                success = UploadInnerRecord(record);
            }
            return success;
        }

        private Boolean UploadInnerRecord(AdKatsRecord record)
        {
            Log.Debug(() => "uploadRecord starting!", 6);

            Boolean success = false;
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                record.record_exception = new AdKatsException("Database not connected.");
                return false;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Decide which table the record should be added to
                        String tablename = (record.isDebug) ? ("`adkats_records_debug`") : ("`adkats_records_main`");
                        //Set the insert command structure
                        if (record.record_held)
                        {
                            command.CommandText = @"
                            INSERT INTO " + tablename + @"
                            (
                                `server_id`, 
                                `command_type`, 
                                `command_action`, 
                                `command_numeric`, 
                                `target_name`, 
                                `target_id`, 
                                `source_name`, 
                                `source_id`, 
                                `record_message`, 
                                `record_time`, 
                                `adkats_read`
                            ) 
                            VALUES 
                            ( 
                                @server_id, 
                                @command_type, 
                                @command_action,
                                @command_numeric,
                                @target_name, 
                                @target_id, 
                                @source_name, 
                                @source_id, 
                                @record_message, 
                                @record_time, 
                                @record_orchestrate
                            )";
                            command.Parameters.AddWithValue("@record_time", record.record_time);
                        }
                        else
                        {
                            command.CommandText = @"
                            INSERT INTO " + tablename + @"
                            (
                                `server_id`, 
                                `command_type`, 
                                `command_action`, 
                                `command_numeric`, 
                                `target_name`, 
                                `target_id`, 
                                `source_name`, 
                                `source_id`, 
                                `record_message`, 
                                `record_time`, 
                                `adkats_read`
                            ) 
                            VALUES 
                            ( 
                                @server_id, 
                                @command_type, 
                                @command_action,
                                @command_numeric,
                                @target_name, 
                                @target_id, 
                                @source_name, 
                                @source_id, 
                                @record_message, 
                                UTC_TIMESTAMP(), 
                                @adkats_read
                            )";
                        }

                        //Fill the command
                        if (record.server_id == 0)
                        {
                            Log.Error("Record server ID was invalid, unable to continue.");
                            return false;
                        }
                        command.Parameters.AddWithValue("@server_id", record.server_id);
                        if (record.command_type == null)
                        {
                            Log.Error("Command type was null in uploadRecord, unable to continue.");
                            return false;
                        }
                        command.Parameters.AddWithValue("@command_type", record.command_type.command_id);
                        if (record.command_action == null)
                        {
                            record.command_action = record.command_type;
                        }
                        command.Parameters.AddWithValue("@command_action", record.command_action.command_id);
                        command.Parameters.AddWithValue("@command_numeric", record.command_numeric);
                        String tName = "NoNameTarget";
                        if (!String.IsNullOrEmpty(record.target_name))
                        {
                            tName = record.target_name;
                        }
                        if (record.target_player != null)
                        {
                            if (!String.IsNullOrEmpty(record.target_player.player_name))
                            {
                                tName = record.target_player.player_name;
                            }
                            if (record.target_player.player_id <= 0)
                            {
                                Log.Error("Target ID invalid when uploading record. Unable to complete.");
                                record.record_exception = new AdKatsException("Target ID invalid when uploading record. Unable to complete.");
                                SendMessageToSource(record, "Target ID invalid when uploading record. Unable to complete.");
                                FinalizeRecord(record);
                                return false;
                            }
                            command.Parameters.AddWithValue("@target_id", record.target_player.player_id);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@target_id", null);
                        }
                        command.Parameters.AddWithValue("@target_name", tName);
                        String sName = "NoNameSource";
                        if (!String.IsNullOrEmpty(record.source_name))
                        {
                            sName = record.source_name;
                        }
                        if (record.source_player != null)
                        {
                            if (!String.IsNullOrEmpty(record.source_player.player_name))
                            {
                                sName = record.source_player.player_name;
                            }
                            if (record.source_player.player_id <= 0)
                            {
                                Log.Error("Source ID invalid when uploading record. Unable to complete.");
                                record.record_exception = new AdKatsException("Source ID invalid when uploading record. Unable to complete.");
                                SendMessageToSource(record, "Source ID invalid when uploading record. Unable to complete.");
                                FinalizeRecord(record);
                                return false;
                            }
                            command.Parameters.AddWithValue("@source_id", record.source_player.player_id);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@source_id", null);
                        }
                        command.Parameters.AddWithValue("@source_name", sName);

                        String messageIRO = record.record_message + ((record.isIRO) ? (" [IRO]") : (""));
                        //Trim to 500 characters (Should only hit this limit when processing error messages)
                        messageIRO = messageIRO.Length <= 500 ? messageIRO : messageIRO.Substring(0, 500);
                        command.Parameters.AddWithValue("@record_message", messageIRO);

                        //Orchestration of other AdKats instances
                        if (record.record_orchestrate)
                        {
                            command.Parameters.AddWithValue("@adkats_read", "N");
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@adkats_read", "Y");
                        }

                        //Get reference to the command in case of error
                        //Attempt to execute the query
                        if (SafeExecuteNonQuery(command) > 0)
                        {
                            success = true;
                            record.record_id = command.LastInsertedId;
                        }
                    }
                }

                if (success)
                {
                    Log.Debug(() => record.command_action.command_key + " upload for " + record.GetTargetNames() + " by " + record.GetSourceName() + " SUCCESSFUL!", 3);
                }
                else
                {
                    record.record_exception = new AdKatsException("Unknown error uploading record.");
                    HandleException(record.record_exception);
                }

                Log.Debug(() => "uploadRecord finished!", 6);
                return success;
            }
            catch (Exception e)
            {
                record.record_exception = new AdKatsException("Unexpected error uploading Record.", e);
                HandleException(record.record_exception);
                return false;
            }
        }

        private Boolean UploadStatistic(AdKatsStatistic aStat)
        {
            Log.Debug(() => "UploadStatistic starting!", 6);

            Boolean success = false;
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return false;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Set the insert command structure
                        command.CommandText = @"
                        INSERT INTO 
                            `adkats_statistics`
                        (
                            `server_id`, 
                            `round_id`, 
                            `stat_type`, 
                            `target_name`, 
                            `target_id`, 
                            `stat_value`, 
                            `stat_comment`, 
                            `stat_time` 
                        ) 
                        VALUES 
                        ( 
                            @server_id, 
                            @round_id, 
                            @stat_type, 
                            @target_name, 
                            @target_id, 
                            @stat_value, 
                            @stat_comment, 
                            @stat_time 
                        )";

                        //Fill the command
                        if (aStat.server_id == 0)
                        {
                            HandleException(new AdKatsException("Statistic server ID was invalid when uploading, unable to continue."));
                            return false;
                        }
                        command.Parameters.AddWithValue("@server_id", aStat.server_id);
                        if (aStat.round_id == 0)
                        {
                            return false;
                        }
                        command.Parameters.AddWithValue("@round_id", aStat.round_id);
                        command.Parameters.AddWithValue("@stat_type", aStat.stat_type.ToString());
                        String tName = null;
                        if (aStat.target_player != null)
                        {
                            if (!String.IsNullOrEmpty(aStat.target_player.player_name))
                            {
                                tName = aStat.target_player.player_name;
                            }
                            command.Parameters.AddWithValue("@target_id", aStat.target_player.player_id);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@target_id", null);
                        }
                        if (!String.IsNullOrEmpty(tName))
                        {
                            command.Parameters.AddWithValue("@target_name", tName);
                        }
                        else
                        {
                            if (!String.IsNullOrEmpty(aStat.target_name))
                            {
                                command.Parameters.AddWithValue("@target_name", aStat.target_name);
                            }
                            else
                            {
                                HandleException(new AdKatsException("Statistic target name null or empty when uploading, unable to continue."));
                                return false;
                            }
                        }
                        command.Parameters.AddWithValue("@stat_value", aStat.stat_value);
                        command.Parameters.AddWithValue("@stat_comment", aStat.stat_comment);
                        command.Parameters.AddWithValue("@stat_time", aStat.stat_time);

                        //Get reference to the command in case of error
                        //Attempt to execute the query
                        if (SafeExecuteNonQuery(command) > 0)
                        {
                            success = true;
                            aStat.stat_id = command.LastInsertedId;
                        }
                    }
                }

                if (success)
                {
                    Log.Debug(() => aStat.stat_type + " stat upload for " + aStat.target_name + " SUCCESSFUL!", 4);
                }
                else
                {
                    HandleException(new AdKatsException("Unknown error uploading statistic."));
                }

                Log.Debug(() => "UploadStatistic finished!", 6);
                return success;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Unexpected error uploading statistic.", e));
                return false;
            }
        }

        private Boolean UploadChatLog(AdKatsChatMessage messageObject)
        {
            Log.Debug(() => "UploadChatLog starting!", 6);
            Boolean success = false;
            if (!_threadsReady)
            {
                return success;
            }
            //comorose BF4/BFHL chat handle
            if (messageObject.OriginalMessage.Contains("ID_CHAT") || messageObject.OriginalMessage.Contains("AdKatsInstanceCheck"))
            {
                success = true;
                return success;
            }
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                HandleException(new AdKatsException("Database not connected on chat upload."));
                return success;
            }
            //Server spam check
            if (!_PostStatLoggerChatManually_PostServerChatSpam && messageObject.Speaker == "Server")
            {
                success = true;
                return success;
            }
            //Ignore command check
            if (_PostStatLoggerChatManually_IgnoreCommands && (messageObject.OriginalMessage.StartsWith("@") || messageObject.OriginalMessage.StartsWith("!") || messageObject.OriginalMessage.StartsWith(".") || messageObject.OriginalMessage.StartsWith("/")))
            {
                success = true;
                return success;
            }

            MySqlCommand commandAttempt = null;
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Set the insert command structure
                        command.CommandText = @"INSERT INTO `tbl_chatlog` 
                        (
                            `logDate`, 
                            `ServerID`, 
                            `logSubset`, 
                            `logPlayerID`, 
                            `logSoldierName`, 
                            `logMessage`
                        ) 
                        VALUES 
                        (
                            UTC_TIMESTAMP(), 
                            @server_id, 
                            @log_subset, 
                            @log_player_id, 
                            @log_player_name, 
                            @log_message
                        )";

                        //Fetch the player from player dictionary
                        AdKatsPlayer aPlayer = null;
                        if (_PlayerDictionary.TryGetValue(messageObject.Speaker, out aPlayer))
                        {
                            aPlayer.LastUsage = UtcNow();
                            Log.Debug(() => "Player found for chat log upload.", 5);
                        }

                        //Fill the log
                        command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@log_subset", messageObject.Subset.ToString());
                        if (aPlayer != null && aPlayer.player_id > 0)
                        {
                            command.Parameters.AddWithValue("@log_player_id", aPlayer.player_id);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@log_player_id", null);
                        }
                        command.Parameters.AddWithValue("@log_player_name", messageObject.Speaker);
                        //Trim to 255 characters
                        String logMessage = messageObject.Message.Length <= 255 ? messageObject.OriginalMessage : messageObject.OriginalMessage.Substring(0, 255);
                        command.Parameters.AddWithValue("@log_message", logMessage);

                        //Get reference to the command in case of error
                        commandAttempt = command;
                        //Attempt to execute the query
                        if (SafeExecuteNonQuery(command) > 0)
                        {
                            success = true;
                        }
                    }
                }
                if (success)
                {
                    Log.Debug(() => "Chat upload for " + messageObject.Speaker + " SUCCESSFUL!", 5);
                }
                else
                {
                    HandleException(new AdKatsException("Error uploading chat log. Success not reached."));
                    return success;
                }
                Log.Debug(() => "UploadChatLog finished!", 6);
                return success;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Unexpected error uploading chat log.", e));
                return success;
            }
        }

        private void UpdateRecordEndPointReputations(AdKatsRecord aRecord)
        {
            Log.Debug(() => "Updating endpoint reputation for " + aRecord.command_action + " record.", 5);
            if (aRecord.source_player != null && aRecord.source_player.player_id > 0)
            {
                UpdatePlayerReputation(aRecord.source_player, true);
            }
            if (aRecord.target_player != null && aRecord.target_player.player_id > 0)
            {
                UpdatePlayerReputation(aRecord.target_player, true);
            }
            if (aRecord.TargetPlayersLocal != null)
            {
                foreach (AdKatsPlayer aPlayer in aRecord.TargetPlayersLocal)
                {
                    UpdatePlayerReputation(aPlayer, true);
                }
            }
        }

        private void UpdatePlayerReputation(AdKatsPlayer aPlayer, Boolean informPlayer)
        {
            try
            {
                if (aPlayer == null)
                {
                    Log.Error("Attempted to update reputation of invalid player.");
                    return;
                }
                if (_commandSourceReputationDictionary == null || !_commandSourceReputationDictionary.Any() || _commandTargetReputationDictionary == null || !_commandTargetReputationDictionary.Any())
                {
                    Log.Debug(() => "Reputation dictionaries not populated. Can't update reputation for " + aPlayer.GetVerboseName() + ".", 4);
                }
                double sourceReputation = 0.0;
                double targetReputation = 0.0;
                double pointReputation = 0;
                List<AdKatsRecord> recentPunishments = FetchRecentRecords(aPlayer.player_id, GetCommandByKey("player_punish").command_id, 10000, 10000, true, false);
                foreach (AdKatsRecord punishment in recentPunishments)
                {
                    TimeSpan timeSince = UtcNow() - punishment.record_time;
                    if (timeSince.TotalDays < 50)
                    {
                        pointReputation -= 20 * ((50 - timeSince.TotalDays) / 50);
                    }
                }
                List<AdKatsRecord> recentForgives = FetchRecentRecords(aPlayer.player_id, GetCommandByKey("player_forgive").command_id, 10000, 10000, true, false);
                foreach (AdKatsRecord forgive in recentForgives)
                {
                    TimeSpan timeSince = UtcNow() - forgive.record_time;
                    if (timeSince.TotalDays < 50)
                    {
                        pointReputation += 20 * ((50 - timeSince.TotalDays) / 50);
                    }
                }
                if (pointReputation > 0)
                {
                    pointReputation = 0;
                }
                targetReputation = pointReputation;
                double totalReputation = 0;
                double totalReputationConstrained = 0;
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
	                        command_type,
	                        command_action,
	                        count(record_id) command_count
                        FROM
	                        adkats_records_main
                        WHERE
	                        source_id = @player_id
                        AND
	                        target_name <> source_name
                        GROUP BY command_type, command_action";

                        command.Parameters.AddWithValue("player_id", aPlayer.player_id);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                String typeAction = reader.GetInt32("command_type") + "|" + reader.GetInt32("command_action");
                                Double command_count = reader.GetDouble("command_count");
                                Double weight = 0;
                                if (_commandSourceReputationDictionary.TryGetValue(typeAction, out weight))
                                {
                                    sourceReputation += (weight * command_count);
                                }
                                else
                                {
                                    Log.Warn("Unable to find source weight for command " + typeAction);
                                }
                            }
                        }
                    }
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
	                        command_type,
	                        command_action,
	                        count(record_id) command_count
                        FROM
	                        adkats_records_main
                        WHERE
	                        target_id = @player_id
                        AND
	                        target_name <> source_name
                        GROUP BY command_type, command_action";
                        command.Parameters.AddWithValue("player_id", aPlayer.player_id);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                String typeAction = reader.GetInt32("command_type") + "|" + reader.GetInt32("command_action");
                                Double command_count = reader.GetDouble("command_count");
                                Double weight = 0;
                                if (_commandTargetReputationDictionary.TryGetValue(typeAction, out weight))
                                {
                                    targetReputation += (weight * command_count);
                                }
                                else
                                {
                                    Log.Warn("Unable to find target weight for command " + typeAction);
                                }
                            }
                        }
                    }
                    //Special case for certain commands with same source and target, but should still be counted
                    //Currently only the assist command is counted (Command ID 51)
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT
	                        command_type,
	                        command_action,
	                        count(record_id) command_count
                        FROM
	                        adkats_records_main
                        WHERE
	                        source_id = @player_id
                        AND
	                        target_id = source_id
                        AND
	                        command_type = 51
                        AND 
                            command_action = 51
                        GROUP BY command_type, command_action";
                        command.Parameters.AddWithValue("player_id", aPlayer.player_id);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                String typeAction = reader.GetInt32("command_type") + "|" + reader.GetInt32("command_action");
                                Double command_count = reader.GetDouble("command_count");
                                Double weight = 0;
                                if (_commandSourceReputationDictionary.TryGetValue(typeAction, out weight))
                                {
                                    sourceReputation += (weight * command_count);
                                }
                                else
                                {
                                    Log.Error("Unable to find source weight for command " + typeAction);
                                }
                                if (_commandTargetReputationDictionary.TryGetValue(typeAction, out weight))
                                {
                                    targetReputation += (weight * command_count);
                                }
                                else
                                {
                                    Log.Error("Unable to find target weight for command " + typeAction);
                                }
                            }
                        }
                    }
                    totalReputation = sourceReputation + targetReputation;
                    if (totalReputation >= 0)
                    {
                        totalReputationConstrained = (1000 * totalReputation) / (totalReputation + 1000);
                    }
                    else
                    {
                        totalReputationConstrained = -(1000 * Math.Abs(totalReputation)) / (Math.Abs(totalReputation) + 1000);
                    }
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        REPLACE INTO
	                        adkats_player_reputation
                        VALUES 
                        (
	                        @player_id,
	                        @game_id,
	                        @target_rep,
	                        @source_rep,
	                        @total_rep,
                            @total_rep_co
                        )";
                        if (aPlayer.player_id <= 0)
                        {
                            Log.Error("Player ID invalid when updating player reputation. Unable to complete.");
                            return;
                        }
                        command.Parameters.AddWithValue("player_id", aPlayer.player_id);
                        if (aPlayer.game_id <= 0)
                        {
                            aPlayer.game_id = _serverInfo.GameID;
                        }
                        command.Parameters.AddWithValue("game_id", aPlayer.game_id);
                        command.Parameters.AddWithValue("target_rep", targetReputation);
                        command.Parameters.AddWithValue("source_rep", sourceReputation);
                        command.Parameters.AddWithValue("total_rep", totalReputation);
                        command.Parameters.AddWithValue("total_rep_co", totalReputationConstrained);
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (_firstPlayerListComplete && Math.Abs(aPlayer.player_reputation - totalReputationConstrained) > .02) 
                        {
                            Log.Debug(() => aPlayer.GetVerboseName() + "'s reputation updated from " + Math.Round(aPlayer.player_reputation, 2) + " to " + Math.Round(totalReputationConstrained, 2), 3);
                            if (aPlayer.player_spawnedOnce || (aPlayer.frostbitePlayerInfo != null && aPlayer.frostbitePlayerInfo.TeamID == 0))
                            {
                                if (!PlayerIsAdmin(aPlayer))
                                {
                                    String message = "Your reputation ";
                                    if (totalReputationConstrained > aPlayer.player_reputation)
                                    {
                                        if (Math.Round(totalReputationConstrained, 2) == 0)
                                        {
                                            message += "increased from " + Math.Round(aPlayer.player_reputation, 2) + " to " + Math.Round(totalReputationConstrained, 2) + "!";
                                        }
                                        else if (totalReputationConstrained > 0)
                                        {
                                            message += "increased from " + Math.Round(aPlayer.player_reputation, 2) + " to " + Math.Round(totalReputationConstrained, 2) + "! Thanks for your help!";
                                        }
                                        else
                                        {
                                            message += "increased from " + Math.Round(aPlayer.player_reputation, 2) + " to " + Math.Round(totalReputationConstrained, 2) + ", but is still negative.";
                                        }
                                    }
                                    else
                                    {
                                        if (aPlayer.player_reputation >= 0)
                                        {
                                            if (totalReputationConstrained < 0)
                                            {
                                                message += "has gone negative! Be careful, it's now " + Math.Round(totalReputationConstrained, 2);
                                            }
                                            else
                                            {
                                                message += "decreased from " + Math.Round(aPlayer.player_reputation, 2) + " to " + Math.Round(totalReputationConstrained, 2);
                                            }
                                        }
                                        else
                                        {
                                            message += "decreased further from " + Math.Round(aPlayer.player_reputation, 2) + " to " + Math.Round(totalReputationConstrained, 2);
                                        }
                                    }
                                    if (informPlayer)
                                    {
                                        PlayerSayMessage(aPlayer.player_name, message);
                                    }
                                }
                            }
                        }
                        aPlayer.player_reputation = totalReputationConstrained;
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating player reputation.", e));
            }
        }

        private Boolean SendQuery(String query, Boolean verbose)
        {
            if (String.IsNullOrEmpty(query))
            {
                return false;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Attempt to execute the query
                        command.CommandText = query;
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                if (verbose)
                                {
                                    Log.Success("Query returned values.");
                                }
                                return true;
                            }
                            if (verbose)
                            {
                                Log.Error("Query returned no results.");
                            }
                            return false;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                if (verbose)
                {
                    HandleException(new AdKatsException("Verbose. Error while performing query.", e));
                }
                return false;
            }
        }

        private Boolean SendNonQuery(String desc, String nonQuery, Boolean verbose)
        {
            if (String.IsNullOrEmpty(nonQuery))
            {
                return false;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = nonQuery;
                        //Attempt to execute the non query
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (verbose)
                        {
                            Log.Success("Non-Query success. " + rowsAffected + " rows affected. [" + desc + "]");
                        }
                        return true;
                    }
                }
            }
            catch (Exception e)
            {
                if (verbose)
                {
                    Log.Error("Non-Query failed. [" + desc + "]: " + e);
                }
                return false;
            }
        }


        private void UpdateRecord(AdKatsRecord record)
        {
            //If record has multiple inner records, update those instead
            if (record.TargetInnerRecords.Any())
            {
                foreach (AdKatsRecord innerRecord in record.TargetInnerRecords)
                {
                    //Update the inner record with action, numeric, and message, before pushing
                    innerRecord.command_action = record.command_action;
                    innerRecord.command_numeric = record.command_numeric;
                    innerRecord.record_message = record.record_message;
                    //Call inner upload
                    UpdateInnerRecord(innerRecord);
                }
            }
            else
            {
                UpdateInnerRecord(record);
            }
        }


        private void UpdateInnerRecord(AdKatsRecord record)
        {
            Log.Debug(() => "UpdateInnerRecord starting!", 6);

            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                record.record_exception = new AdKatsException("Database not connected.");
                return;
            }
            try
            {
                Int32 attempts = 0;
                Boolean success = false;
                do
                {
                    try
                    {
                        using (MySqlConnection connection = GetDatabaseConnection())
                        {
                            using (MySqlCommand command = connection.CreateCommand())
                            {
                                String tablename = (record.isDebug) ? ("`adkats_records_debug`") : ("`adkats_records_main`");
                                //Set the insert command structure
                                command.CommandText = "UPDATE " + tablename + @" 
                                SET 
                                    `command_action` = @command_action, 
                                    `command_numeric` = @command_numeric, 
                                    `record_message` = @record_message, 
                                    `adkats_read` = 'Y' 
                                WHERE 
                                    `record_id` = @record_id";
                                //Fill the command
                                command.Parameters.AddWithValue("@record_id", record.record_id);
                                command.Parameters.AddWithValue("@command_numeric", record.command_numeric);
                                //Trim to 500 characters
                                record.record_message = record.record_message.Length <= 500 ? record.record_message : record.record_message.Substring(0, 500);
                                command.Parameters.AddWithValue("@record_message", record.record_message);
                                command.Parameters.AddWithValue("@command_action", record.command_action.command_id);
                                //Attempt to execute the query
                                Int32 rowsAffected = SafeExecuteNonQuery(command);
                                if (rowsAffected > 0)
                                {
                                    success = true;
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        HandleException(new AdKatsException("Error while updating record.", e));
                        success = false;
                    }
                } while (!success && attempts++ < 5);

                UpdateRecordEndPointReputations(record);
                if (success)
                {
                    Log.Debug(() => record.command_action.command_key + " update for " + record.GetTargetNames() + " by " + record.GetSourceName() + " SUCCESSFUL!", 3);
                }
                else
                {
                    Log.Error(record.command_action.command_key + " update for " + record.GetTargetNames() + " by " + record.GetSourceName() + " FAILED!");
                }

                Log.Debug(() => "UpdateInnerRecord finished!", 6);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating record", e));
            }
        }


        private AdKatsRecord FetchRecordByID(Int64 recordID, Boolean debug)
        {
            Log.Debug(() => "fetchRecordByID starting!", 6);
            AdKatsRecord record = null;
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return null;
            }
            try
            {
                //Success fetching record
                Boolean success = false;
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        String tablename = (debug) ? ("`adkats_records_debug`") : ("`adkats_records_main`");
                        String sql = @"
                        SELECT 
                            `record_id`, 
                            `server_id`, 
                            `command_type`, 
                            `command_action`, 
                            `command_numeric`, 
                            `target_name`, 
                            `target_id`, 
                            `source_name`,
                            `source_id`, 
                            `record_message`, 
                            `record_time` 
                        FROM 
                            " + tablename + @" 
                        WHERE 
                            `record_id` = " + recordID;
                        command.CommandText = sql;
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            //Grab the record
                            if (reader.Read())
                            {
                                success = true;

                                record = new AdKatsRecord();
                                record.record_source = AdKatsRecord.Sources.Database;
                                record.record_access = AdKatsRecord.AccessMethod.HiddenExternal;
                                record.record_id = reader.GetInt64("record_id");
                                record.server_id = reader.GetInt64("server_id");
                                Int32 commandTypeInt = reader.GetInt32("command_type");
                                if (!_CommandIDDictionary.TryGetValue(commandTypeInt, out record.command_type))
                                {
                                    Log.Error("Unable to parse command type " + commandTypeInt + " when fetching record by ID.");
                                }
                                Int32 commandActionInt = reader.GetInt32("command_action");
                                if (!_CommandIDDictionary.TryGetValue(commandActionInt, out record.command_action))
                                {
                                    Log.Error("Unable to parse command action " + commandActionInt + " when fetching record by ID.");
                                }
                                record.command_numeric = reader.GetInt32("command_numeric");
                                record.target_name = reader.GetString("target_name");
                                if (!reader.IsDBNull(6))
                                {
                                    record.target_player = new AdKatsPlayer(this)
                                    {
                                        player_id = reader.GetInt64(6)
                                    };
                                }
                                record.source_name = reader.GetString("source_name");
                                if (!reader.IsDBNull(8))
                                {
                                    record.source_player = new AdKatsPlayer(this)
                                    {
                                        player_id = reader.GetInt64(6)
                                    };
                                }
                                record.record_message = reader.GetString("record_message");
                                record.record_time = reader.GetDateTime("record_time");
                            }
                            if (success)
                            {
                                Log.Debug(() => "Record found for ID " + recordID, 5);
                            }
                            else
                            {
                                Log.Debug(() => "No record found for ID " + recordID, 5);
                            }
                        }
                        if (success && record.target_player != null)
                        {
                            long oldID = record.target_player.player_id;
                            record.target_player = FetchPlayer(false, true, false, null, oldID, null, null, null);
                            if (record.target_player == null)
                            {
                                Log.Error("Unable to find player ID: " + oldID);
                                return null;
                            }
                            if (!String.IsNullOrEmpty(record.target_player.player_name))
                            {
                                record.target_name = record.target_player.player_name;
                            }
                            else
                            {
                                record.target_name = "NoNameTarget";
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching record by ID", e));
            }

            Log.Debug(() => "fetchRecordByID finished!", 6);
            return record;
        }


        private List<AdKatsRecord> FetchRecentRecords(Int64? player_id, Int64? command_id, Int64 limit_days, Int64 limit_records, Boolean target_only, Boolean debug)
        {
            Log.Debug(() => "FetchRecentRecords starting!", 6);
            List<AdKatsRecord> records = new List<AdKatsRecord>();
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return records;
            }
            try
            {
                //Success fetching record
                Boolean success = false;
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        String tablename = (debug) ? ("`adkats_records_debug`") : ("`adkats_records_main`");
                        String sql = @"
                        (SELECT 
	                        `record_id`, 
	                        `server_id`, 
	                        `command_type`, 
	                        `command_action`, 
	                        `command_numeric`, 
	                        `target_name`, 
	                        `target_id`, 
	                        `source_name`, 
	                        `source_id`,
	                        `record_message`, 
	                        `record_time` 
                        FROM 
	                        " + tablename + @" 
                        WHERE
	                        `record_id` = `record_id`";
                        if (command_id != null && command_id > 0)
                        {
                            sql += @" 
                            AND
                            (
	                            `command_type` = @command_id
	                            OR
	                            `command_action` = @command_id
                            )";
                            command.Parameters.AddWithValue("@command_id", command_id);
                        }
                        if (player_id != null && player_id > 0)
                        {
                            sql += @" 
                            AND 
                            (
	                            `target_id` = @player_id
	                            " + ((target_only) ? ("") : (" OR `source_id` = @player_id ")) + @"
                            )";
                            command.Parameters.AddWithValue("@player_id", player_id);
                        }
                        sql += @" 
                        AND
                        (
	                        DATE_ADD(`record_time`, INTERVAL @limit_days DAY) > UTC_TIMESTAMP()
                        )
                        ORDER BY
	                        `record_id` DESC
                        LIMIT
	                        @limit_records)
                        ORDER BY `record_id` ASC";
                        command.Parameters.AddWithValue("@limit_days", limit_days);
                        command.Parameters.AddWithValue("@limit_records", limit_records);
                        command.CommandText = sql;
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            //Grab the records
                            while (reader.Read())
                            {
                                success = true;
                                AdKatsRecord record = new AdKatsRecord();
                                record.record_source = AdKatsRecord.Sources.Database;
                                record.record_access = AdKatsRecord.AccessMethod.HiddenExternal;
                                record.record_id = reader.GetInt64("record_id");
                                record.server_id = reader.GetInt64("server_id");
                                Int32 commandTypeInt = reader.GetInt32("command_type");
                                if (!_CommandIDDictionary.TryGetValue(commandTypeInt, out record.command_type))
                                {
                                    Log.Error("Unable to parse command type " + commandTypeInt + " when fetching record.");
                                }
                                Int32 commandActionInt = reader.GetInt32("command_action");
                                if (!_CommandIDDictionary.TryGetValue(commandActionInt, out record.command_action))
                                {
                                    Log.Error("Unable to parse command action " + commandActionInt + " when fetching record.");
                                }
                                record.command_numeric = reader.GetInt32("command_numeric");
                                record.target_name = reader.GetString("target_name");
                                if (!reader.IsDBNull(6))
                                {
                                    Int64 targetID = reader.GetInt64(6);
                                    AdKatsPlayer tPlayer;
                                    if ((_PlayerDictionary.TryGetValue(record.target_name, out tPlayer) || _PlayerLeftDictionary.TryGetValue(record.target_name, out tPlayer)) && tPlayer.player_id == targetID)
                                    {
                                        tPlayer.LastUsage = UtcNow();
                                        Log.Debug(() => "Target player fetched from memory.", 7);
                                    }
                                    else
                                    {
                                        tPlayer = FetchPlayer(false, true, false, null, targetID, null, null, null);
                                    }
                                    record.target_player = tPlayer;
                                }
                                record.source_name = reader.GetString("source_name");
                                if (!reader.IsDBNull(8))
                                {
                                    Int64 targetID = reader.GetInt64(8);
                                    AdKatsPlayer sPlayer;
                                    if ((_PlayerDictionary.TryGetValue(record.target_name, out sPlayer) || _PlayerLeftDictionary.TryGetValue(record.target_name, out sPlayer)) && sPlayer.player_id == targetID)
                                    {
                                        sPlayer.LastUsage = UtcNow();
                                        Log.Debug(() => "Target player fetched from memory.", 7);
                                    }
                                    else
                                    {
                                        sPlayer = FetchPlayer(false, true, false, null, targetID, null, null, null);
                                    }
                                    record.source_player = sPlayer;
                                }
                                record.record_message = reader.GetString("record_message");
                                record.record_time = reader.GetDateTime("record_time");
                                records.Add(record);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching recent records", e));
            }

            Log.Debug(() => "FetchRecentRecords finished!", 6);
            return records;
        }


        private List<AdKatsRecord> FetchUnreadRecords()
        {
            Log.Debug(() => "fetchUnreadRecords starting!", 6);
            //Create return list
            List<AdKatsRecord> records = new List<AdKatsRecord>();
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return records;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        String sql = @"
                        SELECT 
                            `record_id`, 
                            `server_id`, 
                            `command_type`, 
                            `command_action`, 
                            `command_numeric`, 
                            `target_name`, 
                            `target_id`, 
                            `source_name`, 
                            `source_id`,
                            `record_message`, 
                            `record_time` 
                        FROM 
                            `" + _mySqlSchemaName + @"`.`adkats_records_main` 
                        WHERE 
                            `adkats_read` = 'N' 
                        AND 
                            `server_id` = " + _serverInfo.ServerID;
                        command.CommandText = sql;
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            //Grab the record
                            while (reader.Read())
                            {
                                AdKatsRecord record = new AdKatsRecord();
                                record.record_source = AdKatsRecord.Sources.Database;
                                record.record_access = AdKatsRecord.AccessMethod.HiddenExternal;
                                record.record_id = reader.GetInt64("record_id");
                                record.server_id = reader.GetInt64("server_id");
                                Int32 commandTypeInt = reader.GetInt32("command_type");
                                if (!_CommandIDDictionary.TryGetValue(commandTypeInt, out record.command_type))
                                {
                                    Log.Error("Unable to parse command type " + commandTypeInt + " when fetching record by ID.");
                                }
                                Int32 commandActionInt = reader.GetInt32("command_action");
                                if (!_CommandIDDictionary.TryGetValue(commandActionInt, out record.command_action))
                                {
                                    Log.Error("Unable to parse command action " + commandActionInt + " when fetching record by ID.");
                                }
                                record.command_numeric = reader.GetInt32("command_numeric");
                                record.target_name = reader.GetString("target_name");
                                object value = reader.GetValue(6);
                                Int64 targetIDParse = -1;
                                Log.Debug(() => "id fetched!", 6);
                                if (Int64.TryParse(value.ToString(), out targetIDParse))
                                {
                                    Log.Debug(() => "id parsed! " + targetIDParse, 6);
                                    //Check if the player needs to be imported, or if they are already in the server
                                    AdKatsPlayer importedPlayer = FetchPlayer(false, true, false, null, targetIDParse, null, null, null);
                                    if (importedPlayer == null)
                                    {
                                        continue;
                                    }
                                    AdKatsPlayer currentPlayer = null;
                                    if (!String.IsNullOrEmpty(importedPlayer.player_name) && _PlayerDictionary.TryGetValue(importedPlayer.player_name, out currentPlayer))
                                    {
                                        currentPlayer.LastUsage = UtcNow();
                                        Log.Debug(() => "External player is currently in the server, using existing data.", 5);
                                        record.target_player = currentPlayer;
                                    }
                                    else
                                    {
                                        Log.Debug(() => "External player is not in the server, fetching from database.", 5);
                                        record.target_player = importedPlayer;
                                    }
                                    record.target_name = record.target_player.player_name;
                                }
                                else
                                {
                                    Log.Debug(() => "id parse failed!", 6);
                                }
                                record.source_name = reader.GetString("source_name");
                                object sourceIDObj = reader.GetValue(8);
                                Int64 sourceIDParse = -1;
                                if (Int64.TryParse(sourceIDObj.ToString(), out sourceIDParse))
                                {
                                    Log.Debug(() => "source id parsed! " + sourceIDParse, 6);
                                    //Check if the player needs to be imported, or if they are already in the server
                                    AdKatsPlayer importedPlayer = FetchPlayer(false, true, false, null, sourceIDParse, null, null, null);
                                    if (importedPlayer == null)
                                    {
                                        continue;
                                    }
                                    AdKatsPlayer currentPlayer = null;
                                    if (!String.IsNullOrEmpty(importedPlayer.player_name) && _PlayerDictionary.TryGetValue(importedPlayer.player_name, out currentPlayer))
                                    {
                                        Log.Debug(() => "External player is currently in the server, using existing data.", 5);
                                        record.source_player = currentPlayer;
                                    }
                                    else
                                    {
                                        Log.Debug(() => "External player is not in the server, fetching from database.", 5);
                                        record.source_player = importedPlayer;
                                    }
                                    record.target_name = record.target_player.player_name;
                                }
                                record.record_message = reader.GetString("record_message");
                                record.record_time = reader.GetDateTime("record_time");

                                records.Add(record);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching unread records from database.", e));
            }

            Log.Debug(() => "fetchUnreadRecords finished!", 6);
            return records;
        }


        private List<AdKatsPlayer> FetchExternalOnlinePlayers()
        {
            Log.Debug(() => "FetchExternalOnlinePlayers starting!", 6);
            //Create return list
            List<AdKatsPlayer> onlinePlayers = new List<AdKatsPlayer>();
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return onlinePlayers;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        String sql = @"
                        SELECT 
	                        `tbl_server`.`ServerID` AS `server_id`,
	                        `tbl_server`.`ServerName` AS `server_name`,
	                        `tbl_playerdata`.`PlayerID` AS `player_id`,
	                        `tbl_playerdata`.`SoldierName` AS `player_name`,
	                        `tbl_playerdata`.`EAGUID` AS `player_guid`
                        FROM 
	                        `tbl_currentplayers`
                        INNER JOIN
	                        `tbl_server`
                        ON
	                        `tbl_server`.`ServerID` = `tbl_currentplayers`.`ServerID`
                        INNER JOIN
	                        `tbl_playerdata`
                        ON
	                        `tbl_currentplayers`.`EA_GUID` = `tbl_playerdata`.`EAGUID`
	                        AND
	                        `tbl_server`.`GameID` = `tbl_playerdata`.`GameID`
                        WHERE
	                        `tbl_currentplayers`.`ServerID` != @current_server_id 
                        GROUP BY
	                        `tbl_playerdata`.`PlayerID`";
                        command.CommandText = sql;
                        command.Parameters.AddWithValue("@current_server_id", _serverInfo.ServerID);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            //Grab the record
                            while (reader.Read())
                            {
                                AdKatsPlayer ePlayer = FetchPlayer(false, false, false, null, reader.GetInt64("player_id"), null, null, null);
                                if (ePlayer != null)
                                {
                                    ePlayer.player_server = new AdKatsServer(this)
                                    {
                                        ServerID = reader.GetInt64("server_id"),
                                        ServerName = reader.GetString("server_name")
                                    };
                                    onlinePlayers.Add(ePlayer);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching external online players.", e));
            }
            Log.Debug(() => "FetchExternalOnlinePlayers finished!", 6);
            return onlinePlayers;
        }

        private AdKatsPlayer FetchMatchingExternalOnlinePlayer(String searchName)
        {
            Log.Debug(() => "FetchMatchingExternalOnlinePlayer starting!", 6);
            AdKatsPlayer aPlayer = null;
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return null;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        String sql = @"
                        SELECT 
	                        `tbl_server`.`ServerID` AS `server_id`,
	                        `tbl_server`.`ServerName` AS `server_name`,
	                        `tbl_playerdata`.`PlayerID` AS `player_id`,
	                        `tbl_playerdata`.`SoldierName` AS `player_name`,
	                        `tbl_playerdata`.`EAGUID` AS `player_guid`
                        FROM 
	                        `tbl_currentplayers`
                        INNER JOIN
	                        `tbl_server`
                        ON
	                        `tbl_server`.`ServerID` = `tbl_currentplayers`.`ServerID`
                        INNER JOIN
	                        `tbl_playerdata`
                        ON
	                        `tbl_currentplayers`.`EA_GUID` = `tbl_playerdata`.`EAGUID`
	                        AND
	                        `tbl_server`.`GameID` = `tbl_playerdata`.`GameID`
                        WHERE
	                        `tbl_currentplayers`.`ServerID` != @current_server_id 
                        AND
	                        `tbl_playerdata`.`GameID` != @game_id 
                        GROUP BY
	                        `tbl_playerdata`.`PlayerID`";
                        command.CommandText = sql;
                        command.Parameters.AddWithValue("@current_server_id", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@game_id", _serverInfo.GameID);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                if (Regex.Match(reader.GetString("player_name"), searchName, RegexOptions.IgnoreCase).Success)
                                {
                                    aPlayer = FetchPlayer(false, true, false, null, reader.GetInt64("player_id"), null, null, null);
                                    if (aPlayer == null)
                                    {
                                        return null;
                                    }
                                    aPlayer.player_server = new AdKatsServer(this)
                                    {
                                        ServerID = reader.GetInt64("server_id"),
                                        ServerName = reader.GetString("server_name")
                                    };
                                    return aPlayer;
                                }
                            }
                            return null;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching matching external online from database.", e));
            }
            Log.Debug(() => "FetchMatchingExternalOnlinePlayer finished!", 6);
            return aPlayer;
        }

        private void RunPluginOrchestration()
        {
            Log.Debug(() => "RunPluginOrchestration starting!", 6);
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                Log.Debug(() => "Running plugin orchestration", 5);
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT
	                        `setting_plugin`,
	                        `setting_name`,
	                        `setting_value`
                        FROM
	                        `adkats_orchestration`
                        WHERE
	                        `setting_server` = @server_id";
                        command.Parameters.AddWithValue("server_id", _serverInfo.ServerID);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                SetExternalPluginSetting(reader.GetString("setting_plugin"), reader.GetString("setting_name"), reader.GetString("setting_value"));
                                _threadMasterWaitHandle.WaitOne(10);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while running plugin orchestration.", e));
            }

            Log.Debug(() => "RunPluginOrchestration finished!", 6);
        }


        private Int64 FetchNameBanCount()
        {
            Log.Debug(() => "fetchNameBanCount starting!", 7);
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return 0;
            }
            if (_NameBanCount >= 0 && (UtcNow() - _lastNameBanCountFetch).TotalSeconds < 30)
            {
                return _NameBanCount;
            }
            _lastNameBanCountFetch = UtcNow();
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            COUNT(ban_id) AS `ban_count`
                        FROM 
	                        `adkats_bans` 
                        WHERE 
                            `adkats_bans`.`ban_enforceName` = 'Y' 
                        AND 
                            `ban_status` = 'Active'";

                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                _NameBanCount = reader.GetInt64("ban_count");
                                return _NameBanCount;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching number of id bans.", e));
            }

            Log.Debug(() => "fetchNameBanCount finished!", 7);
            return -1;
        }


        private Int64 FetchGUIDBanCount()
        {
            Log.Debug(() => "fetchGUIDBanCount starting!", 7);
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return 0;
            }
            if (_GUIDBanCount >= 0 && (UtcNow() - _lastGUIDBanCountFetch).TotalSeconds < 30)
            {
                return _GUIDBanCount;
            }
            _lastGUIDBanCountFetch = UtcNow();
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            COUNT(ban_id) AS `ban_count`
                        FROM 
	                        `adkats_bans` 
                        WHERE 
                            `adkats_bans`.`ban_enforceGUID` = 'Y' 
                        AND 
                            `ban_status` = 'Active'";

                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                _GUIDBanCount = reader.GetInt64("ban_count");
                                return _GUIDBanCount;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching number of GUID bans.", e));
            }

            Log.Debug(() => "fetchGUIDBanCount finished!", 7);
            return -1;
        }


        private Int64 FetchIPBanCount()
        {
            Log.Debug(() => "fetchIPBanCount starting!", 7);
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return 0;
            }
            if (_IPBanCount >= 0 && (UtcNow() - _lastIPBanCountFetch).TotalSeconds < 30)
            {
                return _IPBanCount;
            }
            _lastIPBanCountFetch = UtcNow();
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            COUNT(ban_id) AS `ban_count` 
                        FROM 
	                        `adkats_bans` 
                        WHERE 
                            `adkats_bans`.`ban_enforceIP` = 'Y' 
                        AND 
                            `ban_status` = 'Active'";

                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                _IPBanCount = reader.GetInt64("ban_count");
                                return _IPBanCount;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching number of IP bans.", e));
            }

            Log.Debug(() => "fetchIPBanCount finished!", 7);
            return -1;
        }

        private void RemoveUser(AdKatsUser user)
        {
            Log.Debug(() => "removeUser starting!", 6);
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = "DELETE FROM `" + _mySqlSchemaName + "`.`adkats_users` WHERE `user_id` = @user_id";
                        command.Parameters.AddWithValue("@user_id", user.user_id);
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while removing user.", e));
            }
            Log.Debug(() => "removeUser finished!", 6);
        }

        private void RemoveRole(AdKatsRole aRole)
        {
            Log.Debug(() => "removeRole starting!", 6);
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                //Assign "Default Guest" to all users currently on this role
                AdKatsRole guestRole = null;
                if (_RoleKeyDictionary.TryGetValue("guest_default", out guestRole))
                {
                    foreach (AdKatsUser aUser in _userCache.Values)
                    {
                        if (aUser.user_role.role_key == aRole.role_key)
                        {
                            aUser.user_role = guestRole;
                        }
                        UploadUser(aUser);
                    }
                }
                else
                {
                    Log.Error("Could not fetch default guest user role. Unsafe to remove requested user role.");
                    return;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = "DELETE FROM `" + _mySqlSchemaName + "`.`adkats_rolecommands` WHERE `role_id` = @role_id";
                        command.Parameters.AddWithValue("@role_id", aRole.role_id);
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                    }
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = "DELETE FROM `" + _mySqlSchemaName + "`.`adkats_roles` WHERE `role_id` = @role_id";
                        command.Parameters.AddWithValue("@role_id", aRole.role_id);
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while removing user.", e));
            }
            Log.Debug(() => "removeRole finished!", 6);
        }

        private void UploadUser(AdKatsUser aUser)
        {
            Log.Debug(() => "uploadUser starting!", 6);
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                Log.Debug(() => "Uploading user: " + aUser.user_name, 5);

                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        if (aUser.user_role == null)
                        {
                            AdKatsRole aRole = null;
                            if (_RoleKeyDictionary.TryGetValue("guest_default", out aRole))
                            {
                                aUser.user_role = aRole;
                            }
                            else
                            {
                                Log.Error("Unable to assign default guest role to user " + aUser.user_name + ". Unable to upload user.");
                                return;
                            }
                        }
                        command.CommandText = @"
                        INSERT INTO 
	                        `adkats_users`
                        (
	                        " + ((aUser.user_id > 0) ? ("`user_id`,") : ("")) + @"
	                        `user_name`,
	                        `user_email`,
	                        `user_phone`,
	                        `user_role`,
                            `user_expiration`,
                            `user_notes`
                        )
                        VALUES
                        (
	                        " + ((aUser.user_id > 0) ? ("@user_id,") : ("")) + @"
	                        @user_name,
	                        @user_email,
	                        @user_phone,
	                        @user_role,
                            @user_expiration,
                            @user_notes
                        )
                        ON DUPLICATE KEY UPDATE
	                        `user_name` = @user_name,
	                        `user_email` = @user_email,
	                        `user_phone` = @user_phone,
	                        `user_role` = @user_role,
                            `user_expiration` = @user_expiration,
                            `user_notes` = @user_notes";
                        if (aUser.user_id > 0)
                        {
                            command.Parameters.AddWithValue("@user_id", aUser.user_id);
                        }
                        command.Parameters.AddWithValue("@user_name", aUser.user_name);
                        command.Parameters.AddWithValue("@user_email", aUser.user_email);
                        command.Parameters.AddWithValue("@user_phone", aUser.user_phone);
                        command.Parameters.AddWithValue("@user_role", aUser.user_role.role_id);
                        command.Parameters.AddWithValue("@user_expiration", aUser.user_expiration);
                        command.Parameters.AddWithValue("@user_notes", aUser.user_notes);

                        //Attempt to execute the query
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0)
                        {
                            //Set the user's new ID if new
                            if (aUser.user_id < 0)
                            {
                                aUser.user_id = command.LastInsertedId;
                            }
                            Log.Debug(() => "User uploaded to database SUCCESSFULY.", 5);
                        }
                        else
                        {
                            Log.Error("Unable to upload user " + aUser.user_name + " to database.");
                            return;
                        }
                    }
                    //Run command to delete all current soldiers
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"DELETE FROM `adkats_usersoldiers` where `user_id` = " + aUser.user_id;
                        //Attempt to execute the query
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                    }
                    //Upload/Update the user's soldier list
                    if (aUser.soldierDictionary.Count > 0)
                    {
                        //Refill user with current soldiers
                        foreach (AdKatsPlayer aPlayer in aUser.soldierDictionary.Values)
                        {
                            using (MySqlCommand command = connection.CreateCommand())
                            {
                                //Set the insert command structure
                                command.CommandText = @"
                                INSERT INTO
	                                `adkats_usersoldiers`
                                (
	                                `user_id`,
	                                `player_id`
                                )
                                VALUES
                                (
	                                @user_id,
	                                @player_id
                                )
                                ON DUPLICATE KEY UPDATE
	                                `player_id` = @player_id";
                                //Set values
                                command.Parameters.AddWithValue("@user_id", aUser.user_id);
                                command.Parameters.AddWithValue("@player_id", aPlayer.player_id);

                                //Attempt to execute the query
                                Int32 rowsAffected = SafeExecuteNonQuery(command);
                                if (rowsAffected > 0)
                                {
                                    Log.Debug(() => "Soldier link " + aUser.user_id + "->" + aPlayer.player_id + " uploaded to database SUCCESSFULY.", 5);
                                }
                                else
                                {
                                    Log.Error("Unable to upload soldier link for " + aUser.user_name + " to database.");
                                    return;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating player access.", e));
            }

            Log.Debug(() => "uploadUser finished!", 6);
        }

        private void TryAddUserSoldier(AdKatsUser aUser, String soldierName)
        {
            try
            {
                //Attempt to fetch the soldier
                if (!String.IsNullOrEmpty(soldierName) && IsSoldierNameValid(soldierName))
                {
                    List<AdKatsPlayer> matchingPlayers;
                    if (FetchMatchingPlayers(soldierName, out matchingPlayers, false))
                    {
                        if (matchingPlayers.Count > 0)
                        {
                            AdKatsPlayer exactMatch = null;
                            foreach (AdKatsPlayer aPlayer in matchingPlayers)
                            {
                                if(aPlayer.player_name == soldierName)
                                {
                                    exactMatch = aPlayer;
                                    break;
                                }
                            }
                            if (matchingPlayers.Count > 10)
                            {
                                if (exactMatch != null)
                                {
                                    exactMatch.LastUsage = UtcNow();
                                    bool playerDuplicate = false;
                                    //Make sure the player is not already assigned to another user
                                    lock (_userCache)
                                    {
                                        if (_userCache.Values.Any(innerUser => innerUser.soldierDictionary.ContainsKey(exactMatch.player_id)))
                                        {
                                            playerDuplicate = true;
                                        }
                                    }
                                    if (!playerDuplicate)
                                    {
                                        if (aUser.soldierDictionary.ContainsKey(exactMatch.player_id))
                                        {
                                            aUser.soldierDictionary.Remove(exactMatch.player_id);
                                        }
                                        aUser.soldierDictionary.Add(exactMatch.player_id, exactMatch);
                                        return;
                                    }
                                    else
                                    {
                                        Log.Error("Player " + exactMatch.GetVerboseName() + "(" + _gameIDDictionary[exactMatch.game_id] + ") already assigned to a user.");
                                    }
                                }
                                Log.Error("Too many players matched the query, unable to add.");
                                return;
                            }
                            foreach (AdKatsPlayer matchingPlayer in matchingPlayers)
                            {
                                matchingPlayer.LastUsage = UtcNow();
                                bool playerDuplicate = false;
                                //Make sure the player is not already assigned to another user
                                lock (_userCache)
                                {
                                    if (_userCache.Values.Any(innerUser => innerUser.soldierDictionary.ContainsKey(matchingPlayer.player_id)))
                                    {
                                        playerDuplicate = true;
                                    }
                                }
                                if (!playerDuplicate)
                                {
                                    if (aUser.soldierDictionary.ContainsKey(matchingPlayer.player_id))
                                    {
                                        aUser.soldierDictionary.Remove(matchingPlayer.player_id);
                                    }
                                    aUser.soldierDictionary.Add(matchingPlayer.player_id, matchingPlayer);
                                }
                                else
                                {
                                    Log.Error("Player " + matchingPlayer.GetVerboseName() + "(" + _gameIDDictionary[matchingPlayer.game_id] + ") already assigned to a user.");
                                }
                            }
                            return;
                        }
                        Log.Error("Players matching '" + soldierName + "' not found in database. Unable to assign to user.");
                    }
                }
                else
                {
                    Log.Error("'" + soldierName + "' is an invalid player name. Unable to assign to user.");
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while attempting to add user soldier.", e));
            }
        }


        private void UploadRole(AdKatsRole aRole)
        {
            Log.Debug(() => "uploadRole starting!", 6);
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try {
                Log.Debug(() => "Uploading role: " + aRole.role_name, 5);

                //Open db connection
                using (MySqlConnection connection = GetDatabaseConnection()) {
                    //Upload/Update the main role object
                    using (MySqlCommand command = connection.CreateCommand()) {
                        //Set the insert command structure
                        command.CommandText = @"
                                INSERT INTO 
	                                `adkats_roles`
                                (
	                                `role_key`,
	                                `role_name`
                                )
                                VALUES
                                (
	                                @role_key,
	                                @role_name
                                )
                                ON DUPLICATE KEY UPDATE
	                                `role_key` = @role_key,
	                                `role_name` = @role_name";
                        //Set values
                        command.Parameters.AddWithValue("@role_key", aRole.role_key);
                        command.Parameters.AddWithValue("@role_name", aRole.role_name);

                        //Attempt to execute the query
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                        if (rowsAffected > 0) {
                            //Set the user's new ID if new
                            if (aRole.role_id < 0) {
                                aRole.role_id = command.LastInsertedId;
                            }
                            Log.Debug(() => "Role uploaded to database SUCCESSFULY.", 5);
                        } else {
                            Log.Error("Unable to upload role " + aRole.role_name + " to database.");
                            return;
                        }
                    }
                    //Delete all current allowed commands
                    using (MySqlCommand command = connection.CreateCommand()) {
                        command.CommandText = @"DELETE FROM `adkats_rolecommands` where `role_id` = " + aRole.role_id;
                        //Attempt to execute the query
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                    }
                    foreach (AdKatsCommand aCommand in aRole.RoleAllowedCommands.Values.ToList()) {
                        //Upload the role's allowed commands
                        using (MySqlCommand command = connection.CreateCommand()) {
                            //Set the insert command structure
                            command.CommandText = @"
                                    INSERT INTO 
	                                    `adkats_rolecommands`
                                    (
	                                    `role_id`,
	                                    `command_id`
                                    )
                                    VALUES
                                    (
	                                    @role_id,
	                                    @command_id
                                    )
                                    ON DUPLICATE KEY UPDATE
	                                    `role_id` = @role_id,
	                                    `command_id` = @command_id";
                            //Set values
                            command.Parameters.AddWithValue("@role_id", aRole.role_id);
                            command.Parameters.AddWithValue("@command_id", aCommand.command_id);

                            //Attempt to execute the query
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0) {
                                Log.Debug(() => "Role-command uploaded to database SUCCESSFULY.", 5);
                            } else {
                                Log.Error("Unable to upload role-command for " + aRole.role_name + ".");
                                return;
                            }
                        }
                    }
                    //Delete all current role groups
                    using (MySqlCommand command = connection.CreateCommand()) {
                        command.CommandText = @"DELETE FROM `adkats_rolegroups` where `role_id` = " + aRole.role_id;
                        //Attempt to execute the query
                        Int32 rowsAffected = SafeExecuteNonQuery(command);
                    }
                    foreach (AdKatsSpecialGroup aGroup in aRole.RoleSetGroups.Values.ToList()) {
                        //Upload the role's set groups
                        using (MySqlCommand command = connection.CreateCommand()) {
                            command.CommandText = @"
                                    INSERT INTO 
	                                    `adkats_rolegroups`
                                    (
	                                    `role_id`,
	                                    `group_key`
                                    )
                                    VALUES
                                    (
	                                    @role_id,
	                                    @group_key
                                    )
                                    ON DUPLICATE KEY UPDATE
	                                    `role_id` = @role_id,
	                                    `group_key` = @group_key";
                            //Set values
                            command.Parameters.AddWithValue("@role_id", aRole.role_id);
                            command.Parameters.AddWithValue("@group_key", aGroup.group_key);

                            //Attempt to execute the query
                            Int32 rowsAffected = SafeExecuteNonQuery(command);
                            if (rowsAffected > 0) {
                                Log.Debug(() => "Role-groups uploaded to database SUCCESSFULY.", 5);
                            } else {
                                Log.Error("Unable to upload role-group " + aGroup.group_key + " for " + aRole.role_name + ".");
                                return;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while uploading role.", e));
            }
            Log.Debug(() => "uploadRole finished!", 6);
        }


        private void UploadBan(AdKatsBan aBan)
        {
            Log.Debug(() => "uploadBan starting!", 6);

            Boolean success = false;
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            if (aBan == null)
            {
                Log.Error("Ban invalid in uploadBan.");
            }
            else
            {
                try
                {
                    //Upload the inner record if needed
                    if (aBan.ban_record.record_id < 0)
                    {
                        if (!UploadRecord(aBan.ban_record))
                        {
                            return;
                        }
                    }

                    using (MySqlConnection connection = GetDatabaseConnection())
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"
                            INSERT INTO 
                            `" + _mySqlSchemaName + @"`.`adkats_bans` 
                            (
	                            `player_id`, 
	                            `latest_record_id`, 
	                            `ban_status`, 
	                            `ban_notes`, 
	                            `ban_startTime`, 
	                            `ban_endTime`, 
	                            `ban_enforceName`, 
	                            `ban_enforceGUID`, 
	                            `ban_enforceIP`, 
	                            `ban_sync`
                            ) 
                            VALUES 
                            (
	                            @player_id, 
	                            @latest_record_id, 
	                            @ban_status, 
	                            @ban_notes, 
	                            @ban_startTime, 
	                            DATE_ADD(@ban_startTime, INTERVAL @ban_durationMinutes MINUTE), 
	                            @ban_enforceName, 
	                            @ban_enforceGUID, 
	                            @ban_enforceIP, 
	                            @ban_sync
                            ) 
                            ON DUPLICATE KEY 
                            UPDATE 
	                            `latest_record_id` = @latest_record_id, 
	                            `ban_status` = @ban_status, 
	                            `ban_notes` = @ban_notes, 
	                            `ban_startTime` = @ban_startTime, 
	                            `ban_endTime` = DATE_ADD(@ban_startTime, INTERVAL @ban_durationMinutes MINUTE), 
	                            `ban_enforceName` = @ban_enforceName, 
	                            `ban_enforceGUID` = @ban_enforceGUID, 
	                            `ban_enforceIP` = @ban_enforceIP, 
	                            `ban_sync` = @ban_sync";

                            command.Parameters.AddWithValue("@player_id", aBan.ban_record.target_player.player_id);
                            command.Parameters.AddWithValue("@latest_record_id", aBan.ban_record.record_id);
                            if (String.IsNullOrEmpty(aBan.ban_status))
                            {
                                aBan.ban_exception = new AdKatsException("Ban status was null or empty when posting.");
                                HandleException(aBan.ban_exception);
                                return;
                            }
                            if (aBan.ban_status != "Active" && aBan.ban_status != "Disabled" && aBan.ban_status != "Expired")
                            {
                                aBan.ban_exception = new AdKatsException("Ban status of '" + aBan.ban_status + "' was invalid when posting.");
                                HandleException(aBan.ban_exception);
                                return;
                            }
                            command.Parameters.AddWithValue("@ban_status", aBan.ban_status);
                            if (String.IsNullOrEmpty(aBan.ban_notes))
                            {
                                aBan.ban_notes = "NoNotes";
                            }
                            command.Parameters.AddWithValue("@ban_notes", aBan.ban_notes);
                            command.Parameters.AddWithValue("@ban_enforceName", aBan.ban_enforceName ? ('Y') : ('N'));
                            command.Parameters.AddWithValue("@ban_enforceGUID", aBan.ban_enforceGUID ? ('Y') : ('N'));
                            command.Parameters.AddWithValue("@ban_enforceIP", aBan.ban_enforceIP ? ('Y') : ('N'));
                            command.Parameters.AddWithValue("@ban_sync", "*" + _serverInfo.ServerID + "*");
                            //Handle permaban case
                            if (aBan.ban_record.command_action.command_key.Contains("player_ban_perm"))
                            {
                                command.Parameters.AddWithValue("@ban_durationMinutes", (Int32)UtcNow().AddYears(20).Subtract(UtcNow()).TotalMinutes);
                            }
                            else
                            {
                                command.Parameters.AddWithValue("@ban_durationMinutes", aBan.ban_record.command_numeric);
                            }
                            if (aBan.ban_record.command_action.command_key == "player_ban_perm_future")
                            {
                                command.Parameters.AddWithValue("@ban_startTime", aBan.ban_record.record_time + TimeSpan.FromMinutes(aBan.ban_record.command_numeric));
                            }
                            else
                            {
                                command.Parameters.AddWithValue("@ban_startTime", aBan.ban_record.record_time);
                            }
                            //Attempt to execute the query
                            if (SafeExecuteNonQuery(command) >= 0)
                            {
                                //Rows affected should be > 0
                                Log.Debug(() => "Success Uploading Ban on player " + aBan.ban_record.target_player.player_id, 5);
                                success = true;
                            }
                        }
                        if (success)
                        {
                            using (MySqlCommand command = connection.CreateCommand())
                            {
                                command.CommandText = @"
                                SELECT 
                                    `ban_id`,
                                    `ban_startTime`, 
                                    `ban_endTime`,
                                    `ban_status`
                                FROM 
                                    `adkats_bans` 
                                WHERE 
                                    `player_id` = @player_id";

                                command.Parameters.AddWithValue("@player_id", aBan.ban_record.target_player.player_id);
                                //Attempt to execute the query
                                using (MySqlDataReader reader = SafeExecuteReader(command))
                                {
                                    //Grab the ban ID
                                    if (reader.Read())
                                    {
                                        aBan.ban_id = reader.GetInt64("ban_id");
                                        aBan.ban_startTime = reader.GetDateTime("ban_startTime");
                                        aBan.ban_endTime = reader.GetDateTime("ban_endTime");
                                        String status = reader.GetString("ban_status");
                                        if (status != aBan.ban_status)
                                        {
                                            aBan.ban_exception = new AdKatsException("Ban status was invalid when confirming ban post. Your database is not in strict mode.");
                                            HandleException(aBan.ban_exception);
                                            return;
                                        }
                                        Log.Debug(() => "Ban ID: " + aBan.ban_id, 5);
                                    }
                                    else
                                    {
                                        Log.Error("Could not fetch ban information after upload");
                                    }
                                }
                            }
                        }
                    }

                    //Submit ban to metabans
                    if (aBan.ban_record.command_type.command_key != "banenforcer_enforce" && _useMetabans && !String.IsNullOrEmpty(_metabansUsername) && !String.IsNullOrEmpty(_metabansAPIKey))
                    {
                        SubmitToMetabans(aBan, AssessmentTypes.black);
                    }
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while uploading new ban.", e));
                }
            }
            Log.Debug(() => "uploadBan finished!", 6);
        }

        private Boolean FetchMatchingPlayers(String playerName, out List<AdKatsPlayer> resultPlayers, Boolean verbose)
        {
            Log.Debug(() => "FetchMatchingPlayers starting!", 6);
            resultPlayers = new List<AdKatsPlayer>();
            if (String.IsNullOrEmpty(playerName))
            {
                if (verbose)
                {
                    Log.Error("Player id was blank when fetching matching players.");
                }
                return false;
            }
            using (MySqlConnection connection = GetDatabaseConnection())
            {
                using (MySqlCommand command = connection.CreateCommand())
                {
                    command.CommandText = @"
                    SELECT 
	                    `PlayerID` AS `player_id`
                    FROM 
	                    `tbl_playerdata`
                    WHERE
	                    `SoldierName` LIKE '%" + playerName + "%'";
                    //Attempt to execute the query
                    using (MySqlDataReader reader = SafeExecuteReader(command))
                    {
                        //Grab the matching players
                        while (reader.Read())
                        {
                            AdKatsPlayer aPlayer = FetchPlayer(false, true, false, null, reader.GetInt64("player_id"), null, null, null);
                            if (aPlayer != null)
                            {
                                resultPlayers.Add(aPlayer);
                            }
                        }
                        if (resultPlayers.Count == 0)
                        {
                            if (verbose)
                            {
                                Log.Error("No players found matching '" + playerName + "'");
                            }
                            return false;
                        }
                    }
                }
            }
            Log.Debug(() => "FetchMatchingPlayers finished!", 6);
            return true;
        }

        private AdKatsPlayer FetchPlayer(Boolean allowUpdate, Boolean allowOtherGames, Boolean allowNameSubstringSearch, Int32? gameID, Int64 playerID, String playerName, String playerGUID, String playerIP)
        {
            Log.Debug(() => "fetchPlayer starting!", 6);
            //Create return list
            AdKatsPlayer aPlayer = null;
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                //If AdKats is disconnected from the database, return the player as-is
                aPlayer = new AdKatsPlayer(this)
                {
                    game_id = _serverInfo.GameID,
                    player_name = playerName,
                    player_guid = playerGUID,
                    LastUsage = UtcNow()
                };
                aPlayer.SetIP(playerIP);
                AssignPlayerRole(aPlayer);
                return aPlayer;
            }
            if (playerID < 0 && String.IsNullOrEmpty(playerName) && String.IsNullOrEmpty(playerGUID) && String.IsNullOrEmpty(playerIP))
            {
                Log.Error("Attempted to fetch player with no information.");
            }
            else
            {
                try
                {
                    if (playerID > 0)
                    {
                        if (_FetchedPlayers.ContainsKey(playerID))
                        {
                            Log.Debug(() => "Attempting to fetch player " + playerID + " from pre-fetch list.", 6);
                            if (_FetchedPlayers.TryGetValue(playerID, out aPlayer))
                            {
                                Log.Debug(() => "Player " + playerID + " successfully fetched from pre-fetch list.", 6);
                                aPlayer.LastUsage = UtcNow();
                                return aPlayer;
                            }
                        }
                    }
                    using (MySqlConnection connection = GetDatabaseConnection())
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            String sql = @"
                            SELECT 
                                `tbl_playerdata`.`PlayerID` as `player_id`, 
                                `tbl_playerdata`.`SoldierName` as `player_name`, 
                                `tbl_playerdata`.`EAGUID` as `player_guid`, 
                                `tbl_playerdata`.`PBGUID` as `player_pbguid`, 
                                `tbl_playerdata`.`IP_Address` as `player_ip`,
                                `tbl_playerdata`.`ClanTag` as `player_clantag`,
                                `adkats_battlecries`.`player_battlecry`";
                            if (_serverInfo.GameID > 0)
                            {
                                sql += ",`GameID` as `game_id` ";
                            }
                            sql += "FROM `" + _mySqlSchemaName + @"`.`tbl_playerdata` 
                                    LEFT JOIN `adkats_battlecries` 
                                    ON `tbl_playerdata`.`PlayerID` = `adkats_battlecries`.`player_id` ";
                            bool sqlEnder = true;
                            if (playerID >= 0)
                            {
                                sql += " WHERE ( ";
                                sqlEnder = false;
                                sql += " `PlayerID` = " + playerID + " ";
                            }
                            if (!String.IsNullOrEmpty(playerGUID))
                            {
                                if (sqlEnder)
                                {
                                    sql += " WHERE ( ";
                                    sqlEnder = false;
                                }
                                else
                                {
                                    sql += " OR ";
                                }
                                sql += " `EAGUID` = '" + playerGUID + "' ";
                            }
                            if (String.IsNullOrEmpty(playerGUID) && !String.IsNullOrEmpty(playerName))
                            {
                                if (sqlEnder)
                                {
                                    sql += " WHERE ( ";
                                    sqlEnder = false;
                                }
                                else
                                {
                                    sql += " OR ";
                                }
                                sql += " `SoldierName` LIKE '" + ((allowNameSubstringSearch) ? ("%" + playerName + "%") : (playerName)) + "' ";
                            }
                            if (String.IsNullOrEmpty(playerGUID) && !String.IsNullOrEmpty(playerIP))
                            {
                                if (sqlEnder)
                                {
                                    sql += " WHERE ( ";
                                    sqlEnder = false;
                                }
                                else
                                {
                                    sql += " OR ";
                                }
                                sql += " `IP_Address` = '" + playerIP + "' ";
                            }
                            if (!sqlEnder)
                            {
                                sql += " ) ";
                            }
                            if ((_serverInfo.GameID > 0 && !allowOtherGames) || gameID != null)
                            {
                                if (gameID != null)
                                {
                                    sql += " AND `GameID` = " + gameID + " ";
                                }
                                else
                                {
                                    sql += " AND `GameID` = " + _serverInfo.GameID + " ";
                                }
                            }
                            sql += @"
                            LIMIT 1";
                            command.CommandText = sql;
                            using (MySqlDataReader reader = SafeExecuteReader(command))
                            {
                                if (reader.Read())
                                {
                                    aPlayer = new AdKatsPlayer(this);
                                    //Player ID will never be null
                                    aPlayer.player_id = reader.GetInt64("player_id");
                                    if (_serverInfo.GameID > 0)
                                    {
                                        aPlayer.game_id = reader.GetInt32("game_id");
                                    }
                                    if (!reader.IsDBNull(1))
                                    {
                                        aPlayer.player_name = reader.GetString("player_name");
                                    }
                                    if (!reader.IsDBNull(2))
                                    {
                                        aPlayer.player_guid = reader.GetString("player_guid");
                                    }
                                    if (!reader.IsDBNull(3))
                                    {
                                        aPlayer.player_pbguid = reader.GetString("player_pbguid");
                                    }
                                    if (!reader.IsDBNull(4))
                                    {
                                        aPlayer.SetIP(reader.GetString("player_ip"));
                                    }
                                    if (!reader.IsDBNull(5))
                                    {
                                        aPlayer.player_clanTag = reader.GetString("player_clantag");
                                    }
                                    if (!reader.IsDBNull(6))
                                    {
                                        aPlayer.player_battlecry = reader.GetString("player_battlecry");
                                    }
                                }
                                else
                                {
                                    Log.Debug(() => "No player matching search information. " + allowUpdate + ", " + allowOtherGames + ", " + ((gameID != null) ? (gameID + "") : ("No game ID")) + ", " + playerID + ", " + ((!String.IsNullOrEmpty(playerName)) ? (playerName) : ("No name search")) + ", " + ((!String.IsNullOrEmpty(playerGUID)) ? (playerGUID) : ("No GUID search")) + ", " + ((!String.IsNullOrEmpty(playerIP)) ? (playerIP) : ("No IP search")), 4);
                                }
                            }
                        }
                        if (allowUpdate)
                        {
                            if (aPlayer == null)
                            {
                                Log.Debug(() => "Adding player to database.", 5);
                                using (MySqlCommand command = connection.CreateCommand())
                                {
                                    Int32? useableGameID = null;
                                    if (gameID != null)
                                    {
                                        useableGameID = gameID;
                                    }
                                    else if (_serverInfo.GameID > 0)
                                    {
                                        useableGameID = (Int32?)_serverInfo.GameID;
                                    }
                                    //Set the insert command structure
                                    if (useableGameID != null)
                                    {
                                        command.CommandText = @"
                                        INSERT INTO `" + _mySqlSchemaName + @"`.`tbl_playerdata` 
                                        (
                                            `GameID`,
                                            `SoldierName`,
                                            `EAGUID`,
                                            `IP_Address`
                                        ) 
                                        VALUES 
                                        (
                                            @GameID,
                                            @SoldierName,
                                            @EAGUID,
                                            @IP_Address
                                        )
                                        ON DUPLICATE KEY 
                                        UPDATE 
                                            `PlayerID` = LAST_INSERT_ID(`PlayerID`),
                                            `SoldierName` = @SoldierName,
                                            `EAGUID` = @EAGUID,
                                            `IP_Address` = @IP_Address";
                                        command.Parameters.AddWithValue("@GameID", _serverInfo.GameID);
                                        command.Parameters.AddWithValue("@SoldierName", String.IsNullOrEmpty(playerName) ? null : playerName);
                                        command.Parameters.AddWithValue("@EAGUID", String.IsNullOrEmpty(playerGUID) ? null : playerGUID);
                                        command.Parameters.AddWithValue("@IP_Address", String.IsNullOrEmpty(playerIP) ? null : playerIP);
                                    }
                                    else
                                    {
                                        command.CommandText = @"
                                        INSERT INTO `" + _mySqlSchemaName + @"`.`tbl_playerdata` 
                                        (
                                            `SoldierName`,
                                            `EAGUID`,
                                            `IP_Address`
                                        ) 
                                        VALUES 
                                        (
                                            @SoldierName,
                                            @EAGUID,
                                            @IP_Address
                                        )
                                        ON DUPLICATE KEY 
                                        UPDATE 
                                            `PlayerID` = LAST_INSERT_ID(`PlayerID`),
                                            `SoldierName` = @SoldierName,
                                            `EAGUID` = @EAGUID,
                                            `IP_Address` = @IP_Address";
                                        command.Parameters.AddWithValue("@SoldierName", String.IsNullOrEmpty(playerName) ? null : playerName);
                                        command.Parameters.AddWithValue("@EAGUID", String.IsNullOrEmpty(playerGUID) ? null : playerGUID);
                                        command.Parameters.AddWithValue("@IP_Address", String.IsNullOrEmpty(playerIP) ? null : playerIP);
                                    }
                                    //Attempt to execute the query
                                    if (SafeExecuteNonQuery(command) > 0)
                                    {
                                        //Rows affected should be > 0
                                        aPlayer = new AdKatsPlayer(this)
                                        {
                                            player_id = command.LastInsertedId,
                                            player_name = playerName,
                                            player_guid = playerGUID
                                        };
                                        aPlayer.SetIP(playerIP);
                                        if (useableGameID != null)
                                        {
                                            aPlayer.game_id = (long)useableGameID;
                                        }
                                        else
                                        {
                                            aPlayer.game_id = _serverInfo.GameID;
                                        }
                                        aPlayer.player_new = true;
                                    }
                                    else
                                    {
                                        Log.Error("Unable to add player to database.");
                                        return null;
                                    }
                                }
                            }
                            //check for name changes
                            if (!String.IsNullOrEmpty(playerName) && !String.IsNullOrEmpty(aPlayer.player_guid) && playerName != aPlayer.player_name)
                            {
                                aPlayer.player_name_previous = aPlayer.player_name;
                                aPlayer.player_name = playerName;
                                AdKatsRecord record = new AdKatsRecord
                                {
                                    record_source = AdKatsRecord.Sources.InternalAutomated,
                                    server_id = _serverInfo.ServerID,
                                    command_type = GetCommandByKey("player_changename"),
                                    command_numeric = 0,
                                    target_name = aPlayer.player_name,
                                    target_player = aPlayer,
                                    source_name = "AdKats",
                                    record_message = aPlayer.player_name_previous,
                                    record_time = UtcNow()
                                };
                                QueueRecordForProcessing(record);
                                Log.Debug(() => aPlayer.player_name_previous + " changed their name to " + playerName + ". Updating the database.", 2);
                                if (_ShowPlayerNameChangeAnnouncement)
                                {
                                    OnlineAdminSayMessage(aPlayer.player_name_previous + " changed their name to " + playerName);
                                }
                                UpdatePlayer(aPlayer);
                            }
                        }

                        if (aPlayer == null)
                        {
                            return null;
                        }

                        //Assign player role
                        AssignPlayerRole(aPlayer);

                        //Pull player first seen
                        if (aPlayer.player_id > 0)
                        {
                            using (MySqlCommand command = connection.CreateCommand())
                            {
                                command.CommandText = @"
                                SELECT
                                    FirstSeenOnServer
                                FROM
                                    tbl_server_player
                                        INNER JOIN
                                    tbl_playerstats ON tbl_playerstats.StatsID = tbl_server_player.StatsID
                                WHERE
                                    tbl_server_player.PlayerID = @player_id
                                ORDER BY 
	                                tbl_playerstats.FirstSeenOnServer
                                LIMIT 1";
                                command.Parameters.AddWithValue("@player_id", aPlayer.player_id);
                                using (MySqlDataReader reader = SafeExecuteReader(command))
                                {
                                    if (reader.Read())
                                    {
                                        aPlayer.player_firstseen = reader.GetDateTime("FirstSeenOnServer");
                                    }
                                    else
                                    {
                                        aPlayer.player_firstseen = UtcNow();
                                        Log.Debug(() => "No stats found to fetch first seen time.", 5);
                                    }
                                }
                            }

                            using (MySqlCommand command = connection.CreateCommand())
                            {
                                command.CommandText = @"
                                SELECT
                                    (Playtime/60.0) as playtime_minutes
                                FROM
                                    tbl_server_player
                                        INNER JOIN
                                    tbl_playerstats ON tbl_playerstats.StatsID = tbl_server_player.StatsID
                                WHERE
                                    tbl_server_player.PlayerID = @player_id
                                AND
	                                tbl_server_player.Serverid = @server_id
                                ORDER BY
	                                Serverid ASC";
                                command.Parameters.AddWithValue("@player_id", aPlayer.player_id);
                                command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                                using (MySqlDataReader reader = SafeExecuteReader(command))
                                {
                                    if (reader.Read())
                                    {
                                        aPlayer.player_serverplaytime = TimeSpan.FromMinutes(reader.GetDouble("playtime_minutes"));
                                    }
                                    else
                                    {
                                        Log.Debug(() => "No stats found to fetch time on server.", 5);
                                    }
                                }
                            }
                        }
                    }
                    if (aPlayer != null && aPlayer.player_id > 0)
                    {
                        aPlayer.LastUsage = UtcNow();
                        //Remove all old values
                        List<Int64> removeIDs = _FetchedPlayers.Where(pair => (UtcNow() - pair.Value.LastUsage).TotalMinutes > 120).Select(pair => pair.Key).ToList();
                        foreach (Int64 removeID in removeIDs)
                        {
                            _FetchedPlayers.Remove(removeID);
                        }
                        aPlayer.LastUsage = UtcNow();
                        _FetchedPlayers[aPlayer.player_id] = aPlayer;
                    }
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while fetching player.", e));
                }
            }
            Log.Debug(() => "fetchPlayer finished!", 6);
            if (aPlayer != null)
            {
                aPlayer.LastUsage = UtcNow();
            }
            return aPlayer;
        }

        private AdKatsPlayer UpdatePlayer(AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "updatePlayer starting!", 6);
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return aPlayer;
            }
            if (aPlayer == null || aPlayer.player_id < 0 || (String.IsNullOrEmpty(aPlayer.player_name) && String.IsNullOrEmpty(aPlayer.player_guid) & String.IsNullOrEmpty(aPlayer.player_ip)))
            {
                Log.Error("Attempted to update player without required information.");
            }
            else
            {
                try
                {
                    using (MySqlConnection connection = GetDatabaseConnection())
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            //Set the insert command structure
                            command.CommandText = @"
                            UPDATE IGNORE 
                                `tbl_playerdata` 
                            SET
                                `SoldierName` = @player_name,
                                `EAGUID` = @player_guid,
                                `ClanTag` = @player_clanTag,
                                `IP_Address` = @player_ip
                            WHERE
                                `PlayerID` = @player_id";
                            command.Parameters.AddWithValue("@player_id", aPlayer.player_id);
                            command.Parameters.AddWithValue("@player_name", aPlayer.player_name);
                            command.Parameters.AddWithValue("@player_guid", aPlayer.player_guid);
                            command.Parameters.AddWithValue("@player_clanTag", aPlayer.player_clanTag);
                            command.Parameters.AddWithValue("@player_ip", String.IsNullOrEmpty(aPlayer.player_ip) ? null : aPlayer.player_ip);
                            //Attempt to execute the query
                            if (SafeExecuteNonQuery(command) > 0)
                            {
                                Log.Debug(() => "Update player info success.", 5);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while updating player.", e));
                }
            }
            Log.Debug(() => "updatePlayer finished!", 6);
            return aPlayer;
        }

        private void UpdateTopPlayers() {
            Log.Debug(() => "UpdateTopPlayers starting!", 6);
            try {
                List<Int64> validIDs = new List<Int64>();
                lock (_topPlayers) {
                    foreach (AdKatsPlayer aPlayer in GetTopPlayers(TimeSpan.FromDays(60), 3)) {
                        if (!_pluginEnabled) {
                            return;
                        }
                        validIDs.Add(aPlayer.player_id);
                        if (!_topPlayers.ContainsKey(aPlayer.player_name)) {
                            if (_firstPlayerListComplete) {
                                Log.Info("Adding " + aPlayer.player_name + " to top player list.");
                            }
                        }
                        _topPlayers[aPlayer.player_name] = aPlayer;
                    }
                    foreach (AdKatsPlayer aPlayer in _topPlayers.Values.Where(dPlayer => !validIDs.Contains(dPlayer.player_id)).ToList()) {
                        if (!_pluginEnabled) {
                            return;
                        }
                        if (_firstPlayerListComplete) {
                            Log.Info("Removing " + aPlayer.player_name + " from top player list.");
                        }
                        _topPlayers.Remove(aPlayer.player_name);
                    }
                }
            } catch (Exception e) {
                HandleException(new AdKatsException("Error while fetching top players", e));
            }
            Log.Debug(() => "UpdateTopPlayers finished!", 6);
        }

        private List<AdKatsPlayer> GetTopPlayers(TimeSpan duration, Int32 minTops) {
            Log.Debug(() => "GetTopPlayers starting!", 6);
            List<AdKatsPlayer> resultPlayers = new List<AdKatsPlayer>();
            try {
                using (MySqlConnection connection = GetDatabaseConnection()) {
                    using (MySqlCommand command = connection.CreateCommand()) {
                        command.CommandText = @"
                        SELECT 
	                        `InnerResults`.*,
	                        ROUND(`top_count`/REPLACE(`round_count`, 0, 1), 2) AS `top_round_ratio`
                        FROM
                        (
                        SELECT 
	                        `server_id` AS `server`,
	                        `target_id` AS `player_id`,
	                        `target_name` AS `player_name`,
	                        (SELECT
		                        COUNT(`stat_id`)
	                         FROM
		                        `adkats_statistics`
	                         WHERE
		                        `server_id` = `server`
	                         AND
		                        `target_id` = `player_id`
	                         AND
		                        `stat_time` > DATE_SUB(UTC_TIMESTAMP, INTERVAL @duration_minutes MINUTE)
	                         AND
		                        (
			                        `stat_type` = 'player_win'
			                        OR
			                        `stat_type` = 'player_loss'
		                        )) AS `round_count`,
	                        (SELECT
		                        COUNT(`stat_id`)
	                         FROM
		                        `adkats_statistics`
	                         WHERE
		                        `server_id` = `server`
	                         AND
		                        `target_id` = `player_id`
	                         AND
		                        `stat_time` > DATE_SUB(UTC_TIMESTAMP, INTERVAL @duration_minutes MINUTE)
	                         AND
		                        `stat_type` = 'player_top') AS `top_count`
                        FROM
	                        `adkats_statistics`
                        WHERE
	                        `server_id` = @server_id
                        AND
	                        `stat_type` = 'player_top'
                        GROUP BY
	                        `target_id`, `server_id`
                        ORDER BY 
	                        `top_count` DESC
                        ) AS `InnerResults`
                        WHERE
	                        `top_count` >= @tops_minimum
                        AND
	                        `top_count`/REPLACE(`round_count`, 0, 1) >= @toproundratio_minimum
                        ORDER BY
	                        `top_round_ratio` DESC,
	                        `player_name` ASC
                        LIMIT 6000";
                        command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@duration_minutes", (Int32) duration.TotalMinutes);
                        command.Parameters.AddWithValue("@tops_minimum", minTops);
                        switch (_TopPlayersAffected) {
                            case "Best Only":
                                command.Parameters.AddWithValue("@toproundratio_minimum", 0.70);
                                break;
                            case "Good And Above":
                                command.Parameters.AddWithValue("@toproundratio_minimum", 0.55);
                                break;
                            case "Ok And Above":
                                command.Parameters.AddWithValue("@toproundratio_minimum", 0.40);
                                break;
                            case "Marginal and Above":
                                command.Parameters.AddWithValue("@toproundratio_minimum", 0.30);
                                break;
                            case "Most Players":
                                command.Parameters.AddWithValue("@toproundratio_minimum", 0.10);
                                break;
                            default:
                                Log.Error("Invalid affected top player category.");
                                return resultPlayers;
                        }
                        //Attempt to execute the query
                        using (MySqlDataReader reader = SafeExecuteReader(command)) {
                            //Grab the matching players
                            while (reader.Read()) {
                                if (!_pluginEnabled) {
                                    return resultPlayers;
                                }
                                AdKatsPlayer aPlayer = FetchPlayer(false, true, false, null, reader.GetInt64("player_id"), null, null, null);
                                if (aPlayer != null) {
                                    //Update top stats
                                    aPlayer.TopStats.RoundCount = reader.GetInt32("round_count");
                                    aPlayer.TopStats.TopCount = reader.GetInt32("top_count");
                                    aPlayer.TopStats.TopRoundRatio = reader.GetDouble("top_round_ratio");
                                    //Return player
                                    resultPlayers.Add(aPlayer);
                                }
                            }
                        }
                    }
                }
            } catch (Exception e) {
                HandleException(new AdKatsException("Error while fetching top players", e));
            }
            Log.Debug(() => "GetTopPlayers finished!", 6);
            return resultPlayers;
        }

        private void UpdatePopulatorPlayers()
        {
            Log.Debug(() => "UpdatePopulatingPlayers starting!", 6);
            try
            {
                //List for current valid populator player IDs
                List<Int64> validIDs = new List<Int64>();
                lock (_populatorPlayers)
                {
                    //Rejection case
                    if (!_PopulatorMonitor)
                    {
                        _populatorPlayers.Clear();
                        return;
                    }
                    List<AdKatsPlayer> populatorsPastWeek = GetPopulatingPlayers(TimeSpan.FromDays(7), _PopulatorMinimumPopulationCountPastWeek, _PopulatorPopulatingThisServerOnly);
                    List<AdKatsPlayer> populatorsPast2Weeks = GetPopulatingPlayers(TimeSpan.FromDays(14), _PopulatorMinimumPopulationCountPast2Weeks, _PopulatorPopulatingThisServerOnly);
                    //Find all populators from the past week
                    foreach (AdKatsPlayer aPlayer in populatorsPastWeek) {
                        if (!_pluginEnabled) {
                            return;
                        }
                        //If using specified populators only, reject any non-specified populator entries
                        if (_PopulatorUseSpecifiedPopulatorsOnly && !GetMatchingVerboseASPlayersOfGroup("whitelist_populator", aPlayer).Any())
                        {
                            continue;
                        }
                        //Add the valid ID
                        if (!validIDs.Contains(aPlayer.player_id))
                        {
                            validIDs.Add(aPlayer.player_id);
                        }
                        //Add the player
                        if (!_populatorPlayers.ContainsKey(aPlayer.player_name))
                        {
                            if (_firstPlayerListComplete)
                            {
                                Log.Info("Adding " + aPlayer.player_name + " to current populator players.");
                            }
                        }
                        _populatorPlayers[aPlayer.player_name] = aPlayer;
                    }
                    //Find all populators from the past 2 weeks
                    foreach (AdKatsPlayer aPlayer in populatorsPast2Weeks) {
                        if (!_pluginEnabled) {
                            return;
                        }
                        //If using specified populators only, reject any non-specified populator entries
                        if (_PopulatorUseSpecifiedPopulatorsOnly && !GetMatchingVerboseASPlayersOfGroup("whitelist_populator", aPlayer).Any())
                        {
                            continue;
                        }
                        //Add the valid ID
                        if (!validIDs.Contains(aPlayer.player_id))
                        {
                            validIDs.Add(aPlayer.player_id);
                        }
                        //Add the player
                        if (!_populatorPlayers.ContainsKey(aPlayer.player_name))
                        {
                            if (_firstPlayerListComplete)
                            {
                                Log.Info("Adding " + aPlayer.player_name + " to current populator players.");
                            }
                        }
                        _populatorPlayers[aPlayer.player_name] = aPlayer;
                    }
                    //Remove invalid players
                    foreach (AdKatsPlayer aPlayer in _populatorPlayers.Values.Where(dPlayer => !validIDs.Contains(dPlayer.player_id)).ToList()) {
                        if (!_pluginEnabled) {
                            return;
                        }
                        if (_firstPlayerListComplete)
                        {
                            Log.Info("Removing " + aPlayer.player_name + " from current populator players.");
                        }
                        _populatorPlayers.Remove(aPlayer.player_name);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching baserape causing players", e));
            }
            Log.Debug(() => "UpdatePopulatingPlayers finished!", 6);
        }

        private List<AdKatsPlayer> GetPopulatingPlayers(TimeSpan duration, Int32 minPopulations, Boolean thisServerOnly)
        {
            Log.Debug(() => "GetPopulatingPlayers starting!", 6);
            List<AdKatsPlayer> resultPlayers = new List<AdKatsPlayer>();
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        if (thisServerOnly)
                        {
                            command.CommandText = @"
                            SELECT
	                            *
                            FROM
                            (SELECT 
	                            `target_id` AS `player_id`, 
	                            `target_name` AS `player_name`, 
	                            COUNT(`record_id`) AS `population_count` 
                            FROM 
	                            `adkats_records_main` 
                            WHERE 
	                            `server_id` = @server_id
                            AND
	                            `command_type` = 88
                            AND 
	                            DATE_ADD(`record_time`, INTERVAL @duration_minutes MINUTE) > UTC_TIMESTAMP()
                            GROUP BY
	                            `target_id`
                            ORDER BY
	                            `population_count` DESC, `target_name` ASC) AS InnerResults
                            WHERE
	                            `population_count` >= @population_minimum";
                            command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                            command.Parameters.AddWithValue("@duration_minutes", (Int32)duration.TotalMinutes);
                            command.Parameters.AddWithValue("@population_minimum", minPopulations);
                        }
                        else
                        {
                            command.CommandText = @"
                            SELECT
	                            *
                            FROM
                            (SELECT 
	                            `target_id` AS `player_id`, 
	                            `target_name` AS `player_name`, 
	                            COUNT(`record_id`) AS `population_count` 
                            FROM 
	                            `adkats_records_main` 
                            WHERE 
	                            `command_type` = 88
                            AND 
	                            DATE_ADD(`record_time`, INTERVAL @duration_minutes MINUTE) > UTC_TIMESTAMP()
                            GROUP BY
	                            `target_id`
                            ORDER BY
	                            `population_count` DESC, `target_name` ASC) AS InnerResults
                            WHERE
	                            `population_count` >= @population_minimum";
                            command.Parameters.AddWithValue("@duration_minutes", (Int32)duration.TotalMinutes);
                            command.Parameters.AddWithValue("@population_minimum", minPopulations);
                        }
                        //Attempt to execute the query
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            //Grab the matching players
                            while (reader.Read())
                            {
                                AdKatsPlayer aPlayer = FetchPlayer(false, true, false, null, reader.GetInt64("player_id"), null, null, null);
                                if (aPlayer != null)
                                {
                                    resultPlayers.Add(aPlayer);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching populating players", e));
            }
            Log.Debug(() => "GetPopulatingPlayers finished!", 6);
            return resultPlayers;
        }

        private AdKatsBan FetchBanByID(Int64 ban_id)
        {
            Log.Debug(() => "FetchBanByID starting!", 6);
            AdKatsBan aBan = null;
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return null;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Build the query
                        command.CommandText = @"
                        SELECT 
                            `ban_id`, 
                            `player_id`, 
                            `latest_record_id`, 
                            `ban_status`, 
                            `ban_notes`, 
                            `ban_startTime`, 
                            `ban_endTime`, 
                            `ban_enforceName`, 
                            `ban_enforceGUID`, 
                            `ban_enforceIP`, 
                            `ban_sync`
                        FROM 
                            `adkats_bans` 
                        WHERE 
                            `ban_id` = @ban_id";
                        command.Parameters.AddWithValue("@ban_id", ban_id);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                //Create the ban object
                                aBan = new AdKatsBan
                                {
                                    ban_id = reader.GetInt64("ban_id"),
                                    ban_status = reader.GetString("ban_status"),
                                    ban_notes = reader.GetString("ban_notes"),
                                    ban_sync = reader.GetString("ban_sync"),
                                    ban_startTime = reader.GetDateTime("ban_startTime"),
                                    ban_endTime = reader.GetDateTime("ban_endTime"),
                                    ban_enforceName = (reader.GetString("ban_enforceName") == "Y"),
                                    ban_enforceGUID = (reader.GetString("ban_enforceGUID") == "Y"),
                                    ban_enforceIP = (reader.GetString("ban_enforceIP") == "Y"),
                                    ban_record = FetchRecordByID(reader.GetInt64("latest_record_id"), false)
                                };
                                if (aBan.ban_endTime.Subtract(UtcNow()).TotalSeconds < 0)
                                {
                                    aBan.ban_status = "Expired";
                                    UpdateBanStatus(aBan);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching ban.", e));
            }
            Log.Debug(() => "FetchBanByID finished!", 6);
            return aBan;
        }

        private DateTime FetchFutureRoundDate(Int32 TargetRoundID) {
            if (_roundID <= 1 || TargetRoundID <= 1 || _databaseConnectionCriticalState) {
                return DateTime.MinValue;
            }
            try {
                using (MySqlConnection connection = GetDatabaseConnection()) {
                    using (MySqlCommand command = connection.CreateCommand()) {
                        //The most ham-handed SQL I've ever written
                        command.CommandText = @"
                        SELECT
	                        *,
                            (@TargetRound - `CurrentRoundId`) AS `RemainingRounds`,
                            `AvgRoundDuration` * (@TargetRound - `CurrentRoundId`) AS `RemainingMinutes`,
                            DATE_ADD(UTC_TIMESTAMP(), INTERVAL `AvgRoundDuration` * (@TargetRound - `CurrentRoundId`) MINUTE) AS `TargetTime`
                        FROM
	                        (SELECT 
	                        (SELECT MAX(`round_id`) FROM `tbl_extendedroundstats` WHERE `server_id` = @ServerID) AS `CurrentRoundId`,
	                        (SELECT
		                        TIMESTAMPDIFF(SECOND, MIN(`roundstart_time`), MAX(`roundstart_time`)) / 
		                        (REPLACE(COUNT(`round_id`), 0, 1.0)) / 60.0
	                        FROM
	                        (SELECT 
		                        `round_id`, 
		                        `roundstat_time` AS `roundstart_time`
	                        FROM 
		                        `tbl_extendedroundstats` 
	                        WHERE 
		                        `server_id` = @ServerID 
	                        AND
		                        TIMESTAMPDIFF(MINUTE, `roundstat_time`, UTC_TIMESTAMP()) < 3000
	                        GROUP BY 
		                        `round_id`
	                        ORDER BY
		                        `roundstat_id` DESC) AS `RoundStartTimes`) AS `AvgRoundDuration`) AS `RoundInfo`";
                        command.Parameters.AddWithValue("@ServerID", _serverInfo.ServerID);
                        command.Parameters.AddWithValue("@TargetRound", TargetRoundID);
                        using (MySqlDataReader reader = SafeExecuteReader(command)) {
                            if (reader.Read()) {
                                return reader.GetDateTime("TargetTime");
                            }
                        }
                    }
                }
            } catch (Exception e) {
                HandleException(new AdKatsException("Error while fetching future round time.", e));
            }
            return DateTime.MinValue;
        }
        
        private List<AdKatsBan> FetchPlayerBans(AdKatsPlayer player)
        {
            Log.Debug(() => "FetchPlayerBans starting!", 6);
            List<AdKatsBan> aBanList = new List<AdKatsBan>();
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return null;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Build the query
                        String query = @"
                        SELECT 
                            `adkats_bans`.`ban_id`,
                            `adkats_bans`.`player_id`, 
                            `adkats_bans`.`latest_record_id`, 
                            `adkats_bans`.`ban_status`, 
                            `adkats_bans`.`ban_notes`, 
                            `adkats_bans`.`ban_startTime`, 
                            `adkats_bans`.`ban_endTime`, 
                            `adkats_bans`.`ban_enforceName`, 
                            `adkats_bans`.`ban_enforceGUID`, 
                            `adkats_bans`.`ban_enforceIP`, 
                            `adkats_bans`.`ban_sync`
                        FROM 
                            `adkats_bans` 
                        INNER JOIN 
                            `tbl_playerdata` 
                        ON 
                            `tbl_playerdata`.`PlayerID` = `adkats_bans`.`player_id` 
                        WHERE 
                            `adkats_bans`.`ban_status` = 'Active' ";
                        if (_serverInfo.GameID > 0 && player.game_id < 0)
                        {
                            query += " AND `tbl_playerdata`.`GameID` = " + _serverInfo.GameID;
                        }
                        else if (player.game_id > 0)
                        {
                            query += " AND `tbl_playerdata`.`GameID` = " + player.game_id;
                        }
                        else
                        {
                            Log.Error("Unusable game IDs when fetching player bans for " + player.player_name + ".");
                            return aBanList;
                        }
                        query += " AND (";
                        Boolean started = false;
                        if (!String.IsNullOrEmpty(player.player_name))
                        {
                            started = true;
                            query += "(`tbl_playerdata`.`SoldierName` = '" + player.player_name + @"' AND `adkats_bans`.`ban_enforceName` = 'Y')";
                        }
                        if (!String.IsNullOrEmpty(player.player_guid))
                        {
                            if (started)
                            {
                                query += " OR ";
                            }
                            started = true;
                            query += "(`tbl_playerdata`.`EAGUID` = '" + player.player_guid + "' AND `adkats_bans`.`ban_enforceGUID` = 'Y')";
                        }
                        if (!String.IsNullOrEmpty(player.player_ip) && player.player_ip != "127.0.0.1")
                        {
                            if (started)
                            {
                                query += " OR ";
                            }
                            started = true;
                            query += "(`tbl_playerdata`.`IP_Address` = '" + player.player_ip + "' AND `adkats_bans`.`ban_enforceIP` = 'Y')";
                        }
                        if (!started)
                        {
                            HandleException(new AdKatsException("No data to fetch ban with. This should never happen."));
                            return aBanList;
                        }
                        query += ")";

                        //Assign the query
                        command.CommandText = query;
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                //Create the ban element
                                AdKatsBan aBan = new AdKatsBan
                                {
                                    ban_id = reader.GetInt64("ban_id"),
                                    ban_status = reader.GetString("ban_status"),
                                    ban_notes = reader.GetString("ban_notes"),
                                    ban_sync = reader.GetString("ban_sync"),
                                    ban_startTime = reader.GetDateTime("ban_startTime"),
                                    ban_endTime = reader.GetDateTime("ban_endTime"),
                                    ban_enforceName = (reader.GetString("ban_enforceName") == "Y"),
                                    ban_enforceGUID = (reader.GetString("ban_enforceGUID") == "Y"),
                                    ban_enforceIP = (reader.GetString("ban_enforceIP") == "Y"),
                                    ban_record = FetchRecordByID(reader.GetInt64("latest_record_id"), false)
                                };
                                if (aBan.ban_endTime.Subtract(UtcNow()).TotalSeconds < 0)
                                {
                                    aBan.ban_status = "Expired";
                                    UpdateBanStatus(aBan);
                                }
                                else if (!String.IsNullOrEmpty(player.player_name_previous) && aBan.ban_enforceName && !aBan.ban_enforceGUID && !aBan.ban_enforceIP)
                                {
                                    AdKatsRecord record = new AdKatsRecord
                                    {
                                        record_source = AdKatsRecord.Sources.InternalAutomated,
                                        server_id = _serverInfo.ServerID,
                                        command_type = GetCommandByKey("player_unban"),
                                        command_numeric = 0,
                                        target_name = player.player_name,
                                        target_player = player,
                                        source_name = "BanEnforcer",
                                        record_message = "Name-Banned player has changed their name. (" + player.player_name_previous + " -> " + player.player_name + ")",
                                        record_time = UtcNow()
                                    };
                                    QueueRecordForProcessing(record);
                                }
                                else if (_serverInfo.ServerGroup == FetchServerGroup(aBan.ban_record.server_id) && aBan.ban_startTime < UtcNow())
                                {
                                    aBanList.Add(aBan);
                                }
                            }
                            if (aBanList.Count > 1)
                            {
                                Log.Warn("Multiple bans matched player information, linked accounts detected.");
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching player ban.", e));
            }
            Log.Debug(() => "FetchPlayerBans finished!", 6);
            return aBanList;
        }


        private List<AdKatsBan> FetchMatchingBans(String playerSubstring, Int64 searchLimit)
        {
            Log.Debug(() => "FetchMatchingBans starting!", 6);
            List<AdKatsBan> aBanList = new List<AdKatsBan>();
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return null;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        //Build the query
                        command.CommandText = @"
                        SELECT
	                        `ban_id`
                        FROM
	                        `tbl_playerdata`
                        INNER JOIN
	                        `adkats_bans`
                        ON
	                        `PlayerID` = `player_id`
                        INNER JOIN
	                        `adkats_records_main`
                        ON
	                        `latest_record_id` = `record_id`
                        WHERE 
	                        `ban_status` = 'Active'
                        AND
                        (
	                        `SoldierName` LIKE @PlayerSubstring
                            OR
                            `target_name` LIKE @PlayerSubstring
                        )
                        ORDER BY
                            `record_time` DESC 
                        LIMIT
                            @searchLimit";
                        //Add the search value
                        command.Parameters.Add("@PlayerSubstring", "%" + playerSubstring + "%");
                        command.Parameters.Add("@searchLimit", searchLimit);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                aBanList.Add(FetchBanByID(reader.GetInt64("ban_id")));
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching player ban.", e));
            }
            return aBanList;
        }


        private void RepopulateProconBanList()
        {
            Log.Debug(() => "repopulateProconBanList starting!", 6);
            Log.Info("Downloading bans from database, please wait. This might take several minutes depending on your ban count!");

            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            Double totalBans = 0;
            Double bansDownloaded = 0;
            Double bansRepopulated = 0;
            Boolean earlyExit = false;
            DateTime startTime = UtcNow();

            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            COUNT(*) AS `ban_count`
                        FROM 
	                        `adkats_bans`";

                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                totalBans = reader.GetInt64("ban_count");
                            }
                        }
                    }
                    if (totalBans < 1)
                    {
                        return;
                    }
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            `ban_id`, 
                            `player_id`, 
                            `latest_record_id`, 
	                        `ban_status`, 
                            `ban_notes`, 
	                        `ban_sync`, 
	                        `ban_startTime`, 
	                        `ban_endTime`, 
	                        `ban_enforceName`, 
	                        `ban_enforceGUID`, 
	                        `ban_enforceIP` 
                        FROM 
	                        `adkats_bans`";

                        List<AdKatsBan> importedBans = new List<AdKatsBan>();
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            //Loop through all incoming bans
                            while (reader.Read())
                            {
                                //Break from the loop if the plugin is disabled or the setting is reverted.
                                if (!_pluginEnabled || _UseBanEnforcer)
                                {
                                    Log.Warn("You exited the ban download process early, the process was not completed.");
                                    earlyExit = true;
                                    break;
                                }
                                //Create the ban element
                                AdKatsBan aBan = new AdKatsBan
                                {
                                    ban_id = reader.GetInt64("ban_id"),
                                    player_id = reader.GetInt64("player_id"),
                                    ban_status = reader.GetString("ban_status"),
                                    ban_notes = reader.GetString("ban_notes"),
                                    ban_sync = reader.GetString("ban_sync"),
                                    ban_startTime = reader.GetDateTime("ban_startTime"),
                                    ban_endTime = reader.GetDateTime("ban_endTime"),
                                    ban_record = FetchRecordByID(reader.GetInt64("latest_record_id"), false),
                                    ban_enforceName = (reader.GetString("ban_enforceName") == "Y"),
                                    ban_enforceGUID = (reader.GetString("ban_enforceGUID") == "Y"),
                                    ban_enforceIP = (reader.GetString("ban_enforceIP") == "Y")
                                };
                                if (aBan.ban_record == null)
                                {
                                    aBan.ban_record = new AdKatsRecord
                                    {
                                        record_source = AdKatsRecord.Sources.InternalAutomated,
                                        isDebug = false,
                                        target_player = FetchPlayer(false, true, false, null, aBan.player_id, null, null, null),
                                        source_name = "AdKats",
                                        record_message = "Ban Reason Expunged",
                                        record_time = UtcNow()
                                    };
                                    aBan.ban_record.target_name = aBan.ban_record.target_player.player_name;
                                }
                                if (aBan.ban_record.target_player == null)
                                {
                                    aBan.ban_record.target_player = FetchPlayer(false, true, false, null, aBan.player_id, null, null, null);
                                }
                                if (aBan.ban_record.target_player != null)
                                {
                                    importedBans.Add(aBan);
                                    if (++bansDownloaded % 15 == 0)
                                    {
                                        Log.Write(Math.Round(100 * bansDownloaded / totalBans, 2) + "% of bans downloaded. AVG " + Math.Round(bansDownloaded / ((UtcNow() - startTime).TotalSeconds), 2) + " downloads/sec.");
                                    }
                                }
                            }
                        }
                        if (importedBans.Count > 0)
                        {
                            Log.Info(importedBans.Count + " bans downloaded, beginning repopulation to ban list.");
                        }
                        startTime = UtcNow();
                        foreach (AdKatsBan aBan in importedBans)
                        {
                            //Get the record information
                            long totalBanSeconds = (long)aBan.ban_endTime.Subtract(UtcNow()).TotalSeconds;
                            if (totalBanSeconds > 0)
                            {
                                Log.Debug(() => "Re-ProconBanning: " + aBan.ban_record.GetTargetNames() + " for " + totalBanSeconds + "sec for " + aBan.ban_record.record_message, 4);

                                //Push the id ban
                                if (aBan.ban_enforceName)
                                {
                                    _threadMasterWaitHandle.WaitOne(75);
                                    //Permabans and Temp bans longer than 1 year will be defaulted to permaban
                                    if (totalBanSeconds > 0 && totalBanSeconds < 31536000)
                                    {
                                        ExecuteCommand("procon.protected.send", "banList.add", "id", aBan.ban_record.target_player.player_name, "seconds", totalBanSeconds + "", aBan.ban_record.record_message);
                                    }
                                    else
                                    {
                                        ExecuteCommand("procon.protected.send", "banList.add", "id", aBan.ban_record.target_player.player_name, "perm", aBan.ban_record.record_message);
                                    }
                                }

                                //Push the guid ban
                                if (aBan.ban_enforceGUID)
                                {
                                    _threadMasterWaitHandle.WaitOne(75);
                                    //Permabans and Temp bans longer than 1 year will be defaulted to permaban
                                    if (totalBanSeconds > 0 && totalBanSeconds < 31536000)
                                    {
                                        ExecuteCommand("procon.protected.send", "banList.add", "guid", aBan.ban_record.target_player.player_guid, "seconds", totalBanSeconds + "", aBan.ban_record.record_message);
                                    }
                                    else
                                    {
                                        ExecuteCommand("procon.protected.send", "banList.add", "guid", aBan.ban_record.target_player.player_guid, "perm", aBan.ban_record.record_message);
                                    }
                                }

                                //Push the IP ban
                                if (aBan.ban_enforceIP)
                                {
                                    _threadMasterWaitHandle.WaitOne(75);
                                    //Permabans and Temp bans longer than 1 year will be defaulted to permaban
                                    if (totalBanSeconds > 0 && totalBanSeconds < 31536000)
                                    {
                                        ExecuteCommand("procon.protected.send", "banList.add", "ip", aBan.ban_record.target_player.player_ip, "seconds", totalBanSeconds + "", aBan.ban_record.record_message);
                                    }
                                    else
                                    {
                                        ExecuteCommand("procon.protected.send", "banList.add", "ip", aBan.ban_record.target_player.player_ip, "perm", aBan.ban_record.record_message);
                                    }
                                }
                            }

                            if (++bansRepopulated % 15 == 0)
                            {
                                Log.Write(Math.Round(100 * bansRepopulated / totalBans, 2) + "% of bans repopulated. AVG " + Math.Round(bansRepopulated / ((UtcNow() - startTime).TotalSeconds), 2) + " downloads/sec.");
                            }
                        }
                        ExecuteCommand("procon.protected.send", "banList.save");
                        ExecuteCommand("procon.protected.send", "banList.list");
                        if (!earlyExit)
                        {
                            Log.Success("All AdKats Enforced bans repopulated to procon's ban list.");
                        }

                        //Update the last db ban fetch time
                        _lastDbBanFetch = UtcNow();
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while repopulating procon banlist.", e));
            }
        }


        private Boolean UpdateBanStatus(AdKatsBan aBan)
        {
            Log.Debug(() => "updateBanStatus starting!", 6);
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return false;
            }

            Boolean success = false;
            if (aBan == null)
            {
                Log.Error("Ban invalid in updateBanStatus.");
            }
            else
            {
                try
                {
                    //Conditionally modify the ban_sync for this server
                    if (!aBan.ban_sync.Contains("*" + _serverInfo.ServerID + "*"))
                    {
                        aBan.ban_sync += ("*" + _serverInfo.ServerID + "*");
                    }

                    using (MySqlConnection connection = GetDatabaseConnection())
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            String query = @"
                            UPDATE 
                            `" + _mySqlSchemaName + @"`.`adkats_bans` 
                            SET 
                            `ban_sync` = '" + aBan.ban_sync + @"', 
                            `ban_status` = '" + aBan.ban_status + @"'
                            WHERE 
                            `ban_id` = " + aBan.ban_id;
                            command.CommandText = query;
                            //Attempt to execute the query
                            if (SafeExecuteNonQuery(command) > 0)
                            {
                                success = true;
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while updating status of ban.", e));
                }
            }

            Log.Debug(() => "updateBanStatus finished!", 6);
            return success;
        }


        private void ImportBansFromBBM5108()
        {
            //Check if tables exist from BF3 Ban Manager
            if (!ConfirmTable("bm_banlist"))
            {
                return;
            }
            Log.Info("BF3 Ban Manager tables detected. Checking validity.");

            //Check if any BBM5108 bans exist in the AdKats Banlist
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            * 
                        FROM 
                            `" + _mySqlSchemaName + @"`.`adkats_bans` 
                        WHERE 
                            `adkats_bans`.`ban_notes` = 'BBM5108' 
                        LIMIT 1";

                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                Log.Info("BF3 Ban Manager bans already imported, canceling import.");
                                return;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while checking for BBM Bans.", e));
                return;
            }

            Log.Success("Validity confirmed.");
            Log.Info("Preparing to fetch all BF3 Ban Manager Bans...");
            Double totalBans = 0;
            Double bansImported = 0;
            Queue<BBM5108Ban> inboundBBMBans = new Queue<BBM5108Ban>();
            DateTime startTime = UtcNow();
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        Log.Debug(() => "Creating query to import BBM5108", 3);
                        command.CommandText = @"
                        SELECT 
                            soldiername, eaguid, ban_length, ban_duration, ban_reason 
                        FROM 
                            bm_banlist 
                        INNER JOIN 
                            bm_soldiers 
                        ON 
                            bm_banlist.soldierID = bm_soldiers.soldierID";

                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            Boolean told = false;
                            while (reader.Read())
                            {
                                if (!told)
                                {
                                    Log.Debug(() => "BBM5108 bans found, grabbing.", 3);
                                    told = true;
                                }
                                BBM5108Ban bbmBan = new BBM5108Ban
                                {
                                    soldiername = reader.IsDBNull(reader.GetOrdinal("soldiername")) ? null : reader.GetString("soldiername"),
                                    eaguid = reader.IsDBNull(reader.GetOrdinal("eaguid")) ? null : reader.GetString("eaguid"),
                                    ban_length = reader.GetString("ban_length"),
                                    ban_duration = reader.GetDateTime("ban_duration"),
                                    ban_reason = reader.IsDBNull(reader.GetOrdinal("ban_reason")) ? null : reader.GetString("ban_reason")
                                };
                                inboundBBMBans.Enqueue(bbmBan);
                                totalBans++;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching BBM Bans.", e));
                return;
            }
            Log.Info(totalBans + " Ban Manager bans fetched, starting import to AdKats Ban Enforcer...");

            try
            {
                //Loop through all BBMBans in order that they came in
                while (inboundBBMBans.Count > 0)
                {
                    //Break from the loop if the plugin is disabled or the setting is reverted.
                    if (!_pluginEnabled || !_UseBanEnforcer)
                    {
                        Log.Error("You exited the ban import process process early, the process was not completed and cannot recover without manual override. Talk to ColColonCleaner.");
                        break;
                    }

                    BBM5108Ban bbmBan = inboundBBMBans.Dequeue();

                    //Create the record
                    AdKatsRecord record = new AdKatsRecord();
                    record.record_time = UtcNow();
                    //Fetch the player
                    record.target_player = FetchPlayer(true, true, false, null, -1, bbmBan.soldiername, bbmBan.eaguid, null);

                    record.record_source = AdKatsRecord.Sources.InternalAutomated;
                    if (bbmBan.ban_length == "permanent")
                    {
                        Log.Debug(() => "Ban is permanent", 4);
                        record.command_type = GetCommandByKey("player_ban_perm");
                        record.command_action = GetCommandByKey("player_ban_perm");
                        record.command_numeric = 0;
                    }
                    else if (bbmBan.ban_length == "seconds")
                    {
                        Log.Debug(() => "Ban is temporary", 4);
                        record.command_type = GetCommandByKey("player_ban_temp");
                        record.command_action = GetCommandByKey("player_ban_temp");
                        record.command_numeric = (Int32)(bbmBan.ban_duration - UtcNow()).TotalMinutes;
                    }
                    else
                    {
                        //Ignore all other cases e.g. round bans
                        Log.Debug(() => "Ban type '" + bbmBan.ban_length + "' not usable", 3);
                        continue;
                    }

                    record.source_name = "BanEnforcer";
                    record.server_id = _serverInfo.ServerID;
                    if (!String.IsNullOrEmpty(record.target_player.player_name))
                    {
                        record.target_name = record.target_player.player_name;
                    }
                    record.isIRO = false;
                    record.record_message = bbmBan.ban_reason;

                    //Update the ban enforcement depending on available information
                    Boolean nameAvailable = !String.IsNullOrEmpty(record.target_player.player_name);
                    Boolean guidAvailable = !String.IsNullOrEmpty(record.target_player.player_guid);
                    Boolean ipAvailable = !String.IsNullOrEmpty(record.target_player.player_ip);

                    //Create the ban
                    AdKatsBan aBan = new AdKatsBan
                    {
                        ban_record = record,
                        ban_notes = "BBM5108",
                        ban_enforceName = nameAvailable && (_DefaultEnforceName || (!guidAvailable && !ipAvailable) || !String.IsNullOrEmpty(bbmBan.soldiername)),
                        ban_enforceGUID = guidAvailable && (_DefaultEnforceGUID || (!nameAvailable && !ipAvailable) || !String.IsNullOrEmpty(bbmBan.eaguid)),
                        ban_enforceIP = ipAvailable && _DefaultEnforceIP
                    };
                    if (!aBan.ban_enforceName && !aBan.ban_enforceGUID && !aBan.ban_enforceIP)
                    {
                        Log.Error("Unable to create ban, no proper player information");
                        continue;
                    }

                    //Upload the ban
                    Log.Debug(() => "Uploading Ban Manager ban.", 5);
                    UploadBan(aBan);

                    if (++bansImported % 25 == 0)
                    {
                        Log.Write(Math.Round(100 * bansImported / totalBans, 2) + "% of Ban Manager bans uploaded. AVG " + Math.Round(bansImported / ((UtcNow() - startTime).TotalSeconds), 2) + " uploads/sec.");
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while processing imported BBM Bans to AdKats banlist.", e));
                return;
            }
            if (inboundBBMBans.Count == 0)
            {
                Log.Success("All Ban Manager bans imported into AdKats Ban Enforcer!");
            }
        }


        private Boolean CanPunish(AdKatsRecord record, Int32 duration)
        {
            Log.Debug(() => "canPunish starting!", 6);
            if (duration < 1)
            {
                Log.Error("CanPunish duration must be positive.");
                return false;
            }
            //TODO: Add check for multiple targets
            if (record.target_player != null && record.target_player.TargetedRecords.Any(aRecord => aRecord.command_type.command_key == "player_punish" && (UtcNow() - aRecord.record_time).TotalSeconds < duration && aRecord.record_action_executed == true))
            {
                return false;
            }
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                record.record_exception = new AdKatsException("Database not connected.");
                return false;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            `record_time` AS `latest_time` 
                        FROM 
                            `adkats_records_main` 
                        WHERE 
                            `adkats_records_main`.`command_type` = " + GetCommandByKey("player_punish").command_id + @" 
                        AND 
                            `adkats_records_main`.`target_id` = " + record.target_player.player_id + @" 
                        AND 
                            DATE_ADD(`record_time`, INTERVAL " + duration + @" SECOND) > UTC_TIMESTAMP() 
                        ORDER BY 
                            `record_time` 
                        DESC LIMIT 1";

                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                Log.Debug(() => "can't upload punish", 6);
                                return false;
                            }
                            return true;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while checking if player can be punished.", e));
                //Assume false if any errors
                return false;
            }
        }


        private Boolean FetchIROStatus(AdKatsRecord record)
        {
            Log.Debug(() => "FetchIROStatus starting!", 6);
            try
            {
                //TODO: Add check for multiple targets
                if (record.target_player != null && record.target_player.TargetedRecords.Any(aRecord => aRecord.command_type.command_key == "player_punish" && (UtcNow() - aRecord.record_time).TotalSeconds < _IROTimeout && aRecord.record_action_executed == true))
                {
                    return true;
                }
                //Make sure database connection active
                if (_databaseConnectionCriticalState)
                {
                    record.record_exception = new AdKatsException("Database not connected.");
                    return false;
                }
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
	                        `record_time` AS `latest_time` 
                        FROM 
	                        `adkats_records_main`
                        INNER JOIN
	                        `adkats_commands`
                        ON
	                        `adkats_records_main`.`command_type` = `adkats_commands`.`command_id`
                        WHERE 
	                        `adkats_commands`.`command_key` = 'player_punish' 
                        AND 
                            `adkats_records_main`.`target_id` = " + record.target_player.player_id + @" 
                        AND 
                            DATE_ADD(`record_time`, INTERVAL " + _IROTimeout + @" MINUTE) > UTC_TIMESTAMP() 
                        ORDER BY 
                            `record_time` 
                        DESC LIMIT 1";
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                Log.Debug(() => "Punish is Double counted", 6);
                                return true;
                            }
                            return false;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while checking if punish will be IRO.", e));
                //Assume false if any errors
                return false;
            }
        }


        private void RunActionsFromDB()
        {
            Log.Debug(() => "runActionsFromDB starting!", 7);
            //Make sure database connection active
            if (_databaseConnectionCriticalState || !_firstPlayerListComplete)
            {
                return;
            }
            try
            {
                foreach (AdKatsRecord record in FetchUnreadRecords())
                {
                    QueueRecordForActionHandling(record);
                }
                //Update the last time this was fetched
                _lastDbActionFetch = UtcNow();
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while queueing unread records for action handling.", e));
            }
        }

        private Int32 FetchPoints(AdKatsPlayer player, Boolean combineOverride, Boolean update)
        {
            Int32 returnVal = player.player_infractionPoints;
            //Make sure database connection active
            if (_databaseConnectionCriticalState || (!update && player.player_infractionPoints != Int32.MinValue))
            {
                return (returnVal > 0) ? (returnVal) : (0);
            }
            Log.Debug(() => "FetchPoints starting!", 6);
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        if (_CombineServerPunishments || combineOverride)
                        {
                            command.CommandText = @"SELECT `total_points` FROM `" + _mySqlSchemaName + @"`.`adkats_infractions_global` WHERE `player_id` = @player_id";
                            command.Parameters.AddWithValue("@player_id", player.player_id);
                        }
                        else
                        {
                            command.CommandText = @"SELECT `total_points` FROM `" + _mySqlSchemaName + @"`.`adkats_infractions_server` WHERE `player_id` = @player_id and `server_id` = @server_id";
                            command.Parameters.AddWithValue("@player_id", player.player_id);
                            command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                        }
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            returnVal = reader.Read() ? reader.GetInt32("total_points") : 0;
                            player.player_infractionPoints = returnVal;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while getting infraction points for player.", e));
            }
            Log.Debug(() => "FetchPoints finished!", 6);
            return (returnVal > 0) ? (returnVal) : (0);
        }

        private List<KeyValuePair<DateTime, KeyValuePair<String, String>>> FetchConversation(Int64 player1_id, Int64 player2_id, Int64 limit_lines, Int64 limit_days)
        {
            Log.Debug(() => "FetchConversation starting!", 6);

            List<KeyValuePair<DateTime, KeyValuePair<string, string>>> pchat = new List<KeyValuePair<DateTime, KeyValuePair<String, String>>>();
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return pchat;
            }

            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        (SELECT
	                        `tbl_chatlog`.`logDate` as `chat_time`,
	                        `tbl_chatlog`.`logSoldierName` as `chat_player`,
	                        `tbl_chatlog`.`logMessage` as `chat_message`
                        FROM 
	                        `tbl_chatlog` 
                        WHERE 
                        (
	                        `tbl_chatlog`.`logPlayerID` = @player1_id
                        OR
	                        `tbl_chatlog`.`logPlayerID` = @player2_id
                        )
                        AND
	                        `tbl_chatlog`.`ServerID` = @server_id
                        AND 
	                        DATE_ADD(`tbl_chatlog`.`logDate`, INTERVAL @limit_days DAY) > UTC_TIMESTAMP()
                        ORDER BY 
	                        `ID` DESC
                        LIMIT
	                        @limit_lines)
                        ORDER BY `chat_time` ASC";
                        command.Parameters.AddWithValue("@player1_id", player1_id);
                        command.Parameters.AddWithValue("@player2_id", player2_id);
                        command.Parameters.AddWithValue("@limit_lines", limit_lines);
                        command.Parameters.AddWithValue("@limit_days", limit_days);
                        command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                pchat.Add(new KeyValuePair<DateTime, KeyValuePair<string, string>>(reader.GetDateTime("chat_time"), new KeyValuePair<String, String>(reader.GetString("chat_player"), reader.GetString("chat_message"))));
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while getting conversation for player.", e));
            }
            Log.Debug(() => "FetchConversation finished!", 6);
            return pchat;
        }

        private List<KeyValuePair<DateTime, String>> FetchChat(Int64 player_id, Int64 limit_lines, Int64 limit_days)
        {
            Log.Debug(() => "FetchChat starting!", 6);

            List<KeyValuePair<DateTime, string>> pchat = new List<KeyValuePair<DateTime, String>>();
            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return pchat;
            }

            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        (SELECT
	                        `tbl_chatlog`.`logDate` as `chat_time`,
	                        `tbl_chatlog`.`logMessage` as `chat_message`
                        FROM 
	                        `tbl_chatlog` 
                        WHERE 
                            `tbl_chatlog`.`logPlayerID` = @player_id
                        AND
	                        `tbl_chatlog`.`ServerID` = @server_id
                        AND 
	                        DATE_ADD(`tbl_chatlog`.`logDate`, INTERVAL @limit_days DAY) > UTC_TIMESTAMP()
                        ORDER BY 
	                        `ID` DESC
                        LIMIT
	                        @limit_lines)
                        ORDER BY `chat_time` ASC";
                        command.Parameters.AddWithValue("@player_id", player_id);
                        command.Parameters.AddWithValue("@limit_lines", limit_lines);
                        command.Parameters.AddWithValue("@limit_days", limit_days);
                        command.Parameters.AddWithValue("@server_id", _serverInfo.ServerID);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            while (reader.Read())
                            {
                                pchat.Add(new KeyValuePair<DateTime, String>(reader.GetDateTime("chat_time"), reader.GetString("chat_message")));
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while getting conversation for player.", e));
            }
            Log.Debug(() => "FetchChat finished!", 6);
            return pchat;
        }

        private void FetchCommands()
        {
            Log.Debug(() => "fetchCommands starting!", 6);
            Boolean displayUpdate = false;
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try {
                lock (_CommandIDDictionary)
                {
                    using (MySqlConnection connection = GetDatabaseConnection())
                    {
                        using (MySqlCommand sqlcommand = connection.CreateCommand())
                        {
                            const string sql = @"
                            SELECT 
	                            `command_id`,
	                            `command_active`,
	                            `command_key`,
	                            `command_logging`,
	                            `command_name`,
	                            `command_text`,
                                `command_playerInteraction`,
                                `command_access`
                            FROM 
	                            `adkats_commands`";
                            sqlcommand.CommandText = sql;
                            HashSet<long> validIDs = new HashSet<Int64>();
                            using (MySqlDataReader reader = SafeExecuteReader(sqlcommand))
                            {
                                _CommandKeyDictionary.Clear();
                                _CommandNameDictionary.Clear();
                                _CommandTextDictionary.Clear();
                                while (reader.Read())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    //ID is the immutable element
                                    Int32 commandID = reader.GetInt32("command_id");
                                    AdKatsCommand.CommandActive commandActive = (AdKatsCommand.CommandActive)Enum.Parse(typeof(AdKatsCommand.CommandActive), reader.GetString("command_active"));
                                    String commandKey = reader.GetString("command_key");
                                    AdKatsCommand.CommandLogging commandLogging = (AdKatsCommand.CommandLogging)Enum.Parse(typeof(AdKatsCommand.CommandLogging), reader.GetString("command_logging"));
                                    String commandName = reader.GetString("command_name");
                                    String commandText = reader.GetString("command_text");
                                    AdKatsCommand.CommandAccess commandAccess = (AdKatsCommand.CommandAccess)Enum.Parse(typeof(AdKatsCommand.CommandAccess), reader.GetString("command_access"));
                                    Boolean commandPlayerInteraction = reader.GetBoolean("command_playerInteraction");

                                    validIDs.Add(commandID);
                                    AdKatsCommand currentCommand;
                                    if (_CommandIDDictionary.TryGetValue(commandID, out currentCommand))
                                    {
                                        if (!currentCommand.command_active.Equals(commandActive))
                                        {
                                            Log.Info(currentCommand.command_key + " active state being changed from " + currentCommand.command_active + " to " + commandActive);
                                            currentCommand.command_active = commandActive;
                                            displayUpdate = true;
                                        }
                                        if (currentCommand.command_key != commandKey)
                                        {
                                            Log.Info(currentCommand.command_key + " command key being changed from " + currentCommand.command_key + " to " + commandKey);
                                            currentCommand.command_key = commandKey;
                                            displayUpdate = true;
                                        }
                                        if (!currentCommand.command_logging.Equals((commandLogging)))
                                        {
                                            Log.Info(currentCommand.command_key + " logging state being changed from " + currentCommand.command_logging + " to " + commandLogging);
                                            currentCommand.command_logging = commandLogging;
                                            displayUpdate = true;
                                        }
                                        if (currentCommand.command_name != commandName)
                                        {
                                            Log.Info(currentCommand.command_key + " command name being changed from " + currentCommand.command_name + " to " + commandName);
                                            currentCommand.command_name = commandName;
                                            displayUpdate = true;
                                        }
                                        if (currentCommand.command_text != commandText)
                                        {
                                            Log.Info(currentCommand.command_key + " command text being changed from " + currentCommand.command_text + " to " + commandText);
                                            currentCommand.command_text = commandText;
                                            displayUpdate = true;
                                        }
                                        if (currentCommand.command_playerInteraction != commandPlayerInteraction)
                                        {
                                            Log.Info(currentCommand.command_key + " player interaction state being changed from " + currentCommand.command_playerInteraction + " to " + commandPlayerInteraction);
                                            currentCommand.command_playerInteraction = commandPlayerInteraction;
                                            displayUpdate = true;
                                        }
                                        if (!currentCommand.command_access.Equals(commandAccess))
                                        {
                                            Log.Info(currentCommand.command_key + " command access being changed from " + currentCommand.command_access + " to " + commandAccess);
                                            currentCommand.command_access = commandAccess;
                                            displayUpdate = true;
                                        }
                                    }
                                    else
                                    {
                                        currentCommand = new AdKatsCommand
                                        {
                                            command_id = commandID,
                                            command_active = commandActive,
                                            command_key = commandKey,
                                            command_logging = commandLogging,
                                            command_name = commandName,
                                            command_text = commandText,
                                            command_playerInteraction = commandPlayerInteraction,
                                            command_access = commandAccess
                                        };

                                        _CommandIDDictionary.Add(currentCommand.command_id, currentCommand);
                                        displayUpdate = true;
                                    }
                                    _CommandKeyDictionary.Add(currentCommand.command_key, currentCommand);
                                    _CommandNameDictionary.Add(currentCommand.command_name, currentCommand);
                                    _CommandTextDictionary.Add(currentCommand.command_text, currentCommand);
                                    if (!_commandUsageTimes.ContainsKey(currentCommand.command_key))
                                    {
                                        _commandUsageTimes[currentCommand.command_key] = UtcNow();
                                    }
                                    //Handle mandatory defaults
                                    Boolean changed = false;
                                    switch (currentCommand.command_key)
                                    {
                                        case "command_confirm":
                                            if (currentCommand.command_active != AdKatsCommand.CommandActive.Active)
                                            {
                                                Log.Warn("Confirm command must be active. Resetting.");
                                                currentCommand.command_active = AdKatsCommand.CommandActive.Active;
                                                changed = true;
                                            }
                                            if (currentCommand.command_text != "yes")
                                            {
                                                Log.Warn("Confirm command text must be 'yes'. Resetting.");
                                                currentCommand.command_text = "yes";
                                                changed = true;
                                            }
                                            if (currentCommand.command_access != AdKatsCommand.CommandAccess.Any)
                                            {
                                                Log.Warn("Confirm command access must be 'Any'. Resetting.");
                                                currentCommand.command_access = AdKatsCommand.CommandAccess.Any;
                                                changed = true;
                                            }
                                            break;
                                        case "command_cancel":
                                            if (currentCommand.command_active != AdKatsCommand.CommandActive.Active)
                                            {
                                                Log.Warn("Cancel command must be active. Resetting.");
                                                currentCommand.command_active = AdKatsCommand.CommandActive.Active;
                                                changed = true;
                                            }
                                            if (currentCommand.command_text != "no")
                                            {
                                                Log.Warn("Cancel command text must be 'no'. Resetting.");
                                                currentCommand.command_text = "no";
                                                changed = true;
                                            }
                                            if (currentCommand.command_access != AdKatsCommand.CommandAccess.Any)
                                            {
                                                Log.Warn("Confirm command access must be 'Any'. Resetting.");
                                                currentCommand.command_access = AdKatsCommand.CommandAccess.Any;
                                                changed = true;
                                            }
                                            break;
                                        case "player_kill":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_kick":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_ban_temp":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_ban_perm":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_punish":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_mute":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "self_kill":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "admin_say":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_say":
                                            if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden) {
                                                Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                changed = true;
                                            }
                                            break;
                                        case "admin_yell":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_yell":
                                            if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden) {
                                                Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                changed = true;
                                            }
                                            break;
                                        case "admin_tell":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_tell":
                                            if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden) {
                                                Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                changed = true;
                                            }
                                            break;
                                        case "player_ban_perm_future":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_kill_force":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.GlobalVisible)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'GlobalVisible'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.GlobalVisible;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_info":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                        case "player_find":
                                            if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden) {
                                                Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                changed = true;
                                            }
                                            break;
                                        case "self_reportlist":
                                            if (_isTestingAuthorized)
                                            {
                                                if (currentCommand.command_access != AdKatsCommand.CommandAccess.AnyHidden)
                                                {
                                                    Log.Info(currentCommand.command_name + " access must be 'AnyHidden'. Resetting.");
                                                    currentCommand.command_access = AdKatsCommand.CommandAccess.AnyHidden;
                                                    changed = true;
                                                }
                                            }
                                            break;
                                    }
                                    if (changed)
                                    {
                                        QueueCommandForUpload(currentCommand);
                                        displayUpdate = true;
                                    }
                                }
                            }
                            if (_CommandIDDictionary.Count > 0)
                            {
                                foreach (AdKatsCommand remCommand in _CommandIDDictionary.Values.Where(aRole => !validIDs.Contains(aRole.command_id)).ToList())
                                {
                                    Log.Info("Removing command " + remCommand.command_key);
                                    _CommandIDDictionary.Remove(remCommand.command_id);
                                }
                                Boolean newCommands = false;
                                if (!_CommandIDDictionary.ContainsKey(1))
                                {
                                    SendNonQuery("Adding command command_confirm", "INSERT INTO `adkats_commands` VALUES(1, 'Active', 'command_confirm', 'Unable', 'Confirm Command', 'yes', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(2))
                                {
                                    SendNonQuery("Adding command command_cancel", "INSERT INTO `adkats_commands` VALUES(2, 'Active', 'command_cancel', 'Unable', 'Cancel Command', 'no', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(3))
                                {
                                    SendNonQuery("Adding command player_kill", "INSERT INTO `adkats_commands` VALUES(3, 'Active', 'player_kill', 'Log', 'Kill Player', 'kill', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(4))
                                {
                                    SendNonQuery("Adding command player_kill_lowpop", "INSERT INTO `adkats_commands` VALUES(4, 'Invisible', 'player_kill_lowpop', 'Log', 'Kill Player (Low Population)', 'lowpopkill', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(5))
                                {
                                    SendNonQuery("Adding command player_kill_repeat", "INSERT INTO `adkats_commands` VALUES(5, 'Invisible', 'player_kill_repeat', 'Log', 'Kill Player (Repeat Kill)', 'repeatkill', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(6))
                                {
                                    SendNonQuery("Adding command player_kick", "INSERT INTO `adkats_commands` VALUES(6, 'Active', 'player_kick', 'Log', 'Kick Player', 'kick', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(7))
                                {
                                    SendNonQuery("Adding command player_ban_temp", "INSERT INTO `adkats_commands` VALUES(7, 'Active', 'player_ban_temp', 'Log', 'Temp-Ban Player', 'tban', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(8))
                                {
                                    SendNonQuery("Adding command player_ban_perm", "INSERT INTO `adkats_commands` VALUES(8, 'Active', 'player_ban_perm', 'Log', 'Permaban Player', 'ban', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(9))
                                {
                                    SendNonQuery("Adding command player_punish", "INSERT INTO `adkats_commands` VALUES(9, 'Active', 'player_punish', 'Mandatory', 'Punish Player', 'punish', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(10))
                                {
                                    SendNonQuery("Adding command player_forgive", "INSERT INTO `adkats_commands` VALUES(10, 'Active', 'player_forgive', 'Mandatory', 'Forgive Player', 'forgive', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(11))
                                {
                                    SendNonQuery("Adding command player_mute", "INSERT INTO `adkats_commands` VALUES(11, 'Active', 'player_mute', 'Log', 'Mute Player', 'mute', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(12))
                                {
                                    SendNonQuery("Adding command player_join", "INSERT INTO `adkats_commands` VALUES(12, 'Active', 'player_join', 'Log', 'Join Player', 'join', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(14))
                                {
                                    SendNonQuery("Adding command player_move", "INSERT INTO `adkats_commands` VALUES(14, 'Active', 'player_move', 'Log', 'On-Death Move Player', 'move', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(15))
                                {
                                    SendNonQuery("Adding command player_fmove", "INSERT INTO `adkats_commands` VALUES(15, 'Active', 'player_fmove', 'Log', 'Force Move Player', 'fmove', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(16))
                                {
                                    SendNonQuery("Adding command self_teamswap", "INSERT INTO `adkats_commands` VALUES(16, 'Active', 'self_teamswap', 'Log', 'Teamswap Self', 'moveme', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(17))
                                {
                                    SendNonQuery("Adding command self_kill", "INSERT INTO `adkats_commands` VALUES(17, 'Active', 'self_kill', 'Log', 'Kill Self', 'killme', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(18))
                                {
                                    SendNonQuery("Adding command player_report", "INSERT INTO `adkats_commands` VALUES(18, 'Active', 'player_report', 'Log', 'Report Player', 'report', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(19))
                                {
                                    SendNonQuery("Adding command player_report_confirm", "INSERT INTO `adkats_commands` VALUES(19, 'Invisible', 'player_report_confirm', 'Log', 'Report Player (Confirmed)', 'confirmreport', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(20))
                                {
                                    SendNonQuery("Adding command player_calladmin", "INSERT INTO `adkats_commands` VALUES(20, 'Active', 'player_calladmin', 'Log', 'Call Admin on Player', 'admin', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(21))
                                {
                                    SendNonQuery("Adding command admin_say", "INSERT INTO `adkats_commands` VALUES(21, 'Active', 'admin_say', 'Log', 'Admin Say', 'say', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(22))
                                {
                                    SendNonQuery("Adding command player_say", "INSERT INTO `adkats_commands` VALUES(22, 'Active', 'player_say', 'Log', 'Player Say', 'psay', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(23))
                                {
                                    SendNonQuery("Adding command admin_yell", "INSERT INTO `adkats_commands` VALUES(23, 'Active', 'admin_yell', 'Log', 'Admin Yell', 'yell', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(24))
                                {
                                    SendNonQuery("Adding command player_yell", "INSERT INTO `adkats_commands` VALUES(24, 'Active', 'player_yell', 'Log', 'Player Yell', 'pyell', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(25))
                                {
                                    SendNonQuery("Adding command admin_tell", "INSERT INTO `adkats_commands` VALUES(25, 'Active', 'admin_tell', 'Log', 'Admin Tell', 'tell', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(26))
                                {
                                    SendNonQuery("Adding command player_tell", "INSERT INTO `adkats_commands` VALUES(26, 'Active', 'player_tell', 'Log', 'Player Tell', 'ptell', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(27))
                                {
                                    SendNonQuery("Adding command self_whatis", "INSERT INTO `adkats_commands` VALUES(27, 'Active', 'self_whatis', 'Unable', 'What Is', 'whatis', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(28))
                                {
                                    SendNonQuery("Adding command self_voip", "INSERT INTO `adkats_commands` VALUES(28, 'Active', 'self_voip', 'Unable', 'VOIP', 'voip', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(29))
                                {
                                    SendNonQuery("Adding command self_rules", "INSERT INTO `adkats_commands` VALUES(29, 'Active', 'self_rules', 'Log', 'Request Rules', 'rules', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(30))
                                {
                                    SendNonQuery("Adding command round_restart", "INSERT INTO `adkats_commands` VALUES(30, 'Active', 'round_restart', 'Log', 'Restart Current Round', 'restart', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(31))
                                {
                                    SendNonQuery("Adding command round_next", "INSERT INTO `adkats_commands` VALUES(31, 'Active', 'round_next', 'Log', 'Run Next Round', 'nextlevel', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(32))
                                {
                                    SendNonQuery("Adding command round_end", "INSERT INTO `adkats_commands` VALUES(32, 'Active', 'round_end', 'Log', 'End Current Round', 'endround', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(33))
                                {
                                    SendNonQuery("Adding command server_nuke", "INSERT INTO `adkats_commands` VALUES(33, 'Active', 'server_nuke', 'Log', 'Server Nuke', 'nuke', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(34))
                                {
                                    SendNonQuery("Adding command server_kickall", "INSERT INTO `adkats_commands` VALUES(34, 'Active', 'server_kickall', 'Log', 'Kick All Guests', 'kickall', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(35))
                                {
                                    SendNonQuery("Adding command adkats_exception", "INSERT INTO `adkats_commands` VALUES(35, 'Invisible', 'adkats_exception', 'Mandatory', 'Logged Exception', 'logexception', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(36))
                                {
                                    SendNonQuery("Adding command banenforcer_enforce", "INSERT INTO `adkats_commands` VALUES(36, 'Invisible', 'banenforcer_enforce', 'Mandatory', 'Enforce Active Ban', 'enforceban', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(37))
                                {
                                    SendNonQuery("Adding command player_unban", "INSERT INTO `adkats_commands` VALUES(37, 'Active', 'player_unban', 'Log', 'Unban Player', 'unban', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(38))
                                {
                                    SendNonQuery("Adding command self_admins", "INSERT INTO `adkats_commands` VALUES(38, 'Active', 'self_admins', 'Log', 'Request Online Admins', 'admins', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(39))
                                {
                                    SendNonQuery("Adding command self_lead", "INSERT INTO `adkats_commands` VALUES(39, 'Active', 'self_lead', 'Log', 'Lead Current Squad', 'lead', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(40))
                                {
                                    SendNonQuery("Adding command admin_accept", "INSERT INTO `adkats_commands` VALUES(40, 'Active', 'admin_accept', 'Log', 'Accept Round Report', 'accept', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(41))
                                {
                                    SendNonQuery("Adding command admin_deny", "INSERT INTO `adkats_commands` VALUES(41, 'Active', 'admin_deny', 'Log', 'Deny Round Report', 'deny', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(42))
                                {
                                    SendNonQuery("Adding command player_report_deny", "INSERT INTO `adkats_commands` VALUES(42, 'Invisible', 'player_report_deny', 'Log', 'Report Player (Denied)', 'denyreport', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(43))
                                {
                                    SendNonQuery("Adding command server_swapnuke", "INSERT INTO `adkats_commands` VALUES(43, 'Active', 'server_swapnuke', 'Log', 'SwapNuke Server', 'swapnuke', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(44))
                                {
                                    SendNonQuery("Adding command player_blacklistdisperse", "INSERT INTO `adkats_commands` VALUES(44, 'Active', 'player_blacklistdisperse', 'Log', 'Autobalance Disperse Player', 'disperse', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(45))
                                {
                                    SendNonQuery("Adding command player_whitelistbalance", "INSERT INTO `adkats_commands` VALUES(45, 'Active', 'player_whitelistbalance', 'Log', 'Autobalance Whitelist Player', 'mbwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(46))
                                {
                                    SendNonQuery("Adding command player_slotreserved", "INSERT INTO `adkats_commands` VALUES(46, 'Active', 'player_slotreserved', 'Log', 'Reserved Slot Player', 'reserved', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(47))
                                {
                                    SendNonQuery("Adding command player_slotspectator", "INSERT INTO `adkats_commands` VALUES(47, 'Active', 'player_slotspectator', 'Log', 'Spectator Slot Player', 'spectator', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(48))
                                {
                                    SendNonQuery("Adding command player_changename", "INSERT INTO `adkats_commands` VALUES(48, 'Invisible', 'player_changename', 'Log', 'Player Changed Name', 'changename', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(49))
                                {
                                    SendNonQuery("Adding command player_changeip", "INSERT INTO `adkats_commands` VALUES(49, 'Invisible', 'player_changeip', 'Log', 'Player Changed IP', 'changeip', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(50))
                                {
                                    SendNonQuery("Adding command player_ban_perm_future", "INSERT INTO `adkats_commands` VALUES(50, 'Active', 'player_ban_perm_future', 'Log', 'Future Permaban Player', 'fban', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(51))
                                {
                                    SendNonQuery("Adding command self_assist", "INSERT INTO `adkats_commands` VALUES(51, 'Active', 'self_assist', 'Log', 'Assist Losing Team', 'assist', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                SendNonQuery("Updating command 51 player interaction", "UPDATE `adkats_commands` SET `command_playerInteraction`=0 WHERE `command_id`=51", false);
                                if (!_CommandIDDictionary.ContainsKey(52))
                                {
                                    SendNonQuery("Adding command self_uptime", "INSERT INTO `adkats_commands` VALUES(52, 'Active', 'self_uptime', 'Log', 'Request Uptimes', 'uptime', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(53))
                                {
                                    SendNonQuery("Adding command self_contest", "INSERT INTO `adkats_commands` VALUES(53, 'Active', 'self_contest', 'Log', 'Contest Report', 'contest', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(54))
                                {
                                    SendNonQuery("Adding command player_kill_force", "INSERT INTO `adkats_commands` VALUES(54, 'Active', 'player_kill_force', 'Log', 'Kill Player (Force)', 'fkill', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(55))
                                {
                                    SendNonQuery("Adding command player_info", "INSERT INTO `adkats_commands` VALUES(55, 'Active', 'player_info', 'Log', 'Fetch Player Info', 'pinfo', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(56))
                                {
                                    SendNonQuery("Adding command player_dequeue", "INSERT INTO `adkats_commands` VALUES(56, 'Active', 'player_dequeue', 'Log', 'Dequeue Player Action', 'deq', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(57))
                                {
                                    SendNonQuery("Adding command self_help", "INSERT INTO `adkats_commands` VALUES(57, 'Active', 'self_help', 'Log', 'Request Server Commands', 'help', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(58))
                                {
                                    SendNonQuery("Adding command player_find", "INSERT INTO `adkats_commands` VALUES(58, 'Active', 'player_find', 'Log', 'Find Player', 'find', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(59))
                                {
                                    SendNonQuery("Adding command server_afk", "INSERT INTO `adkats_commands` VALUES(59, 'Active', 'server_afk', 'Log', 'Manage AFK Players', 'afk', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(60))
                                {
                                    SendNonQuery("Adding command player_pull", "INSERT INTO `adkats_commands` VALUES(60, 'Active', 'player_pull', 'Log', 'Pull Player', 'pull', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(61))
                                {
                                    SendNonQuery("Adding command admin_ignore", "INSERT INTO `adkats_commands` VALUES(61, 'Active', 'admin_ignore', 'Log', 'Ignore Round Report', 'ignore', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(62))
                                {
                                    SendNonQuery("Adding command player_report_ignore", "INSERT INTO `adkats_commands` VALUES(62, 'Invisible', 'player_report_ignore', 'Log', 'Report Player (Ignored)', 'ignorereport', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(63))
                                {
                                    SendNonQuery("Adding command player_mark", "INSERT INTO `adkats_commands` VALUES(63, 'Active', 'player_mark', 'Unable', 'Mark Player', 'mark', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(64))
                                {
                                    SendNonQuery("Adding command player_chat", "INSERT INTO `adkats_commands` VALUES(64, 'Active', 'player_chat', 'Log', 'Fetch Player Chat', 'pchat', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(65))
                                {
                                    SendNonQuery("Adding command player_whitelisthackerchecker", "INSERT INTO `adkats_commands` VALUES(65, 'Active', 'player_whitelisthackerchecker', 'Log', 'Hacker-Checker Whitelist Player', 'hcwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(66))
                                {
                                    SendNonQuery("Adding command player_lock", "INSERT INTO `adkats_commands` VALUES(66, 'Active', 'player_lock', 'Log', 'Lock Player Commands', 'lock', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(67))
                                {
                                    SendNonQuery("Adding command player_unlock", "INSERT INTO `adkats_commands` VALUES(67, 'Active', 'player_unlock', 'Log', 'Unlock Player Commands', 'unlock', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(68))
                                {
                                    SendNonQuery("Adding command self_rep", "INSERT INTO `adkats_commands` VALUES(68, 'Active', 'self_rep', 'Log', 'Request Server Reputation', 'rep', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(69))
                                {
                                    SendNonQuery("Adding command player_repboost", "INSERT INTO `adkats_commands` VALUES(69, 'Invisible', 'player_repboost', 'Log', 'Boost Player Reputation', 'rboost', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(70))
                                {
                                    SendNonQuery("Adding command player_log", "INSERT INTO `adkats_commands` VALUES(70, 'Active', 'player_log', 'Log', 'Log Player Information', 'log', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(71))
                                {
                                    SendNonQuery("Adding command player_whitelistping", "INSERT INTO `adkats_commands` VALUES(71, 'Active', 'player_whitelistping', 'Log', 'Ping Whitelist Player', 'pwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(72))
                                {
                                    SendNonQuery("Adding command player_ban_temp_old", "INSERT INTO `adkats_commands` VALUES(72, 'Invisible', 'player_ban_temp_old', 'Log', 'Previous Temp Ban', 'pretban', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(73))
                                {
                                    SendNonQuery("Adding command player_ban_perm_old", "INSERT INTO `adkats_commands` VALUES(73, 'Invisible', 'player_ban_perm_old', 'Log', 'Previous Perm Ban', 'preban', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(74))
                                {
                                    SendNonQuery("Adding command player_pm_send", "INSERT INTO `adkats_commands` VALUES(74, 'Active', 'player_pm_send', 'Unable', 'Player Private Message', 'msg', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(75))
                                {
                                    SendNonQuery("Adding command player_pm_reply", "INSERT INTO `adkats_commands` VALUES(75, 'Active', 'player_pm_reply', 'Unable', 'Player Private Reply', 'r', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(76))
                                {
                                    SendNonQuery("Adding command admin_pm_send", "INSERT INTO `adkats_commands` VALUES(76, 'Active', 'admin_pm_send', 'Unable', 'Admin Private Message', 'adminmsg', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(77))
                                {
                                    SendNonQuery("Adding command player_whitelistaa", "INSERT INTO `adkats_commands` VALUES(77, 'Active', 'player_whitelistaa', 'Log', 'AA Whitelist Player', 'aawhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(78))
                                {
                                    SendNonQuery("Adding command self_surrender", "INSERT INTO `adkats_commands` VALUES(78, 'Active', 'self_surrender', 'Log', 'Vote Surrender', 'surrender', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(79))
                                {
                                    SendNonQuery("Adding command self_votenext", "INSERT INTO `adkats_commands` VALUES(79, 'Active', 'self_votenext', 'Log', 'Vote Next Round', 'votenext', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(80))
                                {
                                    SendNonQuery("Adding command self_reportlist", "INSERT INTO `adkats_commands` VALUES(80, 'Active', 'self_reportlist', 'Log', 'List Round Reports', 'reportlist', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(81))
                                {
                                    SendNonQuery("Adding command plugin_restart", "INSERT INTO `adkats_commands` VALUES(81, 'Active', 'plugin_restart', 'Log', 'Restart AdKats', 'prestart', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(82))
                                {
                                    SendNonQuery("Adding command server_shutdown", "INSERT INTO `adkats_commands` VALUES(82, 'Active', 'server_shutdown', 'Log', 'Shutdown Server', 'shutdown', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(83))
                                {
                                    SendNonQuery("Adding command self_nosurrender", "INSERT INTO `adkats_commands` VALUES(83, 'Active', 'self_nosurrender', 'Log', 'Vote Against Surrender', 'nosurrender', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(84))
                                {
                                    SendNonQuery("Adding command player_whitelistspambot", "INSERT INTO `adkats_commands` VALUES(84, 'Active', 'player_whitelistspambot', 'Log', 'SpamBot Whitelist Player', 'spamwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(85))
                                {
                                    SendNonQuery("Adding command player_pm_start", "INSERT INTO `adkats_commands` VALUES(85, 'Invisible', 'player_pm_start', 'Log', 'Player Private Message Start', 'pmstart', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(86))
                                {
                                    SendNonQuery("Adding command player_pm_transmit", "INSERT INTO `adkats_commands` VALUES(86, 'Invisible', 'player_pm_transmit', 'Log', 'Player Private Message Transmit', 'pmtransmit', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(87))
                                {
                                    SendNonQuery("Adding command player_pm_cancel", "INSERT INTO `adkats_commands` VALUES(87, 'Invisible', 'player_pm_cancel', 'Log', 'Player Private Message Cancel', 'pmcancel', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(88))
                                {
                                    SendNonQuery("Adding command player_population_success", "INSERT INTO `adkats_commands` VALUES(88, 'Invisible', 'player_population_success', 'Log', 'Player Successfully Populated Server', 'popsuccess', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(89))
                                {
                                    SendNonQuery("Adding command server_map_detriment", "INSERT INTO `adkats_commands` VALUES(89, 'Invisible', 'server_map_detriment', 'Log', 'Map Detriment Log', 'mapdetriment', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(90))
                                {
                                    SendNonQuery("Adding command server_map_benefit", "INSERT INTO `adkats_commands` VALUES(90, 'Invisible', 'server_map_benefit', 'Log', 'Map Benefit Log', 'mapbenefit', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(91))
                                {
                                    SendNonQuery("Adding command plugin_update", "INSERT INTO `adkats_commands` VALUES(91, 'Active', 'plugin_update', 'Unable', 'Update AdKats', 'pupdate', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(92))
                                {
                                    SendNonQuery("Adding command player_warn", "INSERT INTO `adkats_commands` VALUES(92, 'Active', 'player_warn', 'Log', 'Warn Player', 'warn', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(93))
                                {
                                    SendNonQuery("Adding command server_countdown", "INSERT INTO `adkats_commands` VALUES(93, 'Active', 'server_countdown', 'Log', 'Run Countdown', 'cdown', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(94))
                                {
                                    SendNonQuery("Adding command player_whitelistreport", "INSERT INTO `adkats_commands` VALUES(94, 'Active', 'player_whitelistreport', 'Log', 'Report Whitelist Player', 'rwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(95))
                                {
                                    SendNonQuery("Adding command player_whitelistreport_remove", "INSERT INTO `adkats_commands` VALUES(95, 'Active', 'player_whitelistreport_remove', 'Log', 'Remove Report Whitelist', 'unrwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(96))
                                {
                                    SendNonQuery("Adding command player_whitelistspambot_remove", "INSERT INTO `adkats_commands` VALUES(96, 'Active', 'player_whitelistspambot_remove', 'Log', 'Remove SpamBot Whitelist', 'unspamwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(97))
                                {
                                    SendNonQuery("Adding command player_whitelistaa_remove", "INSERT INTO `adkats_commands` VALUES(97, 'Active', 'player_whitelistaa_remove', 'Log', 'Remove AA Whitelist', 'unaawhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(98))
                                {
                                    SendNonQuery("Adding command player_whitelistping_remove", "INSERT INTO `adkats_commands` VALUES(98, 'Active', 'player_whitelistping_remove', 'Log', 'Remove Ping Whitelist', 'unpwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(99))
                                {
                                    SendNonQuery("Adding command player_whitelisthackerchecker_remove", "INSERT INTO `adkats_commands` VALUES(99, 'Active', 'player_whitelisthackerchecker_remove', 'Log', 'Remove Hacker-Checker Whitelist', 'unhcwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(100))
                                {
                                    SendNonQuery("Adding command player_slotspectator_remove", "INSERT INTO `adkats_commands` VALUES(100, 'Active', 'player_slotspectator_remove', 'Log', 'Remove Spectator Slot', 'unspectator', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(101))
                                {
                                    SendNonQuery("Adding command player_slotreserved_remove", "INSERT INTO `adkats_commands` VALUES(101, 'Active', 'player_slotreserved_remove', 'Log', 'Remove Reserved Slot', 'unreserved', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(102))
                                {
                                    SendNonQuery("Adding command player_whitelistbalance_remove", "INSERT INTO `adkats_commands` VALUES(102, 'Active', 'player_whitelistbalance_remove', 'Log', 'Remove Autobalance Whitelist', 'unmbwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(103))
                                {
                                    SendNonQuery("Adding command player_blacklistdisperse_remove", "INSERT INTO `adkats_commands` VALUES(103, 'Active', 'player_blacklistdisperse_remove', 'Log', 'Remove Autobalance Dispersion', 'undisperse', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(104))
                                {
                                    SendNonQuery("Adding command player_whitelistpopulator", "INSERT INTO `adkats_commands` VALUES(104, 'Active', 'player_whitelistpopulator', 'Log', 'Populator Whitelist Player', 'popwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(105))
                                {
                                    SendNonQuery("Adding command player_whitelistpopulator_remove", "INSERT INTO `adkats_commands` VALUES(105, 'Active', 'player_whitelistpopulator_remove', 'Log', 'Remove Populator Whitelist', 'unpopwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(106))
                                {
                                    SendNonQuery("Adding command player_whitelistteamkill", "INSERT INTO `adkats_commands` VALUES(106, 'Active', 'player_whitelistteamkill', 'Log', 'TeamKillTracker Whitelist Player', 'tkwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(107))
                                {
                                    SendNonQuery("Adding command player_whitelistteamkill_remove", "INSERT INTO `adkats_commands` VALUES(107, 'Active', 'player_whitelistteamkill_remove', 'Log', 'Remove TeamKillTracker Whitelist', 'untkwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(108))
                                {
                                    SendNonQuery("Adding command self_assist_unconfirmed", "INSERT INTO `adkats_commands` VALUES(108, 'Invisible', 'self_assist_unconfirmed', 'Log', 'Unconfirmed Assist', 'uassist', FALSE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(109))
                                {
                                    SendNonQuery("Adding command player_blacklistspectator", "INSERT INTO `adkats_commands` VALUES(109, 'Active', 'player_blacklistspectator', 'Log', 'Spectator Blacklist Player', 'specblacklist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(110))
                                {
                                    SendNonQuery("Adding command player_blacklistspectator_remove", "INSERT INTO `adkats_commands` VALUES(110, 'Active', 'player_blacklistspectator_remove', 'Log', 'Remove Spectator Blacklist', 'unspecblacklist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(111))
                                {
                                    SendNonQuery("Adding command player_blacklistreport", "INSERT INTO `adkats_commands` VALUES(111, 'Active', 'player_blacklistreport', 'Log', 'Report Source Blacklist', 'rblacklist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(112))
                                {
                                    SendNonQuery("Adding command player_blacklistreport_remove", "INSERT INTO `adkats_commands` VALUES(112, 'Active', 'player_blacklistreport_remove', 'Log', 'Remove Report Source Blacklist', 'unrblacklist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(113))
                                {
                                    SendNonQuery("Adding command player_whitelistcommand", "INSERT INTO `adkats_commands` VALUES(113, 'Active', 'player_whitelistcommand', 'Log', 'Command Target Whitelist', 'cwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(114))
                                {
                                    SendNonQuery("Adding command player_whitelistcommand_remove", "INSERT INTO `adkats_commands` VALUES(114, 'Active', 'player_whitelistcommand_remove', 'Log', 'Remove Command Target Whitelist', 'uncwhitelist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(115))
                                {
                                    SendNonQuery("Adding command player_blacklistautoassist", "INSERT INTO `adkats_commands` VALUES(115, 'Active', 'player_blacklistautoassist', 'Log', 'Auto-Assist Blacklist', 'auablacklist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(116))
                                {
                                    SendNonQuery("Adding command player_blacklistautoassist_remove", "INSERT INTO `adkats_commands` VALUES(116, 'Active', 'player_blacklistautoassist_remove', 'Log', 'Remove Auto-Assist Blacklist', 'unauablacklist', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(117)) 
                                {
                                    SendNonQuery("Adding command player_isadmin", "INSERT INTO `adkats_commands` VALUES(117, 'Active', 'player_isadmin', 'Log', 'Fetch Admin Status', 'isadmin', FALSE, 'AnyHidden')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(118)) 
                                {
                                    SendNonQuery("Adding command self_feedback", "INSERT INTO `adkats_commands` VALUES(118, 'Active', 'self_feedback', 'Log', 'Give Server Feedback', 'feedback', FALSE, 'AnyHidden')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(119)) 
                                {
                                    SendNonQuery("Adding command player_loadout", "INSERT INTO `adkats_commands` VALUES(119, 'Active', 'player_loadout', 'Log', 'Fetch Player Loadout', 'loadout', FALSE, 'AnyHidden')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(120)) 
                                {
                                    SendNonQuery("Adding command player_loadout_force", "INSERT INTO `adkats_commands` VALUES(120, 'Active', 'player_loadout_force', 'Log', 'Force Player Loadout', 'floadout', TRUE, 'AnyHidden')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(121))
                                {
                                    SendNonQuery("Adding command self_battlecry", "INSERT INTO `adkats_commands` VALUES(121, 'Active', 'self_battlecry', 'Log', 'Set Own Battlecry', 'battlecry', FALSE, 'AnyHidden')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(122))
                                {
                                    SendNonQuery("Adding command player_battlecry", "INSERT INTO `adkats_commands` VALUES(122, 'Active', 'player_battlecry', 'Log', 'Set Player Battlecry', 'setbattlecry', TRUE, 'AnyHidden')", true);
                                    newCommands = true;
                                }
                                if (!_CommandIDDictionary.ContainsKey(123))
                                {
                                    SendNonQuery("Adding command player_perks", "INSERT INTO `adkats_commands` VALUES(123, 'Active', 'player_perks', 'Log', 'Fetch Player Perks', 'perks', TRUE, 'Any')", true);
                                    newCommands = true;
                                }
                                if (newCommands)
                                {
                                    FetchCommands();
                                    return;
                                }
                            }
                            else
                            {
                                Log.Error("Commands could not be fetched.");
                            }
                            //Update functions for command timeouts
                            UpdateCommandTimeouts();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching commands from database.", e));
            }
            if (displayUpdate) {
                if (_isTestingAuthorized) {
                    Log.Info("34273");
                }
                UpdateSettingPage();
            }
            Log.Debug(() => "fetchCommands finished!", 6);
        }

        private void FillCommandDescDictionary()
        {
            _CommandDescriptionDictionary["command_confirm"] = "Command used to confirm actions. No parameters.";
            _CommandDescriptionDictionary["command_cancel"] = "Command used to cancel actions. No parameters.";
            _CommandDescriptionDictionary["player_kill"] = "Kills a player, queues for kill on spawn if dead. Requires a reason.";
            _CommandDescriptionDictionary["player_kill_lowpop"] = "Invisible command. Assigned when a player_punish is issued during low population.";
            _CommandDescriptionDictionary["player_kill_repeat"] = "Invisible command. Assigned when a player_kill is issued and player is dead.";
            _CommandDescriptionDictionary["player_kick"] = "Kicks a player from the server. Requires a reason.";
            _CommandDescriptionDictionary["player_ban_temp"] = "Temporarily bans a player from the server for the given time. Requires a reason.";
            _CommandDescriptionDictionary["player_ban_perm"] = "Permanently bans a player from the server. Requires a reason.";
            _CommandDescriptionDictionary["player_punish"] = "Increases infraction points, then punishes the player. Requires a reason.";
            _CommandDescriptionDictionary["player_forgive"] = "Decreases infraction points and informs the player. Requires a reason.";
            _CommandDescriptionDictionary["player_mute"] = "Mutes a player for the current round. Talking will cause punishment. Requires a reason.";
            _CommandDescriptionDictionary["player_join"] = "Switches you to a players squad if there is room.";
            _CommandDescriptionDictionary["player_roundwhitelist"] = "DISABLED COMMAND";
            _CommandDescriptionDictionary["player_move"] = "When the player dies it queues them to switch teams when a slot is available.";
            _CommandDescriptionDictionary["player_fmove"] = "Immediately queues the player to switch teams when a slot is available.";
            _CommandDescriptionDictionary["self_teamswap"] = "Immediately queues you to switch teams when a slot is available.";
            _CommandDescriptionDictionary["self_kill"] = "Makes you commit suicide and regret your existence.";
            _CommandDescriptionDictionary["player_report"] = "Reports a player to admins. Requires a reason.";
            _CommandDescriptionDictionary["player_report_confirm"] = "Invisible command. Assigned when an admin confirms a report.";
            _CommandDescriptionDictionary["player_calladmin"] = "Calls admin on a player. Requires a reason.";
            _CommandDescriptionDictionary["admin_say"] = "Sends a chat message to the whole server.";
            _CommandDescriptionDictionary["player_say"] = "Sends a chat message to a particular player.";
            _CommandDescriptionDictionary["admin_yell"] = "Sends a yell message to the whole server.";
            _CommandDescriptionDictionary["player_yell"] = "Sends a yell message to a particular player.";
            _CommandDescriptionDictionary["admin_tell"] = "Sends both a chat message and yell message to the whole server.";
            _CommandDescriptionDictionary["player_tell"] = "Sends both a chat message and yell message to a particular player.";
            _CommandDescriptionDictionary["self_whatis"] = "Tells you what a command or pre-message ID means.";
            _CommandDescriptionDictionary["self_voip"] = "Tells you what the VOIP address for this server is.";
            _CommandDescriptionDictionary["self_rules"] = "Tells you what the server rules are.";
            _CommandDescriptionDictionary["round_restart"] = "Restarts the current round. All players keep their points.";
            _CommandDescriptionDictionary["round_next"] = "Runs the next round/map in line. All players keep their points.";
            _CommandDescriptionDictionary["round_end"] = "Ends the current round with a decided winner.";
            _CommandDescriptionDictionary["server_nuke"] = "Kills all players in the decided subset.";
            _CommandDescriptionDictionary["server_kickall"] = "Kicks all non-admins from the server.";
            _CommandDescriptionDictionary["adkats_exception"] = "Invisible command. Issued by AdKats to log exceptions.";
            _CommandDescriptionDictionary["banenforcer_enforce"] = "Invisible command. Issued by BanEnforcer when a player's ban is enforced.";
            _CommandDescriptionDictionary["player_unban"] = "Searches for banned players with the given name, and gives the option to unban.";
            _CommandDescriptionDictionary["self_admins"] = "Tells you the list of online admins.";
            _CommandDescriptionDictionary["self_lead"] = "Gives the target leader of their current squad. No parameters to target yourself.";
            _CommandDescriptionDictionary["admin_accept"] = "Accepts the given report ID. Takes no action against the target player.";
            _CommandDescriptionDictionary["admin_deny"] = "Denys the given report ID. Reduces the reporter's reputation.";
            _CommandDescriptionDictionary["player_report_deny"] = "Invisible command. Assigned when an admin denies a report.";
            _CommandDescriptionDictionary["server_swapnuke"] = "Queues all players to switch teams immediately.";
            _CommandDescriptionDictionary["player_blacklistdisperse"] = "Adds the target player to even dispersion for the server.";
            _CommandDescriptionDictionary["player_whitelistbalance"] = "Adds the target player to autobalance whitelist for the server.";
            _CommandDescriptionDictionary["player_slotreserved"] = "Adds the target player to reserved slots for the server.";
            _CommandDescriptionDictionary["player_slotspectator"] = "Adds the target player to spectator slots for the server.";
            _CommandDescriptionDictionary["player_changename"] = "Invisible command. Assigned when a player changes their name.";
            _CommandDescriptionDictionary["player_changeip"] = "Invisible command. Assigned when a player changes location/IP.";
            _CommandDescriptionDictionary["player_ban_perm_future"] = "Future-permaban, inverse of a temp-ban. Requires a reason.";
            _CommandDescriptionDictionary["self_assist"] = "Queues you to assist the losing team.";
            _CommandDescriptionDictionary["self_uptime"] = "Tells you the uptime/population information for the server.";
            _CommandDescriptionDictionary["self_contest"] = "Contests any current report against you. Admins must act manually on the report afterward.";
            _CommandDescriptionDictionary["player_kill_force"] = "Immediately kills the target player, avoids all other player_kill logic.";
            _CommandDescriptionDictionary["player_info"] = "Returns all known information about the player.";
            _CommandDescriptionDictionary["player_dequeue"] = "Cancels any queued action on a player.";
            _CommandDescriptionDictionary["self_help"] = "Tells you all commands your user role can access.";
            _CommandDescriptionDictionary["player_find"] = "Target a player to fetch their team, position, and current score.";
            _CommandDescriptionDictionary["server_afk"] = "Calls the AFK Manager logic to remove AFK players from the server.";
            _CommandDescriptionDictionary["player_pull"] = "Pulls a player to your squad, killing them in the process.";
            _CommandDescriptionDictionary["admin_ignore"] = "Ignores the given report ID. Takes no action against the target or source player.";
            _CommandDescriptionDictionary["player_mark"] = "Marks a player for notification if they leave the server.";
            _CommandDescriptionDictionary["player_chat"] = "Fetches player or conversation chat history.";
            _CommandDescriptionDictionary["player_whitelisthackerchecker"] = "Whitelists the target player from Hacker-Checker, and unbans them if necessary.";
            _CommandDescriptionDictionary["player_lock"] = "Temporarily locks a player from admin commands.";
            _CommandDescriptionDictionary["player_unlock"] = "Removes command lock from a player.";
            _CommandDescriptionDictionary["self_rep"] = "Returns your current server reputation.";
            _CommandDescriptionDictionary["player_repboost"] = "Invisible command. Boosts player rep for a given reason.";
            _CommandDescriptionDictionary["player_log"] = "Logs the given information to the player's record.";
            _CommandDescriptionDictionary["player_whitelistping"] = "Whitelists a player from ping kick (ADK only).";
            _CommandDescriptionDictionary["player_ban_temp_old"] = "Invisible command. Set to all disabled temp-bans.";
            _CommandDescriptionDictionary["player_ban_perm_old"] = "Invisible command. Set to all disabled permabans.";
            _CommandDescriptionDictionary["player_pm_send"] = "Sends a private message to the targeted player.";
            _CommandDescriptionDictionary["player_pm_reply"] = "Replies to the current private message.";
            _CommandDescriptionDictionary["admin_pm_send"] = "Sends a private message to all online admins.";
            _CommandDescriptionDictionary["player_whitelistaa"] = "Whitelists a player for Admin Assistant status.";
            _CommandDescriptionDictionary["self_surrender"] = "Votes to end the round with current winning team as winner, then start the next.";
            _CommandDescriptionDictionary["self_votenext"] = "Votes to end the round with current winning team as winner, then start the next.";
            _CommandDescriptionDictionary["self_reportlist"] = "Lists the latest unused round reports.";
            _CommandDescriptionDictionary["plugin_restart"] = "Reboots AdKats.";
            _CommandDescriptionDictionary["self_nosurrender"] = "Votes against ending the round with surrender.";
            _CommandDescriptionDictionary["player_whitelistspambot"] = "Whitelists a player from seeing any messages from the SpamBot.";
            _CommandDescriptionDictionary["plugin_update"] = "Updates AdKats.";
            _CommandDescriptionDictionary["player_warn"] = "Warns a player. Requires a reason.";
            _CommandDescriptionDictionary["server_countdown"] = "Sends a visible countdown to all players in the given subset.";
            _CommandDescriptionDictionary["player_whitelistreport"] = "Whitelists a player from being reported.";
            _CommandDescriptionDictionary["player_whitelistreport_remove"] = "Removes a player from report whitelist.";
            _CommandDescriptionDictionary["player_whitelistspambot_remove"] = "Removes a player from SpamBot whitelist.";
            _CommandDescriptionDictionary["player_whitelistaa_remove"] = "Removes a player from Admin Assistant whitelist.";
            _CommandDescriptionDictionary["player_whitelistping_remove"] = "Removes a player from Ping whitelist.";
            _CommandDescriptionDictionary["player_whitelisthackerchecker_remove"] = "Removes a player from Hacker-Checker whitelist.";
            _CommandDescriptionDictionary["player_slotspectator_remove"] = "Removes a player from spectator slot list.";
            _CommandDescriptionDictionary["player_slotreserved_remove"] = "Removes a player from reserved slot list.";
            _CommandDescriptionDictionary["player_whitelistbalance_remove"] = "Removes a player from autobalance whitelist.";
            _CommandDescriptionDictionary["player_blacklistdisperse_remove"] = "Removes a player from autobalance dispersion.";
            _CommandDescriptionDictionary["player_whitelistpopulator"] = "Whitelists a player to be considered a populator.";
            _CommandDescriptionDictionary["player_whitelistpopulator_remove"] = "Removes a player from the populator whitelist.";
            _CommandDescriptionDictionary["player_whitelistteamkill"] = "Whitelists a player from being acted on by TeamKillTracker.";
            _CommandDescriptionDictionary["player_whitelistteamkill_remove"] = "Removes a player from TeamKillTracker whitelist.";
            _CommandDescriptionDictionary["player_blacklistspectator"] = "A player under spectator blacklist cannot join as a spectator.";
            _CommandDescriptionDictionary["player_blacklistspectator_remove"] = "Removes a player from the spectator blacklist.";
            _CommandDescriptionDictionary["player_blacklistreport"] = "A player under report source blacklist cannot use the report/calladmin commands.";
            _CommandDescriptionDictionary["player_blacklistreport_remove"] = "Removes a player from the report source blacklist.";
            _CommandDescriptionDictionary["player_whitelistcommand"] = "A player under command target whitelist cannot be targeted by certain admin commands.";
            _CommandDescriptionDictionary["player_whitelistcommand_remove"] = "Removes a player from the command target whitelist.";
            _CommandDescriptionDictionary["player_blacklistautoassist"] = "A player under auto-assist blacklist is automatically @assist'd when baserape starts.";
            _CommandDescriptionDictionary["player_blacklistautoassist_remove"] = "Removes a player from the auto-assist blacklist.";
            _CommandDescriptionDictionary["player_isadmin"] = "Fetches a player's admin status.";
            _CommandDescriptionDictionary["self_feedback"] = "Logs feedback for the server.";
            _CommandDescriptionDictionary["player_loadout"] = "Returns a player's loadout if AdKatsLRT is installed and integrated.";
            _CommandDescriptionDictionary["player_loadout_force"] = "If AdKatsLRT is installed the targeted player is elevated to trigger level loadout enforcement.";
            _CommandDescriptionDictionary["self_battlecry"] = "Sets a new battlecry for your player.";
            _CommandDescriptionDictionary["player_battlecry"] = "Sets a new battlecry for the given player.";
            _CommandDescriptionDictionary["player_perks"] = "Displays the active perks a player has, and how long until those perks expire.";
        }

        private void FillReadableMapModeDictionaries() {
            try {
                ReadableMaps.Clear();
                ReadableModes.Clear();
                foreach (CMap m in this.GetMapDefines()) {
                    if (!ReadableMaps.ContainsKey(m.FileName)) {
                        ReadableMaps[m.FileName] = m.PublicLevelName;
                    }
                    if (!ReadableModes.ContainsKey(m.PlayList)) {
                        ReadableModes[m.PlayList] = m.GameMode;
                    }
                }
                Log.Debug(() => "Readable maps/modes filled", 6);
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error while filling map/mode dictionaries.", e));
            }
        }

        private void FillEvents()
        {
            //Laith event
            AdKatsEvent laithEvent = new AdKatsEvent();
            laithEvent.EventID = "laith319";
            laithEvent.EventName = "Laith's TDM Event 3/19/2016";
        }

        private String GetCurrentReadableMap() {
            try {
                if (_serverInfo != null && _serverInfo.InfoObject != null && !String.IsNullOrEmpty(_serverInfo.InfoObject.Map)) {
                    return GetReadableMap(_serverInfo.InfoObject.Map);
                }
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error getting current readable map.", e));
            }
            return "Unknown";
        }

        private String GetReadableMap(String mapKey) {
            try {
                String map = mapKey;
                ReadableMaps.TryGetValue(mapKey, out map);
                return map;
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error getting readable map.", e));
            }
            return "Unknown";
        }

        private String GetCurrentReadableMode() {
            try {
                if (_serverInfo != null && _serverInfo.InfoObject != null && !String.IsNullOrEmpty(_serverInfo.InfoObject.GameMode)) {
                    return GetReadableMode(_serverInfo.InfoObject.GameMode);
                }
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error getting current readable mode.", e));
            }
            return "Unknown";
        }

        private String GetReadableMode(String modeKey) {
            try {
                String mode = modeKey;
                ReadableMaps.TryGetValue(modeKey, out mode);
                return mode;
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error getting readable mode.", e));
            }
            return "Unknown";
        }

        private void UpdateCommandTimeouts()
        {
            _commandTimeoutDictionary["self_rules"] = (plugin => (plugin._ServerRulesList.Count() * plugin._ServerRulesInterval));
            _commandTimeoutDictionary["player_punish"] = (plugin => (18));
            _commandTimeoutDictionary["player_kick"] = (plugin => (30));
            _commandTimeoutDictionary["player_blacklistdisperse"] = (plugin => (30));
            _commandTimeoutDictionary["player_ban_temp"] = (plugin => (30));
            _commandTimeoutDictionary["player_ban_perm"] = (plugin => (90));
            _commandTimeoutDictionary["player_ban_perm_future"] = (plugin => (90));
            _commandTimeoutDictionary["player_report"] = (plugin => (10));
            _commandTimeoutDictionary["self_kill"] = (plugin => (10 * 60));
        }

        private void FetchRoles()
        {
            Log.Debug(() => "fetchRoles starting!", 6);
            Boolean displayUpdate = false;
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            try
            {
                lock (_RoleIDDictionary)
                {
                    using (MySqlConnection connection = GetDatabaseConnection())
                    {
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            const string sql = @"
                            SELECT 
	                            `role_id`,
	                            `role_key`,
	                            `role_name`
                            FROM 
	                            `adkats_roles`";
                            command.CommandText = sql;
                            HashSet<long> validIDs = new HashSet<Int64>();
                            using (MySqlDataReader reader = SafeExecuteReader(command))
                            {
                                _RoleKeyDictionary.Clear();
                                _RoleNameDictionary.Clear();
                                while (reader.Read())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    long roleID = reader.GetInt64("role_id");
                                    string roleKey = reader.GetString("role_key");
                                    string roleName = reader.GetString("role_name");
                                    validIDs.Add(roleID);
                                    AdKatsRole currentRole;
                                    if (_RoleIDDictionary.TryGetValue(roleID, out currentRole))
                                    {
                                        if (currentRole.role_key != roleKey)
                                        {
                                            Log.Info(currentRole.role_key + " role key being changed from " + currentRole.role_key + " to " + roleKey);
                                            currentRole.role_key = roleKey;
                                            displayUpdate = true;
                                        }
                                        if (currentRole.role_name != roleName)
                                        {
                                            Log.Info(currentRole.role_key + " role name being changed from " + currentRole.role_name + " to " + roleName);
                                            currentRole.role_name = roleName;
                                            displayUpdate = true;
                                        }
                                    }
                                    else
                                    {
                                        currentRole = new AdKatsRole
                                        {
                                            role_id = roleID,
                                            role_key = roleKey,
                                            role_name = roleName
                                        };
                                        _RoleIDDictionary.Add(currentRole.role_id, currentRole);
                                        displayUpdate = true;
                                    }
                                    _RoleKeyDictionary.Add(currentRole.role_key, currentRole);
                                    _RoleNameDictionary.Add(currentRole.role_name, currentRole);
                                }
                                foreach (AdKatsRole remRole in _RoleIDDictionary.Values.Where(aRole => !validIDs.Contains(aRole.role_id)).ToList())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    Log.Info("Removing role " + remRole.role_key);
                                    _RoleIDDictionary.Remove(remRole.role_id);
                                    displayUpdate = true;
                                }
                            }
                        }
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            const string sql = @"
                            SELECT 
	                            `role_id`,
	                            `command_id`
                            FROM 
	                            `adkats_rolecommands`
                            ORDER BY
                                `role_id`
                            ASC";
                            command.CommandText = sql;
                            using (MySqlDataReader reader = SafeExecuteReader(command))
                            {
                                Dictionary<long, HashSet<long>> rIDcIDDictionary = new Dictionary<Int64, HashSet<Int64>>();
                                while (reader.Read())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    int roleID = reader.GetInt32("role_id");
                                    long commandID = reader.GetInt64("command_id");
                                    if (!rIDcIDDictionary.ContainsKey(roleID)) {
                                        rIDcIDDictionary[roleID] = new HashSet<Int64>();
                                    }
                                    rIDcIDDictionary[roleID].Add(commandID);
                                }
                                foreach (KeyValuePair<long, HashSet<long>> currentRoleElement in rIDcIDDictionary)
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    AdKatsRole aRole;
                                    Boolean uploadRequired = false;
                                    if (!_RoleIDDictionary.TryGetValue(currentRoleElement.Key, out aRole))
                                    {
                                        Log.Warn("Role for ID " + currentRoleElement.Key + " not found in role dictionary when assigning commands.");
                                        continue;
                                    }
                                    foreach (long curCommandID in currentRoleElement.Value)
                                    {
                                        if (!_pluginEnabled)
                                        {
                                            return;
                                        }
                                        AdKatsCommand aCommand;
                                        if (!_CommandIDDictionary.TryGetValue(curCommandID, out aCommand))
                                        {
                                            Log.Warn("Command for ID " + curCommandID + " not found in command dictionary when assigning commands.");
                                            uploadRequired = true;
                                            continue;
                                        }
                                        if (!aRole.RoleAllowedCommands.ContainsKey(aCommand.command_key) && aCommand.command_active == AdKatsCommand.CommandActive.Active)
                                        {
                                            //Conditional check for default guest admin commands
                                            if (aRole.role_key == "guest_default" && aCommand.command_playerInteraction)
                                            {
                                                Log.Warn("The guest role cannot have access to admin commands.");
                                                uploadRequired = true;
                                                continue;
                                            }
                                            aRole.RoleAllowedCommands[aCommand.command_key] = aCommand;
                                        }
                                    }
                                    KeyValuePair<Int64, HashSet<Int64>> element = currentRoleElement;
                                    foreach (AdKatsCommand remCommand in aRole.RoleAllowedCommands.Values.ToList().Where(remCommand => !element.Value.Contains(remCommand.command_id)))
                                    {
                                        if (!_pluginEnabled)
                                        {
                                            return;
                                        }
                                        switch (remCommand.command_key)
                                        {
                                            case "command_confirm":
                                                Log.Error("Confirm command cannot be denied for any role. [R]");
                                                uploadRequired = true;
                                                continue;
                                            case "command_cancel":
                                                Log.Error("Cancel command cannot be denied for any role. [R]");
                                                uploadRequired = true;
                                                continue;
                                        }
                                        Log.Info("Removing command " + remCommand.command_key + " from role " + aRole.role_key);
                                        aRole.RoleAllowedCommands.Remove(remCommand.command_key);
                                        uploadRequired = true;
                                    }
                                    //Confirm required commands
                                    if (aRole.RoleAllowedCommands.Values.All(aCommand => aCommand.command_key != "command_confirm"))
                                    {
                                        AdKatsCommand confirmCommand = GetCommandByKey("command_confirm");
                                        if (confirmCommand != null)
                                        {
                                            Log.Error("Confirm command cannot be denied for any role. Reassigning.");
                                            aRole.RoleAllowedCommands[confirmCommand.command_key] = confirmCommand;
                                            uploadRequired = true;
                                        }
                                    }
                                    if (aRole.RoleAllowedCommands.Values.All(aCommand => aCommand.command_key != "command_cancel"))
                                    {
                                        AdKatsCommand cancelCommand = GetCommandByKey("command_cancel");
                                        if (cancelCommand != null)
                                        {
                                            Log.Error("Cancel command cannot be denied for any role. Reassigning.");
                                            aRole.RoleAllowedCommands[cancelCommand.command_key] = cancelCommand;
                                            uploadRequired = true;
                                        }
                                    }
                                    FillConditionalAllowedCommands(aRole);
                                    //Calculate role power level
                                    aRole.role_powerLevel = aRole.RoleAllowedCommands.Values.Count(aCommand => !aCommand.command_playerInteraction) + (2 * aRole.RoleAllowedCommands.Values.Count(aCommand => aCommand.command_playerInteraction));
                                    if (_CommandIDDictionary.Any() && uploadRequired)
                                    {
                                        QueueRoleForUpload(aRole);
                                        displayUpdate = true;
                                    }
                                }
                            }
                        }
                        if (_RoleIDDictionary.Count == 0)
                        {
                            Log.Error("Roles could not be fetched.");
                        }
                        //Fetch role groups
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            const string sql = @"
                            SELECT 
	                            `role_id`,
	                            `group_key`
                            FROM 
	                            `adkats_rolegroups`
                            ORDER BY
                                `role_id`
                            ASC";
                            command.CommandText = sql;
                            using (MySqlDataReader reader = SafeExecuteReader(command))
                            {
                                Dictionary<long, HashSet<string>> rIDgKeyDictionary = new Dictionary<Int64, HashSet<String>>();
                                while (reader.Read())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    int roleID = reader.GetInt32("role_id");
                                    String groupKey = reader.GetString("group_key");
                                    HashSet<String> setGroups;
                                    if (!rIDgKeyDictionary.TryGetValue(roleID, out setGroups))
                                    {
                                        setGroups = new HashSet<String>();
                                        rIDgKeyDictionary.Add(roleID, setGroups);
                                    }
                                    setGroups.Add(groupKey);
                                }
                                foreach (KeyValuePair<long, HashSet<string>> currentRoleElement in rIDgKeyDictionary)
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    AdKatsRole aRole;
                                    Boolean uploadRequired = false;
                                    if (!_RoleIDDictionary.TryGetValue(currentRoleElement.Key, out aRole))
                                    {
                                        Log.Warn("Role for ID " + currentRoleElement.Key + " not found in role dictionary when assigning groups.");
                                        continue;
                                    }
                                    foreach (String groupKey in currentRoleElement.Value)
                                    {
                                        if (!_pluginEnabled)
                                        {
                                            return;
                                        }
                                        AdKatsSpecialGroup aGroup;
                                        if (!_specialPlayerGroupKeyDictionary.TryGetValue(groupKey, out aGroup))
                                        {
                                            Log.Warn("Group for key " + groupKey + " not found in group cache when assigning groups.");
                                            uploadRequired = true;
                                            continue;
                                        }
                                        if (!aRole.RoleSetGroups.ContainsKey(aGroup.group_key))
                                        {
                                            aRole.RoleSetGroups.Add(aGroup.group_key, aGroup);
                                        }
                                    }
                                    KeyValuePair<Int64, HashSet<String>> element = currentRoleElement;
                                    foreach (AdKatsSpecialGroup remGroup in aRole.RoleSetGroups.Values.ToList().Where(remGroup => !element.Value.Contains(remGroup.group_key)))
                                    {
                                        if (!_pluginEnabled)
                                        {
                                            return;
                                        }
                                        Log.Info("Removing group " + remGroup.group_key + " from role " + aRole.role_key);
                                        aRole.RoleAllowedCommands.Remove(remGroup.group_key);
                                        uploadRequired = true;
                                    }
                                    FillConditionalAllowedCommands(aRole);
                                    if (uploadRequired)
                                    {
                                        QueueRoleForUpload(aRole);
                                        displayUpdate = true;
                                    }
                                }
                            }
                        }
                        //Done with users
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching roles from database.", e));
            }
            if (displayUpdate) {
                if (_isTestingAuthorized) {
                    Log.Info("34708");
                }
                UpdateSettingPage();
            }
            Log.Debug(() => "fetchRoles finished!", 6);
        }

        private void FillConditionalAllowedCommands(AdKatsRole aRole)
        {
            //Teamswap Command
            AdKatsCommand teamswapCommand;
            if (_CommandKeyDictionary.TryGetValue("self_teamswap", out teamswapCommand))
            {
                if (!aRole.ConditionalAllowedCommands.ContainsKey(teamswapCommand.command_key))
                {
                    aRole.ConditionalAllowedCommands.Add(teamswapCommand.command_key, new KeyValuePair<Func<AdKats, AdKatsPlayer, Boolean>, AdKatsCommand>(TeamSwapFunc, teamswapCommand));
                }
            }
            else
            {
                Log.Error("Unable to find teamswap command when assigning conditional commands.");
            }
            //Admins Command
            AdKatsCommand adminsCommand;
            if (_CommandKeyDictionary.TryGetValue("self_admins", out adminsCommand))
            {
                if (!aRole.ConditionalAllowedCommands.ContainsKey(adminsCommand.command_key))
                {
                    aRole.ConditionalAllowedCommands.Add(adminsCommand.command_key, new KeyValuePair<Func<AdKats, AdKatsPlayer, Boolean>, AdKatsCommand>(AAPerkFunc, adminsCommand));
                }
            }
            else
            {
                Log.Error("Unable to find teamswap command when assigning conditional commands.");
            }
        }

        private void FetchUserList()
        {
            Log.Debug(() => "fetchUserList starting!", 6);
            if (_databaseConnectionCriticalState)
            {
                return;
            }
            DateTime start = UtcNow();
            try
            {
                if (!_firstUserListComplete)
                {
                    OnlineAdminSayMessage("Fetching user list.");
                    Log.Info("Fetching user list.");
                }
                if (!_firstUserListComplete && !SendQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE ( TABLE_SCHEMA = '" + _mySqlSchemaName + "' AND TABLE_NAME = 'adkats_users' AND COLUMN_NAME = 'user_expiration' )", false))
                {
                    SendNonQuery("Adding user expiration.", "ALTER TABLE `adkats_users` ADD COLUMN `user_expiration` DATETIME NOT NULL AFTER `user_role`", true);
                    SendNonQuery("Adding initial user expiration values.", "UPDATE `adkats_users` SET `user_expiration` = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 20 YEAR)", true);
                }
                if (!_firstUserListComplete && !SendQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE ( TABLE_SCHEMA = '" + _mySqlSchemaName + "' AND TABLE_NAME = 'adkats_users' AND COLUMN_NAME = 'user_notes' )", false))
                {
                    SendNonQuery("Adding user notes.", "ALTER TABLE `adkats_users` ADD COLUMN `user_notes` VARCHAR(1000) NOT NULL DEFAULT 'No Notes' AFTER `user_expiration`", true);
                }
                start = UtcNow();
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
	                        `adkats_users`.`user_id`,
	                        `adkats_users`.`user_name`,
	                        `adkats_users`.`user_email`,
	                        `adkats_users`.`user_phone`,
	                        `adkats_users`.`user_role`,
	                        `adkats_users`.`user_expiration`,
	                        `adkats_users`.`user_notes`
                        FROM 
	                        `adkats_users`";
                        List<long> validIDs = new List<Int64>();
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            lock (_userCache)
                            {
                                while (reader.Read())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    int userID = reader.GetInt32("user_id"); //0
                                    validIDs.Add(userID);
                                    string userName = reader.GetString("user_name"); //1
                                    String userEmail = null;
                                    if (!reader.IsDBNull(2))
                                    {
                                        userEmail = reader.GetString("user_email"); //2
                                    }
                                    String userPhone = null;
                                    if (!reader.IsDBNull(3))
                                    {
                                        userPhone = reader.GetString("user_phone"); //3
                                    }
                                    AdKatsRole userRole;
                                    if (!_RoleIDDictionary.TryGetValue(reader.GetInt32("user_role"), out userRole))
                                    {
                                        Log.Error("Unable to find user role for role ID " + reader.GetInt32("user_role"));
                                        continue;
                                    }
                                    DateTime expirationTime = reader.GetDateTime("user_expiration");
                                    String userNotes = reader.GetString("user_notes");

                                    AdKatsUser aUser;
                                    if (_userCache.TryGetValue(userID, out aUser))
                                    {
                                        if (expirationTime < UtcNow())
                                        {
                                            userRole = _RoleKeyDictionary["guest_default"];
                                            expirationTime = UtcNow().AddYears(20);
                                            QueueUserForUpload(aUser);
                                        }
                                        aUser.user_name = userName;
                                        aUser.user_email = userEmail;
                                        aUser.user_phone = userPhone;
                                        aUser.user_role = userRole;
                                        aUser.user_expiration = expirationTime;
                                        aUser.user_notes = userNotes;
                                    }
                                    else
                                    {
                                        aUser = new AdKatsUser
                                        {
                                            user_id = userID,
                                            user_name = userName,
                                            user_email = userEmail,
                                            user_phone = userPhone,
                                            user_role = userRole,
                                            user_expiration = expirationTime,
                                            user_notes = userNotes
                                        };
                                        if (expirationTime < UtcNow())
                                        {
                                            userRole = _RoleKeyDictionary["guest_default"];
                                            expirationTime = UtcNow().AddYears(20);
                                            QueueUserForUpload(aUser);
                                        }
                                        _userCache.Add(aUser.user_id, aUser);
                                    }
                                }
                                foreach (AdKatsUser remUser in _userCache.Values.Where(usr => validIDs.All(id => id != usr.user_id)).ToList())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    _userCache.Remove(remUser.user_id);
                                    Log.Success("User " + remUser.user_name + " removed.");
                                }
                            }
                        }
                    }
                    Log.Debug(() => "User fetch (Users) took " + (UtcNow() - start).TotalMilliseconds + "ms.", 4);
                    start = UtcNow();
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        if (_serverInfo.GameID > 0)
                        {
                            command.CommandText = @"
                            SELECT 
	                            `adkats_users`.`user_id`,
	                            `adkats_usersoldiers`.`player_id`,
	                            `tbl_playerdata`.`GameID` AS `game_id`,
	                            `tbl_playerdata`.`ClanTag` AS `clan_tag`,
	                            `tbl_playerdata`.`SoldierName` AS `player_name`,
	                            `tbl_playerdata`.`EAGUID` AS `player_guid`,
	                            `tbl_playerdata`.`IP_Address` AS `player_ip`
                            FROM 
	                            `adkats_users`
                            INNER JOIN
	                            `adkats_usersoldiers`
                            ON 
	                            `adkats_users`.`user_id` = `adkats_usersoldiers`.`user_id`
                            INNER JOIN
	                            `tbl_playerdata`
                            ON
	                            `adkats_usersoldiers`.`player_id` = `tbl_playerdata`.`PlayerID`
                            ORDER BY 
                                `user_id`
                            ASC";
                        }
                        else
                        {
                            command.CommandText = @"
                            SELECT 
	                            `adkats_users`.`user_id`,
	                            `adkats_usersoldiers`.`player_id`,
	                            `tbl_playerdata`.`ClanTag` AS `clan_tag`,
	                            `tbl_playerdata`.`SoldierName` AS `player_name`,
	                            `tbl_playerdata`.`EAGUID` AS `player_guid`,
	                            `tbl_playerdata`.`IP_Address` AS `player_ip`
                            FROM 
	                            `adkats_users`
                            INNER JOIN
	                            `adkats_usersoldiers`
                            ON 
	                            `adkats_users`.`user_id` = `adkats_usersoldiers`.`user_id`
                            INNER JOIN
	                            `tbl_playerdata`
                            ON
	                            `adkats_usersoldiers`.`player_id` = `tbl_playerdata`.`PlayerID`
                            ORDER BY 
                                `user_id`
                            ASC";
                        }
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            lock (_userCache)
                            {
                                foreach (AdKatsPlayer aPlayer in _userCache.Values.SelectMany(aUser => aUser.soldierDictionary.Values))
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    aPlayer.update_playerUpdated = false;
                                }
                                while (reader.Read())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    int userID = reader.GetInt32("user_id"); //0
                                    int playerID = reader.GetInt32("player_id"); //1
                                    long gameID = (_serverInfo.GameID > 0) ? (reader.GetInt32("game_id")) : (_serverInfo.GameID); //2
                                    String clanTag = null;
                                    if (!reader.IsDBNull(3))
                                    {
                                        clanTag = reader.GetString("clan_tag"); //3
                                    }
                                    String playerName = null;
                                    if (!reader.IsDBNull(4))
                                    {
                                        playerName = reader.GetString("player_name"); //4
                                    }
                                    String playerGUID = null;
                                    if (!reader.IsDBNull(5))
                                    {
                                        playerGUID = reader.GetString("player_guid"); //5
                                    }
                                    String playerIP = null;
                                    if (!reader.IsDBNull(6))
                                    {
                                        playerIP = reader.GetString("player_ip"); //6
                                    }

                                    AdKatsUser aUser;
                                    if (_userCache.TryGetValue(userID, out aUser))
                                    {
                                        AdKatsPlayer aPlayer;
                                        if (aUser.soldierDictionary.TryGetValue(playerID, out aPlayer))
                                        {
                                            aPlayer.game_id = gameID;
                                            aPlayer.player_clanTag = clanTag;
                                            aPlayer.player_name = playerName;
                                            aPlayer.player_guid = playerGUID;
                                            aPlayer.SetIP(playerIP);
                                            aPlayer.LastUsage = UtcNow();
                                        }
                                        else {
                                            aPlayer = FetchPlayer(true, true, false, (int?)gameID, playerID, playerName, playerGUID, playerIP);
                                            aUser.soldierDictionary.Add(playerID, aPlayer);
                                        }
                                        aPlayer.player_role = aUser.user_role;

                                        aPlayer.update_playerUpdated = true;
                                    }
                                    else
                                    {
                                        Log.Error("Unable to add soldier " + playerID + " to user " + userID + " when fetching user list. User not found.");
                                    }
                                }
                                foreach (AdKatsUser aUser in _userCache.Values)
                                {
                                    foreach (AdKatsPlayer aPlayer in aUser.soldierDictionary.Values.ToList().Where(dPlayer => !dPlayer.update_playerUpdated))
                                    {
                                        aUser.soldierDictionary.Remove(aPlayer.player_id);
                                    }
                                }
                            }
                        }
                    }
                    Log.Debug(() => "User fetch (User Soldiers) took " + (UtcNow() - start).TotalMilliseconds + "ms.", 4);
                    start = UtcNow();
                    lock (_baseSpecialPlayerCache)
                    {
                        SendNonQuery("Deleting expired special players", "DELETE FROM `adkats_specialplayers` WHERE `player_expiration` < UTC_TIMESTAMP()", false);
                        using (MySqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = @"
                            SELECT
                                `specialplayer_id`,
	                            `player_group`,
	                            `player_id`,
	                            `player_game`,
	                            `player_server`,
	                            `player_identifier`,
	                            `player_effective`,
	                            `player_expiration`
                            FROM 
	                            `adkats_specialplayers`
                            WHERE
	                            `player_effective` <= UTC_TIMESTAMP()
                            AND
	                            `player_expiration` > UTC_TIMESTAMP()
                            AND
                            (
	                            `player_game` IS NULL
	                            OR
	                            `player_game` = @playerGame
                            )
                            AND
                            (
	                            `player_server` IS NULL
	                            OR
	                            `player_server` = @playerServer
                            )
                            ORDER BY 
	                            `player_group`
                            DESC";
                            command.Parameters.AddWithValue("@playerGame", _serverInfo.GameID);
                            command.Parameters.AddWithValue("@playerServer", _serverInfo.ServerID);
                            using (MySqlDataReader reader = SafeExecuteReader(command))
                            {
                                List<Int64> validIDs = new List<Int64>();
                                while (reader.Read())
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    AdKatsSpecialPlayer asPlayer;
                                    Int64 specialPlayerID = reader.GetInt64("specialplayer_id"); //0
                                    //ID is valid
                                    validIDs.Add(specialPlayerID);
                                    //Check for player already existing
                                    if (_baseSpecialPlayerCache.TryGetValue(specialPlayerID, out asPlayer))
                                    {
                                        //Special player already cached, do no special processing
                                    }
                                    else
                                    {
                                        //Get Values
                                        String playerGroup = reader.GetString("player_group"); //1
                                        if (!_specialPlayerGroupKeyDictionary.ContainsKey(playerGroup))
                                        {
                                            Log.Error("player_group entry '" + playerGroup + "' for specialplayer_id " + specialPlayerID + " is invalid.");
                                            continue;
                                        }
                                        Int32 playerID = 0;
                                        if (!reader.IsDBNull(2))
                                        {
                                            playerID = reader.GetInt32("player_id"); //2
                                        }
                                        Int32 playerGame = 0;
                                        if (!reader.IsDBNull(3))
                                        {
                                            playerGame = reader.GetInt32("player_game"); //3
                                        }
                                        Int32 playerServer = 0;
                                        if (!reader.IsDBNull(4))
                                        {
                                            playerServer = reader.GetInt32("player_server"); //4
                                        }
                                        String playerIdentifier = null;
                                        if (!reader.IsDBNull(5))
                                        {
                                            playerIdentifier = reader.GetString("player_identifier"); //5
                                        }
                                        DateTime playerEffective = reader.GetDateTime("player_effective"); //6
                                        DateTime playerExpiration = reader.GetDateTime("player_expiration"); //7

                                        //Build new Special Player Object
                                        asPlayer = new AdKatsSpecialPlayer();
                                        asPlayer.specialplayer_id = specialPlayerID;
                                        asPlayer.player_group = _specialPlayerGroupKeyDictionary[playerGroup];
                                        if (playerID > 0)
                                        {
                                            asPlayer.player_object = FetchPlayer(false, true, false, null, playerID, null, null, null);
                                        }
                                        if (playerGame > 0)
                                        {
                                            asPlayer.player_game = playerGame;
                                        }
                                        if (playerServer > 0)
                                        {
                                            asPlayer.player_server = playerServer;
                                        }
                                        asPlayer.player_identifier = playerIdentifier;
                                        asPlayer.player_effective = playerEffective;
                                        asPlayer.player_expiration = playerExpiration;

                                        //Assign to cache
                                        _baseSpecialPlayerCache[specialPlayerID] = asPlayer;
                                    }
                                }
                                List<Int64> removeIDs = new List<Int64>();
                                foreach (long asPlayerID in _baseSpecialPlayerCache.Keys)
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    if (!validIDs.Contains(asPlayerID))
                                    {
                                        removeIDs.Add(asPlayerID);
                                    }
                                }
                                foreach (long asPlayerID in removeIDs)
                                {
                                    if (!_pluginEnabled)
                                    {
                                        return;
                                    }
                                    Log.Info("Removing special player " + asPlayerID + " from cache.");
                                    _baseSpecialPlayerCache.Remove(asPlayerID);
                                }
                            }
                        }

                        //Fetch populator players
                        if (_PopulatorMonitor)
                        {
                            UpdatePopulatorPlayers();
                        }

                        //Fetch top players
                        if (_UseTopPlayerMonitor)
                        {
                            UpdateTopPlayers();
                        }

                        //Update the verbose special player cache
                        List<String> validVerboseSpecialPlayers = new List<String>();
                        foreach (AdKatsSpecialGroup asGroup in _specialPlayerGroupIDDictionary.Values.OrderBy(aGroup => aGroup.group_name))
                        {
                            List<AdKatsSpecialPlayer> tempASPlayers = new List<AdKatsSpecialPlayer>();
                            //Pull matching players from the special player cache
                            foreach (AdKatsSpecialPlayer asPlayer in _baseSpecialPlayerCache.Values.Where(asPlayer => asPlayer.player_group.group_key == asGroup.group_key).ToList())
                            {
                                if (asPlayer.player_object != null)
                                {
                                    //A player object exists, check for duplicates using player ID
                                    if (!tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == asPlayer.player_object.player_id))
                                    {
                                        tempASPlayers.Add(asPlayer);
                                    }
                                }
                                else if (!tempASPlayers.Any(asp => asp.player_identifier == asPlayer.player_identifier))
                                {
                                    tempASPlayers.Add(asPlayer);
                                }
                            }
                            //Pull matching players from the user cache
                            foreach (AdKatsUser aUser in _userCache.Values.Where(sUser => sUser.user_role.RoleSetGroups.ContainsKey(asGroup.group_key)).ToList())
                            {
                                foreach (AdKatsPlayer aPlayer in aUser.soldierDictionary.Values.Where(sPlayer => sPlayer.game_id == _serverInfo.GameID).ToList())
                                {
                                    if (!tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id))
                                    {
                                        tempASPlayers.Add(new AdKatsSpecialPlayer()
                                        {
                                            player_game = (int)_serverInfo.GameID,
                                            player_server = (int)_serverInfo.ServerID,
                                            player_group = asGroup,
                                            player_identifier = aPlayer.player_name,
                                            player_object = aPlayer,
                                            player_effective = UtcNow(),
                                            player_expiration = aUser.user_expiration
                                        });
                                    }
                                }
                            }
                            //Pull matching players using specific group settings
                            switch (asGroup.group_key)
                            {
                                case "slot_reserved":
                                    //Pull players from user list
                                    if (_userCache.Count > 0 && _FeedServerReservedSlots && _FeedServerReservedSlots_Admins)
                                    {
                                        foreach (AdKatsPlayer aPlayer in FetchAdminSoldiers().Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id)))
                                        {
                                            tempASPlayers.Add(new AdKatsSpecialPlayer()
                                            {
                                                player_game = (int)_serverInfo.GameID,
                                                player_server = (int)_serverInfo.ServerID,
                                                player_group = asGroup,
                                                player_identifier = aPlayer.player_name,
                                                player_object = aPlayer,
                                                player_effective = UtcNow(),
                                                player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                            });
                                        }
                                    }
                                    //Pull players from automatic VIP kick protection
                                    if (_userCache.Count > 0 && _FeedServerReservedSlots && _FeedServerReservedSlots_Admins_Online)
                                    {
                                        foreach (AdKatsPlayer aPlayer in FetchOnlineAdminSoldiers().Where(aPlayer => 
                                            aPlayer.game_id == _serverInfo.GameID && 
                                            !tempASPlayers.Any(asp => 
                                                asp.player_object != null && 
                                                asp.player_object.player_id == aPlayer.player_id)))
                                        {
                                            tempASPlayers.Add(new AdKatsSpecialPlayer()
                                            {
                                                player_game = (int)_serverInfo.GameID,
                                                player_server = (int)_serverInfo.ServerID,
                                                player_group = asGroup,
                                                player_identifier = aPlayer.player_name,
                                                player_object = aPlayer,
                                                player_effective = UtcNow(),
                                                player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                            });
                                        }
                                    }
                                    //Pull players from perk list
                                    if (_PopulatorMonitor && _PopulatorPerksEnable && _PopulatorPerksReservedSlot)
                                    {
                                        lock (_populatorPlayers)
                                        {
                                            foreach (AdKatsPlayer aPlayer in _populatorPlayers.Values.Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id)))
                                            {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer()
                                                {
                                                    player_game = (int)_serverInfo.GameID,
                                                    player_server = (int)_serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    if (_TeamspeakPlayerMonitorEnable && _TeamspeakPlayerPerksEnable && _TeamspeakPlayerPerksVIPKickWhitelist)
                                    {
                                        lock (_tsPlayers)
                                        {
                                            foreach (AdKatsPlayer aPlayer in _tsPlayers.Values.Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id)))
                                            {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer()
                                                {
                                                    player_game = (int)_serverInfo.GameID,
                                                    player_server = (int)_serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    break;
                                case "slot_spectator":
                                    //Pull players from user list
                                    if (_userCache.Count > 0 && _FeedServerSpectatorList && _FeedServerSpectatorList_Admins)
                                    {
                                        foreach (AdKatsPlayer aPlayer in FetchAdminSoldiers().Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id)))
                                        {
                                            tempASPlayers.Add(new AdKatsSpecialPlayer()
                                            {
                                                player_game = (int)_serverInfo.GameID,
                                                player_server = (int)_serverInfo.ServerID,
                                                player_group = asGroup,
                                                player_identifier = aPlayer.player_name,
                                                player_object = aPlayer,
                                                player_effective = UtcNow(),
                                                player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                            });
                                        }
                                    }
                                    break;
                                case "whitelist_multibalancer":
                                    //Pull players from user list
                                    if (_userCache.Count > 0 && _FeedMultiBalancerWhitelist && _FeedMultiBalancerWhitelist_Admins)
                                    {
                                        foreach (AdKatsPlayer aPlayer in FetchAdminSoldiers().Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id)))
                                        {
                                            tempASPlayers.Add(new AdKatsSpecialPlayer()
                                            {
                                                player_game = (int)_serverInfo.GameID,
                                                player_server = (int)_serverInfo.ServerID,
                                                player_group = asGroup,
                                                player_identifier = aPlayer.player_name,
                                                player_object = aPlayer,
                                                player_effective = UtcNow(),
                                                player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                            });
                                        }
                                    }
                                    //Pull players from perk list
                                    if (_PopulatorMonitor && _PopulatorPerksEnable && _PopulatorPerksBalanceWhitelist)
                                    {
                                        lock (_populatorPlayers)
                                        {
                                            foreach (AdKatsPlayer aPlayer in _populatorPlayers.Values.Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id)))
                                            {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer()
                                                {
                                                    player_game = (int)_serverInfo.GameID,
                                                    player_server = (int)_serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    if (_TeamspeakPlayerMonitorEnable && _TeamspeakPlayerPerksEnable && _TeamspeakPlayerPerksBalanceWhitelist)
                                    {
                                        lock (_tsPlayers)
                                        {
                                            foreach (AdKatsPlayer aPlayer in _tsPlayers.Values.Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id)))
                                            {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer()
                                                {
                                                    player_game = (int)_serverInfo.GameID,
                                                    player_server = (int)_serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    if (_UseTopPlayerMonitor) {
                                        lock (_topPlayers) {
                                            foreach (AdKatsPlayer aPlayer in _topPlayers.Values.Where(aPlayer => 
                                                    aPlayer.game_id == _serverInfo.GameID && 
                                                    !tempASPlayers.Any(asp =>
                                                            asp.player_object != null && 
                                                            asp.player_object.player_id == aPlayer.player_id))) {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer() {
                                                    player_game = (int) _serverInfo.GameID,
                                                    player_server = (int) _serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    break;
                                case "whitelist_teamkill":
                                    //Pull players from user list
                                    if (_userCache.Count > 0 && _FeedTeamKillTrackerWhitelist && _FeedTeamKillTrackerWhitelist_Admins) {
                                        foreach (AdKatsPlayer aPlayer in FetchAdminSoldiers().Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id))) {
                                            tempASPlayers.Add(new AdKatsSpecialPlayer() {
                                                player_game = (int) _serverInfo.GameID,
                                                player_server = (int) _serverInfo.ServerID,
                                                player_group = asGroup,
                                                player_identifier = aPlayer.player_name,
                                                player_object = aPlayer,
                                                player_effective = UtcNow(),
                                                player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                            });
                                        }
                                    }
                                    //Pull players from perk list
                                    if (_PopulatorMonitor && _PopulatorPerksEnable && _PopulatorPerksTeamKillTrackerWhitelist) {
                                        lock (_populatorPlayers) {
                                            foreach (AdKatsPlayer aPlayer in _populatorPlayers.Values.Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id))) {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer() {
                                                    player_game = (int) _serverInfo.GameID,
                                                    player_server = (int) _serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    if (_TeamspeakPlayerMonitorEnable && _TeamspeakPlayerPerksEnable && _TeamspeakPlayerPerksTeamKillTrackerWhitelist) {
                                        lock (_tsPlayers) {
                                            foreach (AdKatsPlayer aPlayer in _tsPlayers.Values.Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id))) {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer() {
                                                    player_game = (int) _serverInfo.GameID,
                                                    player_server = (int) _serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    break;
                                case "whitelist_ping":
                                    //Pull players from perk list
                                    if (_PopulatorMonitor && _PopulatorPerksEnable && _PopulatorPerksPingWhitelist) {
                                        lock (_populatorPlayers) {
                                            foreach (AdKatsPlayer aPlayer in _populatorPlayers.Values.Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id))) {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer() {
                                                    player_game = (int) _serverInfo.GameID,
                                                    player_server = (int) _serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    if (_TeamspeakPlayerMonitorEnable && _TeamspeakPlayerPerksEnable && _TeamspeakPlayerPerksPingWhitelist) {
                                        lock (_tsPlayers) {
                                            foreach (AdKatsPlayer aPlayer in _tsPlayers.Values.Where(aPlayer => aPlayer.game_id == _serverInfo.GameID && !tempASPlayers.Any(asp => asp.player_object != null && asp.player_object.player_id == aPlayer.player_id))) {
                                                tempASPlayers.Add(new AdKatsSpecialPlayer() {
                                                    player_game = (int) _serverInfo.GameID,
                                                    player_server = (int) _serverInfo.ServerID,
                                                    player_group = asGroup,
                                                    player_identifier = aPlayer.player_name,
                                                    player_object = aPlayer,
                                                    player_effective = UtcNow(),
                                                    player_expiration = UtcNow().Add(TimeSpan.FromDays(7300))
                                                });
                                            }
                                        }
                                    }
                                    break;
                            }
                            foreach (AdKatsSpecialPlayer asPlayer in tempASPlayers)
                            {
                                String playerIdentifier = null;
                                if (asPlayer.player_object != null && !String.IsNullOrEmpty(asPlayer.player_object.player_guid))
                                {
                                    playerIdentifier = asPlayer.player_object.player_guid;
                                }
                                else
                                {
                                    playerIdentifier = asPlayer.player_identifier;
                                }
                                if (String.IsNullOrEmpty(playerIdentifier))
                                {
                                    continue;
                                }
                                //Key is a concatination of group and identifier
                                String key = asGroup.group_key + playerIdentifier;
                                if (!validVerboseSpecialPlayers.Contains(key))
                                {
                                    validVerboseSpecialPlayers.Add(key);
                                }
                                _verboseSpecialPlayerCache[key] = asPlayer;
                            }
                        }
                        List<String> removeVerboseSpecialPlayers = new List<String>();
                        foreach (string verbPlayerKey in _verboseSpecialPlayerCache.Keys)
                        {
                            if (!_pluginEnabled)
                            {
                                return;
                            }
                            if (!validVerboseSpecialPlayers.Contains(verbPlayerKey))
                            {
                                removeVerboseSpecialPlayers.Add(verbPlayerKey);
                            }
                        }
                        foreach (string removeKey in removeVerboseSpecialPlayers)
                        {
                            if (!_pluginEnabled)
                            {
                                return;
                            }
                            _verboseSpecialPlayerCache.Remove(removeKey);
                        }
                        Log.Debug(() => "User fetch (Special Player Fetch) took " + (UtcNow() - start).TotalMilliseconds + "ms.", 4);
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching user list.", e));
            }

            _PlayerRoleRefetch = true;
            _PlayerProcessingWaitHandle.Set();

            start = UtcNow();
            UpdateMULTIBalancerWhitelist();
            UpdateMULTIBalancerDisperseList();
            UpdateTeamKillTrackerWhitelist();
            ExecuteCommand("procon.protected.send", "reservedSlotsList.list");
            Thread.Sleep(50);
            UpdateReservedSlots();
            ExecuteCommand("procon.protected.send", "spectatorList.list");
            Thread.Sleep(50);
            UpdateSpectatorList();
            Log.Debug(() => "User fetch (Orchestration) took " + (UtcNow() - start).TotalMilliseconds + "ms.", 4);
            start = UtcNow();
            _lastUserFetch = UtcNow();
            if (!_firstUserListComplete)
            {
                _firstUserListComplete = true;
                OnlineAdminSayMessage("User fetch complete [" + _userCache.Count + " users, " + _baseSpecialPlayerCache.Count + " Special Players, " + _FetchedPlayers.Count + " Fetched Players]. Fetching player list.");
                Log.Success("User fetch complete [" + _userCache.Count + " users, " + _baseSpecialPlayerCache.Count + " Special Players, " + _FetchedPlayers.Count + " Fetched Players].");
                if (!_userCache.Any())
                {
                    Log.Warn("No users have been added. Add a new user with 'Add User'.");
                }
                Log.Info("Fetching player list.");
                //Call player listing immediately
                ExecuteCommand("procon.protected.send", "admin.listPlayers", "all");
            }
            else
            {
                if (_userCache.Count > 0)
                {
                    Log.Debug(() => "User List Fetched from Database. [" + _userCache.Count + " users, " + _baseSpecialPlayerCache.Count + " Special Players, " + _FetchedPlayers.Count + " Fetched Players]", 1);
                }
                else
                {
                    Log.Warn("No users have been added. Add a new user with 'Add User'.");
                }
            }
            UpdateSettingPage();
            Log.Debug(() => "fetchUserList finished!", 6);
        }

        private Boolean AssignPlayerRole(AdKatsPlayer aPlayer)
        {
            AdKatsUser matchingUser = _userCache.Values.FirstOrDefault(aUser => aUser.soldierDictionary.Values.Any(uPlayer => uPlayer.player_id == aPlayer.player_id || uPlayer.player_guid == aPlayer.player_guid));
            AdKatsRole aRole = null;
            Boolean authorized = false;
            if (matchingUser != null)
            {
                authorized = true;
                aRole = matchingUser.user_role;
            }
            else
            {
                aRole = _RoleKeyDictionary["guest_default"];
            }
            //Debug Block
            if (aPlayer.player_role == null)
            {
                if (authorized)
                {
                    Log.Debug(() => "Player " + aPlayer.player_name + " has been assigned authorized role " + aRole.role_name + ".", 4);
                }
                else
                {
                    Log.Debug(() => "Player " + aPlayer.player_name + " has been assigned the guest role.", 4);
                }
            }
            else
            {
                if (aPlayer.player_role.role_key != aRole.role_key)
                {
                    if (authorized)
                    {
                        Log.Debug(() => "Role for authorized player " + aPlayer.player_name + " has been CHANGED to " + aRole.role_name + ".", 4);
                        PlayerSayMessage(aPlayer.player_name, "You have been assigned the authorized role " + aRole.role_name + ".");
                    }
                    else
                    {
                        Log.Debug(() => "Player " + aPlayer.player_name + " has been assigned the guest role.", 4);
                        PlayerSayMessage(aPlayer.player_name, "You have been assigned the guest role.");
                    }
                }
            }
            aPlayer.player_role = aRole;
            AssignPlayerAdminAssistant(aPlayer);
            if (aPlayer.player_aa)
            {
                Log.Debug(() => aPlayer.player_name + " IS an Admin Assistant.", 3);
            }
            return authorized;
        }

        private void AssignPlayerAdminAssistant(AdKatsPlayer aPlayer)
        {
            Log.Debug(() => "PlayerIsAdminAssistant starting!", 7);
            if (!_EnableAdminAssistants)
            {
                aPlayer.player_aa = false;
                return;
            }
            if (aPlayer.player_aa_fetched)
            {
                return;
            }
            if (PlayerIsAdmin(aPlayer))
            {
                aPlayer.player_aa_fetched = true;
                aPlayer.player_aa = false;
                return;
            }
            List<AdKatsSpecialPlayer> matchingPlayers = GetMatchingVerboseASPlayersOfGroup("whitelist_adminassistant", aPlayer);
            if (matchingPlayers.Count > 0)
            {
                aPlayer.player_aa_fetched = true;
                aPlayer.player_aa = true;
                return;
            }
            if (_databaseConnectionCriticalState)
            {
                aPlayer.player_aa = false;
                return;
            }
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT
	                        'isAdminAssistant'
                        FROM 
	                        `adkats_records_main`
                        WHERE (
	                        SELECT count(`command_action`) 
	                        FROM `adkats_records_main` 
	                        WHERE `command_action` = " + GetCommandByKey("player_report_confirm").command_id + @"
	                        AND `source_id` = " + aPlayer.player_id + @" 
	                        AND (`adkats_records_main`.`record_time` BETWEEN date_sub(UTC_TIMESTAMP(),INTERVAL 30 DAY) AND UTC_TIMESTAMP())
                        ) >= " + _MinimumRequiredMonthlyReports + @" LIMIT 1
                        UNION
                        SELECT
	                        'isGrandfatheredAdminAssistant'
                        FROM 
	                        `adkats_records_main`
                        WHERE (
	                        SELECT count(`command_action`) 
	                        FROM `adkats_records_main` 
	                        WHERE `command_action` = " + GetCommandByKey("player_report_confirm").command_id + @" 
	                        AND `source_id` = " + aPlayer.player_id + @"
                        ) >= 75";
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                aPlayer.player_aa = true;
                            }
                            aPlayer.player_aa_fetched = true;
                            return;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while checking if player is an admin assistant.", e));
            }
            Log.Debug(() => "PlayerIsAdminAssistant finished!", 7);
        }


        private Boolean FetchDBServerInfo()
        {
            Log.Debug(() => "FetchDBServerInfo starting!", 6);

            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return false;
            }

            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            `ServerID` as `server_id`,
                            `ServerGroup` as `server_group`,
                            `ServerName` as `server_name`
                        FROM 
                            `tbl_server` 
                        WHERE 
                            IP_Address = @IP_Address";
                        command.Parameters.AddWithValue("@IP_Address", _serverInfo.ServerIP);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                _serverInfo.ServerID = reader.GetInt64("server_id");
                                _serverInfo.ServerGroup = reader.GetInt64("server_group");
                                _serverInfo.ServerName = reader.GetString("server_name");
                                _settingImportID = _serverInfo.ServerID;
                                Log.Debug(() => "Server ID fetched: " + _serverInfo.ServerID, 1);
                                return true;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching server ID from database.", e));
            }

            Log.Debug(() => "FetchDBServerInfo finished!", 6);
            return false;
        }

        private Int64 FetchServerGroup(Int64 serverID)
        {
            Log.Debug(() => "fetchServerGroup starting!", 6);

            //Make sure database connection active
            if (_databaseConnectionCriticalState)
            {
                return -1;
            }

            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"
                        SELECT 
                            `ServerGroup` as `server_group`
                        FROM 
                            `tbl_server` 
                        WHERE 
                            `ServerID` = @ServerID";
                        command.Parameters.AddWithValue("@ServerID", serverID);
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                return reader.GetInt64("server_group");
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching server group from database for server " + serverID + ".", e));
            }

            Log.Debug(() => "fetchServerGroup finished!", 6);
            return -1;
        }

        private Boolean DebugDatabaseConnectionActive()
        {
            Log.Debug(() => "DebugDatabaseConnectionActive starting!", 8);

            Boolean active = true;

            DateTime startTime = UtcNow();
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"SELECT UTC_TIMESTAMP() AS `current_time`";
                        Stopwatch watch = new Stopwatch();
                        watch.Start();
                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            watch.Stop();
                            if (reader.Read() && watch.Elapsed.TotalSeconds < (50 * _DatabaseReadAverageDuration))
                            {
                                active = true;
                            }
                            else
                            {
                                active = false;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                active = false;
            }
            if ((UtcNow() - startTime).TotalSeconds > 10)
            {
                //If the connection took longer than 10 seconds also say the database is disconnected
                active = false;
            }
            Log.Debug(() => "DebugDatabaseConnectionActive finished!", 8);
            return active;
        }

        public Boolean GetGlobalUTCTimestamp(out DateTime globalUTCTime)
        {
            globalUTCTime = UtcNow();
            using (WebClient client = new WebClient())
            {
                try
                {
                    String response = ClientDownloadTimer(client, "http://www.timeanddate.com/clocks/onlyforusebyconfiguration2.php");
                    String[] elements = response.Split(' ');
                    Double epochSeconds = 0;
                    if (Double.TryParse(elements[0], out epochSeconds))
                    {
                        globalUTCTime = DateTimeFromEpochSeconds(epochSeconds);
                        return true;
                    }
                }
                catch (Exception)
                {
                    return false;
                }
            }
            return false;
        }

        public Boolean TestGlobalTiming(Boolean failOnFetchError, Boolean verbose, out TimeSpan diffGlobalUTC)
        {
            DateTime globalUTC;
            diffGlobalUTC = TimeSpan.Zero;
            if (GetGlobalUTCTimestamp(out globalUTC))
            {
                DateTime curUTC = UtcNow();
                diffGlobalUTC = globalUTC - curUTC;
                if (verbose)
                {
                    if (diffGlobalUTC.Duration().TotalSeconds > 300)
                    {
                        Log.Warn("Your PRoCon layer has a " + FormatTimeString(diffGlobalUTC.Duration(), 3) + " UTC timestamp mismatch vs Global Time. UTC-Global:(" + globalUTC.ToShortDateString() + " " + globalUTC.ToLongTimeString() + ") UTC-Procon:(" + curUTC.ToShortDateString() + " " + curUTC.ToLongTimeString() + ")");
                        _globalTimingChecked = true;
                        return false;
                    }
                    if (diffGlobalUTC.Duration().TotalSeconds > 15)
                    {
                        Log.Warn("Global timing confirmed, but there is a " + FormatTimeString(diffGlobalUTC.Duration(), 3) + " UTC timestamp mismatch between your layer and global time.");
                    }
                    else
                    {
                        Log.Success("Global timing confirmed.");
                    }
                }
                _globalTimingChecked = true;
                return true;
            }
            if (verbose)
            {
                Log.Error("Unable to confirm global timing. Global UTC Timestamp could not be fetched.");
            }
            _globalTimingChecked = true;
            return !failOnFetchError;
        }

        private Boolean GetDatabaseUTCTimestamp(out DateTime dbUTC)
        {
            dbUTC = UtcNow();
            try
            {
                using (MySqlConnection connection = GetDatabaseConnection())
                {
                    using (MySqlCommand command = connection.CreateCommand())
                    {
                        command.CommandText = @"SELECT UTC_TIMESTAMP() AS `current_time`";
                        using (MySqlDataReader reader = SafeExecuteReader(command))
                        {
                            if (reader.Read())
                            {
                                dbUTC = reader.GetDateTime("current_time");
                                return true;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
            }
            return false;
        }

        public Boolean TestDBTiming(Boolean verbose, out TimeSpan diffDBUTC)
        {
            //Confirm database UTC timestamp matches procon UTC timestamp
            diffDBUTC = TimeSpan.Zero;
            DateTime dbUTC;
            if (GetDatabaseUTCTimestamp(out dbUTC))
            {
                DateTime curUTC = UtcNow();
                diffDBUTC = dbUTC - curUTC;
                if (verbose)
                {
                    if (diffDBUTC.Duration().TotalSeconds > 300)
                    {
                        Log.Warn("Your PRoCon layer and database have a " + FormatTimeString(diffDBUTC.Duration(), 3) + " UTC timestamp mismatch. UTC-Database:(" + dbUTC.ToShortDateString() + " " + dbUTC.ToLongTimeString() + ") UTC-Procon:(" + curUTC.ToShortDateString() + " " + curUTC.ToLongTimeString() + ")");
                    }
                    else if (diffDBUTC.Duration().TotalSeconds > 15)
                    {
                        Log.Warn("Database timing confirmed, but there is a " + FormatTimeString(diffDBUTC.Duration(), 3) + " UTC timestamp mismatch between your layer and database.");
                    }
                    else
                    {
                        Log.Success("Database timing confirmed.");
                    }
                }
                _dbTimingChecked = true;
                return true;
            }
            if (verbose)
            {
                Log.Error("Unable to confirm timing controls. Database UTC Timestamp could not be fetched.");
            }
            _dbTimingChecked = true;
            return false;
        }

        private void UpdateMULTIBalancerWhitelist()
        {
            try
            {
                if (_FeedMultiBalancerWhitelist)
                {
                    List<string> autobalanceWhitelistedPlayers = new List<String>();
                    //Pull players from special player cache
                    List<AdKatsSpecialPlayer> whitelistedPlayers = GetVerboseASPlayersOfGroup("whitelist_multibalancer");
                    if (whitelistedPlayers.Any())
                    {
                        foreach (AdKatsSpecialPlayer asPlayer in whitelistedPlayers)
                        {
                            String playerIdentifier = null;
                            if (asPlayer.player_object != null && !String.IsNullOrEmpty(asPlayer.player_object.player_guid))
                            {
                                playerIdentifier = asPlayer.player_object.player_guid;
                            }
                            else
                            {
                                playerIdentifier = asPlayer.player_identifier;
                            }
                            //Skip if no valid info found
                            if (String.IsNullOrEmpty(playerIdentifier))
                            {
                                Log.Error("Player under whitelist_multibalancer was not valid. Unable to add to MULTIBalancer whitelist.");
                                continue;
                            }
                            if (!autobalanceWhitelistedPlayers.Contains(playerIdentifier))
                            {
                                autobalanceWhitelistedPlayers.Add(playerIdentifier);
                            }
                        }
                    }
                    SetExternalPluginSetting("MULTIbalancer", "1 - Settings|Whitelist", CPluginVariable.EncodeStringArray(autobalanceWhitelistedPlayers.ToArray()));
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating MULTIBalancer whitelist.", e));
            }
        }

        private void UpdateMULTIBalancerDisperseList()
        {
            try
            {
                if (_FeedMultiBalancerDisperseList)
                {
                    List<string> evenDispersionList = new List<String>();
                    //Pull players from special player cache
                    List<AdKatsSpecialPlayer> evenDispersedPlayers = GetVerboseASPlayersOfGroup("blacklist_dispersion");
                    if (evenDispersedPlayers.Any())
                    {
                        foreach (AdKatsSpecialPlayer asPlayer in evenDispersedPlayers)
                        {
                            String playerIdentifier = null;
                            if (asPlayer.player_object != null && !String.IsNullOrEmpty(asPlayer.player_object.player_guid))
                            {
                                playerIdentifier = asPlayer.player_object.player_guid;
                            }
                            else
                            {
                                playerIdentifier = asPlayer.player_identifier;
                            }
                            //Skip if no valid info found
                            if (String.IsNullOrEmpty(playerIdentifier))
                            {
                                Log.Error("Player under blacklist_dispersion was not valid. Unable to add to MULTIBalancer even dispersion list.");
                                continue;
                            }
                            if (!evenDispersionList.Contains(playerIdentifier))
                            {
                                evenDispersionList.Add(playerIdentifier);
                            }
                        }
                    }
                    SetExternalPluginSetting("MULTIbalancer", "1 - Settings|Disperse Evenly List", CPluginVariable.EncodeStringArray(evenDispersionList.ToArray()));
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating MULTIBalancer even dispersion list.", e));
            }
        }

        private void UpdateTeamKillTrackerWhitelist()
        {
            try
            {
                if (_FeedTeamKillTrackerWhitelist)
                {
                    List<string> teamKillTrackerWhitelistedPlayers = new List<String>();
                    //Pull players from special player cache
                    List<AdKatsSpecialPlayer> whitelistedPlayers = GetVerboseASPlayersOfGroup("whitelist_teamkill");
                    if (whitelistedPlayers.Any())
                    {
                        foreach (AdKatsSpecialPlayer asPlayer in whitelistedPlayers)
                        {
                            String playerIdentifier = null;
                            if (asPlayer.player_object != null && !String.IsNullOrEmpty(asPlayer.player_object.player_name))
                            {
                                playerIdentifier = asPlayer.player_object.player_name;
                            }
                            else
                            {
                                playerIdentifier = asPlayer.player_identifier;
                            }
                            //Skip if no valid info found
                            if (String.IsNullOrEmpty(playerIdentifier))
                            {
                                Log.Error("Player under whitelist_teamkill was not valid. Unable to add to TeamKillTracker whitelist.");
                                continue;
                            }
                            if (!teamKillTrackerWhitelistedPlayers.Contains(playerIdentifier))
                            {
                                teamKillTrackerWhitelistedPlayers.Add(playerIdentifier);
                            }
                        }
                    }
                    SetExternalPluginSetting("TeamKillTracker", "Whitelist", CPluginVariable.EncodeStringArray(teamKillTrackerWhitelistedPlayers.ToArray()));
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating TeamKillTracker whitelist.", e));
            }
        }

        private void UpdateReservedSlots()
        {
            try
            {
                if (_CurrentReservedSlotPlayers == null)
                {
                    return;
                }
                if (!_FeedServerReservedSlots)
                {
                    ExecuteCommand("procon.protected.send", "reservedSlotsList.add", "ColColonCleaner");
                    ExecuteCommand("procon.protected.send", "reservedSlotsList.add", "PhirePhrey");
                    ExecuteCommand("procon.protected.send", "reservedSlotsList.save");
                    ExecuteCommand("procon.protected.send", "reservedSlotsList.list");
                    return;
                }
                Log.Debug(() => "Checking validity of reserved slotted players.", 6);
                List<string> allowedReservedSlotPlayers = new List<string>();
                //Pull players from special player cache
                List<AdKatsSpecialPlayer> reservedPlayers = GetVerboseASPlayersOfGroup("slot_reserved");
                if (reservedPlayers.Any())
                {
                    foreach (AdKatsSpecialPlayer asPlayer in reservedPlayers)
                    {
                        String playerIdentifier = null;
                        if (asPlayer.player_object != null && !String.IsNullOrEmpty(asPlayer.player_object.player_name))
                        {
                            playerIdentifier = asPlayer.player_object.player_name;
                        }
                        else
                        {
                            if (IsSoldierNameValid(asPlayer.player_identifier))
                            {
                                playerIdentifier = asPlayer.player_identifier;
                            }
                            else
                            {
                                Log.Error("Player under reserved_slot list '" + asPlayer.player_identifier + "' was not a valid soldier name. Unable to add to reserved slot list.");
                            }
                        }
                        //Skip if no valid info found
                        if (String.IsNullOrEmpty(playerIdentifier))
                        {
                            continue;
                        }
                        if (!allowedReservedSlotPlayers.Contains(playerIdentifier))
                        {
                            allowedReservedSlotPlayers.Add(playerIdentifier);
                        }
                    }
                }
                if (!allowedReservedSlotPlayers.Contains("ColColonCleaner"))
                {
                    allowedReservedSlotPlayers.Add("ColColonCleaner");
                }
                if (!allowedReservedSlotPlayers.Contains("PhirePhrey"))
                {
                    allowedReservedSlotPlayers.Add("PhirePhrey");
                }
                //All players fetched, update the server lists
                //Remove soldiers from the list where needed
                foreach (String playerName in _CurrentReservedSlotPlayers)
                {
                    if (!allowedReservedSlotPlayers.Contains(playerName))
                    {
                        Log.Debug(() => playerName + " in server reserved slots, but not in allowed reserved players. Removing.", 3);
                        ExecuteCommand("procon.protected.send", "reservedSlotsList.remove", playerName);
                        _threadMasterWaitHandle.WaitOne(5);
                    }
                }
                //Add soldiers to the list where needed
                foreach (String playerName in allowedReservedSlotPlayers)
                {
                    if (!_CurrentReservedSlotPlayers.Contains(playerName))
                    {
                        Log.Debug(() => playerName + " in allowed reserved players, but not in server reserved slots. Adding.", 3);
                        ExecuteCommand("procon.protected.send", "reservedSlotsList.add", playerName);
                        _threadMasterWaitHandle.WaitOne(5);
                    }
                }
                //Save the list
                ExecuteCommand("procon.protected.send", "reservedSlotsList.save");
                //Display the list
                ExecuteCommand("procon.protected.send", "reservedSlotsList.list");
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating server reserved slots.", e));
            }
        }

        public override void OnReservedSlotsList(List<String> soldierNames)
        {
            try
            {
                Log.Debug(() => "Reserved slots listed.", 5);
                _CurrentReservedSlotPlayers = soldierNames;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling reserved slot list.", e));
            }
        }

        private void UpdateSpectatorList()
        {
            Log.Debug(() => "Entering UpdateSpectatorList", 6);
            try
            {
                if (!_FeedServerSpectatorList || _CurrentSpectatorListPlayers == null)
                {
                    return;
                }
                Log.Debug(() => "Updating spectator list players.", 6);
                List<string> allowedSpectatorSlotPlayers = new List<string>();
                //Pull players from special player cache
                List<AdKatsSpecialPlayer> spectators = GetVerboseASPlayersOfGroup("slot_spectator");
                if (spectators.Any())
                {
                    foreach (AdKatsSpecialPlayer asPlayer in spectators)
                    {
                        String playerIdentifier = null;
                        if (asPlayer.player_object != null && !String.IsNullOrEmpty(asPlayer.player_object.player_name))
                        {
                            playerIdentifier = asPlayer.player_object.player_name;
                        }
                        else
                        {
                            if (IsSoldierNameValid(asPlayer.player_identifier))
                            {
                                playerIdentifier = asPlayer.player_identifier;
                            }
                            else
                            {
                                Log.Error("Player under slot_spectator list '" + asPlayer.player_identifier + "' was not a valid soldier name. Unable to add to spectator slot list.");
                            }
                        }
                        //Skip if no valid info found
                        if (String.IsNullOrEmpty(playerIdentifier))
                        {
                            continue;
                        }
                        if (!allowedSpectatorSlotPlayers.Contains(playerIdentifier))
                        {
                            Log.Debug(() => "Valid slot_spectator " + playerIdentifier + " fetched.", 5);
                            allowedSpectatorSlotPlayers.Add(playerIdentifier);
                        }
                    }
                }
                else
                {
                    Log.Debug(() => "No players under special player group slot_spectator.", 5);
                }
                //All players fetched, update the server lists
                if (allowedSpectatorSlotPlayers.Count() < 15)
                {
                    //Remove soldiers from the list where needed
                    foreach (String playerName in _CurrentSpectatorListPlayers)
                    {
                        if (!allowedSpectatorSlotPlayers.Contains(playerName))
                        {
                            Log.Debug(() => playerName + " in server spectator slots, but not in allowed spectator players. Removing.", 3);
                            ExecuteCommand("procon.protected.send", "spectatorList.remove", playerName);
                            _threadMasterWaitHandle.WaitOne(5);
                        }
                    }
                    //Add soldiers to the list where needed
                    foreach (String playerName in allowedSpectatorSlotPlayers)
                    {
                        if (!_CurrentSpectatorListPlayers.Contains(playerName))
                        {
                            Log.Debug(() => playerName + " in allowed spectator players, but not in server spectator slots. Adding.", 3);
                            ExecuteCommand("procon.protected.send", "spectatorList.add", playerName);
                            _threadMasterWaitHandle.WaitOne(5);
                        }
                    }
                }
                else
                {
                    //If there are 15 or more players in the list, don't push to the server
                    //The server cannot take over 15 players in the spectator list, yay DICE
                    ExecuteCommand("procon.protected.send", "spectatorList.clear");
                }
                //Save the list
                ExecuteCommand("procon.protected.send", "spectatorList.save");
                //Display the list
                ExecuteCommand("procon.protected.send", "spectatorList.list");
                Log.Debug(() => "DONE checking validity of spectator list players.", 6);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating server spectator list.", e));
            }
            Log.Debug(() => "Exiting UpdateSpectatorList", 6);
        }

        public override void OnSpectatorListList(List<String> soldierNames)
        {
            try
            {
                Log.Debug(() => "Spectators listed.", 5);
                _CurrentSpectatorListPlayers = soldierNames;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while handling spectator list.", e));
            }
        }

        public override void OnMaxSpectators(Int32 spectatorLimit)
        {
            _serverInfo.MaxSpectators = spectatorLimit;
        }

        public override void OnSpectatorListLoad()
        {
        }

        public override void OnSpectatorListSave()
        {
        }

        public override void OnSpectatorListPlayerAdded(String soldierName)
        {
        }

        public override void OnSpectatorListPlayerRemoved(String soldierName)
        {
        }

        public override void OnSpectatorListCleared()
        {
        }

        public void IssueCommand(params String[] commandParams)
        {
            Log.Debug(() => "IssueCommand starting!", 6);
            try
            {
                if (!_threadsReady)
                {
                    Log.Error("Attempted to issue external command before AdKats threads were running.");
                }
                if (commandParams.Length < 1)
                {
                    Log.Error("External command handling canceled. No parameters were provided.");
                    return;
                }
                new Thread(ParseExternalCommand).Start(commandParams);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while starting external command processing.", e));
            }
            Log.Debug(() => "IssueCommand finished!", 6);
        }

        private void ParseExternalCommand(Object commandParams)
        {
            Log.Debug(() => "ParseExternalCommand starting!", 6);
            try
            {
                //Set current thread id
                Thread.CurrentThread.Name = "ParseExternalCommand";

                //Create the new record
                AdKatsRecord record = new AdKatsRecord
                {
                    record_source = AdKatsRecord.Sources.ExternalPlugin,
                    record_access = AdKatsRecord.AccessMethod.HiddenExternal,
                    server_id = _serverInfo.ServerID,
                    record_time = UtcNow()
                };

                //Parse information into a record
                if (commandParams == null)
                {
                    Log.Error("Command params were null when parsing external command. Unable to continue.");
                    return;
                }
                String[] paramArray = commandParams as String[];
                if (paramArray == null)
                {
                    Log.Error("Command params could not be properly converted to String[]. Unable to continue.");
                    return;
                }
                if (paramArray.Length != 2)
                {
                    Log.Error("Invalid parameter count [source, jsonParams]. Unable to continue.");
                    return;
                }
                String commandSource = paramArray[0];
                String unparsedCommandJSON = paramArray[1];

                Hashtable parsedClientInformation = (Hashtable)JSON.JsonDecode(unparsedCommandJSON);
                if (parsedClientInformation == null)
                {
                    Log.Error("Command params could not be properly converted from JSON. Unable to continue.");
                    return;
                }

                //Import the caller identity
                if (!parsedClientInformation.ContainsKey("caller_identity"))
                {
                    Log.Error("Parsed command didn't contain a caller_identity! Unable to process external command.");
                    return;
                }
                string callerIdentity = (String)parsedClientInformation["caller_identity"];
                if (String.IsNullOrEmpty(callerIdentity))
                {
                    Log.Error("caller_identity was empty. Unable to process external command.");
                    return;
                }
                record.external_callerIdentity = callerIdentity;

                //Import the callback options
                if (!parsedClientInformation.ContainsKey("response_requested"))
                {
                    Log.Error("Parsed command didn't contain response_requested! Unable to process external command.");
                    return;
                }
                bool callbackRequested = (Boolean)parsedClientInformation["response_requested"];
                record.external_responseRequested = callbackRequested;
                if (callbackRequested)
                {
                    if (!parsedClientInformation.ContainsKey("response_class"))
                    {
                        Log.Error("Parsed command didn't contain a response_class! Unable to process external command.");
                        return;
                    }
                    string callbackClass = (String)parsedClientInformation["response_class"];
                    if (String.IsNullOrEmpty(callbackClass))
                    {
                        Log.Error("response_class was empty. Unable to process external command.");
                        return;
                    }
                    record.external_responseClass = callbackClass;

                    if (!parsedClientInformation.ContainsKey("response_method"))
                    {
                        Log.Error("Parsed command didn't contain a response_method! Unable to process external command.");
                        return;
                    }
                    string callbackMethod = (String)parsedClientInformation["response_method"];
                    if (String.IsNullOrEmpty(callbackMethod))
                    {
                        Log.Error("response_method was empty. Unable to process external command.");
                        return;
                    }
                    record.external_responseMethod = callbackMethod;
                }

                //Import the command type
                if (!parsedClientInformation.ContainsKey("command_type"))
                {
                    record.record_exception = HandleException(new AdKatsException("Parsed command didn't contain a command_type!"));
                    return;
                }
                string unparsedCommandType = (String)parsedClientInformation["command_type"];
                if (String.IsNullOrEmpty(unparsedCommandType))
                {
                    Log.Error("command_type was empty. Unable to process external command.");
                    return;
                }
                if (!_CommandKeyDictionary.TryGetValue(unparsedCommandType, out record.command_type))
                {
                    Log.Error("command_type was invalid, not found in definition. Unable to process external command.");
                    return;
                }

                //Import the command numeric
                //Only required for temp ban
                if (record.command_type.command_key == "player_ban_temp")
                {
                    if (!parsedClientInformation.ContainsKey("command_numeric"))
                    {
                        Log.Error("Parsed command didn't contain a command_numeric! Unable to parse command.");
                        return;
                    }
                    if (!Int32.TryParse(parsedClientInformation["command_numeric"].ToString(), out record.command_numeric))
                    {
                        Log.Error("Parsed command command_numeric was not a number! Unable to parse command.");
                        return;
                    }
                }

                //Import the source name
                if (!parsedClientInformation.ContainsKey("source_name"))
                {
                    Log.Error("Parsed command didn't contain a source_name!");
                    return;
                }
                string sourceName = (String)parsedClientInformation["source_name"];
                if (String.IsNullOrEmpty(sourceName))
                {
                    Log.Error("source_name was empty. Unable to process external command.");
                    return;
                }
                record.source_name = sourceName;

                //Import the target name
                if (!parsedClientInformation.ContainsKey("target_name"))
                {
                    Log.Error("Parsed command didn't contain a target_name! Unable to process external command.");
                    return;
                }
                string targetName = (String)parsedClientInformation["target_name"];
                if (String.IsNullOrEmpty(targetName))
                {
                    Log.Error("source_name was empty. Unable to process external command.");
                    return;
                }
                record.target_name = targetName;

                //Import the target guid
                String target_guid = null;
                if (parsedClientInformation.ContainsKey("target_guid"))
                {
                    target_guid = (String)parsedClientInformation["target_guid"];
                }

                //Import the record message
                if (!parsedClientInformation.ContainsKey("record_message"))
                {
                    Log.Error("Parsed command didn't contain a record_message! Unable to process external command.");
                    return;
                }
                string recordMessage = (String)parsedClientInformation["record_message"];
                if (String.IsNullOrEmpty(recordMessage))
                {
                    Log.Error("record_message was empty. Unable to process external command.");
                    return;
                }
                record.record_message = recordMessage;

                _PlayerDictionary.TryGetValue(record.source_name, out record.source_player);
                if (record.source_player != null)
                {
                    record.source_player.LastUsage = UtcNow();
                }
                if (!_PlayerDictionary.TryGetValue(record.target_name, out record.target_player) && record.command_type.command_key.StartsWith("player_"))
                {
                    if (String.IsNullOrEmpty(target_guid))
                    {
                        Log.Error("Target player '" + record.GetTargetNames() + "' was not found in the server. And target_guid was not provided. Unable to process external command.");
                        return;
                    }
                    record.target_player = FetchPlayer(true, false, false, null, -1, record.target_name, target_guid, null);
                }
                if (record.target_player != null)
                {
                    record.target_player.LastUsage = UtcNow();
                }
                QueueRecordForProcessing(record);
            }
            catch (Exception e)
            {
                //Log the error in console
                HandleException(new AdKatsException("Unable to process external command.", e));
            }
            Log.Debug(() => "ParseExternalCommand finished!", 6);
        }

        public void FetchAuthorizedSoldiers(params String[] commandParams)
        {
            Log.Debug(() => "FetchAuthorizedSoldiers starting!", 6);
            if (!commandParams.Any())
            {
                Log.Error("Authorized soldier fetch canceled. No parameters were provided.");
                return;
            }
            if (!_firstUserListComplete)
            {
                return;
            }
            //TODO add logging for this
            new Thread(SendAuthorizedSoldiers).Start(commandParams[1]);
            Log.Debug(() => "FetchAuthorizedSoldiers finished!", 6);
        }

        private void SendAuthorizedSoldiers(Object clientInformation)
        {
            Log.Debug(() => "SendAuthorizedSoldiers starting!", 6);
            try
            {
                //Set current thread id
                Thread.CurrentThread.Name = "SendAuthorizedSoldiers";

                //Create the new record
                AdKatsRecord record = new AdKatsRecord
                {
                    record_source = AdKatsRecord.Sources.ExternalPlugin,
                    record_access = AdKatsRecord.AccessMethod.HiddenExternal,
                    record_time = UtcNow()
                };

                //Parse information into a record
                Hashtable parsedClientInformation = (Hashtable)JSON.JsonDecode((String)clientInformation);

                //Import the caller identity
                if (!parsedClientInformation.ContainsKey("caller_identity"))
                {
                    Log.Error("Parsed command didn't contain a caller_identity! Unable to process soldier fetch.");
                    return;
                }
                string callerIdentity = (String)parsedClientInformation["caller_identity"];
                if (String.IsNullOrEmpty(callerIdentity))
                {
                    Log.Error("caller_identity was empty. Unable to process soldier fetch.");
                    return;
                }
                record.external_callerIdentity = callerIdentity;

                //Import the callback options
                if (!parsedClientInformation.ContainsKey("response_requested"))
                {
                    Log.Error("Parsed command didn't contain response_requested! Unable to process soldier fetch.");
                    return;
                }
                bool callbackRequested = (Boolean)parsedClientInformation["response_requested"];
                record.external_responseRequested = callbackRequested;
                if (callbackRequested)
                {
                    if (!parsedClientInformation.ContainsKey("response_class"))
                    {
                        Log.Error("Parsed command didn't contain a response_class! Unable to process soldier fetch.");
                        return;
                    }
                    string callbackClass = (String)parsedClientInformation["response_class"];
                    if (String.IsNullOrEmpty(callbackClass))
                    {
                        Log.Error("response_class was empty. Unable to process soldier fetch.");
                        return;
                    }
                    record.external_responseClass = callbackClass;

                    if (!parsedClientInformation.ContainsKey("response_method"))
                    {
                        Log.Error("Parsed command didn't contain a response_method!");
                        return;
                    }
                    string callbackMethod = (String)parsedClientInformation["response_method"];
                    if (String.IsNullOrEmpty(callbackMethod))
                    {
                        Log.Error("response_method was empty. Unable to process soldier fetch.");
                        return;
                    }
                    record.external_responseMethod = callbackMethod;
                }
                else
                {
                    Log.Error("response_requested must be true to return authorized soldiers. Unable to process soldier fetch.");
                    return;
                }

                List<AdKatsPlayer> soldierList;
                Boolean containsUserSubset = parsedClientInformation.ContainsKey("user_subset");
                Boolean containsUserRole = parsedClientInformation.ContainsKey("user_role");
                if (containsUserRole && containsUserSubset)
                {
                    Log.Error("Both user_subset and user_role were used in request. Only one may be used at any time. Unable to process soldier fetch.");
                    return;
                }
                if (containsUserRole)
                {
                    string roleString = (String)parsedClientInformation["user_role"];
                    if (String.IsNullOrEmpty(roleString))
                    {
                        Log.Error("user_role was found in request, but it was empty. Unable to process soldier fetch.");
                        return;
                    }
                    AdKatsRole aRole;
                    if (!_RoleKeyDictionary.TryGetValue(roleString, out aRole))
                    {
                        Log.Error("Specified user role '" + roleString + "' was not found. Unable to process soldier fetch.");
                        return;
                    }
                    soldierList = FetchSoldiersOfRole(aRole);
                }
                else if (containsUserSubset)
                {
                    string subset = (String)parsedClientInformation["user_subset"];
                    if (String.IsNullOrEmpty(subset))
                    {
                        Log.Debug(() => "user_subset was found in request, but it was empty. Unable to process soldier fetch.", 3);
                        return;
                    }
                    switch (subset)
                    {
                        case "all":
                            soldierList = FetchAllUserSoldiers();
                            break;
                        case "admin":
                            soldierList = FetchAdminSoldiers();
                            break;
                        case "elevated":
                            soldierList = FetchElevatedSoldiers();
                            break;
                        default:
                            Log.Error("request_subset was found in request, but it was invalid. Unable to process soldier fetch.");
                            return;
                    }
                }
                else
                {
                    Log.Error("Neither user_subset nor user_role was found in request. Unable to process soldier fetch.");
                    return;
                }

                if (soldierList == null)
                {
                    Log.Error("Internal error, all parameters were correct, but soldier list was not fetched.");
                    return;
                }

                String[] soldierNames = (from aPlayer in soldierList where (!String.IsNullOrEmpty(aPlayer.player_name) && aPlayer.game_id == _serverInfo.GameID) select aPlayer.player_name).ToArray();

                Hashtable responseHashtable = new Hashtable();
                responseHashtable.Add("caller_identity", "AdKats");
                responseHashtable.Add("response_requested", false);
                responseHashtable.Add("response_type", "FetchAuthorizedSoldiers");
                responseHashtable.Add("response_value", CPluginVariable.EncodeStringArray(soldierNames));

                //TODO: add error message if target not found

                ExecuteCommand("procon.protected.plugins.call", record.external_responseClass, record.external_responseMethod, "AdKats", JSON.JsonEncode(responseHashtable));
            }
            catch (Exception e)
            {
                //Log the error in console
                HandleException(new AdKatsException("Error returning authorized soldiers .", e));
            }
            Log.Debug(() => "SendAuthorizedSoldiers finished!", 6);
        }

        private Boolean SubscribeClient(AdKatsClient aClient)
        {
            if (aClient == null)
            {
                Log.Error("24134: Client null when issuing subscription.");
                return false;
            }
            if (String.IsNullOrEmpty(aClient.ClientName))
            {
                Log.Error("Attempted to enable subscription without a client name.");
                return false;
            }
            if (String.IsNullOrEmpty(aClient.ClientMethod))
            {
                Log.Error("Attempted to enable subscription for " + aClient.ClientName + " without a client method.");
                return false;
            }
            if (String.IsNullOrEmpty(aClient.SubscriptionGroup))
            {
                Log.Error("Attempted to enable subscription for " + aClient.ClientName + " with a blank group.");
                return false;
            }
            if (!_subscriptionGroups.Contains(aClient.SubscriptionGroup))
            {
                Log.Error("Attempted to enable subscription for " + aClient.ClientName + " with an invalid group.");
                return false;
            }
            if (_subscribedClients.Any(iClient => iClient.ClientName == aClient.ClientName && iClient.ClientMethod == aClient.ClientMethod && iClient.SubscriptionGroup == aClient.SubscriptionGroup))
            {
                Log.Error("Client " + aClient.ClientName + " already subscribed to " + aClient.SubscriptionGroup + ". Events are being sent to " + aClient.ClientMethod + ".");
                return false;
            }
            _subscribedClients.Add(aClient);
            Log.Success(aClient.ClientName + " now subscribed to " + aClient.SubscriptionGroup + ". Events will be sent to " + aClient.ClientMethod + ".");
            return true;
        }

        private Boolean UnsubscribeClient(AdKatsClient aClient)
        {
            if (aClient == null)
            {
                Log.Error("24169: Client null when issuing subscription.");
                return false;
            }
            AdKatsClient eClient = _subscribedClients.Where(iClient => iClient.ClientName == aClient.ClientName && iClient.ClientMethod == aClient.ClientMethod && iClient.SubscriptionGroup == aClient.SubscriptionGroup).FirstOrDefault();
            if (eClient != null)
            {
                _subscribedClients.Remove(eClient);
                Log.Success("Client " + aClient.ClientName + " unsubscribed from " + aClient.SubscriptionGroup + ". Events no longer being sent to " + aClient.ClientMethod + ".");
                return true;
            }
            Log.Error("Client " + aClient.ClientName + " attempted to unsubscribe from " + aClient.SubscriptionGroup + " when they don't have an active subscription.");
            return false;
        }

        public void ReceiveLoadoutValidity(params String[] informationParams)
        {
            Log.Debug(() => "ReceiveLoadoutValidity starting!", 6);
            try
            {
                if (!informationParams.Any())
                {
                    Log.Error("ReceiveLoadoutValidity canceled. No parameters were provided.");
                    return;
                }

                if (informationParams == null)
                {
                    Log.Error("Loadout validity params were null when attempting to parse. Unable to continue.");
                    return;
                }
                if (informationParams.Length != 2)
                {
                    Log.Error("Invalid parameter count when attempting to parse loadout validity. Required: [source, jsonParams]. Unable to continue.");
                    return;
                }
                String unparsedValidityJson = informationParams[1];

                Hashtable parsedValidityHashtable = (Hashtable)JSON.JsonDecode(unparsedValidityJson);
                if (parsedValidityHashtable == null)
                {
                    Log.Error("Loadout valididy params could not be properly converted from JSON. Unable to continue.");
                    return;
                }

                //Import the caller identity
                if (!parsedValidityHashtable.ContainsKey("caller_identity"))
                {
                    Log.Error("Loadout valididy params didn't contain a caller_identity! Unable to process.");
                    return;
                }
                String identity = (String)parsedValidityHashtable["caller_identity"];
                if (String.IsNullOrEmpty(identity))
                {
                    Log.Error("caller_identity was empty. Unable to process.");
                    return;
                }
                if (identity != "AdKatsLRT")
                {
                    Log.Error("Loadout source not recognized. Unable to process.");
                }

                //Import the callback option
                if (!parsedValidityHashtable.ContainsKey("response_requested"))
                {
                    Log.Error("Loadout valididy params for " + identity + " didn't contain response_requested! Unable to process.");
                    return;
                }
                bool callbackRequested = (Boolean)parsedValidityHashtable["response_requested"];
                if (callbackRequested)
                {
                    Log.Warn(identity + " requested confirmation response for loadout validity, which is unavailable.");
                }

                //Import the player
                if (!parsedValidityHashtable.ContainsKey("loadout_player"))
                {
                    Log.Error("Loadout valididy params for " + identity + " didn't contain loadout_player! Unable to process.");
                    return;
                }
                String loadoutPlayer = (String)parsedValidityHashtable["loadout_player"];
                if (String.IsNullOrEmpty(loadoutPlayer))
                {
                    Log.Error("loadout_player was empty. Unable to process.");
                    return;
                }

                //Import the full validity
                if (!parsedValidityHashtable.ContainsKey("loadout_valid"))
                {
                    Log.Error("Loadout valididy params for " + identity + " didn't contain loadout_valid! Unable to process.");
                    return;
                }
                Boolean loadoutValid = (Boolean)parsedValidityHashtable["loadout_valid"];

                //Import the spawn validity
                if (!parsedValidityHashtable.ContainsKey("loadout_spawnValid"))
                {
                    Log.Error("Loadout valididy params for " + identity + " didn't contain loadout_spawnValid! Unable to process.");
                    return;
                }
                Boolean loadoutSpawnValid = (Boolean)parsedValidityHashtable["loadout_spawnValid"];

                //Import the action
                if (!parsedValidityHashtable.ContainsKey("loadout_acted"))
                {
                    Log.Error("Loadout valididy params for " + identity + " didn't contain loadout_acted! Unable to process.");
                    return;
                }
                Boolean loadoutActed = (Boolean)parsedValidityHashtable["loadout_acted"];

                //Import the loadout
                if (!parsedValidityHashtable.ContainsKey("loadout_items"))
                {
                    Log.Error("Loadout valididy params for " + identity + " didn't contain loadout_items! Unable to process.");
                    return;
                }
                String loadoutItems = (String)parsedValidityHashtable["loadout_items"];

                //Import the long loadout
                if (!parsedValidityHashtable.ContainsKey("loadout_items_long"))
                {
                    Log.Error("Loadout valididy params for " + identity + " didn't contain loadout_items_long! Unable to process.");
                    return;
                }
                String loadoutItemsLong = (String) parsedValidityHashtable["loadout_items_long"];

                //Import the denied items
                if (!parsedValidityHashtable.ContainsKey("loadout_deniedItems")) 
                {
                    Log.Error("Loadout valididy params for " + identity + " didn't contain loadout_deniedItems! Unable to process.");
                    return;
                }
                String loadoutDeniedItems = (String) parsedValidityHashtable["loadout_deniedItems"];

                AdKatsRecord aRecord;
                AdKatsPlayer aPlayer;
                if (_LoadoutConfirmDictionary.TryGetValue(loadoutPlayer, out aRecord)) {
                    aRecord.target_player.loadout_valid = loadoutValid;
                    aRecord.target_player.loadout_spawnValid = loadoutSpawnValid;
                    aRecord.target_player.loadout_items = loadoutItems;
                    aRecord.target_player.loadout_items_long = loadoutItemsLong;
                    aRecord.target_player.loadout_deniedItems = loadoutDeniedItems;
                    switch (aRecord.command_type.command_key) {
                        case "player_loadout":
                            Log.Success("Loadout fetched for " + aRecord.target_player.GetVerboseName() + ".");
                            aRecord.isLoadoutChecked = true;
                            SendMessageToSource(aRecord, aRecord.target_player.loadout_items_long);
                            break;
                        case "player_calladmin":
                        case "player_report":
                            Log.Success("Report " + aRecord.command_numeric + " loadout checked.");
                            aRecord.isLoadoutChecked = true;
                            aRecord.targetLoadoutActed = loadoutActed;
                            QueueRecordForActionHandling(aRecord);
                            break;
                        default:
                            Log.Error("Invalid loadout confirm command detected.");
                            break;
                    }
                    _LoadoutConfirmDictionary.Remove(loadoutPlayer);
                }
                else if (_PlayerDictionary.TryGetValue(loadoutPlayer, out aPlayer))
                {
                    aPlayer.loadout_valid = loadoutValid;
                    aPlayer.loadout_spawnValid = loadoutSpawnValid;
                    aPlayer.loadout_items = loadoutItems;
                    aPlayer.loadout_items_long = loadoutItemsLong;
                    aPlayer.loadout_deniedItems = loadoutDeniedItems;
                    aPlayer.LastUsage = UtcNow();
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while processing loadout validity.", e));
            }
            Log.Debug(() => "ReceiveLoadoutValidity finished!", 6);
        }

        public void SubscribeAsClient(params String[] subscriptionParams)
        {
            Log.Debug(() => "SubscribeAsClient starting!", 6);
            if (!subscriptionParams.Any())
            {
                Log.Error("SubscribeAsClient canceled. No parameters were provided.");
                return;
            }

            if (subscriptionParams == null)
            {
                Log.Error("Subscription params were null when attempting to subscribe. Unable to continue.");
                return;
            }
            if (subscriptionParams.Length != 2)
            {
                Log.Error("Invalid parameter count when attempting to subscribe. Required: [source, jsonParams]. Unable to continue.");
                return;
            }
            String unparsedSubscriptionJSON = subscriptionParams[1];

            Hashtable parsedClientInformation = (Hashtable)JSON.JsonDecode(unparsedSubscriptionJSON);
            if (parsedClientInformation == null)
            {
                Log.Error("Subscription params could not be properly converted from JSON. Unable to continue.");
                return;
            }

            //Create new client
            AdKatsClient aClient = new AdKatsClient(this);

            //Import the caller identity
            if (!parsedClientInformation.ContainsKey("caller_identity"))
            {
                Log.Error("Subscription params didn't contain a caller_identity! Unable to process.");
                return;
            }
            aClient.ClientName = (String)parsedClientInformation["caller_identity"];
            if (String.IsNullOrEmpty(aClient.ClientName))
            {
                Log.Error("caller_identity was empty. Unable to process.");
                return;
            }

            //Import the callback option
            if (!parsedClientInformation.ContainsKey("response_requested"))
            {
                Log.Error("Subscription params for " + aClient.ClientName + " didn't contain response_requested! Unable to process.");
                return;
            }
            bool callbackRequested = (Boolean)parsedClientInformation["response_requested"];
            if (callbackRequested)
            {
                Log.Warn(aClient.ClientName + " requested confirmation response for group subscription, which is unavailable.");
            }

            //Import the subscription method
            if (!parsedClientInformation.ContainsKey("subscription_method"))
            {
                Log.Error("Subscription params for " + aClient.ClientName + " didn't contain subscription_method! Unable to process.");
                return;
            }
            String subMethod = (String)parsedClientInformation["subscription_method"];
            if (String.IsNullOrEmpty(subMethod))
            {
                Log.Error("subscription_method was empty. Unable to process.");
                return;
            }
            aClient.ClientMethod = subMethod;

            //Import the subscription group
            if (!parsedClientInformation.ContainsKey("subscription_group"))
            {
                Log.Error("Subscription params for " + aClient.ClientName + " didn't contain subscription_group! Unable to process.");
                return;
            }
            String subGroup = (String)parsedClientInformation["subscription_group"];
            if (String.IsNullOrEmpty(subGroup))
            {
                Log.Error("subscription_group was empty. Unable to process.");
                return;
            }
            if (!_subscriptionGroups.Contains(subGroup))
            {
                Log.Error("subscription_group was invalid, not found in subscription group library. Unable to process.");
                return;
            }
            aClient.SubscriptionGroup = subGroup;

            //Import the subscription method
            if (!parsedClientInformation.ContainsKey("subscription_enabled"))
            {
                Log.Error("Subscription params for " + aClient.ClientName + " didn't contain subscription_enabled! Unable to process.");
                return;
            }
            Boolean subEnabled = (Boolean)parsedClientInformation["subscription_enabled"];
            if (subEnabled)
            {
                aClient.EnableSubscription();
                SubscribeClient(aClient);
            }
            else
            {
                aClient.DisableSubscription();
                UnsubscribeClient(aClient);
            }

            Log.Debug(() => "SubscribeAsClient finished!", 6);
        }

        private Boolean SendOnlineSoldiers()
        {
            Log.Debug(() => "SendOnlineSoldiers starting!", 6);
            Stopwatch timer = new Stopwatch();
            try
            {
                timer.Start();

                //Get player list
                List<AdKatsPlayer> playerList = _PlayerDictionary.Values.ToList();

                //TODO: add special player groups

                //Parse player list
                ArrayList onlineSoldierList = new ArrayList();
                foreach (AdKatsPlayer aPlayer in playerList)
                {
                    Hashtable tPlayer = new Hashtable();
                    tPlayer["player_id"] = aPlayer.player_id;
                    tPlayer["player_guid"] = aPlayer.player_guid;
                    tPlayer["player_pbguid"] = aPlayer.player_pbguid;
                    tPlayer["player_ip"] = aPlayer.player_ip;
                    if (aPlayer.location != null && aPlayer.location.status == "success")
                    {
                        tPlayer["player_country"] = aPlayer.location.countryCode;
                    }
                    else
                    {
                        tPlayer["player_country"] = null;
                    }
                    tPlayer["player_name"] = aPlayer.player_name;
                    tPlayer["player_online"] = aPlayer.player_online;
                    tPlayer["player_personaID"] = aPlayer.player_personaID;
                    tPlayer["player_clanTag"] = aPlayer.player_clanTag;
                    tPlayer["player_aa"] = aPlayer.player_aa;
                    tPlayer["player_ping"] = Math.Round(aPlayer.player_ping_avg, 2);
                    tPlayer["player_reputation"] = Math.Round(aPlayer.player_reputation, 3);
                    tPlayer["player_infractionPoints"] = FetchPoints(aPlayer, false, false);
                    tPlayer["player_role"] = aPlayer.player_role.role_key;
                    tPlayer["player_type"] = aPlayer.player_type.ToString();
                    tPlayer["player_isAdmin"] = PlayerIsAdmin(aPlayer);
                    tPlayer["player_reported"] = aPlayer.TargetedRecords.Any(aRecord => aRecord.command_type.command_key == "player_report" || aRecord.command_type.command_key == "player_calladmin");
                    tPlayer["player_punished"] = aPlayer.TargetedRecords.Any(aRecord => aRecord.command_type.command_key == "player_punish");
                    tPlayer["player_loadout_forced"] = aPlayer.TargetedRecords.Any(aRecord => aRecord.command_type.command_key == "player_loadout_force");
                    if (aPlayer.LastPunishment != null)
                    {
                        tPlayer["player_lastPunishment"] = Math.Round((UtcNow() - aPlayer.LastPunishment.record_time).TotalSeconds);
                    }
                    else
                    {
                        tPlayer["player_lastPunishment"] = 0;
                    }
                    if (aPlayer.LastForgive != null)
                    {
                        tPlayer["player_lastForgive"] = Math.Round((UtcNow() - aPlayer.LastForgive.record_time).TotalSeconds);
                    }
                    else
                    {
                        tPlayer["player_lastForgive"] = 0;
                    }
                    tPlayer["player_lastAction"] = Math.Round((UtcNow() - aPlayer.lastAction).TotalSeconds);
                    tPlayer["player_spawnedOnce"] = aPlayer.player_spawnedOnce;
                    tPlayer["player_conversationPartner"] = ((aPlayer.conversationPartner == null) ? ("") : (aPlayer.conversationPartner.player_name));
                    tPlayer["player_kills"] = (aPlayer.frostbitePlayerInfo == null) ? (0) : (aPlayer.frostbitePlayerInfo.Kills);
                    tPlayer["player_deaths"] = (aPlayer.frostbitePlayerInfo == null) ? (0) : (aPlayer.frostbitePlayerInfo.Deaths);
                    tPlayer["player_kdr"] = (aPlayer.frostbitePlayerInfo == null) ? (0) : Math.Round(aPlayer.frostbitePlayerInfo.Kdr, 2);
                    tPlayer["player_rank"] = (aPlayer.frostbitePlayerInfo == null) ? (0) : (aPlayer.frostbitePlayerInfo.Rank);
                    tPlayer["player_score"] = (aPlayer.frostbitePlayerInfo == null) ? (0) : (aPlayer.frostbitePlayerInfo.Score);
                    tPlayer["player_squad"] = (aPlayer.frostbitePlayerInfo == null) ? (0) : (aPlayer.frostbitePlayerInfo.SquadID);
                    tPlayer["player_team"] = (aPlayer.frostbitePlayerInfo == null) ? (0) : (aPlayer.frostbitePlayerInfo.TeamID);
                    onlineSoldierList.Add(tPlayer);
                }
                if (timer.ElapsedMilliseconds > 500)
                {
                    Log.Debug(() => "SendOnlineSoldiers build took " + timer.ElapsedMilliseconds + "ms.", 4);
                }

                foreach (AdKatsClient client in
                    _subscribedClients.Where(aClient => aClient.SubscriptionGroup == "OnlineSoldiers" && aClient.SubscriptionEnabled).ToList())
                {
                    if (client == null)
                    {
                        Log.Error("Client was null when sending online soldiers.");
                        timer.Stop();
                        if (timer.ElapsedMilliseconds > 500)
                        {
                            Log.Debug(() => "SendOnlineSoldiers took " + timer.ElapsedMilliseconds + "ms to complete.", 4);
                        }
                        return false;
                    }
                    if (String.IsNullOrEmpty(client.ClientName))
                    {
                        Log.Error("Client name was empty when sending online players.");
                        timer.Stop();
                        if (timer.ElapsedMilliseconds > 500)
                        {
                            Log.Debug(() => "SendOnlineSoldiers took " + timer.ElapsedMilliseconds + "ms to complete.", 4);
                        }
                        return false;
                    }
                    if (String.IsNullOrEmpty(client.ClientMethod))
                    {
                        Log.Error("Client method was empty when sending online players.");
                        timer.Stop();
                        if (timer.ElapsedMilliseconds > 500)
                        {
                            Log.Debug(() => "SendOnlineSoldiers took " + timer.ElapsedMilliseconds + "ms to complete.", 4);
                        }
                        return false;
                    }

                    Hashtable responseHashtable = new Hashtable();
                    responseHashtable.Add("caller_identity", "AdKats");
                    responseHashtable.Add("response_requested", false);
                    responseHashtable.Add("response_type", "OnlineSoldiers");
                    responseHashtable.Add("response_value", onlineSoldierList);

                    ExecuteCommand("procon.protected.plugins.call", client.ClientName, client.ClientMethod, "AdKats", JSON.JsonEncode(responseHashtable));
                }

                timer.Stop();
                if (timer.ElapsedMilliseconds > 500)
                {
                    Log.Debug(() => "SendOnlineSoldiers took " + timer.ElapsedMilliseconds + "ms to complete.", 4);
                }
                return true;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error sending online soldiers.", e));
            }
            Log.Debug(() => "SendOnlineSoldiers finished!", 6);
            timer.Stop();
            if (timer.ElapsedMilliseconds > 500)
            {
                Log.Debug(() => "SendOnlineSoldiers took " + timer.ElapsedMilliseconds + "ms to complete.", 4);
            }
            return false;
        }

        public Boolean FetchPlayerBattlelogInformation(AdKatsPlayer aPlayer)
        {
            try
            {
                if (String.IsNullOrEmpty(aPlayer.player_name))
                {
                    Log.Error("Attempted to get battlelog information of nameless player.");
                    return false;
                }
                if (_gameVersion == GameVersion.BF3) {
                    Log.Debug(() => "Preparing to fetch battlelog info for BF3 player " + aPlayer.GetVerboseName(), 7);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            DoBattlelogWait();
                            String response = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bf3/user/" + aPlayer.player_name + "?cacherand=" + Environment.TickCount);
                            Match pid = Regex.Match(response, @"bf3/soldier/" + aPlayer.player_name + @"/stats/(\d+)", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                            if (!pid.Success)
                            {
                                //HandleException(new AdKatsException("Could not find BF3 persona ID for " + aPlayer.player_name));
                                return false;
                            }
                            aPlayer.player_personaID = pid.Groups[1].Value.Trim();
                            Log.Debug(() => "Persona ID fetched for " + aPlayer.player_name, 4);
                            Match tag = Regex.Match(response, @"\[\s*([a-zA-Z0-9]+)\s*\]\s*" + aPlayer.player_name, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                            if (!tag.Success || String.IsNullOrEmpty(tag.Groups[1].Value.Trim()))
                            {
                                Log.Debug(() => "Could not find BF3 clan tag for " + aPlayer.player_name, 4);
                            }
                            else
                            {
                                aPlayer.player_clanTag = tag.Groups[1].Value.Trim();
                                Log.Debug(() => "Clan tag [" + aPlayer.player_clanTag + "] found for " + aPlayer.player_name, 4);
                            }
                        }
                        catch (Exception e)
                        {
                            if (e is WebException) {
                                Log.Warn("Issue connecting to battlelog.");
                                _LastBattlelogAction = UtcNow().AddSeconds(30);
                                _LastBattlelogIssue = UtcNow();
                                return true;
                            }
                            HandleException(new AdKatsException("Error while parsing player battlelog data.", e));
                            return false;
                        }
                    }
                }
                else if (_gameVersion == GameVersion.BF4) {
                    Log.Debug(() => "Preparing to fetch battlelog info for BF4 player " + aPlayer.GetVerboseName(), 7);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            if (String.IsNullOrEmpty(aPlayer.player_personaID))
                            {
                                DoBattlelogWait();

                                String personaResponse = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bf4/user/" + aPlayer.player_name + "?cacherand=" + Environment.TickCount);
                                Match pid = Regex.Match(personaResponse, @"bf4/soldier/" + aPlayer.player_name + @"/stats/(\d+)", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                                if (!pid.Success)
                                {
                                    HandleException(new AdKatsException("Could not find persona ID for " + aPlayer.player_name));
                                    if (!String.IsNullOrEmpty(personaResponse)) {
                                        ExecuteCommand("procon.protected.send", "admin.kickPlayer", aPlayer.player_name, "Battlelog info fetch issue. Please re-join.");
                                    }
                                    return false;
                                }
                                aPlayer.player_personaID = pid.Groups[1].Value.Trim();
                                Log.Debug(() => "Persona ID fetched for " + aPlayer.player_name, 4);
                            }

                            DoBattlelogWait();
                            String overviewResponse = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bf4/warsawoverviewpopulate/" + aPlayer.player_personaID + "/1/?cacherand=" + Environment.TickCount);
                            Hashtable json = (Hashtable)JSON.JsonDecode(overviewResponse);
                            Hashtable data = (Hashtable)json["data"];
                            Hashtable info = null;
                            if (!data.ContainsKey("viewedPersonaInfo") || (info = (Hashtable)data["viewedPersonaInfo"]) == null)
                            {
                                aPlayer.player_clanTag = String.Empty;
                                Log.Debug(() => "Could not find BF4 clan tag for " + aPlayer.player_name, 4);
                            }
                            else
                            {
                                String tag = String.Empty;
                                if (!info.ContainsKey("tag") || String.IsNullOrEmpty(tag = (String)info["tag"]))
                                {
                                    aPlayer.player_clanTag = String.Empty;
                                    Log.Debug(() => "Could not find BF4 clan tag for " + aPlayer.player_name, 4);
                                }
                                else
                                {
                                    aPlayer.player_clanTag = tag;
                                    Log.Debug(() => "Clan tag [" + aPlayer.player_clanTag + "] found for " + aPlayer.player_name, 4);
                                }
                            }
                        }
                        catch (Exception e) {
                            if (e is WebException) {
                                Log.Warn("Issue connecting to battlelog.");
                                _LastBattlelogAction = UtcNow().AddSeconds(30);
                                _LastBattlelogIssue = UtcNow();
                                return true;
                            }
                            HandleException(new AdKatsException("Error while parsing player battlelog data.", e));
                            return false;
                        }
                    }
                }
                else if (_gameVersion == GameVersion.BFHL) {
                    Log.Debug(() => "Preparing to fetch battlelog info for BFHL player " + aPlayer.GetVerboseName(), 7);
                    using (WebClient client = new WebClient())
                    {
                        try
                        {
                            if (String.IsNullOrEmpty(aPlayer.player_personaID))
                            {
                                //Get persona (thanks areBen)
                                DoBattlelogWait();
                                String response;
                                try
                                {
                                    response = ClientDownloadTimer(client, @"http://api.bfhstats.com/api/playerInfo?plat=pc&name=" + aPlayer.player_name + "&opt=&output=json");
                                    Hashtable json = (Hashtable)JSON.JsonDecode(response);

                                    if (json.ContainsKey("player"))
                                    {
                                        aPlayer.player_personaID = ((Hashtable)json["player"])["id"].ToString();
                                        Log.Debug(() => "Fetched Persona ID from P-STATS NETWORK API for " + aPlayer.player_name, 3);
                                    }
                                    else
                                    {
                                        throw new Exception("Failed to fetch Persona ID from P-STATS NETWORK for " + aPlayer.player_name);
                                    }
                                }
                                catch (Exception)
                                {
                                    // If all else fails, get PID by NAME from Battlelog :(
                                    response = ClientDownloadTimer(client, @"http://battlelog.battlefield.com/bfh/user/" + aPlayer.player_name);

                                    Match pid = Regex.Match(response, @"bfh/agent/" + aPlayer.player_name + @"/stats/(\d+)/pc/", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                                    if (pid.Success)
                                    {
                                        aPlayer.player_personaID = pid.Groups[1].Value.Trim();
                                        Log.Debug(() => "Fetched Persona ID from Battlelog for " + aPlayer.player_name, 3);
                                    }
                                    //additional catch statements for failed webrequest/etc.
                                }
                            }

                            if (!String.IsNullOrEmpty(aPlayer.player_personaID)) {
                                //Get tag
                                DoBattlelogWait();
                                String soldierResponse = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bfh/agent/" + aPlayer.player_name + "/stats/" + aPlayer.player_personaID + "/pc/?cacherand=" + Environment.TickCount);
                                Match tag = Regex.Match(soldierResponse, @"\[\s*([a-zA-Z0-9]+)\s*\]\s*</span>", RegexOptions.IgnoreCase | RegexOptions.Singleline);
                                if (!tag.Success || String.IsNullOrEmpty(tag.Groups[1].Value.Trim())) {
                                    Log.Debug(() => "Could not find BFHL clan tag for " + aPlayer.player_name, 4);
                                }
                                else {
                                    aPlayer.player_clanTag = tag.Groups[1].Value.Trim();
                                    Log.Debug(() => "Clan tag [" + aPlayer.player_clanTag + "] found for " + aPlayer.player_name, 4);
                                }
                            }
                        }
                        catch (Exception e) {
                            if (e is WebException) {
                                Log.Warn("Issue connecting to battlelog.");
                                _LastBattlelogAction = UtcNow().AddSeconds(30);
                                _LastBattlelogIssue = UtcNow();
                                return true;
                            }
                            HandleException(new AdKatsException("Error while parsing player battlelog data.", e));
                            return false;
                        }
                    }
                }
                aPlayer.blInfoFetched = true;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while fetching battlelog information for " + aPlayer.player_name, e));
                return false;
            }
            if (_BannedTags.Contains(aPlayer.player_clanTag) && !String.IsNullOrEmpty(aPlayer.player_clanTag)) {
                //Create the ban record
                QueueRecordForProcessing(new AdKatsRecord {
                    record_source = AdKatsRecord.Sources.InternalAutomated,
                    server_id = _serverInfo.ServerID,
                    command_type = GetCommandByKey("player_ban_perm"),
                    command_numeric = 0,
                    target_name = aPlayer.player_name,
                    target_player = aPlayer,
                    source_name = "AutoAdmin",
                    record_message = "Banned Tag [" + aPlayer.player_clanTag + "]",
                    record_time = UtcNow()
                });
            }
            return true;
        }

        public Boolean FetchPlayerStatInformation(AdKatsPlayer aPlayer) {
            if (aPlayer == null || String.IsNullOrEmpty(aPlayer.player_name) || String.IsNullOrEmpty(aPlayer.player_personaID)) {
                Log.Error("Attempted to fetch player stats info without needed info.");
                return false;
            }
            if (_gameVersion == GameVersion.BF3) {
                using (WebClient client = new WebClient()) {
                    try {
                        //Fetch stats
                        AdKatsPlayerStats stats = new AdKatsPlayerStats(_roundID);
                        DoBattlelogWait();
                        String weaponResponse = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bf3/weaponsPopulateStats/" + aPlayer.player_personaID + "/1/?cacherand=" + Environment.TickCount);
                        Hashtable responseData = (Hashtable) JSON.JsonDecode(weaponResponse);

                        if (responseData != null && 
                            responseData.ContainsKey("type") && 
                            (String) responseData["type"] == "success" && 
                            responseData.ContainsKey("message") && 
                            (String) responseData["message"] == "OK" && 
                            responseData.ContainsKey("data")) {
                            Hashtable statsData = (Hashtable) responseData["data"];
                            if (statsData != null && statsData.ContainsKey("mainWeaponStats")) {
                                ArrayList weaponData = (ArrayList) statsData["mainWeaponStats"];
                                try {
                                    //Get Weapons
                                    if (weaponData != null && weaponData.Count > 0) {
                                        stats.WeaponStats = new Dictionary<String, AdKatsWeaponStat>();
                                        foreach (Hashtable currentWeapon in weaponData) {
                                            //Create new construct
                                            AdKatsWeaponStat weapon = new AdKatsWeaponStat();

                                            //serviceStars
                                            weapon.ServiceStars = (Double) currentWeapon["serviceStars"];
                                            //serviceStarsProgress
                                            weapon.ServiceStarsProgress = (Double) currentWeapon["serviceStarsProgress"];
                                            //category
                                            weapon.Category = ((String) currentWeapon["category"]).Trim().ToLower().Replace(' ', '_');
                                            //categorySID
                                            if (currentWeapon.ContainsKey("categorySID")) {
                                                weapon.CategorySID = (String) currentWeapon["categorySID"];
                                            }
                                            //slug
                                            weapon.ID = ((String) currentWeapon["slug"]).Trim().ToLower().Replace(' ', '_');
                                            //name
                                            weapon.WarsawID = (String) currentWeapon["name"];
                                            //kills
                                            weapon.Kills = (Double) currentWeapon["kills"];

                                            //shotsFired
                                            weapon.Shots = (Double) currentWeapon["shotsFired"];
                                            //shotsHit
                                            weapon.Hits = (Double) currentWeapon["shotsHit"];
                                            //accuracy
                                            weapon.Accuracy = (Double) currentWeapon["accuracy"];
                                            //headshots
                                            weapon.Headshots = (Double) currentWeapon["headshots"];
                                            //timeEquipped
                                            weapon.Time = TimeSpan.FromSeconds((Double) currentWeapon["timeEquipped"]);

                                            //Calculate values
                                            weapon.HSKR = weapon.Headshots / weapon.Kills;
                                            if (weapon.Time.TotalMinutes > 0) {
                                                weapon.KPM = weapon.Kills / weapon.Time.TotalMinutes;
                                            }
                                            weapon.DPS = weapon.Kills / weapon.Hits * 100;

                                            //Assign the construct
                                            stats.WeaponStats.Add(weapon.ID, weapon);
                                        }
                                    } else {
                                        Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain weapon stats data.");
                                    }
                                } catch (Exception e) {
                                    HandleException(new AdKatsException("Error while parsing player weapon data.", e));
                                }
                            } else {
                                Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain weapon stats construct.");
                            }
                        } else {
                            Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Improper format of stats response.");
                        }

                        if (_useHackerCheckerLIVESystem) {
                            //Fetch vehicle stats
                            DoBattlelogWait();
                            String vehicleResponse = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bf3/vehiclesPopulateStats/" + aPlayer.player_personaID + "/1/");
                            Hashtable vehicleResponseData = (Hashtable) JSON.JsonDecode(vehicleResponse);

                            if (vehicleResponseData != null && 
                                vehicleResponseData.ContainsKey("type") &&
                                (String) vehicleResponseData["type"] == "success" &&
                                vehicleResponseData.ContainsKey("message") &&
                                (String) vehicleResponseData["message"] == "OK" &&
                                vehicleResponseData.ContainsKey("data")) {
                                Hashtable statsData = (Hashtable) vehicleResponseData["data"];
                                if (statsData != null && statsData.ContainsKey("mainVehicleStats")) {
                                    ArrayList vehicleData = (ArrayList) statsData["mainVehicleStats"];
                                    try {
                                        //Get Vehicles
                                        if (vehicleData != null && vehicleData.Count > 0) {
                                            stats.VehicleStats = new Dictionary<String, AdKatsVehicleStat>();
                                            foreach (Hashtable currentWeapon in vehicleData) {
                                                //Create new construct
                                                AdKatsVehicleStat vehicle = new AdKatsVehicleStat();

                                                //serviceStars
                                                vehicle.ServiceStars = (Double) currentWeapon["serviceStars"];
                                                //serviceStarsProgress
                                                vehicle.ServiceStarsProgress = (Double) currentWeapon["serviceStarsProgress"];
                                                //category
                                                vehicle.Category = ((String) currentWeapon["category"]).Trim().ToLower().Replace(' ', '_').Replace('-', '_');
                                                //slug
                                                vehicle.ID = ((String) currentWeapon["slug"]).Trim().ToLower().Replace(' ', '_').Replace('-', '_');
                                                //name
                                                vehicle.WarsawID = (String) currentWeapon["name"];
                                                //kills
                                                vehicle.Kills = (Double) currentWeapon["kills"];
                                                //timeIn
                                                vehicle.TimeIn = TimeSpan.FromSeconds((Double) currentWeapon["timeIn"]);

                                                //Calculate values
                                                if (vehicle.TimeIn.TotalMinutes > 0) {
                                                    vehicle.KPM = vehicle.Kills / vehicle.TimeIn.TotalMinutes;
                                                }

                                                //Assign the construct
                                                stats.VehicleStats.Add(vehicle.ID, vehicle);
                                            }
                                        } else {
                                            Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain vehicle stats data.");
                                        }
                                    } catch (Exception e) {
                                        HandleException(new AdKatsException("Error while parsing player vehicle data.", e));
                                    }
                                } else {
                                    Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain vehicle stats construct.");
                                }
                            } else {
                                Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Improper format of stats response.");
                            }
                        }

                        aPlayer.RoundStats[_roundID] = stats;
                        return true;
                    } catch (Exception e) {
                        if (e is WebException) {
                            Log.Warn("Issue connecting to battlelog.");
                            _LastBattlelogAction = UtcNow().AddSeconds(30);
                            _LastBattlelogIssue = UtcNow();
                            return false;
                        }
                        HandleException(new AdKatsException("Error while parsing player stats data.", e));
                        return false;
                    }
                }
            } else if (_gameVersion == GameVersion.BF4) {
                using (WebClient client = new WebClient()) {
                    try {
                        //Fetch stats
                        AdKatsPlayerStats stats = new AdKatsPlayerStats(_roundID);

                        if (_useHackerCheckerLIVESystem) {
                            //Handle overview stats
                            DoBattlelogWait();
                            String overviewResponse = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bf4/warsawdetailedstatspopulate/" + aPlayer.player_personaID + "/1/?cacherand=" + Environment.TickCount);
                            Hashtable json = (Hashtable) JSON.JsonDecode(overviewResponse);
                            Hashtable data = (Hashtable) json["data"];
                            Hashtable overviewStatsTable = null;
                            if (data.ContainsKey("generalStats") && (overviewStatsTable = (Hashtable) data["generalStats"]) != null) {
                                stats.Skill = Int32.Parse(overviewStatsTable["skill"].ToString());
                                stats.Revives = Int32.Parse(overviewStatsTable["revives"].ToString());
                                stats.Rank = Int32.Parse(overviewStatsTable["rank"].ToString());
                                stats.Kills = Int32.Parse(overviewStatsTable["kills"].ToString());
                                stats.Accuracy = (Double) overviewStatsTable["accuracy"];
                                stats.Shots = Int32.Parse(overviewStatsTable["shotsFired"].ToString());
                                stats.Score = Int32.Parse(overviewStatsTable["score"].ToString());
                                stats.Hits = Int32.Parse(overviewStatsTable["shotsHit"].ToString());
                                stats.Rank = Int32.Parse(overviewStatsTable["rank"].ToString());
                                stats.Heals = Int32.Parse(overviewStatsTable["heals"].ToString());
                                stats.Deaths = Int32.Parse(overviewStatsTable["deaths"].ToString());
                                stats.Headshots = Int32.Parse(overviewStatsTable["headshots"].ToString());
                            }
                        }

                        //Handle specific weapon stats
                        DoBattlelogWait();
                        String response = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bf4/warsawWeaponsPopulateStats/" + aPlayer.player_personaID + "/1/stats/");
                        Hashtable responseData = (Hashtable) JSON.JsonDecode(response);

                        if (responseData.ContainsKey("type") && (String) responseData["type"] == "success" && responseData.ContainsKey("message") && (String) responseData["message"] == "OK" && responseData.ContainsKey("data")) {
                            Hashtable statsData = (Hashtable) responseData["data"];
                            if (statsData != null && statsData.ContainsKey("mainWeaponStats")) {
                                ArrayList weaponData = (ArrayList) statsData["mainWeaponStats"];
                                try {
                                    //Get Weapons
                                    if (weaponData != null && weaponData.Count > 0) {
                                        stats.WeaponStats = new Dictionary<String, AdKatsWeaponStat>();
                                        foreach (Hashtable currentWeapon in weaponData) {
                                            //Create new construct
                                            AdKatsWeaponStat weapon = new AdKatsWeaponStat();

                                            //serviceStars
                                            weapon.ServiceStars = (Double) currentWeapon["serviceStars"];
                                            //serviceStarsProgress
                                            weapon.ServiceStarsProgress = (Double) currentWeapon["serviceStarsProgress"];
                                            //category
                                            weapon.Category = ((String) currentWeapon["category"]).Trim().ToLower().Replace(' ', '_');
                                            //categorySID
                                            if (currentWeapon.ContainsKey("categorySID")) {
                                                weapon.CategorySID = (String) currentWeapon["categorySID"];
                                            }
                                            //slug
                                            weapon.ID = ((String) currentWeapon["slug"]).Trim().ToLower().Replace(' ', '_');
                                            //name
                                            weapon.WarsawID = (String) currentWeapon["name"];
                                            //kills
                                            weapon.Kills = (Double) currentWeapon["kills"];

                                            if (weapon.Category != "special") {
                                                //shotsFired
                                                weapon.Shots = (Double) currentWeapon["shotsFired"];
                                                //shotsHit
                                                weapon.Hits = (Double) currentWeapon["shotsHit"];
                                                //accuracy
                                                weapon.Accuracy = (Double) currentWeapon["accuracy"];
                                                //headshots
                                                weapon.Headshots = (Double) currentWeapon["headshots"];
                                                //timeEquipped
                                                weapon.Time = TimeSpan.FromSeconds((Double) currentWeapon["timeEquipped"]);

                                                //Calculate values
                                                weapon.HSKR = weapon.Headshots / weapon.Kills;
                                                if (weapon.Time.TotalMinutes > 0) {
                                                    weapon.KPM = weapon.Kills / weapon.Time.TotalMinutes;
                                                }
                                                weapon.DPS = weapon.Kills / weapon.Hits * 100;
                                            }

                                            //Assign the construct
                                            stats.WeaponStats.Add(weapon.ID, weapon);
                                        }
                                    } else {
                                        Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain weapon stats data.");
                                    }
                                } catch (Exception e) {
                                    HandleException(new AdKatsException("Error while parsing player weapon data.", e));
                                }
                            } else {
                                Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain weapon stats construct.");
                            }
                        } else {
                            Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Improper format of stats response.");
                        }

                        if (_useHackerCheckerLIVESystem) {
                            //Fetch vehicle stats
                            DoBattlelogWait();
                            String vehicleResponse = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bf4/en/warsawvehiclesPopulateStats/" + aPlayer.player_personaID + "/1/stats/");
                            Hashtable vehicleResponseData = (Hashtable) JSON.JsonDecode(vehicleResponse);

                            if (vehicleResponseData.ContainsKey("type") &&
                                (String) vehicleResponseData["type"] == "success" &&
                                vehicleResponseData.ContainsKey("message") &&
                                (String) vehicleResponseData["message"] == "OK" &&
                                vehicleResponseData.ContainsKey("data")) {
                                Hashtable statsData = (Hashtable) vehicleResponseData["data"];
                                if (statsData != null && statsData.ContainsKey("mainVehicleStats")) {
                                    ArrayList vehicleData = (ArrayList) statsData["mainVehicleStats"];
                                    try {
                                        //Get Vehicles
                                        if (vehicleData != null && vehicleData.Count > 0) {
                                            stats.VehicleStats = new Dictionary<String, AdKatsVehicleStat>();
                                            foreach (Hashtable currentWeapon in vehicleData) {
                                                //Create new construct
                                                AdKatsVehicleStat vehicle = new AdKatsVehicleStat();

                                                //serviceStars
                                                vehicle.ServiceStars = (Double) currentWeapon["serviceStars"];
                                                //serviceStarsProgress
                                                vehicle.ServiceStarsProgress = (Double) currentWeapon["serviceStarsProgress"];
                                                //category
                                                vehicle.Category = ((String) currentWeapon["category"]).Trim().ToLower().Replace(' ', '_').Replace('-', '_');
                                                //slug
                                                vehicle.ID = ((String) currentWeapon["slug"]).Trim().ToLower().Replace(' ', '_').Replace('-', '_');
                                                //name
                                                vehicle.WarsawID = (String) currentWeapon["name"];
                                                //kills
                                                vehicle.Kills = (Double) currentWeapon["kills"];
                                                //timeIn
                                                vehicle.TimeIn = TimeSpan.FromSeconds((Double) currentWeapon["timeIn"]);

                                                //Calculate values
                                                if (vehicle.TimeIn.TotalMinutes > 0) {
                                                    vehicle.KPM = vehicle.Kills / vehicle.TimeIn.TotalMinutes;
                                                }

                                                //Assign the construct
                                                stats.VehicleStats.Add(vehicle.ID, vehicle);
                                            }
                                        } else {
                                            Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain vehicle stats data.");
                                        }
                                    } catch (Exception e) {
                                        HandleException(new AdKatsException("Error while parsing player vehicle data.", e));
                                    }
                                } else {
                                    Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain vehicle stats construct.");
                                }
                            } else {
                                Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Improper format of stats response.");
                            }
                        }

                        aPlayer.RoundStats[_roundID] = stats;
                        return true;
                    } catch (Exception e) {
                        if (e is WebException) {
                            Log.Warn("Issue connecting to battlelog.");
                            _LastBattlelogAction = UtcNow().AddSeconds(30);
                            _LastBattlelogIssue = UtcNow();
                            return false;
                        }
                        HandleException(new AdKatsException("Error while parsing player stats data.", e));
                        return false;
                    }
                }
            } else if (_gameVersion == GameVersion.BFHL) {
                using (WebClient client = new WebClient()) {
                    try {
                        //Fetch stats
                        AdKatsPlayerStats stats = new AdKatsPlayerStats(_roundID);
                        DoBattlelogWait();
                        String weaponResponse = ClientDownloadTimer(client, "http://battlelog.battlefield.com/bfh/BFHWeaponsPopulateStats/" + aPlayer.player_personaID + "/1/stats/?cacherand=" + Environment.TickCount);
                        Hashtable responseData = (Hashtable) JSON.JsonDecode(weaponResponse);

                        if (responseData.ContainsKey("type") && (String) responseData["type"] == "success" && responseData.ContainsKey("message") && (String) responseData["message"] == "OK" && responseData.ContainsKey("data")) {
                            Hashtable statsData = (Hashtable) responseData["data"];
                            if (statsData != null && statsData.ContainsKey("mainWeaponStats")) {
                                ArrayList weaponData = (ArrayList) statsData["mainWeaponStats"];
                                try {
                                    //Get Weapons
                                    if (weaponData != null && weaponData.Count > 0) {
                                        stats.WeaponStats = new Dictionary<String, AdKatsWeaponStat>();
                                        foreach (Hashtable currentWeapon in weaponData) {
                                            //Create new construct
                                            AdKatsWeaponStat weapon = new AdKatsWeaponStat();

                                            //serviceStars
                                            weapon.ServiceStars = (Double) currentWeapon["serviceStars"];
                                            //serviceStarsProgress
                                            weapon.ServiceStarsProgress = (Double) currentWeapon["serviceStarsProgress"];
                                            //category
                                            weapon.Category = ((String) currentWeapon["category"]).Trim().ToLower().Replace(' ', '_');
                                            //categorySID
                                            if (currentWeapon.ContainsKey("categorySID")) {
                                                weapon.CategorySID = (String) currentWeapon["categorySID"];
                                            }
                                            //slug
                                            weapon.ID = ((String) currentWeapon["slug"]).Trim().ToLower().Replace(' ', '_');
                                            //name
                                            weapon.WarsawID = (String) currentWeapon["name"];
                                            //kills
                                            weapon.Kills = (Double) currentWeapon["kills"];

                                            //shotsFired
                                            weapon.Shots = (Double) currentWeapon["shotsFired"];
                                            //shotsHit
                                            weapon.Hits = (Double) currentWeapon["shotsHit"];
                                            //accuracy
                                            weapon.Accuracy = (Double) currentWeapon["accuracy"];
                                            //headshots
                                            weapon.Headshots = (Double) currentWeapon["headshots"];
                                            //timeEquipped
                                            weapon.Time = TimeSpan.FromSeconds((Double) currentWeapon["timeEquipped"]);

                                            //Calculate values
                                            weapon.HSKR = weapon.Headshots / weapon.Kills;
                                            if (weapon.Time.TotalMinutes > 0) {
                                                weapon.KPM = weapon.Kills / weapon.Time.TotalMinutes;
                                            }
                                            weapon.DPS = weapon.Kills / weapon.Hits * 100;

                                            //Assign the construct
                                            stats.WeaponStats.Add(weapon.ID, weapon);
                                        }
                                    } else {
                                        Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain weapon stats data.");
                                    }
                                } catch (Exception e) {
                                    HandleException(new AdKatsException("Error while parsing player weapon data.", e));
                                }
                            } else {
                                Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Stats response did not contain weapon stats construct.");
                            }
                        } else {
                            Log.Error("Error processing battlelog stats for " + aPlayer.GetVerboseName() + ". Improper format of stats response.");
                        }
                        aPlayer.RoundStats[_roundID] = stats;
                        return true;
                    } catch (Exception e) {
                        if (e is WebException) {
                            Log.Warn("Issue connecting to battlelog.");
                            _LastBattlelogAction = UtcNow().AddSeconds(30);
                            _LastBattlelogIssue = UtcNow();
                            return false;
                        }
                        HandleException(new AdKatsException("Error while parsing player stats data.", e));
                        return false;
                    }
                }
            }
            return false;
        }

        private void PostVersionTracking()
        {
            if (String.IsNullOrEmpty(_serverInfo.ServerIP))
            {
                return;
            }
            try
            {
                using (WebClient client = new WebClient())
                {
                    NameValueCollection data = new NameValueCollection {
                        {"server_ip", _serverInfo.ServerIP},
                        {"server_name", _serverInfo.ServerName},
                        {"adkats_version_current", PluginVersion},
                        {"adkats_enabled", _pluginEnabled.ToString().ToLower()},
                        {"adkats_uptime", (_threadsReady) ? (Math.Round((UtcNow() - _AdKatsStartTime).TotalSeconds).ToString()) : ("0")},
                        {"updates_disabled", _versionTrackingDisabled.ToString().ToLower()}
                    };
                    byte[] response = client.UploadValues("http://api.gamerethos.net/adkats/usage", data);
                }
            }
            catch (Exception e)
            {
                //Do nothing
            }
            _LastVersionTrackingUpdate = UtcNow();
        }

        private void PostWeaponCodes()
        {
            if (!_DetectedWeaponCodes.Any())
            {
                return;
            }
            try
            {
                string concat = String.Join(",", _DetectedWeaponCodes.ToArray());
                using (WebClient client = new WebClient())
                {
                    NameValueCollection data = new NameValueCollection {
                        {"isAdKats", "1"},
                        {"game", _gameVersion.ToString()},
                        {"weapons", concat}
                    };
                    byte[] response = client.UploadValues("http://api.gamerethos.net/weapons", data);
                    if (response != null && _isTestingAuthorized)
                    {
                        String textResponse = Encoding.Default.GetString(response);
                    }
                }
            }
            catch (Exception e)
            {
            }
            _PostedWeaponCodes = true;
            _LastWeaponCodePost = UtcNow();
        }

        private Boolean PopulateCommandReputationDictionaries()
        {
            try
            {
                Dictionary<string, double> sourceDic = new Dictionary<String, Double>();
                Dictionary<string, double> targetDic = new Dictionary<String, Double>();
                ArrayList repDefs = FetchAdKatsReputationDefinitions();
                if (repDefs == null || repDefs.Count == 0)
                {
                    return false;
                }
                foreach (Hashtable repWeapon in repDefs)
                {
                    sourceDic[(String)repWeapon["command_typeaction"]] = (double)repWeapon["source_weight"];
                    targetDic[(String)repWeapon["command_typeaction"]] = (double)repWeapon["target_weight"];
                }
                _commandSourceReputationDictionary = sourceDic;
                _commandTargetReputationDictionary = targetDic;
                return true;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while populating command reputation cache", e));
            }
            return false;
        }

        private ArrayList FetchAdKatsReputationDefinitions()
        {
            Log.Debug(() => "Entering FetchAdKatsReputationDefinitions", 7);
            ArrayList repTable = null;
            using (WebClient client = new WebClient())
            {
                String repInfo;
                Log.Debug(() => "Fetching reputation definitions...", 2);
                try
                {
                    repInfo = ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/adkatsreputationstats.json" + "?cacherand=" + Environment.TickCount);
                    Log.Debug(() => "Reputation definitions fetched.", 1);
                }
                catch (Exception)
                {
                    try
                    {
                        repInfo = ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/reputation" + "?cacherand=" + Environment.TickCount);
                        Log.Debug(() => "Reputation definitions fetched from backup location.", 1);
                    }
                    catch (Exception)
                    {
                        return null;
                    }
                }
                try
                {
                    repTable = (ArrayList)JSON.JsonDecode(repInfo);
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while parsing reputation definitions.", e));
                }
            }
            Log.Debug(() => "Exiting FetchAdKatsReputationDefinitions", 7);
            return repTable;
        }

        private Boolean PopulateWeaponNameDictionaries()
        {
            try
            {
                Hashtable weaponNames = FetchAdKatsWeaponNames();
                if (weaponNames == null)
                {
                    return false;
                }
                Hashtable gameWeaponNames = (Hashtable)weaponNames[_gameVersion.ToString()];
                if (gameWeaponNames == null)
                {
                    Log.Error("Weapons for " + _gameVersion + " not found in weapon name library.");
                    return false;
                }
                foreach (DictionaryEntry currentWeapon in gameWeaponNames)
                {
                    //Create new construct
                    String weaponCode = (String)currentWeapon.Key;
                    String shortName = (String)((Hashtable)currentWeapon.Value)["readable_short"];
                    String longName = (String)((Hashtable)currentWeapon.Value)["readable_long"];
                    //Add the weapon name
                    _weaponNames[weaponCode] = new AdKatsWeaponName()
                    {
                        weapon_game = _gameVersion,
                        readable_short = shortName,
                        readable_long = longName
                    };
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while populating weapon name cache", e));
            }
            return true;
        }

        private Hashtable FetchAdKatsWeaponNames()
        {
            Log.Debug(() => "Entering FetchAdKatsWeaponNames", 7);
            Hashtable weaponNames = null;
            using (WebClient client = new WebClient())
            {
                String downloadString;
                Log.Debug(() => "Fetching weapon names...", 2);
                try
                {
                    downloadString = ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/adkatsweaponnames.json" + "?cacherand=" + Environment.TickCount);
                    Log.Debug(() => "Weapon names fetched.", 1);
                }
                catch (Exception)
                {
                    try
                    {
                        downloadString = ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/weaponnames" + "?cacherand=" + Environment.TickCount);
                        Log.Debug(() => "Weapon names fetched from backup location.", 1);
                    }
                    catch (Exception)
                    {
                        return null;
                    }
                }
                try
                {
                    weaponNames = (Hashtable)JSON.JsonDecode(downloadString);
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while parsing reputation definitions.", e));
                }
            }
            Log.Debug(() => "Exiting FetchAdKatsWeaponNames", 7);
            return weaponNames;
        }

        private Boolean PopulateSpecialGroupDictionaries()
        {
            Log.Debug(() => "Entering PopulateSpecialGroupsDictionary", 7);
            try
            {
                List<AdKatsSpecialGroup> groupList = FetchAdKatsSpecialGroupDefinitions();
                if (groupList == null || groupList.Count == 0)
                {
                    return false;
                }
                lock (_specialPlayerGroupKeyDictionary)
                {
                    lock (_specialPlayerGroupIDDictionary)
                    {
                        _specialPlayerGroupIDDictionary.Clear();
                        _specialPlayerGroupKeyDictionary.Clear();
                        foreach (AdKatsSpecialGroup group in groupList)
                        {
                            _specialPlayerGroupIDDictionary[group.group_id] = group;
                            _specialPlayerGroupKeyDictionary[group.group_key] = group;
                        }
                    }
                }
                return true;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Exception while populating special group cache", e));
            }
            Log.Debug(() => "Exiting PopulateSpecialGroupsDictionary", 7);
            return false;
        }

        private List<AdKatsSpecialGroup> FetchAdKatsSpecialGroupDefinitions()
        {
            Log.Debug(() => "Entering FetchAdKatsSpecialGroupDefinitions", 7);
            List<AdKatsSpecialGroup> SpecialGroupsList = null;
            using (WebClient client = new WebClient())
            {
                String groupInfo;
                Log.Debug(() => "Fetching special group definitions...", 2);
                try
                {
                    groupInfo = ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/adkatsspecialgroups.json" + "?cacherand=" + Environment.TickCount);
                    Log.Debug(() => "Special group definitions fetched.", 1);
                }
                catch (Exception)
                {
                    try
                    {
                        groupInfo = ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/specialgroups" + "?cacherand=" + Environment.TickCount);
                        Log.Debug(() => "Special group definitions fetched from backup location.", 1);
                    }
                    catch (Exception)
                    {
                        return null;
                    }
                }
                try
                {
                    Hashtable groupsTable = (Hashtable)JSON.JsonDecode(groupInfo);
                    ArrayList GroupsList = (ArrayList)groupsTable["SpecialGroups"];
                    if (GroupsList == null || GroupsList.Count == 0)
                    {
                        return null;
                    }
                    SpecialGroupsList = new List<AdKatsSpecialGroup>();
                    foreach (Hashtable groupHash in GroupsList)
                    {
                        AdKatsSpecialGroup update = new AdKatsSpecialGroup();
                        //update_id
                        update.group_id = Convert.ToInt32(groupHash["group_id"]);
                        //group_key
                        Object group_key = groupHash["group_key"];
                        if (group_key == null)
                        {
                            Log.Error("AdKats special group entry group_key was not found.");
                            continue;
                        }
                        update.group_key = (String)group_key;
                        //group_name
                        Object group_name = groupHash["group_name"];
                        if (group_name == null)
                        {
                            Log.Error("AdKats special group entry group_name was not found.");
                            continue;
                        }
                        update.group_name = (String)group_name;
                        //Add
                        SpecialGroupsList.Add(update);
                    }
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while parsing special group definitions.", e));
                    return null;
                }
            }
            Log.Debug(() => "Exiting FetchAdKatsSpecialGroupDefinitions", 7);
            return SpecialGroupsList;
        }

        private void RunSQLUpdates(Boolean async)
        {
            Log.Debug(() => "Entering RunSQLUpdates", 7);
            if (_aliveThreads.Values.Any(aThread => aThread.Name == "SQLUpdater"))
            {
                return;
            }
            if (async)
            {
                StartAndLogThread(new Thread(new ThreadStart(delegate
                {
                    Thread.CurrentThread.Name = "SQLUpdater";
                    Thread.Sleep(TimeSpan.FromMilliseconds(250));
                    RunSQLUpdates();
                    LogThreadExit();
                })));
            }
            else
            {
                RunSQLUpdates();
            }
            Log.Debug(() => "Exiting RunSQLUpdates", 7);
        }

        private void RunSQLUpdates()
        {
            try
            {
                if (_databaseConnectionCriticalState)
                {
                    return;
                }
                Int64 currentVersionInt = ConvertVersionInt(PluginVersion);
                foreach (AdKatsSQLUpdate update in FetchSQLUpdates())
                {
                    if (!_pluginEnabled)
                    {
                        break;
                    }
                    if (update == null)
                    {
                        Log.Error("SQL update was null. Skipping.");
                        continue;
                    }
                    try
                    {
                        //Check for valid version
                        if (!String.IsNullOrEmpty(update.version_minimum) && currentVersionInt < ConvertVersionInt(update.version_minimum))
                        {
                            Log.Debug(() => "Cancelling SQL update '" + update.update_id + "'. Version too early for update.", 5);
                            continue;
                        }
                        if (!String.IsNullOrEmpty(update.version_maximum) && currentVersionInt > ConvertVersionInt(update.version_maximum))
                        {
                            Log.Debug(() => "Cancelling SQL update '" + update.update_id + "'. Version too late for update.", 5);
                            continue;
                        }
                        //Check for valid initial conditions
                        Boolean invalid = false;
                        foreach (String icheckSQL in update.update_checks)
                        {
                            if (!_pluginEnabled)
                            {
                                break;
                            }
                            String checkSQL = icheckSQL.Replace("%DATABASENAME%", _mySqlSchemaName);
                            if (SendQuery(checkSQL, false))
                            {
                                if (!update.update_checks_hasResults)
                                {
                                    //Has results, when it shouldn't
                                    invalid = true;
                                    break;
                                }
                            }
                            else
                            {
                                if (update.update_checks_hasResults)
                                {
                                    //Doesn't have results, when it should
                                    invalid = true;
                                    break;
                                }
                            }
                        }
                        if (invalid)
                        {
                            Log.Debug(() => "Cancelling SQL update '" + update.update_id + "', it does not apply to this database.", 5);
                            continue;
                        }
                        //Run the updates
                        Int32 executeIndex = 0;
                        Boolean failed = false;
                        foreach (String iexecuteSQL in update.update_execute)
                        {
                            if (!_pluginEnabled)
                            {
                                break;
                            }
                            String executeSQL = iexecuteSQL.Replace("%DATABASENAME%", _mySqlSchemaName);
                            if (!SendNonQuery("Executing SQL Update '" + update.update_id + "' (" + update.message_name + ")" + executeIndex++, executeSQL, false) && update.update_execute_requiresModRows)
                            {
                                failed = true;
                                break;
                            }
                        }
                        if (failed)
                        {
                            Log.Error("Cancelling SQL update '" + update.update_id + "'. Update failed execution (" + update.message_failure + "), running failure clause(s). ");
                            Int32 failureIndex = 0;
                            foreach (String failureSQL in update.update_failure)
                            {
                                SendNonQuery("Running SQL Update '" + update.update_id + "' Failure Clause " + failureIndex++, failureSQL, false);
                            }
                            continue;
                        }
                        Log.Success("SQL Update '" + update.update_id + "' completed execution (" + update.message_success + ").");
                        Int32 successIndex = 0;
                        foreach (String successSQL in update.update_success)
                        {
                            if (!_pluginEnabled)
                            {
                                break;
                            }
                            SendNonQuery("Running SQL Update '" + update.update_id + "' Success Clause " + successIndex++, successSQL, false);
                        }
                    }
                    catch (Exception e)
                    {
                        HandleException(new AdKatsException("Error while running SQL update '" + update.update_id + "'.", e));
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while processing SQL updates.", e));
            }
        }

        private List<AdKatsSQLUpdate> FetchSQLUpdates()
        {
            Log.Debug(() => "Entering FetchSQLUpdates", 7);
            List<AdKatsSQLUpdate> SQLUpdates = new List<AdKatsSQLUpdate>();
            using (WebClient client = new WebClient())
            {
                try
                {
                    String updateInfo;
                    try
                    {
                        updateInfo = ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/adkatsupdates.json" + "?cacherand=" + Environment.TickCount);
                        Log.Debug(() => "SQL updates fetched.", 1);
                    }
                    catch (Exception)
                    {
                        try
                        {
                            updateInfo = ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/sqlupdates" + "?cacherand=" + Environment.TickCount);
                            Log.Debug(() => "SQL updates fetched from backup location.", 1);
                        }
                        catch (Exception)
                        {
                            Log.Error("Unable to download SQL updates.");
                            return SQLUpdates;
                        }
                    }
                    Hashtable updateTable = (Hashtable)JSON.JsonDecode(updateInfo);
                    ArrayList SQLUpdateList = (ArrayList)updateTable["SQLUpdates"];
                    if (SQLUpdateList != null && SQLUpdateList.Count > 0)
                    {
                        Log.Debug(() => "SQL updates found. Parsing...", 5);
                        foreach (Hashtable updateHash in SQLUpdateList)
                        {
                            AdKatsSQLUpdate update = new AdKatsSQLUpdate();
                            //update_id
                            update.update_id = (String)updateHash["update_id"];
                            if (String.IsNullOrEmpty(update.update_id))
                            {
                                Log.Error("SQL update update_id was not found or empty.");
                                continue;
                            }
                            Log.Debug(() => "Parsing SQL Update '" + update.update_id + "'", 5);
                            //version_minimum
                            update.version_minimum = (String)updateHash["version_minimum"];
                            Log.Debug(() => "SQL update '" + update.update_id + "' version_minimum: " + update.version_minimum, 5);
                            //version_maximum
                            update.version_maximum = (String)updateHash["version_maximum"];
                            Log.Debug(() => "SQL update '" + update.update_id + "' version_maximum: " + update.version_maximum, 5);
                            //message_name
                            update.message_name = (String)updateHash["message_name"];
                            if (String.IsNullOrEmpty(update.message_name))
                            {
                                Log.Error("SQL update '" + update.update_id + "' message_name was not found or empty.");
                                continue;
                            }
                            Log.Debug(() => "SQL update '" + update.update_id + "' message_name: " + update.message_name, 5);
                            //message_success
                            update.message_success = (String)updateHash["message_success"];
                            if (String.IsNullOrEmpty(update.message_success))
                            {
                                Log.Error("SQL update '" + update.update_id + "' message_success was not found or empty.");
                                continue;
                            }
                            Log.Debug(() => "SQL update '" + update.update_id + "' message_success: " + update.message_success, 5);
                            //message_failure
                            update.message_failure = (String)updateHash["message_failure"];
                            if (String.IsNullOrEmpty(update.message_failure))
                            {
                                Log.Error("SQL update '" + update.update_id + "' message_failure was not found or empty.");
                                continue;
                            }
                            Log.Debug(() => "SQL update '" + update.update_id + "' message_failure: " + update.message_failure, 5);
                            //update_checks_hasResults
                            Object update_checks_hasResults = updateHash["update_checks_hasResults"];
                            if (update_checks_hasResults == null)
                            {
                                Log.Error("SQL update '" + update.update_id + "' update_checks_hasResults was not found.");
                                continue;
                            }
                            update.update_checks_hasResults = (Boolean)update_checks_hasResults;
                            Log.Debug(() => "SQL update '" + update.update_id + "' update_checks_hasResults: " + update.update_checks_hasResults, 5);
                            //update_checks
                            ArrayList update_checks = (ArrayList)updateHash["update_checks"];
                            if (update_checks == null)
                            {
                                Log.Error("SQL update '" + update.update_id + "' update_checks was not found.");
                                continue;
                            }
                            foreach (String line in update_checks)
                            {
                                update.update_checks.Add(line);
                            }
                            Log.Debug(() => "SQL update '" + update.update_id + "' update_checks: " + update.update_checks.Count, 5);
                            //update_execute_requiresModRows
                            Object update_execute_requiresModRows = updateHash["update_execute_requiresModRows"];
                            if (update_execute_requiresModRows == null)
                            {
                                Log.Error("SQL update '" + update.update_id + "' update_execute_requiresModRows was not found.");
                                continue;
                            }
                            update.update_execute_requiresModRows = (Boolean)update_execute_requiresModRows;
                            Log.Debug(() => "SQL update '" + update.update_id + "' update_execute_requiresModRows: " + update.update_execute_requiresModRows, 5);
                            //update_execute
                            ArrayList update_execute = (ArrayList)updateHash["update_execute"];
                            if (update_execute == null)
                            {
                                Log.Error("SQL update '" + update.update_id + "' update_execute was not found.");
                                continue;
                            }
                            foreach (String line in update_execute)
                            {
                                update.update_execute.Add(line);
                            }
                            Log.Debug(() => "SQL update '" + update.update_id + "' update_execute: " + update.update_execute.Count, 5);
                            //update_success
                            ArrayList update_success = (ArrayList)updateHash["update_success"];
                            if (update_success == null)
                            {
                                Log.Error("SQL update '" + update.update_id + "' update_success was not found.");
                                continue;
                            }
                            foreach (String line in update_success)
                            {
                                update.update_success.Add(line);
                            }
                            Log.Debug(() => "SQL update '" + update.update_id + "' update_success: " + update.update_success.Count, 5);
                            //update_failure
                            ArrayList update_failure = (ArrayList)updateHash["update_failure"];
                            if (update_failure == null)
                            {
                                Log.Error("SQL update '" + update.update_id + "' update_failure was not found.");
                                continue;
                            }
                            foreach (String line in update_failure)
                            {
                                update.update_failure.Add(line);
                            }
                            Log.Debug(() => "SQL update '" + update.update_id + "' update_failure: " + update.update_failure.Count, 5);
                            //Add
                            SQLUpdates.Add(update);
                        }
                    }
                    else
                    {
                        Log.Debug(() => "No SQL updates found.", 5);
                    }
                }
                catch (Exception e)
                {
                    if (_isTestingAuthorized)
                    {
                        HandleException(new AdKatsException("Error while fetching SQL updates.", e));
                    }
                    else
                    {
                        Log.Error("Unable to process SQL updates.");
                    }
                }
            }
            Log.Debug(() => "Exiting FetchSQLUpdates", 7);
            return SQLUpdates;
        }

        private void PushThreadDebug(Int64 ticks, String thread, Int32 threadid, Int32 line, String element)
        {
            try
            {
                Log.Debug(() => ticks + " " + thread + " " + threadid + " " + line + " " + element, 8);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("error pushing thread debug", e));
            }
        }

        private String ReplacePlayerInformation(String originalString, AdKatsPlayer aPlayer)
        {
            String processedString = "";
            if (String.IsNullOrEmpty(originalString))
            {
                return processedString;
            }
            //Create new instance of original string
            processedString += originalString;
            if (aPlayer == null)
            {
                return processedString;
            }
            if (aPlayer.player_id > 0)
            {
                processedString = processedString.Replace("%player_id%", aPlayer.player_id + "");
            }
            if (!String.IsNullOrEmpty(aPlayer.player_name))
            {
                processedString = processedString.Replace("%player_name%", aPlayer.player_name);
            }
            if (!String.IsNullOrEmpty(aPlayer.player_guid))
            {
                processedString = processedString.Replace("%player_guid%", aPlayer.player_guid);
            }
            if (!String.IsNullOrEmpty(aPlayer.player_pbguid))
            {
                processedString = processedString.Replace("%player_pbguid%", aPlayer.player_pbguid);
            }
            if (!String.IsNullOrEmpty(aPlayer.player_ip))
            {
                processedString = processedString.Replace("%player_ip%", aPlayer.player_ip);
            }
            return processedString;
        }

        public Boolean UserIsAdmin(AdKatsUser aUser)
        {
            return aUser != null && RoleIsAdmin(aUser.user_role);
        }

        public Boolean PlayerIsAdmin(AdKatsPlayer aPlayer)
        {
            return aPlayer != null && RoleIsAdmin(aPlayer.player_role);
        }

        public Boolean PlayerIsExternal(AdKatsPlayer aPlayer)
        {
            return aPlayer.player_server.ServerID != _serverInfo.ServerID;
        }

        public Boolean RoleIsAdmin(AdKatsRole aRole)
        {
            if (aRole == null)
            {
                Log.Error("role null in RoleIsAdmin");
                return false;
            }
            if (aRole.RoleAllowedCommands.Values.Any(command => command.command_playerInteraction))
            {
                return true;
            }
            return false;
        }

        public Boolean PlayerIsWinning(AdKatsPlayer aPlayer)
        {
            if (aPlayer.frostbitePlayerInfo == null)
            {
                return false;
            }
            //Team Info Check
            AdKatsTeam team1, team2;
            if (!GetTeamByID(1, out team1))
            {
                if (_roundState == RoundState.Playing)
                {
                    Log.Error("Teams not loaded when they should be.");
                }
                return false;
            }
            if (!GetTeamByID(2, out team2))
            {
                if (_roundState == RoundState.Playing)
                {
                    Log.Error("Teams not loaded when they should be.");
                }
                return false;
            }
            AdKatsTeam winningTeam, losingTeam;
            if (team1.TeamTicketCount > team2.TeamTicketCount)
            {
                winningTeam = team1;
                losingTeam = team2;
            }
            else
            {
                winningTeam = team2;
                losingTeam = team1;
            }
            return aPlayer.frostbitePlayerInfo.TeamID == winningTeam.TeamID;
        }

        public AdKatsCommand GetCommandByKey(String commandKey)
        {
            AdKatsCommand command = null;
            if (String.IsNullOrEmpty(commandKey))
            {
                HandleException(new AdKatsException("commandKey was null when fetching command"));
                return command;
            }
            _CommandKeyDictionary.TryGetValue(commandKey, out command);
            if (command == null)
            {
                HandleException(new AdKatsException("Unable to get command for key '" + commandKey + "'"));
            }
            return command;
        }

        public String GetShortWeaponNameByCode(String weaponCode)
        {
            AdKatsWeaponName weaponName = null;
            if (String.IsNullOrEmpty(weaponCode))
            {
                HandleException(new AdKatsException("weaponCode was null when fetching weapon name"));
                return null;
            }
            _weaponNames.TryGetValue(weaponCode, out weaponName);
            if (weaponName == null)
            {
                HandleException(new AdKatsException("Unable to get weapon name for code '" + weaponCode + "'"));
                return weaponCode;
            }
            return weaponName.readable_short;
        }

        public String GetLongWeaponNameByCode(String weaponCode)
        {
            AdKatsWeaponName weaponName = null;
            if (String.IsNullOrEmpty(weaponCode))
            {
                HandleException(new AdKatsException("weaponCode was null when fetching weapon name"));
                return null;
            }
            _weaponNames.TryGetValue(weaponCode, out weaponName);
            if (weaponName == null)
            {
                HandleException(new AdKatsException("Unable to get weapon name for code '" + weaponCode + "'"));
                return weaponCode;
            }
            return weaponName.readable_short;
        }

        public String GetPlayerTeamKey(AdKatsPlayer aPlayer)
        {
            String teamKey = "UKN";
            if (aPlayer == null || aPlayer.frostbitePlayerInfo == null)
            {
                return teamKey;
            }
            AdKatsTeam aTeam;
            if (GetTeamByID(aPlayer.frostbitePlayerInfo.TeamID, out aTeam))
            {
                return aTeam.TeamKey;
            }
            return teamKey;
        }

        public String GetPlayerTeamName(AdKatsPlayer aPlayer)
        {
            String teamName = "Unknown";
            if (aPlayer == null || aPlayer.frostbitePlayerInfo == null)
            {
                return teamName;
            }
            AdKatsTeam aTeam;
            if (GetTeamByID(aPlayer.frostbitePlayerInfo.TeamID, out aTeam))
            {
                return aTeam.TeamName;
            }
            return teamName;
        }

        public Boolean GetTeamByID(Int32 teamID, out AdKatsTeam aTeam)
        {
            aTeam = null;
            if (_teamDictionary.TryGetValue(teamID, out aTeam))
            {
                return true;
            }
            if (_roundState == RoundState.Playing)
            {
                HandleException(new AdKatsException("Team not found for ID " + teamID + " in dictionary of " + _teamDictionary.Count + " teams."));
            }
            return false;
        }

        public String ExtractString(String s, String tag)
        {
            if (String.IsNullOrEmpty(s) || String.IsNullOrEmpty(tag))
            {
                Log.Error("Unable to extract string '" + s + "'. Invalid inputs.");
                return null;
            }
            String startTag = "<" + tag + ">";
            Int32 startIndex = s.IndexOf(startTag, StringComparison.Ordinal) + startTag.Length;
            if (startIndex == -1)
            {
                Log.Error("Unable to extract string '" + s + "'. Starting tag not found.");
                return null;
            }
            Int32 endIndex = s.IndexOf("</" + tag + ">", startIndex, StringComparison.Ordinal);
            if (startIndex == -1)
            {
                Log.Error("Unable to extract string '" + s + "'. Ending tag not found.");
                return null;
            }
            return s.Substring(startIndex, endIndex - startIndex);
        }

        public Boolean IsSoldierNameValid(String soldierName)
        {
            try
            {
                Log.Debug(() => "Checking player '" + soldierName + "' for validity.", 7);
                if (String.IsNullOrEmpty(soldierName))
                {
                    Log.Debug(() => "Soldier Name empty or null.", 5);
                    return false;
                }
                if (soldierName.Length > 16)
                {
                    Log.Debug(() => "Soldier Name '" + soldierName + "' too long, maximum length is 16 characters.", 5);
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                //Soldier id caused exception in the regex, definitely not valid
                Log.Error("Soldier Name '" + soldierName + "' contained invalid characters.");
                return false;
            }
        }
        
        public TimeSpan NowDuration(DateTime diff) {
            return (UtcNow() - diff).Duration();
        }

        public String FormatNowDuration(DateTime diff, Int32 maxComponents) {
            return FormatTimeString(NowDuration(diff), maxComponents);
        }

        public String FormatTimeString(TimeSpan timeSpan, Int32 maxComponents)
        {
            Log.Debug(() => "Entering formatTimeString", 7);
            String timeString = null;
            if (maxComponents < 1)
            {
                return timeString;
            }
            try
            {
                String formattedTime = (timeSpan.TotalMilliseconds >= 0) ? ("") : ("-");

                Double secondSubset = Math.Abs(timeSpan.TotalSeconds);
                if (secondSubset < 1)
                {
                    return "0s";
                }
                Double minuteSubset = (secondSubset / 60);
                Double hourSubset = (minuteSubset / 60);
                Double daySubset = (hourSubset / 24);
                Double weekSubset = (daySubset / 7);
                Double monthSubset = (weekSubset / 4);
                Double yearSubset = (monthSubset / 12);

                int years = (Int32)yearSubset;
                Int32 months = (Int32)monthSubset % 12;
                Int32 weeks = (Int32)weekSubset % 4;
                Int32 days = (Int32)daySubset % 7;
                Int32 hours = (Int32)hourSubset % 24;
                Int32 minutes = (Int32)minuteSubset % 60;
                Int32 seconds = (Int32)secondSubset % 60;

                Int32 usedComponents = 0;
                if (years > 0 && usedComponents < maxComponents)
                {
                    usedComponents++;
                    formattedTime += years + "y";
                }
                if (months > 0 && usedComponents < maxComponents)
                {
                    usedComponents++;
                    formattedTime += months + "M";
                }
                if (weeks > 0 && usedComponents < maxComponents)
                {
                    usedComponents++;
                    formattedTime += weeks + "w";
                }
                if (days > 0 && usedComponents < maxComponents)
                {
                    usedComponents++;
                    formattedTime += days + "d";
                }
                if (hours > 0 && usedComponents < maxComponents)
                {
                    usedComponents++;
                    formattedTime += hours + "h";
                }
                if (minutes > 0 && usedComponents < maxComponents)
                {
                    usedComponents++;
                    formattedTime += minutes + "m";
                }
                if (seconds > 0 && usedComponents < maxComponents)
                {
                    usedComponents++;
                    formattedTime += seconds + "s";
                }
                timeString = formattedTime;
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while formatting time String.", e));
            }
            if (String.IsNullOrEmpty(timeString))
            {
                timeString = "0s";
            }
            Log.Debug(() => "Exiting formatTimeString", 7);
            return timeString;
        }

        private void RemovePlayerFromDictionary(String playerName, Boolean lockDictionary)
        {
            Log.Debug(() => "Entering removePlayerFromDictionary", 7);
            try
            {
                //If the player is currently in the player list, remove them
                if (!String.IsNullOrEmpty(playerName))
                {
                    if (_PlayerDictionary.ContainsKey(playerName))
                    {
                        Log.Debug(() => "Removing " + playerName + " from current player list.", 4);
                        if (lockDictionary)
                        {
                            lock (_PlayerDictionary)
                            {
                                _PlayerDictionary.Remove(playerName);
                            }
                        }
                        else
                        {
                            _PlayerDictionary.Remove(playerName);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while removing player from player dictionary.", e));
            }
            Log.Debug(() => "Exiting removePlayerFromDictionary", 7);
        }

        public CPlayerInfo BuildCPlayerInfo(String playerName, String playerGUID)
        {
            Log.Debug(() => "Entering ", 7);
            CPlayerInfo playerInfo = null;
            try
            {
                IList<String> lstParameters = new List<String>();
                IList<String> lstVariables = new List<String>();
                lstParameters.Add("id");
                lstVariables.Add(playerName);
                lstParameters.Add("guid");
                lstVariables.Add(playerGUID);
                playerInfo = new CPlayerInfo(lstParameters, lstVariables);
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while creating CPlayerInfo object.", e));
            }
            Log.Debug(() => "Exiting ", 7);
            return playerInfo;
        }

        private TimeSpan GetRemainingBanTime(AdKatsBan aBan)
        {
            return aBan.ban_endTime.Subtract(UtcNow());
        }

        private String GetPingLimitStatus() {
            Int32 finalTrigger = 0;
            Int32 baseTrigger = 0;
            Int32 modifier = 0;
            Int32 hour = 0;
            String population = "Unknown";
            if (_PlayerDictionary.Values.ToList().Count(player => player.player_type == PlayerType.Player) >= _serverInfo.InfoObject.MaxPlayerCount - 1) {
                baseTrigger = (Int32)_pingEnforcerFullTriggerMS;
                hour = DateTime.Now.Hour;
                modifier = _pingEnforcerFullTimeModifier[DateTime.Now.Hour];
                finalTrigger = baseTrigger + modifier;
                population = "Full";
            } else if (_populationStatus == PopulationState.High) {
                baseTrigger = (Int32)_pingEnforcerHighTriggerMS;
                hour = DateTime.Now.Hour;
                modifier = _pingEnforcerHighTimeModifier[DateTime.Now.Hour];
                finalTrigger = baseTrigger + modifier;
                population = "High";
            } else if (_populationStatus == PopulationState.Medium) {
                baseTrigger = (Int32)_pingEnforcerMedTriggerMS;
                hour = DateTime.Now.Hour;
                modifier = _pingEnforcerMedTimeModifier[DateTime.Now.Hour];
                finalTrigger = baseTrigger + modifier;
                population = "Medium";
            } else if (_populationStatus == PopulationState.Low) {
                baseTrigger = (Int32)_pingEnforcerLowTriggerMS;
                hour = DateTime.Now.Hour;
                modifier = _pingEnforcerLowTimeModifier[DateTime.Now.Hour];
                finalTrigger = baseTrigger + modifier;
                population = "Low";
            }
            return finalTrigger + "ms = " + baseTrigger + "ms [Pop: " + population + "] " + ((modifier >= 0)?("add "):("remove ")) + Math.Abs(modifier) + "ms [Hour: " + hour + "]"; 
        }

        private Double GetPingLimit() {
            Double currentTriggerMS = 1000;
            if (_PlayerDictionary.Values.Count(player => player.player_type == PlayerType.Player) >= _serverInfo.InfoObject.MaxPlayerCount - 1) {
                currentTriggerMS = _pingEnforcerFullTriggerMS + _pingEnforcerFullTimeModifier[DateTime.Now.Hour];
            } else if (_populationStatus == PopulationState.High) {
                currentTriggerMS = _pingEnforcerHighTriggerMS + _pingEnforcerHighTimeModifier[DateTime.Now.Hour];
            } else if (_populationStatus == PopulationState.Medium) {
                currentTriggerMS = _pingEnforcerMedTriggerMS + _pingEnforcerMedTimeModifier[DateTime.Now.Hour];
            } else if (_populationStatus == PopulationState.Low) {
                currentTriggerMS = _pingEnforcerLowTriggerMS + _pingEnforcerLowTimeModifier[DateTime.Now.Hour];
            }
            return currentTriggerMS;
        }

        public DateTime UtcNow()
        {
            return DateTime.UtcNow + _dbTimingOffset;
        }

        public static String GetRandom32BitHashCode()
        {
            String randomString = "";
            Random random = new Random();

            for (Int32 i = 0; i < 32; i++)
            {
                randomString += Convert.ToChar(Convert.ToInt32(Math.Floor(91 * random.NextDouble()))).ToString(CultureInfo.InvariantCulture);
            }

            return Encode(randomString);
        }

        public static String Encode(String str)
        {
            byte[] encbuff = Encoding.UTF8.GetBytes(str);
            return Convert.ToBase64String(encbuff);
        }

        public static String Decode(String str)
        {
            byte[] decbuff = Convert.FromBase64String(str.Replace(" ", "+"));
            return Encoding.UTF8.GetString(decbuff);
        }

        public static String EncodeStringArray(String[] strValue)
        {
            StringBuilder encodedString = new StringBuilder();

            for (Int32 i = 0; i < strValue.Length; i++)
            {
                if (i > 0)
                {
                    encodedString.Append("|");
                    //strReturn += "|";
                }
                encodedString.Append(Encode(strValue[i]));
                //strReturn += Encode(strValue[i]);
            }

            return encodedString.ToString();
        }

        public byte[] GetBytes(String str)
        {
            byte[] bytes = new byte[str.Length * sizeof(char)];
            Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);
            return bytes;
        }

        public String GetString(byte[] bytes)
        {
            char[] chars = new char[bytes.Length / sizeof(char)];
            Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
            return new String(chars);
        }

        //Calling this method will make the settings window refresh with new data
        public void UpdateSettingPage() {
            SetExternalPluginSetting("AdKats", "UpdateSettings", "Update");
        }

        //Calls setVariable with the given parameters
        public void SetExternalPluginSetting(String pluginName, String settingName, String settingValue) {
            if (_isTestingAuthorized) {
                Log.Info("Updating setting " + pluginName + ":" + settingName);
            }
            if (String.IsNullOrEmpty(pluginName) || String.IsNullOrEmpty(settingName) || settingValue == null)
            {
                Log.Error("Required inputs null or empty in setExternalPluginSetting");
                return;
            }
            ExecuteCommand("procon.protected.plugins.setVariable", pluginName, settingName, settingValue);
        }

        //Credit to Imisnew2, grabbed from TS3Sync
        public static Double PercentMatch(String s, String t)
        {
            Double max;
            Double min;
            Int32 distance;
            if (s.Length >= t.Length)
            {
                max = s.Length;
                min = t.Length;
                distance = LevenshteinDistance(s, t);
            }
            else
            {
                max = t.Length;
                min = s.Length;
                distance = LevenshteinDistance(t, s);
            }
            double percent = (max - distance) / max;
            double maxPossMatch = min / max;
            return (percent / maxPossMatch) * 100;
        }

        //Credit to Micovery and PapaCharlie9 for modified Levenshtein Distance algorithm 
        public static Int32 LevenshteinDistance(String s, String t)
        {
            s = s.ToLower();
            t = t.ToLower();
            Int32 n = s.Length;
            Int32 m = t.Length;
            int[,] d = new Int32[n + 1, m + 1];
            if (n == 0)
            {
                return m;
            }
            if (m == 0)
            {
                return n;
            }
            for (Int32 i = 0; i <= n; d[i, 0] = i++)
            {
                ;
            }
            for (Int32 j = 0; j <= m; d[0, j] = j++)
            {
                ;
            }
            for (Int32 i = 1; i <= n; i++)
            {
                for (Int32 j = 1; j <= m; j++)
                {
                    d[i, j] = Math.Min(Math.Min(d[i - 1, j] + 1, d[i, j - 1] + 0), d[i - 1, j - 1] + ((t[j - 1] == s[i - 1]) ? 0 : 1));
                }
            }
            return d[n, m];
        }

        //parses single word or number parameters out of a String until param count is reached
        private String[] ParseParameters(String message, Int32 maxParamCount)
        {
            //create list for parameters
            List<string> parameters = new List<String>();
            if (message.Length > 0)
            {
                //Add all single word/number parameters
                String[] paramSplit = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                Int32 maxLoop = (paramSplit.Length < maxParamCount) ? (paramSplit.Length) : (maxParamCount);
                for (Int32 i = 0; i < maxLoop - 1; i++)
                {
                    Log.Debug(() => "Param " + i + ": " + paramSplit[i], 6);
                    parameters.Add(paramSplit[i]);
                    message = message.TrimStart(paramSplit[i].ToCharArray()).Trim();
                }
                //Add final multi-word parameter
                parameters.Add(message);
            }
            Log.Debug(() => "Num params: " + parameters.Count, 6);
            return parameters.ToArray();
        }

        public void JoinWith(Thread thread)
        {
            if (thread == null || !thread.IsAlive)
            {
                Log.Debug(() => "Thread already finished.", 3);
                return;
            }
            Log.Debug(() => "Waiting for ^b" + thread.Name + "^n to finish", 3);
            thread.Join();
        }

        protected void LogThreadExit()
        {
            lock (_aliveThreads)
            {
                _aliveThreads.Remove(Thread.CurrentThread.ManagedThreadId);
                //Log.Warn("THREAD DEBUG: Stopping [" + Thread.CurrentThread.ManagedThreadId + ":'" + Thread.CurrentThread.Name + "']. " + _aliveThreads.Count + " threads running.");
            }
        }

        protected void StartAndLogThread(Thread aThread)
        {
            aThread.Start();
            lock (_aliveThreads)
            {
                if (!_aliveThreads.ContainsKey(aThread.ManagedThreadId))
                {
                    _aliveThreads.Add(aThread.ManagedThreadId, aThread);
                    _threadMasterWaitHandle.WaitOne(100);
                    //Log.Warn("THREAD DEBUG: Starting [" + aThread.ManagedThreadId + ":'" + aThread.Name + "']. " + _aliveThreads.Count + " threads running.");
                }
            }
        }

        public String GenerateKickReason(AdKatsRecord record)
        {
            String sourceNameString = "[" + record.source_name + "]";

            //Create the full message
            String fullMessage = record.record_message + " " + sourceNameString;

            //Trim the kick message if necessary
            Int32 cutLength = fullMessage.Length - 80;
            if (cutLength > 0)
            {
                String cutReason = record.record_message.Substring(0, record.record_message.Length - cutLength);
                fullMessage = cutReason + " " + sourceNameString;
            }
            return fullMessage;
        }

        public String GenerateBanReason(AdKatsBan aBan)
        {
            String banDurationString;
            //If ban time > 1000 days just say perm
            TimeSpan remainingTime = GetRemainingBanTime(aBan);
            if (remainingTime.TotalDays > 1000)
            {
                banDurationString = "[perm]";
            }
            else
            {
                banDurationString = "[" + FormatTimeString(remainingTime, 2) + "]";
            }
            String sourceNameString = "[" + aBan.ban_record.source_name + "]";
            String banAppendString = ((_UseBanAppend) ? ("[" + _BanAppend + "]") : (""));

            //Create the full message
            String fullMessage = aBan.ban_record.record_message + " " + banDurationString + sourceNameString + banAppendString;

            //Trim the kick message if necessary
            Int32 cutLength = fullMessage.Length - 80;
            if (cutLength > 0)
            {
                String cutReason = aBan.ban_record.record_message.Substring(0, aBan.ban_record.record_message.Length - cutLength);
                fullMessage = cutReason + " " + banDurationString + sourceNameString + banAppendString;
            }
            return fullMessage;
        }

        public void UpdateOtherPlugins(String dllPath) {

            //Other plugins
            //1 - MULTIBalancer - With ColColonCleaner balance mods
            if (_isTestingAuthorized && _gameVersion == GameVersion.BF4) {
                String externalPluginSource;
                using (WebClient client = new WebClient()) {
                    try {
                        externalPluginSource = ClientDownloadTimer(client, "https://raw.githubusercontent.com/ColColonCleaner/multi-balancer/master/MULTIbalancer.cs" + "?cacherand=" + Environment.TickCount);
                    } catch (Exception e) {
                        if (_pluginUpdateCaller != null) {
                            SendMessageToSource(_pluginUpdateCaller, "Unable to install/update MULTIBalancer.");
                        }
                        Log.Error("Unable to install/update MULTIBalancer.");
                        _pluginUpdateCaller = null;
                        LogThreadExit();
                        return;
                    }
                }
                if (String.IsNullOrEmpty(externalPluginSource)) {
                    if (_pluginUpdateCaller != null) {
                        SendMessageToSource(_pluginUpdateCaller, "Downloaded MULTIBalancer source was empty. Unable to install/update MULTIBalancer.");
                    }
                    Log.Error("Downloaded MULTIBalancer source was empty. Unable to install/update MULTIBalancer.");
                    _pluginUpdateCaller = null;
                    LogThreadExit();
                    return;
                }
                String externalPluginFileName = "MULTIbalancer.cs";
                String externalPluginPath = Path.Combine(dllPath.Trim(new[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar }), externalPluginFileName);
                CompilerResults externalPluginCompileResults = CompilePluginSource(externalPluginSource);
                if (externalPluginCompileResults.Errors.HasErrors) {
                    foreach (CompilerError errComp in externalPluginCompileResults.Errors) {
                        if (String.Compare(errComp.ErrorNumber, "CS0016", StringComparison.Ordinal) != 0 && errComp.IsWarning == false) {
                            Log.Error(String.Format("\t^1{0} (Line: {1}, C: {2}) {3}: {4}", new object[] { externalPluginFileName, errComp.Line, errComp.Column, errComp.ErrorNumber, errComp.ErrorText }));
                        }
                    }
                    if (_pluginUpdateCaller != null) {
                        SendMessageToSource(_pluginUpdateCaller, "Updated MULTIBalancer source could not compile. Unable to install/update MULTIBalancer.");
                    }
                    Log.Error("Updated MULTIBalancer source could not compile. Unable to install/update MULTIBalancer.");
                    _pluginUpdateCaller = null;
                    LogThreadExit();
                    return;
                }
                Int64 patchedPluginSizeKb = 0;
                Boolean externalPluginFileWriteFailed = false;
                Int32 externalPluginWriteAttempts = 0;
                do {
                    using (FileStream stream = File.Open(externalPluginPath, FileMode.Create)) {
                        if (!stream.CanWrite) {
                            if (_pluginUpdateCaller != null) {
                                SendMessageToSource(_pluginUpdateCaller, "Cannot write updates to MULTIBalancer source file. Unable to install/update MULTIBalancer.");
                            }
                            Log.Error("Cannot write updates to MULTIBalancer source file. Unable to install/update MULTIBalancer.");
                            _pluginUpdateCaller = null;
                            LogThreadExit();
                            return;
                        }
                        Byte[] info = new UTF8Encoding(true).GetBytes(externalPluginSource);
                        stream.Write(info, 0, info.Length);
                    }
                    patchedPluginSizeKb = new FileInfo(externalPluginPath).Length / 1024;
                    //There is no way the valid plugin can be less than 1 Kb
                    if (patchedPluginSizeKb < 1) {
                        if (_pluginUpdateCaller != null) {
                            SendMessageToSource(_pluginUpdateCaller, "Write failure on MULTIBalancer update. Attempting write again.");
                        }
                        Log.Error("Write failure on MULTIBalancer update. Attempting write again.");
                        externalPluginFileWriteFailed = true;
                    } else {
                        externalPluginFileWriteFailed = false;
                    }
                    if (++externalPluginWriteAttempts > 5) {
                        if (_pluginUpdateCaller != null) {
                            SendMessageToSource(_pluginUpdateCaller, "Constant failure to write MULTIBalancer update to file. Unable to install/update MULTIBalancer.");
                        }
                        Log.Error("Constant failure to write MULTIBalancer update to file. Unable to install/update MULTIBalancer.");
                        _pluginUpdateCaller = null;
                        LogThreadExit();
                        return;
                    }
                } while (externalPluginFileWriteFailed);
                if (_pluginUpdateCaller != null) {
                    SendMessageToSource(_pluginUpdateCaller, "MULTIBalancer installed/updated. Plugin size " + patchedPluginSizeKb + "KB");
                }
                Log.Success("MULTIBalancer installed/updated. Plugin size " + patchedPluginSizeKb + "KB");
            }
        }

        public void UpdateExtensions(String dllPath) {

            //Extensions
            //1 - AdKatsLRT - Private Extension - Token Required
            if (!String.IsNullOrEmpty(_AdKatsLRTExtensionToken)) {
                String extensionSource;
                using (WebClient client = new WebClient()) {
                    try {
                        extensionSource = ClientDownloadTimer(client, "https://raw.githubusercontent.com/AdKats/AdKats-LRT/master/AdKatsLRT.cs?token=" + _AdKatsLRTExtensionToken + "&cacherand=" + Environment.TickCount);
                    } catch (Exception e) {
                        if (_pluginUpdateCaller != null) {
                            SendMessageToSource(_pluginUpdateCaller, "Unable to install/update AdKatsLRT Extension. Connection error, or invalid token.");
                        }
                        Log.Error("Unable to install/update AdKatsLRT Extension. Connection error, or invalid token.");
                        _pluginUpdateCaller = null;
                        LogThreadExit();
                        return;
                    }
                }
                if (String.IsNullOrEmpty(extensionSource)) {
                    if (_pluginUpdateCaller != null) {
                        SendMessageToSource(_pluginUpdateCaller, "Downloaded AdKatsLRT Extension source was empty. Unable to install/update AdKatsLRT Extension.");
                    }
                    Log.Error("Downloaded AdKatsLRT Extension source was empty. Unable to install/update AdKatsLRT Extension.");
                    _pluginUpdateCaller = null;
                    LogThreadExit();
                    return;
                }
                String extensionFileName = "AdKatsLRT.cs";
                String extensionPath = Path.Combine(dllPath.Trim(new[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar }), extensionFileName);
                CompilerResults extensionCompileResults = CompilePluginSource(extensionSource);
                if (extensionCompileResults.Errors.HasErrors) {
                    foreach (CompilerError errComp in extensionCompileResults.Errors) {
                        if (String.Compare(errComp.ErrorNumber, "CS0016", StringComparison.Ordinal) != 0 && errComp.IsWarning == false) {
                            Log.Error(String.Format("\t^1{0} (Line: {1}, C: {2}) {3}: {4}", new object[] { extensionFileName, errComp.Line, errComp.Column, errComp.ErrorNumber, errComp.ErrorText }));
                        }
                    }
                    if (_pluginUpdateCaller != null) {
                        SendMessageToSource(_pluginUpdateCaller, "Updated AdKatsLRT Extension source could not compile. Unable to install/update AdKatsLRT Extension.");
                    }
                    Log.Error("Updated AdKatsLRT Extension source could not compile. Unable to install/update AdKatsLRT Extension.");
                    _pluginUpdateCaller = null;
                    LogThreadExit();
                    return;
                }
                Int64 patchedExtensionSizeKb = 0;
                Boolean extensionFileWriteFailed = false;
                Int32 extensionWriteAttempts = 0;
                do {
                    using (FileStream stream = File.Open(extensionPath, FileMode.Create)) {
                        if (!stream.CanWrite) {
                            if (_pluginUpdateCaller != null) {
                                SendMessageToSource(_pluginUpdateCaller, "Cannot write updates to AdKatsLRT Extension source file. Unable to install/update AdKatsLRT Extension.");
                            }
                            Log.Error("Cannot write updates to AdKatsLRT Extension source file. Unable to install/update AdKatsLRT Extension.");
                            _pluginUpdateCaller = null;
                            LogThreadExit();
                            return;
                        }
                        Byte[] info = new UTF8Encoding(true).GetBytes(extensionSource);
                        stream.Write(info, 0, info.Length);
                    }
                    patchedExtensionSizeKb = new FileInfo(extensionPath).Length / 1024;
                    //There is no way the valid extension can be less than 1 Kb
                    if (patchedExtensionSizeKb < 1) {
                        if (_pluginUpdateCaller != null) {
                            SendMessageToSource(_pluginUpdateCaller, "Write failure on AdKatsLRT Extension update. Attempting write again.");
                        }
                        Log.Error("Write failure on AdKatsLRT Extension update. Attempting write again.");
                        extensionFileWriteFailed = true;
                    } else {
                        extensionFileWriteFailed = false;
                    }
                    if (++extensionWriteAttempts > 5) {
                        if (_pluginUpdateCaller != null) {
                            SendMessageToSource(_pluginUpdateCaller, "Constant failure to write AdKatsLRT Extension update to file. Unable to install/update AdKatsLRT Extension.");
                        }
                        Log.Error("Constant failure to write AdKatsLRT Extension update to file. Unable to install/update AdKatsLRT Extension.");
                        _pluginUpdateCaller = null;
                        LogThreadExit();
                        return;
                    }
                } while (extensionFileWriteFailed);
                if (_pluginUpdateCaller != null) {
                    SendMessageToSource(_pluginUpdateCaller, "AdKatsLRT Extension installed/updated. Extension size " + patchedExtensionSizeKb + "KB");
                }
                Log.Success("AdKatsLRT Extension installed/updated. Extension size " + patchedExtensionSizeKb + "KB");
            }
        }

        public void CheckForPluginUpdates(Boolean manual)
        {
            try
            {
                // Temporary patch for FPSG's memory issues
                if (!manual && _serverInfo.ServerName.ToUpper().Contains("FPSG"))
                {
                    return;
                }
                if ((_pluginVersionStatus == VersionStatus.OutdatedBuild && !_automaticUpdatesDisabled && !_pluginUpdatePatched) || 
                    _pluginVersionStatus == VersionStatus.TestBuild || 
                    (_isTestingAuthorized) || 
                    (!String.IsNullOrEmpty(_AdKatsLRTExtensionToken)) || 
                    manual)
                {
                    if (_aliveThreads.Values.Any(aThread => aThread.Name == "PluginUpdater"))
                    {
                        if (_pluginUpdateCaller != null)
                        {
                            SendMessageToSource(_pluginUpdateCaller, "Update already in progress.");
                        }
                        _pluginUpdateCaller = null;
                        LogThreadExit();
                        return;
                    }
                    Thread pluginUpdater = new Thread(new ThreadStart(delegate
                    {
                        try
                        {
                            Thread.CurrentThread.Name = "PluginUpdater";
                            _pluginUpdateProgress = "Started";

                            String dllPath = Directory.GetParent(Assembly.GetExecutingAssembly().Location).FullName;

                            //Other plugins
                            UpdateOtherPlugins(dllPath);

                            //AdKats Extensions
                            UpdateExtensions(dllPath);

                            if (_pluginUpdateCaller != null)
                            {
                                SendMessageToSource(_pluginUpdateCaller, "Preparing to download plugin update.");
                            }
                            if (_pluginVersionStatus == VersionStatus.OutdatedBuild)
                            {
                                Log.Info("Preparing to download plugin update to version " + _latestPluginVersion);
                            }
                            String pluginSource = null;
                            using (WebClient client = new WebClient())
                            {
                                try
                                {
                                    string stableURL = "https://raw.githubusercontent.com/AdKats/AdKats/master/AdKats.cs" + "?cacherand=" + Environment.TickCount;
                                    string testURL = "https://raw.githubusercontent.com/AdKats/AdKats/test/AdKats.cs" + "?cacherand=" + Environment.TickCount;
                                    if (_pluginVersionStatus == VersionStatus.OutdatedBuild)
                                    {
                                        pluginSource = ClientDownloadTimer(client, stableURL);
                                    }
                                    else
                                    {
                                        pluginSource = ClientDownloadTimer(client, testURL);
                                    }
                                }
                                catch (Exception e)
                                {
                                    if (_pluginUpdateCaller != null)
                                    {
                                        SendMessageToSource(_pluginUpdateCaller, "Unable to download plugin update.");
                                    }
                                    if (_pluginVersionStatus == VersionStatus.OutdatedBuild)
                                    {
                                        Log.Error("Unable to download plugin update to version " + _latestPluginVersion);
                                    }
                                    _pluginUpdateCaller = null;
                                    LogThreadExit();
                                    return;
                                }
                            }
                            if (String.IsNullOrEmpty(pluginSource))
                            {
                                if (_pluginUpdateCaller != null)
                                {
                                    SendMessageToSource(_pluginUpdateCaller, "Downloaded plugin source was empty. Cannot update.");
                                }
                                if (_pluginVersionStatus == VersionStatus.OutdatedBuild)
                                {
                                    Log.Error("Downloaded plugin source was empty. Cannot update to version " + _latestPluginVersion);
                                }
                                _pluginUpdateCaller = null;
                                LogThreadExit();
                                return;
                            }
                            _pluginUpdateProgress = "Downloaded";
                            if (_pluginVersionStatus == VersionStatus.OutdatedBuild)
                            {
                                Log.Success("Updated plugin source downloaded.");
                                Log.Info("Preparing test compile on updated plugin source.");
                            }
                            String pluginFileName = "AdKats.cs";
                            String pluginPath = Path.Combine(dllPath.Trim(new[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar }), pluginFileName);
                            CompilerResults compileResults = CompilePluginSource(pluginSource);
                            if (compileResults.Errors.HasErrors)
                            {
                                foreach (CompilerError errComp in compileResults.Errors)
                                {
                                    if (String.Compare(errComp.ErrorNumber, "CS0016", StringComparison.Ordinal) != 0 && errComp.IsWarning == false)
                                    {
                                        Log.Error(String.Format("\t^1{0} (Line: {1}, C: {2}) {3}: {4}", new object[] { pluginFileName, errComp.Line, errComp.Column, errComp.ErrorNumber, errComp.ErrorText }));
                                    }
                                }
                                if (_pluginUpdateCaller != null)
                                {
                                    SendMessageToSource(_pluginUpdateCaller, "Updated plugin source could not compile. Cannot update.");
                                }
                                if (_pluginVersionStatus == VersionStatus.OutdatedBuild)
                                {
                                    Log.Error("Updated plugin source could not compile. Cannot update to version " + _latestPluginVersion);
                                }
                                _pluginUpdateCaller = null;
                                LogThreadExit();
                                return;
                            }
                            if (_pluginVersionStatus == VersionStatus.OutdatedBuild)
                            {
                                Log.Success("Plugin update compiled successfully.");
                            }
                            _pluginUpdateProgress = "Compiled";
                            if (_pluginVersionStatus == VersionStatus.OutdatedBuild)
                            {
                                Log.Info("Preparing to update source file on disk.");
                            }
                            Int64 originalSizeKb = new FileInfo(pluginPath).Length / 1024;
                            Int64 patchedSizeKB = 0;
                            Boolean fileWriteFailed = false;
                            Int32 attempts = 0;
                            do
                            {
                                using (FileStream stream = File.Open(pluginPath, FileMode.Create))
                                {
                                    if (!stream.CanWrite)
                                    {
                                        if (_pluginUpdateCaller != null)
                                        {
                                            SendMessageToSource(_pluginUpdateCaller, "Cannot write updates to source file. Cannot update.");
                                        }
                                        Log.Error("Cannot write updates to source file. Cannot update.");
                                        _pluginUpdateCaller = null;
                                        LogThreadExit();
                                        return;
                                    }
                                    Byte[] info = new UTF8Encoding(true).GetBytes(pluginSource);
                                    stream.Write(info, 0, info.Length);
                                }
                                patchedSizeKB = new FileInfo(pluginPath).Length / 1024;
                                //There is no way the valid plugin can be less than 1 Kb
                                if (patchedSizeKB < 1)
                                {
                                    if (_pluginUpdateCaller != null)
                                    {
                                        SendMessageToSource(_pluginUpdateCaller, "Write failure on plugin update. Attempting write again.");
                                    }
                                    Log.Error("Write failure on plugin update. Attempting write again.");
                                    Thread.Sleep(500);
                                    fileWriteFailed = true;
                                }
                                else
                                {
                                    fileWriteFailed = false;
                                }
                                if (++attempts > 5)
                                {
                                    if (_pluginUpdateCaller != null)
                                    {
                                        SendMessageToSource(_pluginUpdateCaller, "Constant failure to write plugin update to file. Cannot update.");
                                    }
                                    Log.Error("Constant failure to write plugin update to file. Cannot update.");
                                    _pluginUpdateCaller = null;
                                    LogThreadExit();
                                    return;
                                }
                            } while (fileWriteFailed);
                            String patchedVersion = ExtractString(pluginSource, "version_code");
                            if (!String.IsNullOrEmpty(patchedVersion))
                            {
                                Int64 patchedVersionInt = ConvertVersionInt(patchedVersion);
                                if (patchedVersionInt >= _currentPluginVersionInt)
                                {
                                    //Patched version is newer than current version
                                    if (patchedVersionInt > _pluginPatchedVersionInt && _pluginUpdatePatched)
                                    {
                                        if (_pluginUpdateCaller != null)
                                        {
                                            SendMessageToSource(_pluginUpdateCaller, "Previous update " + _pluginPatchedVersion + " overwritten by newer patch " + patchedVersion + ", restart procon to run this version. Plugin size " + patchedSizeKB + "KB");
                                        }
                                        //Patched version is newer than an already patched version
                                        Log.Success("Previous update " + _pluginPatchedVersion + " overwritten by newer patch " + patchedVersion + ", restart procon to run this version. Plugin size " + patchedSizeKB + "KB");
                                        if (_isTestingAuthorized) {
                                            Environment.Exit(4533);
                                        }
                                    }
                                    else if (!_pluginUpdatePatched && patchedVersionInt > _currentPluginVersionInt)
                                    {
                                        if (_pluginUpdateCaller != null)
                                        {
                                            SendMessageToSource(_pluginUpdateCaller, "Plugin updated to version " + patchedVersion + ", restart procon to run this version. Plugin size " + patchedSizeKB + "KB");
                                        }
                                        //User not notified of patch yet
                                        Log.Success("Plugin updated to version " + patchedVersion + ", restart procon to run this version. Plugin size " + patchedSizeKB + "KB");
                                        Log.Success("Updated plugin file located at: " + pluginPath);
                                        if (_isTestingAuthorized) {
                                            Environment.Exit(4533);
                                        }
                                    }
                                    else
                                    {
                                        if (_pluginUpdateCaller != null)
                                        {
                                            SendMessageToSource(_pluginUpdateCaller, "Plugin updated to same version, " + patchedVersion + ". Plugin size " + patchedSizeKB + "KB");
                                        }
                                    }
                                }
                                else if (!_pluginUpdatePatched)
                                {
                                    if (_pluginUpdateCaller != null)
                                    {
                                        SendMessageToSource(_pluginUpdateCaller, "Plugin reverted to previous version " + patchedVersion + ", restart procon to run this version. Plugin size " + patchedSizeKB + "KB");
                                    }
                                    //Patched version is older than current version
                                    Log.Warn("Plugin reverted to previous version " + patchedVersion + ", restart procon to run this version. Plugin size " + patchedSizeKB + "KB");
                                }
                                _pluginPatchedVersion = patchedVersion;
                                _pluginPatchedVersionInt = patchedVersionInt;
                            }
                            else
                            {
                                if (_pluginUpdateCaller != null)
                                {
                                    SendMessageToSource(_pluginUpdateCaller, "Plugin update patched, but its version could not be extracted. Plugin size " + patchedSizeKB + "KB");
                                }
                                Log.Warn("Plugin update patched, but its version could not be extracted. Plugin size " + patchedSizeKB + "KB");
                            }
                            _pluginUpdateProgress = "Patched";
                            _pluginUpdatePatched = true;
                        }
                        catch (Exception e)
                        {
                            HandleException(new AdKatsException("Error while running update thread.", e));
                        }
                        _pluginUpdateCaller = null;
                        LogThreadExit();
                    }));
                    StartAndLogThread(pluginUpdater);
                }
            }
            catch (Exception e)
            {
                HandleException(new AdKatsException("Error while updating plugin source to latest version", e));
            }
        }

        public void ProconChatWrite(String msg)
        {
            msg = msg.Replace(Environment.NewLine, " ");
            ExecuteCommand("procon.protected.chat.write", "AdKats > " + msg);
            if (_slowmo)
            {
                _threadMasterWaitHandle.WaitOne(1000);
            }
        }

        public void PrintPreparedCommand(MySqlCommand cmd)
        {
            String query = cmd.Parameters.Cast<MySqlParameter>().Aggregate(cmd.CommandText, (current, p) => current.Replace(p.ParameterName, (p.Value != null) ? (p.Value.ToString()) : ("NULL")));
            Log.Write(query);
        }

        public DateTime DateTimeFromEpochSeconds(Double epochSeconds)
        {
            DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            return epoch.AddSeconds(epochSeconds);
        }

        public class Logger
        {
            private readonly AdKats _plugin;
            public Int32 DebugLevel { get; set; }
            public Boolean VerboseErrors { get; set; }

            public Logger(AdKats plugin)
            {
                _plugin = plugin;
            }

            private void WriteConsole(String msg)
            {
                _plugin.ExecuteCommand("procon.protected.pluginconsole.write", "[^b" + _plugin.GetType().Name + "^n] " + msg);
            }

            private void WriteChat(String msg)
            {
                _plugin.ExecuteCommand("procon.protected.chat.write", _plugin.GetType().Name + " > " + msg);
            }

            public void Debug(Func<String> messageFunc, Int32 level)
            {
                if (DebugLevel >= level)
                {
                    if (DebugLevel >= 8)
                    {
                        WriteConsole("[" + level + "-" + new StackFrame(1).GetMethod().Name + "-" + ((String.IsNullOrEmpty(Thread.CurrentThread.Name)) ? ("Main") : (Thread.CurrentThread.Name)) + Thread.CurrentThread.ManagedThreadId + "] " + messageFunc());
                    }
                    else
                    {
                        WriteConsole(messageFunc());
                    }
                }
            }

            public void Write(String msg)
            {
                WriteConsole(msg);
            }

            public void Info(String msg)
            {
                WriteConsole("^b^0INFO^n^0: " + msg);
            }

            public void Warn(String msg)
            {
                WriteConsole("^b^3WARNING^n^0: " + msg);
            }

            public void Error(String msg)
            {
                if (VerboseErrors)
                {
                    //Opening
                    WriteConsole("^b^1ERROR-" +//Plugin version
                                 Int32.Parse(_plugin.GetPluginVersion().Replace(".", "")) + "-" +//Method name
                                 new StackFrame(1).GetMethod().Name + "-" +//Thread
                                 ((String.IsNullOrEmpty(Thread.CurrentThread.Name)) ? ("Main") : (Thread.CurrentThread.Name)) + Thread.CurrentThread.ManagedThreadId +//Closing
                                 "^n^0: " +//Error Message
                                 "[" + msg + "]");
                }
                else
                {
                    //Opening
                    WriteConsole("^b^1ERROR-" +//Plugin version
                                 Int32.Parse(_plugin.GetPluginVersion().Replace(".", "")) +//Closing
                                 "^n^0: " +//Error Message
                                 "[" + msg + "]");
                }
            }

            public void Success(String msg)
            {
                WriteConsole("^b^2SUCCESS^n^0: " + msg);
            }

            public void Exception(String msg, Exception e, Int32 level)
            {
                //Opening
                string exceptionMessage = "^b^8EXCEPTION-" +//Plugin version
                                          Int32.Parse(_plugin.GetPluginVersion().Replace(".", ""));
                if (e != null)
                {
                    exceptionMessage += "-";
                    Int64 impericalLineNumber = 0;
                    Int64 parsedLineNumber = 0;
                    StackTrace stack = new StackTrace(e, true);
                    if (stack.FrameCount > 0)
                    {
                        impericalLineNumber = stack.GetFrame(0).GetFileLineNumber();
                    }
                    Int64.TryParse(e.ToString().Split(' ').Last(), out parsedLineNumber);
                    if (impericalLineNumber != 0)
                    {
                        exceptionMessage += impericalLineNumber;
                    }
                    else if (parsedLineNumber != 0)
                    {
                        exceptionMessage += parsedLineNumber;
                    }
                    else
                    {
                        exceptionMessage += "D";
                    }
                }
                exceptionMessage += "-" +//Method name
                                    new StackFrame(level + 1).GetMethod().Name + "-" +//Thread
                                    ((String.IsNullOrEmpty(Thread.CurrentThread.Name)) ? ("Main") : (Thread.CurrentThread.Name)) + Thread.CurrentThread.ManagedThreadId +//Closing
                                    "^n^0: " +//Message
                                    "[" + msg + "]" +//Exception string
                                    ((e != null) ? ("[" + e + "]") : (""));
                WriteConsole(exceptionMessage);
            }

            public void Chat(String msg)
            {
                msg = msg.Replace(Environment.NewLine, " ");
                WriteChat(msg);
            }

            public String FBold(String msg)
            {
                return "^b" + msg + "^n";
            }

            public String FItalic(String msg)
            {
                return "^i" + msg + "^n";
            }

            public String CMaroon(String msg)
            {
                return "^1" + msg + "^0";
            }

            public String CGreen(String msg)
            {
                return "^2" + msg + "^0";
            }

            public String COrange(String msg)
            {
                return "^3" + msg + "^0";
            }

            public String CBlue(String msg)
            {
                return "^4" + msg + "^0";
            }

            public String CBlueLight(String msg)
            {
                return "^5" + msg + "^0";
            }

            public String CViolet(String msg)
            {
                return "^6" + msg + "^0";
            }

            public String CPink(String msg)
            {
                return "^7" + msg + "^0";
            }

            public String CRed(String msg)
            {
                return "^8" + msg + "^0";
            }

            public String CGrey(String msg)
            {
                return "^9" + msg + "^0";
            }
        }

        public AdKatsException HandleException(AdKatsException aException)
        {
            //If it's null or AdKats isn't enabled, just return
            if (aException == null)
            {
                Log.Error("Attempted to handle exception when none was given.");
                return null;
            }
            if (!_pluginEnabled)
            {
                return aException;
            }
            _slowmo = SlowMoOnException;
            //Check if the exception attributes to the database
            if (aException.InternalException != null && 
                (aException.InternalException is TimeoutException || 
                aException.InternalException.ToString().Contains("Unable to connect to any of the specified MySQL hosts") || 
                aException.InternalException.ToString().Contains("Reading from the stream has failed.") || 
                aException.InternalException.ToString().Contains("Too many connections") || 
                aException.InternalException.ToString().Contains("Timeout expired") || 
                aException.InternalException.ToString().Contains("An existing connection was forcibly closed by the remote host") || 
                aException.InternalException.ToString().Contains("Unable to read data") || 
                aException.InternalException.ToString().Contains("Lock wait timeout exceeded")))
            {
                HandleDatabaseConnectionInteruption();
            } 
            else if (aException.InternalException != null && 
                    aException.InternalException is MySqlException &&
                    (((MySqlException) aException.InternalException).Number == 1205 ||
                    ((MySqlException) aException.InternalException).Number == 1213)) {
                //Deadlock related. Do nothing.
            }
            else
            {
                Log.Exception(aException.Message, aException.InternalException, 1);
                if (_CommandKeyDictionary.ContainsKey("adkats_exception"))
                {
                    //Create the Exception record
                    AdKatsRecord record = new AdKatsRecord
                    {
                        record_source = AdKatsRecord.Sources.InternalAutomated,
                        isDebug = true,
                        server_id = _serverInfo.ServerID,
                        command_type = GetCommandByKey("adkats_exception"),
                        command_numeric = Int32.Parse(GetPluginVersion().Replace(".", "")),
                        target_name = "AdKats",
                        target_player = null,
                        source_name = "AdKats",
                        record_message = aException.ToString(),
                        record_time = UtcNow()
                    };
                    //Process the record
                    QueueRecordForProcessing(record);
                }
            }
            return aException;
        }

        public MySqlDataReader SafeExecuteReader(MySqlCommand command)
        {
            Stopwatch watch = new Stopwatch();
            watch.Start();
            try
            {
                MySqlDataReader reader = command.ExecuteReader();
                watch.Stop();
                if (watch.Elapsed.TotalSeconds > 10 && watch.Elapsed.TotalSeconds > (50 * _DatabaseReadAverageDuration) && _firstPlayerListComplete)
                {
                    HandleDatabaseConnectionInteruption();
                }
                if (_DatabaseReaderDurations.Count < 25000)
                {
                    lock (_DatabaseReaderDurations)
                    {
                        _DatabaseReaderDurations.Add(watch.Elapsed.TotalSeconds);
                        _DatabaseReadAverageDuration = _DatabaseReaderDurations.Average();
                    }
                }
                return reader;
            }
            catch (Exception e)
            {
                try
                {
                    //If the failure was due to deadlock, wait a short duration and issue again
                    if (e.ToString().ToLower().Contains("deadlock"))
                    {
                        Thread.Sleep(250);
                        //If any further errors thrown, just throw them
                        watch.Reset();
                        watch.Start();
                        MySqlDataReader reader = command.ExecuteReader();
                        watch.Stop();
                        if (watch.Elapsed.TotalSeconds > 10 && watch.Elapsed.TotalSeconds > (50 * _DatabaseReadAverageDuration) && _firstPlayerListComplete)
                        {
                            HandleDatabaseConnectionInteruption();
                        }
                        if (_DatabaseReaderDurations.Count < 25000)
                        {
                            lock (_DatabaseReaderDurations)
                            {
                                _DatabaseReaderDurations.Add(watch.Elapsed.TotalSeconds);
                                _DatabaseReadAverageDuration = _DatabaseReaderDurations.Average();
                            }
                        }
                        return reader;
                    }
                    throw e;
                }
                catch (Exception e2)
                {
                    e = e2;
                    if ((e2.GetType() == typeof(TimeoutException) || e2.ToString().Contains("Unable to connect to any of the specified MySQL hosts") || e2.ToString().Contains("Reading from the stream has failed.") || e2.ToString().Contains("Too many connections") || e2.ToString().Contains("Timeout expired") || e2.ToString().Contains("An existing connection was forcibly closed by the remote host") || e2.ToString().Contains("Unable to read data") || e2.ToString().Contains("Lock wait timeout exceeded")))
                    {
                        Log.Info("Average Read: " + Math.Round(_DatabaseReadAverageDuration, 3) + "s " + _DatabaseReaderDurations.Count + " | Average Write: " + Math.Round(_DatabaseWriteAverageDuration, 3) + "s " + _DatabaseNonQueryDurations.Count);
                        PrintPreparedCommand(command);
                    }
                }
                throw e;
            }
        }

        public Int32 SafeExecuteNonQuery(MySqlCommand command)
        {
            Stopwatch watch = new Stopwatch();
            watch.Start();
            try
            {
                int modified = command.ExecuteNonQuery();
                watch.Stop();
                if (watch.Elapsed.TotalSeconds > 10 && watch.Elapsed.TotalSeconds > (50 * _DatabaseWriteAverageDuration) && _firstPlayerListComplete)
                {
                    HandleDatabaseConnectionInteruption();
                }
                if (_DatabaseNonQueryDurations.Count < 25000)
                {
                    lock (_DatabaseNonQueryDurations)
                    {
                        _DatabaseNonQueryDurations.Add(watch.Elapsed.TotalSeconds);
                        _DatabaseWriteAverageDuration = _DatabaseNonQueryDurations.Average();
                    }
                }
                return modified;
            }
            catch (Exception e)
            {
                try
                {
                    //If the failure was due to deadlock, wait a short duration and issue again
                    if (e.ToString().ToLower().Contains("deadlock"))
                    {
                        Thread.Sleep(250);
                        //If any further errors thrown, just throw them
                        watch.Reset();
                        watch.Start();
                        int modified = command.ExecuteNonQuery();
                        watch.Stop();
                        if (watch.Elapsed.TotalSeconds > 10 && watch.Elapsed.TotalSeconds > (50 * _DatabaseWriteAverageDuration) && _firstPlayerListComplete)
                        {
                            HandleDatabaseConnectionInteruption();
                        }
                        if (_DatabaseNonQueryDurations.Count < 25000)
                        {
                            lock (_DatabaseNonQueryDurations)
                            {
                                _DatabaseNonQueryDurations.Add(watch.Elapsed.TotalSeconds);
                                _DatabaseWriteAverageDuration = _DatabaseNonQueryDurations.Average();
                            }
                        }
                        return modified;
                    }
                    throw e;
                }
                catch (Exception e2)
                {
                    e = e2;
                    if ((e2.GetType() == typeof(TimeoutException) || e2.ToString().Contains("Unable to connect to any of the specified MySQL hosts") || e2.ToString().Contains("Reading from the stream has failed.") || e2.ToString().Contains("Too many connections") || e2.ToString().Contains("Timeout expired") || e2.ToString().Contains("An existing connection was forcibly closed by the remote host") || e2.ToString().Contains("Unable to read data") || e2.ToString().Contains("Lock wait timeout exceeded")))
                    {
                        Log.Info("Average Read: " + Math.Round(_DatabaseReadAverageDuration, 3) + "s " + _DatabaseReaderDurations.Count + " | Average Write: " + Math.Round(_DatabaseWriteAverageDuration, 3) + "s " + _DatabaseNonQueryDurations.Count);
                        PrintPreparedCommand(command);
                    }
                }
                PrintPreparedCommand(command);
                throw e;
            }
        }

        public void HandleDatabaseConnectionInteruption()
        {
            //Only handle these errors if all threads are already functioning normally
            if (_firstPlayerListComplete)
            {
                if (_databaseTimeouts == 0)
                {
                    _lastDatabaseTimeout = UtcNow();
                }
                ++_databaseTimeouts;
                if (_databaseTimeouts >= 5)
                {
                    Log.Warn("Database connection issue detected. Trigger " + _databaseTimeouts + "/" + DatabaseTimeoutThreshold + ".");
                }
                //Check for critical state (timeouts > threshold, and last issue less than 1 minute ago)
                if ((UtcNow() - _lastDatabaseTimeout).TotalSeconds < 60)
                {
                    if (_databaseTimeouts >= DatabaseTimeoutThreshold)
                    {
                        try
                        {
                            //If the handler is already alive, return
                            if (_DisconnectHandlingThread != null && _DisconnectHandlingThread.IsAlive)
                            {
                                Log.Debug(() => "Attempted to start disconnect handling thread when it was already running.", 2);
                                return;
                            }
                            //Create a new thread to handle the disconnect orchestration
                            _DisconnectHandlingThread = new Thread(new ThreadStart(delegate
                            {
                                try
                                {
                                    Thread.CurrentThread.Name = "DisconnectHandling";
                                    //Log the time of critical disconnect
                                    DateTime disconnectTime = DateTime.Now;
                                    Stopwatch disconnectTimer = new Stopwatch();
                                    disconnectTimer.Start();
                                    //Immediately disable Stat Logger
                                    Log.Error("Database connection in critical failure state. Disabling Stat Logger and putting AdKats in Backup Mode.");
                                    _databaseConnectionCriticalState = true;
                                    ExecuteCommand("procon.protected.plugins.enable", "CChatGUIDStatsLoggerBF3", "False");
                                    ExecuteCommand("procon.protected.plugins.enable", "CChatGUIDStatsLogger", "False");
                                    //Set resolved
                                    Boolean restored = false;
                                    //Enter loop to check for database reconnection
                                    do
                                    {
                                        //If someone manually disables AdKats, exit everything
                                        if (!_pluginEnabled)
                                        {
                                            LogThreadExit();
                                            return;
                                        }
                                        //Wait 15 seconds to retry
                                        _threadMasterWaitHandle.WaitOne(15000);
                                        //Check if the connection has been restored
                                        restored = DebugDatabaseConnectionActive();
                                        if (!restored)
                                        {
                                            _databaseSuccess = 0;
                                            //Inform the user database still not connectable
                                            Log.Error("Database still not accessible. (" + FormatTimeString(disconnectTimer.Elapsed, 3) + " since critical disconnect at " + disconnectTime.ToShortTimeString() + ".)");
                                        }
                                        else
                                        {
                                            _databaseSuccess++;
                                            Log.Info("Database connection appears restored, but waiting " + (DatabaseSuccessThreshold - _databaseSuccess) + " more successful connections to restore normal operation.");
                                        }
                                    } while (_databaseSuccess < DatabaseSuccessThreshold);
                                    //Connection has been restored, inform the user
                                    disconnectTimer.Stop();
                                    Log.Success("Database connection restored, re-enabling Stat Logger and returning AdKats to Normal Mode.");
                                    //Reset timeout counts
                                    _databaseSuccess = 0;
                                    _databaseTimeouts = 0;
                                    //re-enable AdKats and Stat Logger
                                    _databaseConnectionCriticalState = false;
                                    ExecuteCommand("procon.protected.plugins.enable", "CChatGUIDStatsLoggerBF3", "True");
                                    ExecuteCommand("procon.protected.plugins.enable", "CChatGUIDStatsLogger", "True");

                                    //Clear the player dinctionary, causing all players to be fetched from the database again
                                    lock (_PlayerDictionary)
                                    {
                                        _PlayerDictionary.Clear();
                                    }

                                    //Create the Exception record
                                    AdKatsRecord record = new AdKatsRecord
                                    {
                                        record_source = AdKatsRecord.Sources.InternalAutomated,
                                        isDebug = true,
                                        server_id = _serverInfo.ServerID,
                                        command_type = GetCommandByKey("adkats_exception"),
                                        command_numeric = 0,
                                        target_name = "Database",
                                        target_player = null,
                                        source_name = "AdKats",
                                        record_message = "Critical Database Disconnect Handled (" + String.Format("{0:0.00}", disconnectTimer.Elapsed.TotalMinutes) + " minutes). AdKats on server " + _serverInfo.ServerID + " functioning normally again.",
                                        record_time = UtcNow()
                                    };
                                    //Process the record
                                    QueueRecordForProcessing(record);
                                }
                                catch (Exception)
                                {
                                    Log.Error("Error handling database disconnect.");
                                }
                                Log.Success("Exiting Critical Disconnect Handler.");
                                LogThreadExit();
                            }));

                            //Start the thread
                            StartAndLogThread(_DisconnectHandlingThread);
                        }
                        catch (Exception)
                        {
                            Log.Error("Error while initializing disconnect handling thread.");
                        }
                    }
                }
                else
                {
                    //Reset the current timout count
                    _databaseTimeouts = 0;
                }
                _lastDatabaseTimeout = UtcNow();
            }
            else
            {
                Log.Debug(() => "Attempted to handle database timeout when threads not running.", 2);
            }
        }

        public void StartRoundTimer()
        {
            if (_pluginEnabled && _threadsReady)
            {
                try
                {
                    //If the thread is still alive, inform the user and return
                    if (_RoundTimerThread != null && _RoundTimerThread.IsAlive)
                    {
                        Log.Error("Tried to enable a round timer while one was still active.");
                        return;
                    }
                    _RoundTimerThread = new Thread(new ThreadStart(delegate
                    {
                        try
                        {
                            Thread.CurrentThread.Name = "RoundTimer";
                            Log.Debug(() => "starting round timer", 2);
                            _threadMasterWaitHandle.WaitOne(5000);
                            int maxRoundTimeSeconds = (Int32)(_maxRoundTimeMinutes * 60);
                            for (Int32 secondsRemaining = maxRoundTimeSeconds; secondsRemaining > 0; secondsRemaining--)
                            {
                                if (_roundState != RoundState.Playing || !_pluginEnabled || !_threadsReady)
                                {
                                    return;
                                }
                                if (secondsRemaining == maxRoundTimeSeconds - 60 && secondsRemaining > 60)
                                {
                                    AdminTellMessage("Round will end automatically in ~" + (Int32)(secondsRemaining / 60.0) + " minutes.");
                                    Log.Debug(() => "Round will end automatically in ~" + (Int32)(secondsRemaining / 60.0) + " minutes.", 3);
                                }
                                else if (secondsRemaining == (maxRoundTimeSeconds / 2) && secondsRemaining > 60)
                                {
                                    AdminTellMessage("Round will end automatically in ~" + (Int32)(secondsRemaining / 60.0) + " minutes.");
                                    Log.Debug(() => "Round will end automatically in ~" + (Int32)(secondsRemaining / 60.0) + " minutes.", 3);
                                }
                                else if (secondsRemaining == 30)
                                {
                                    AdminTellMessage("Round ends in 30 seconds. (Current winning team will win)");
                                    Log.Debug(() => "Round ends in 30 seconds. (Current winning team will win)", 3);
                                }
                                else if (secondsRemaining == 20)
                                {
                                    AdminTellMessage("Round ends in 20 seconds. (Current winning team will win)");
                                    Log.Debug(() => "Round ends in 20 seconds. (Current winning team will win)", 3);
                                }
                                else if (secondsRemaining <= 10)
                                {
                                    AdminSayMessage("Round ends in..." + secondsRemaining);
                                    Log.Debug(() => "Round ends in..." + secondsRemaining, 3);
                                }
                                //Sleep for 1 second
                                _threadMasterWaitHandle.WaitOne(1000);
                            }
                            AdKatsTeam team1, team2;
                            if (!GetTeamByID(1, out team1))
                            {
                                if (_roundState == RoundState.Playing)
                                {
                                    Log.Error("Teams not loaded when they should be.");
                                }
                                LogThreadExit();
                                return;
                            }
                            if (!GetTeamByID(2, out team2))
                            {
                                if (_roundState == RoundState.Playing)
                                {
                                    Log.Error("Teams not loaded when they should be.");
                                }
                                LogThreadExit();
                                return;
                            }
                            if (team1.TeamTicketCount < team2.TeamTicketCount)
                            {
                                ExecuteCommand("procon.protected.send", "mapList.endRound", "2");
                                Log.Debug(() => "Ended Round (2)", 4);
                            }
                            else
                            {
                                ExecuteCommand("procon.protected.send", "mapList.endRound", "1");
                                Log.Debug(() => "Ended Round (1)", 4);
                            }
                        }
                        catch (Exception e)
                        {
                            HandleException(new AdKatsException("Error in round timer thread.", e));
                        }
                        Log.Debug(() => "Exiting round timer.", 2);
                        LogThreadExit();
                    }));

                    //Start the thread
                    StartAndLogThread(_RoundTimerThread);
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error starting round timer thread.", e));
                }
            }
        }

        private String ClientDownloadTimer(WebClient wClient, String url) {
            Log.Debug(() => "Preparing to download from " + GetDomainName(url), 7);
            Stopwatch timer = new Stopwatch();
            timer.Start();
            String returnString = wClient.DownloadString(url);
            timer.Stop();
            Log.Debug(() => "Downloaded from " + GetDomainName(url) + " in " + timer.ElapsedMilliseconds + "ms", 7);
            return returnString;
        }

        private string GetDomainName(string url) {
            string domain = new Uri(url).DnsSafeHost.ToLower();
            var tokens = domain.Split('.');
            if (tokens.Length > 2) {
                //Add only second level exceptions to the < 3 rule here
                string[] exceptions = { "info", "firm", "name", "com", "biz", "gen", "ltd", "web", "net", "pro", "org" };
                var validTokens = 2 + ((tokens[tokens.Length - 2].Length < 3 || exceptions.Contains(tokens[tokens.Length - 2])) ? 1 : 0);
                domain = string.Join(".", tokens, tokens.Length - validTokens, validTokens);
            }
            return domain;
        }

        private void DoBattlelogWait()
        {
            try {
                lock (_battlelogLocker) {
                    var now = UtcNow();
                    var timeSinceLast = (now - _LastBattlelogAction);
                    var requiredWait = _BattlelogWaitDuration;
                    // Preliminary wait increase when battlelog disconnect is detected
                    if (NowDuration(_LastBattlelogIssue).TotalMinutes < 3) {
                        _threadMasterWaitHandle.WaitOne(TimeSpan.FromSeconds(20));
                    }
                    //Wait between battlelog actions
                    if (timeSinceLast < requiredWait) {
                        var remainingWait = requiredWait - timeSinceLast;
                        Log.Debug(() => "Waiting " + ((int) remainingWait.TotalMilliseconds) + "ms to query battlelog.", 6);
                        _threadMasterWaitHandle.WaitOne(remainingWait);
                    }
                    now = UtcNow();
                    lock (_BattlelogActionTimes) {
                        _BattlelogActionTimes.Enqueue(now);
                    }
                    _LastBattlelogAction = UtcNow();
                }
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error performing battlelog wait.", e));
                _threadMasterWaitHandle.WaitOne(_BattlelogWaitDuration);
            }
        }

        private void DoIPAPIWait() {
            try {
                lock (_IPAPILocker) {
                    var now = UtcNow();
                    var timeSinceLast = (now - _LastBattlelogAction);
                    var requiredWait = _IPAPIWaitDuration;
                    //Wait between battlelog actions
                    if (timeSinceLast < requiredWait) {
                        var remainingWait = requiredWait - timeSinceLast;
                        Log.Debug(() => "Waiting " + ((int) remainingWait.TotalMilliseconds) + "ms to query IPAPI.", 6);
                        _threadMasterWaitHandle.WaitOne(remainingWait);
                    }
                    _LastIPAPIAction = UtcNow();
                }
            } catch (Exception e) {
                HandleException(new AdKatsException("Error performing IPAPI wait.", e));
                _threadMasterWaitHandle.WaitOne(_BattlelogWaitDuration);
            }
        }

        private void DoGoogleWait()
        {
            if ((UtcNow() - _LastGoogleAction) < _GoogleWaitDuration)
            {
                Thread.Sleep(_GoogleWaitDuration - (UtcNow() - _LastGoogleAction));
            }
            _LastGoogleAction = UtcNow();
        }

        public Int64 ConvertVersionInt(String version) {
            try {
                String[] versionSplit = version.Split('.');
                Int64 major, minor, patch, hotfix;
                if (versionSplit.Length == 4 && 
                    Int64.TryParse(versionSplit[0], out major) && 
                    Int64.TryParse(versionSplit[1], out minor) && 
                    Int64.TryParse(versionSplit[2], out patch) &&
                    Int64.TryParse(versionSplit[3], out hotfix)) {
                    return 
                        (major * 1000000000) + 
                        (minor * 1000000) + 
                        (patch * 1000) + 
                        (hotfix);
                }
            }
            catch (Exception e) {
                HandleException(new AdKatsException("Error converting version number.", e));
            }
            return 0;
        }

        private void FetchIPLocation(AdKatsPlayer aPlayer)
        {
            if (String.IsNullOrEmpty(aPlayer.player_ip) || (aPlayer.location != null && aPlayer.location.status == "success" && aPlayer.player_ip == aPlayer.location.IP))
            {
                return;
            }
            IPAPILocation loc = new IPAPILocation(aPlayer.player_ip);
            using (WebClient client = new WebClient())
            {
                try
                {
                    Hashtable response = null;
                    String URL = "http://ip-api.com/json/" + aPlayer.player_ip + "?cacherand=" + Environment.TickCount;
                    try
                    {
                        DoIPAPIWait();
                        response = (Hashtable)JSON.JsonDecode(ClientDownloadTimer(client, URL));
                    }
                    catch (Exception e)
                    {
                        if (NowDuration(_lastIPAPIError).TotalMinutes > 5) {
                            Log.Debug(() => "ip-api failed to respond with player location information, your layer may be IP banned. (" + e.Message + ")", 4);
                            _lastIPAPIError = UtcNow();
                        }
                        return;
                    }
                    loc.status = (String)response["status"];
                    if (loc.status == "fail")
                    {
                        loc.message = (String)response["message"];
                        aPlayer.location = loc;
                        if (_isTestingAuthorized)
                        {
                            Log.Info("Error fetching " + aPlayer.GetVerboseName() + " IP location from " + URL);
                        }
                        return;
                    }
                    if (loc.status == "success")
                    {
                        loc.country = (String)response["country"];
                        loc.countryCode = (String)response["countryCode"];
                        loc.region = (String)response["region"];
                        loc.regionName = (String)response["regionName"];
                        loc.city = (String)response["city"];
                        loc.zip = (String)response["zip"];
                        loc.lat = (Double)response["lat"];
                        loc.lon = (Double)response["lon"];
                        loc.timezone = (String)response["timezone"];
                        loc.isp = (String)response["isp"];
                        loc.org = (String)response["org"];
                        loc.query = (String)response["query"];
                        aPlayer.location = loc;
                        if (_isTestingAuthorized)
                        {
                            Log.Success("Success fetching " + aPlayer.GetVerboseName() + " IP location " + loc.city + ", " + loc.region);
                        }
                    }
                }
                catch (Exception e)
                {
                    HandleException(new AdKatsException("Error while parsing IP response information.", e));
                }
            }
        }

        public CompilerResults CompilePluginSource(String pluginSource)
        {
            String procon_path = Directory.GetParent(Application.ExecutablePath).FullName;
            String pluginDirectory = Path.Combine(procon_path, Path.Combine("Plugins", _gameVersion.ToString()));
            Dictionary<string, string> providerOptions = new Dictionary<String, String>();
            providerOptions.Add("CompilerVersion", "v3.5");
            CSharpCodeProvider cSharpCodeProvider = new CSharpCodeProvider(providerOptions);
            CompilerParameters compilerParameters = new CompilerParameters();
            compilerParameters.ReferencedAssemblies.Add("System.dll");
            compilerParameters.ReferencedAssemblies.Add("System.Core.dll");
            compilerParameters.ReferencedAssemblies.Add("System.Data.dll");
            compilerParameters.ReferencedAssemblies.Add("System.Windows.Forms.dll");
            compilerParameters.ReferencedAssemblies.Add("System.Xml.dll");
            compilerParameters.ReferencedAssemblies.Add("MySql.Data.dll");
            compilerParameters.ReferencedAssemblies.Add("PRoCon.Core.dll");
            compilerParameters.GenerateInMemory = true;
            compilerParameters.IncludeDebugInformation = false;
            compilerParameters.TempFiles = new TempFileCollection(pluginDirectory);
            return cSharpCodeProvider.CompileAssemblyFromSource(compilerParameters, pluginSource);
        }

        public class AdKatsWeaponName
        {
            public GameVersion weapon_game;
            public String readable_short;
            public String readable_long;
        }

        public class AdKatsBan
        {
            //Current exception state of the ban
            public DateTime ban_endTime;
            public Boolean ban_enforceGUID = true;
            public Boolean ban_enforceIP = false;
            public Boolean ban_enforceName = false;
            public AdKatsException ban_exception = null;

            public Int64 ban_id = -1;
            public String ban_notes = null;
            public AdKatsRecord ban_record = null;
            public DateTime ban_startTime;
            public String ban_status = "Active";
            public String ban_sync = null;
            public Int64 player_id = -1;
            //startTime and endTime are not set by AdKats, they are set in the database.
            //startTime and endTime will be valid only when bans are fetched from the database
        }

        public class AdKatsCommand
        {
            //Active option
            public enum CommandActive
            {
                Active,
                Disabled,
                Invisible
            }

            //Logging option
            public enum CommandLogging
            {
                Log,
                Ignore,
                Mandatory,
                Unable
            }

            public enum CommandAccess
            {
                Any,
                AnyHidden,
                AnyVisible,
                GlobalVisible,
                TeamVisible,
                SquadVisible
            }

            public CommandActive command_active = CommandActive.Active;
            public CommandLogging command_logging = CommandLogging.Log;
            public CommandAccess command_access = CommandAccess.Any;
            public Int64 command_id = -1;
            public String command_key = null;
            public String command_name = null;
            public Boolean command_playerInteraction = true;
            public String command_text = null;

            public override string ToString()
            {
                return command_name ?? "Unknown Command";
            }
        }

        public class AdKatsException
        {
            public Exception InternalException = null;
            public String Message = String.Empty;
            public String Method = String.Empty;
            //Param Constructors
            public AdKatsException(String message, Exception internalException)
            {
                Method = new StackFrame(1).GetMethod().Name;
                Message = message;
                InternalException = internalException;
            }

            public AdKatsException(String message)
            {
                Method = new StackFrame(1).GetMethod().Name;
                Message = message;
            }

            //Override toString
            public override String ToString()
            {
                return "[" + Method + "][" + Message + "]" + ((InternalException != null) ? (": " + InternalException) : (""));
            }
        }

        public class AdKatsKill
        {
            public String weaponCode;
            public DamageTypes weaponCategory;
            public AdKatsPlayer killer;
            public AdKatsPlayer victim;
            public CPlayerInfo killerCPI;
            public CPlayerInfo victimCPI;
            public Boolean IsSuicide;
            public Boolean IsHeadshot;
            public Boolean IsTeamkill;
            public DateTime timestamp;
            public Int64 RoundID;
        }

        public class AdKatsPlayer
        {
            public Boolean blInfoFetched = false;
            public CPunkbusterInfo PBPlayerInfo = null;
            public List<AdKatsKill> LiveKills = null;
            public List<AdKatsRecord> TargetedRecords = null;
            public String player_clanTag = null;
            public CPlayerInfo frostbitePlayerInfo = null;
            public Int64 game_id = -1;
            public DateTime lastAction = DateTime.UtcNow;
            public DateTime lastKill = DateTime.UtcNow;
            public DateTime lastDeath = DateTime.UtcNow;
            public DateTime lastSpawn = DateTime.UtcNow;
            public Boolean player_aa = false;
            public Boolean player_aa_fetched = false;
            public Boolean player_aa_told = false;
            public String player_guid = null;
            public Int64 player_id = -1;
            public String player_ip { get; private set; }
            public String player_name = null;
            public String player_name_previous = null;
            public String player_battlecry = null;
            public Boolean player_online = true;
            public String player_pbguid = null;
            public AdKatsRole player_role = null;
            public String player_slot = null;
            public Double player_reputation = 0;
            public DateTime player_firstseen = DateTime.UtcNow;
            public DateTime LastUsage = DateTime.UtcNow;
            public DateTime JoinTime = DateTime.UtcNow;
            public AdKatsServer player_server = null;
            public TimeSpan player_serverplaytime = TimeSpan.FromSeconds(0);
            public Boolean player_spawnedOnce = false;
            public PlayerType player_type = PlayerType.Player;
            public String player_personaID = null;
            private Boolean player_locked;
            private DateTime player_locked_start = DateTime.UtcNow;
            private TimeSpan player_locked_duration = TimeSpan.Zero;
            private String player_locked_source;
            public Int32 player_infractionPoints = Int32.MinValue;
            public AdKatsRecord LastPunishment = null;
            public AdKatsRecord LastForgive = null;
            public AdKatsTeam RequiredTeam = null;
            public Int32 AssignedSquad = 0;
            public readonly Queue<KeyValuePair<Double, DateTime>> player_pings;
            public Boolean player_pings_full { get; private set; }
            public Double player_ping_avg { get; private set; }
            public Double player_ping { get; private set; }
            public DateTime player_ping_time { get; private set; }
            public Boolean player_ping_added { get; private set; }
            public AdKatsPlayer conversationPartner = null;

            public Dictionary<Int64, AdKatsPlayerStats> RoundStats;
            public AdKatsTopStats TopStats;
            public IPAPILocation location = null;
            public Boolean update_playerUpdated = true;
            public Boolean player_new = false;

            public Boolean loadout_valid = true;
            public Boolean loadout_spawnValid = true;
            public String loadout_items = "Loadout not fetched yet.";
            public String loadout_items_long = "Loadout not fetched yet.";
            public String loadout_deniedItems = "No denied items.";

            private readonly AdKats Plugin;

            public AdKatsPlayer(AdKats plugin)
            {
                Plugin = plugin;
                RoundStats = new Dictionary<Int64, AdKatsPlayerStats>();
                TopStats = new AdKatsTopStats();
                LiveKills = new List<AdKatsKill>();
                player_pings = new Queue<KeyValuePair<Double, DateTime>>();
                TargetedRecords = new List<AdKatsRecord>();
                LastUsage = DateTime.UtcNow;
            }

            public void SetIP(String ip)
            {
                this.player_ip = (String.IsNullOrEmpty(ip) ? (null) : (ip));
            }

            public String GetVerboseName()
            {
                return ((String.IsNullOrEmpty(player_clanTag)) ? ("") : ("[" + player_clanTag + "]")) + player_name;
            }

            public TimeSpan GetIdleTime()
            {
                return Plugin.UtcNow() - lastAction;
            }

            public void ClearPingEntries()
            {
                player_pings.Clear();
                player_pings_full = false;
                player_ping = 0;
                player_ping_avg = 0;
            }

            public void AddPingEntry(Double newPingValue) {
                //Get rounded time (floor)
                DateTime newPingTime = Plugin.UtcNow();
                newPingTime = newPingTime.AddTicks(-(newPingTime.Ticks % TimeSpan.TicksPerSecond));
                if (!player_ping_added)
                {
                    player_ping_avg = newPingValue;
                    player_ping = newPingValue;
                    player_ping_time = newPingTime;
                    player_pings.Enqueue(new KeyValuePair<double, DateTime>(newPingValue, newPingTime));
                    player_ping_added = true;
                    return;
                }

                //Linear Interpolation
                DateTime oldPingTime = player_ping_time;
                Double oldPingValue = player_ping;
                Double interTimeOldSeconds = 0;
                Double interTimeNewSeconds = (newPingTime - oldPingTime).TotalSeconds;
                Double m = (newPingValue - oldPingValue) / (interTimeNewSeconds);
                Double b = oldPingValue;
                for (Int32 sec = (Int32)interTimeOldSeconds; sec < interTimeNewSeconds; sec++)
                {
                    DateTime subPingTime = oldPingTime.AddSeconds(sec);
                    Double subPingValue = (m * sec) + b;
                    player_pings.Enqueue(new KeyValuePair<double, DateTime>(subPingValue, subPingTime));
                }

                //Remove old values
                Boolean removed = false;
                do
                {
                    removed = false;
                    if (player_pings.Any() && (Plugin.UtcNow() - player_pings.Peek().Value).TotalSeconds > Plugin._pingMovingAverageDurationSeconds)
                    {
                        player_pings.Dequeue();
                        player_pings_full = true;
                        removed = true;
                    }
                } while (removed);

                //Set instance vars
                player_ping = newPingValue;
                player_ping_time = newPingTime;
                player_ping_avg = player_pings.Sum(pingEntry => pingEntry.Key) / player_pings.Count;
            }

            public Boolean IsLocked()
            {
                if (player_locked && player_locked_start + player_locked_duration < Plugin.UtcNow())
                {
                    //Unlock the player
                    player_locked = false;
                }
                return player_locked;
            }

            public Boolean Lock(String locker, TimeSpan duration)
            {
                if (IsLocked())
                {
                    return false;
                }
                if (String.IsNullOrEmpty(locker))
                {
                    Plugin.Log.Error("Attempted to lock player with empty locker.");
                    return false;
                }
                if (duration == null || duration == TimeSpan.Zero)
                {
                    Plugin.Log.Error("Attempted to lock player with invalid duration.");
                    return false;
                }
                player_locked = true;
                player_locked_duration = duration;
                player_locked_start = Plugin.UtcNow();
                player_locked_source = locker;
                return true;
            }

            public void Unlock()
            {
                player_locked = false;
            }

            public TimeSpan GetLockRemaining()
            {
                if (IsLocked())
                {
                    return (player_locked_start + player_locked_duration) - Plugin.UtcNow();
                }
                return TimeSpan.Zero;
            }

            public String GetLockSource()
            {
                if (IsLocked())
                {
                    return player_locked_source;
                }
                return null;
            }
        }

        public class AdKatsClient
        {
            public String ClientName;
            public String ClientMethod;
            public String SubscriptionGroup;
            public Boolean SubscriptionEnabled;
            public DateTime SubscriptionTime { get; private set; }

            private readonly AdKats Plugin;

            public AdKatsClient(AdKats plugin)
            {
                Plugin = plugin;
            }

            public void EnableSubscription()
            {
                SubscriptionEnabled = true;
                SubscriptionTime = Plugin.UtcNow();
            }

            public void DisableSubscription()
            {
                SubscriptionEnabled = false;
                SubscriptionTime = Plugin.UtcNow();
            }
        }

        public class AdKatsServer
        {
            public Int64 ServerID;
            public Int64 ServerGroup;
            public String ServerIP;
            public String ServerName;
            public String ServerType = "UNKNOWN";
            public Int64 GameID = -1;
            public Boolean CommanderEnabled;
            public Boolean FairFightEnabled;
            public Boolean ForceReloadWholeMags;
            public Boolean HitIndicatorEnabled;
            public String GamePatchVersion = "UNKNOWN";
            public Int32 MaxSpectators = -1;
            public CServerInfo InfoObject { get; private set; }
            private DateTime infoObjectTime = DateTime.UtcNow;
            private List<MaplistEntry> MapList;
            private Int32 MapIndex;
            private Int32 NextMapIndex;

            private readonly AdKats Plugin;

            public AdKatsServer(AdKats plugin)
            {
                Plugin = plugin;
            }

            public void SetInfoObject(CServerInfo infoObject)
            {
                InfoObject = infoObject;
                ServerName = infoObject.ServerName;
                infoObjectTime = Plugin.UtcNow();
            }

            public TimeSpan GetRoundElapsedTime()
            {
                if (InfoObject == null || Plugin._roundState != RoundState.Playing)
                {
                    return TimeSpan.Zero;
                }
                return TimeSpan.FromSeconds(InfoObject.RoundTime) + (Plugin.UtcNow() - infoObjectTime);
            }

            public void SetMapList(List<MaplistEntry> MapList)
            {
                if (this.MapList == null )
                {
                    this.MapList = MapList;
                }
                else
                {
                    lock (this.MapList)
                    {
                        this.MapList = MapList;
                    }
                }
            }

            public List<MaplistEntry> GetMapList()
            {
                List<MaplistEntry> ret;
                if (this.MapList == null)
                {
                    this.MapList = new List<MaplistEntry>();
                }
                lock (this.MapList)
                {
                    ret = MapList;
                }
                return ret;
            }

            public void SetMapListIndicies(Int32 current, Int32 next)
            {
                this.MapIndex = current;
                this.NextMapIndex = next;
            }

            public MaplistEntry GetNextMap()
            {
                if (MapList == null)
                {
                    return null;
                }
                return MapList.FirstOrDefault(entry => entry.Index == this.NextMapIndex);
            }

            public MaplistEntry GetMap()
            {
                if (MapList == null)
                {
                    return null;
                }
                return MapList.FirstOrDefault(entry => entry.Index == this.MapIndex);
            }
        }

        public class AdKatsTopStats {
            public Int32 RoundCount;
            public Int32 TopCount;
            public Double TopRoundRatio;

            public Double getTopPower() {
                return Math.Pow(TopRoundRatio + 1, 3);
            }
        }

        public class AdKatsPlayerStats {
            public Int64 RoundID;
            public Int32 Rank;
            public Int32 Skill;
            public Int32 Kills;
            public Int32 Headshots;
            public Int32 Deaths;
            public Int32 Shots;
            public Int32 Hits;
            public Int32 Score;
            public Double Accuracy;
            public Int32 Revives;
            public Int32 Heals;
            public Dictionary<String, AdKatsWeaponStat> WeaponStats = null;
            public Dictionary<String, AdKatsVehicleStat> VehicleStats = null;
            public CPlayerInfo LiveStats = null;

            public AdKatsPlayerStats(Int64 roundID) {
                RoundID = roundID;
            }
        }

        public class AdKatsRecord
        {
            //Source of this record
            public enum Sources
            {
                Default,
                InternalAutomated,
                ExternalPlugin,
                InGame,
                Settings,
                ServerCommand,
                Database,
                HTTP
            }

            //Access method of this record
            public enum AccessMethod
            {
                HiddenInternal,
                HiddenExternal,
                HiddenGlobal,
                HiddenTeam,
                HiddenSquad,
                PublicExternal,
                PublicGlobal,
                PublicTeam,
                PublicSquad
            }

            //Command attributes for the record
            public AdKatsCommand command_action = null;
            public Int32 command_numeric = 0;
            public AdKatsCommand command_type = null;

            //All messages sent through this record via sendMessageToSource or other means
            public List<String> debugMessages;

            //Settings for External Plugin commands
            public String external_callerIdentity = null;
            public String external_responseClass = null;
            public String external_responseMethod = null;
            public Boolean external_responseRequested;

            //Internal processing
            public Boolean isConfirmed;
            public Boolean isAliveChecked;
            public Boolean isLoadoutChecked;
            public Boolean targetLoadoutActed = false;
            public Boolean isContested;
            public Boolean isDebug;
            public Boolean isIRO;
            public Boolean record_action_executed;
            public AdKatsException record_exception = null;

            //record data
            public Int64 record_id = -1;
            public String record_message = null;
            public Sources record_source = Sources.Default;
            public DateTime record_time = DateTime.UtcNow;
            public DateTime record_time_update = DateTime.UtcNow;
            public Int64 server_id = -1;
            public String source_name = null;
            public AdKatsPlayer source_player = null;
            public String target_name = null;
            public AdKatsPlayer target_player = null;
            public DateTime record_creationTime { get; private set; }
            public AccessMethod record_access = AccessMethod.HiddenInternal;
            public Boolean record_held;
            public Boolean record_orchestrate;
            public List<String> TargetNamesLocal;
            public List<AdKatsPlayer> TargetPlayersLocal;
            public List<AdKatsRecord> TargetInnerRecords;

            //Default Constructor
            public AdKatsRecord()
            {
                debugMessages = new List<String>();
                TargetNamesLocal = new List<String>();
                TargetPlayersLocal = new List<AdKatsPlayer>();
                TargetInnerRecords = new List<AdKatsRecord>();
                record_creationTime = DateTime.UtcNow;
            }

            public String GetSourceName()
            {
                String source = "";
                if (source_player != null)
                {
                    source = ((source_player.player_online) ? ("") : ("(OFFLINE)")) + source_player.GetVerboseName();
                }
                else if (String.IsNullOrEmpty(source_name))
                {
                    source = "NOSOURCE";
                }
                else
                {
                    source = source_name;
                }
                return source;
            }

            public String GetTargetNames()
            {
                String targets = "";
                if (TargetPlayersLocal.Any())
                {
                    foreach (AdKatsPlayer aPlayer in TargetPlayersLocal)
                    {
                        targets += ((aPlayer.player_online) ? ("") : ("(OFFLINE)")) + aPlayer.GetVerboseName() + ", ";
                    }
                }
                else if (target_player != null)
                {
                    targets = ((target_player.player_online) ? ("") : ("(OFFLINE)")) + target_player.GetVerboseName();
                }
                else
                {
                    targets = ((String.IsNullOrEmpty(target_name))?("NoNameTarget"):(target_name));
                }
                return targets.Trim().TrimEnd(',');
            }
        }

        public class AdKatsEvent
        {
            public String EventID;
            public String EventName;
            public Int32 StartingRound;
            // Handlers for each event round's variables, executed before the round is about to begin
            public Dictionary<Int32, Func<AdKats, Boolean>> VariableHandlers;
            // Handlers for the server name active during each event round
            public Dictionary<Int32, Func<AdKats, Boolean>> ServerNameHandlers;
            // Handlers for spawns during the event for each round
            public Dictionary<Int32, Func<AdKats, Boolean>> SpawnHandlers;
            // Handlers for kills during the event for each round
            public Dictionary<Int32, Func<AdKats, String, Boolean>> KillHandlers;

            //Old server values, the server should return to these values after the event is over
            public CServerInfo OldServerInfo;

            public AdKatsEvent()
            {
                VariableHandlers = new Dictionary<Int32, Func<AdKats, Boolean>>();
                ServerNameHandlers = new Dictionary<Int32, Func<AdKats, Boolean>>();
                SpawnHandlers = new Dictionary<Int32, Func<AdKats, Boolean>>();
                KillHandlers = new Dictionary<Int32, Func<AdKats, String, Boolean>>();
            }
        }

        public class AdKatsStatistic
        {
            public enum StatisticType
            {
                map_benefit,
                map_detriment,
                player_win,
                player_loss,
                player_top,
                round_quality,
                battlelog_requestfreq,
                ping_over100,
                ping_over150,
                ping_over200
            }

            public Int64 stat_id;
            public Int64 server_id;
            public Int64 round_id;
            public StatisticType stat_type;
            public String target_name;
            public AdKatsPlayer target_player;
            public Double stat_value;
            public String stat_comment;
            public DateTime stat_time;
        }

        public class AdKatsChatMessage
        {
            public enum ChatSubset
            {
                Global,
                Team,
                Squad
            }

            public String Speaker;
            public String Message;
            public String OriginalMessage;
            public ChatSubset Subset;
            public Boolean Hidden;
            public Int32 SubsetTeamID;
            public Int32 SubsetSquadID;
        }

        public class AdKatsRole
        {
            public Dictionary<String, KeyValuePair<Func<AdKats, AdKatsPlayer, Boolean>, AdKatsCommand>> ConditionalAllowedCommands = null;
            public Dictionary<String, AdKatsCommand> RoleAllowedCommands = null;
            public Dictionary<String, AdKatsSpecialGroup> RoleSetGroups = null;
            public CPrivileges RoleProconPrivileges = null;
            public Int64 role_id = -1;
            public String role_key = null;
            public String role_name = null;
            public Int64 role_powerLevel = 0;

            public AdKatsRole()
            {
                RoleAllowedCommands = new Dictionary<String, AdKatsCommand>();
                RoleSetGroups = new Dictionary<String, AdKatsSpecialGroup>();
                ConditionalAllowedCommands = new Dictionary<String, KeyValuePair<Func<AdKats, AdKatsPlayer, Boolean>, AdKatsCommand>>();
            }
        }

        public class AdKatsSpecialGroup
        {
            public Int64 group_id;
            public String group_key;
            public String group_name;
        }

        public class AdKatsSpecialPlayer
        {
            public Int64 specialplayer_id;
            public Int32? player_game = null;
            public AdKatsSpecialGroup player_group = null;
            public String player_identifier = null;
            public AdKatsPlayer player_object = null;
            public Int32? player_server = null;
            public DateTime player_effective;
            public DateTime player_expiration;
        }

        public class AdKatsTeam
        {
            private readonly AdKats Plugin;

            private readonly Queue<KeyValuePair<Double, DateTime>> TeamTicketCounts;
            public Boolean TeamTicketCountsFull { get; private set; }
            private Double TeamTicketDifferenceRate;
            public Int32 TeamTicketCount { get; private set; }
            public DateTime TeamTicketsTime { get; private set; }
            public Boolean TeamTicketsAdded { get; private set; }

            //Ticket Adjustments
            private Int32 TeamTicketAdjustment;
            private readonly Queue<KeyValuePair<Double, DateTime>> TeamAdjustedTicketCounts;
            public Int32 TeamAdjustedTicketCount { get; private set; }
            public DateTime TeamAdjustedTicketsTime { get; private set; }
            public Boolean TeamAdjustedTicketsAdded { get; private set; }
            private Double TeamAdjustedTicketDifferenceRate;
            private readonly Queue<KeyValuePair<Double, DateTime>> TeamAdjustedTicketDifferenceRates;
            public Double TeamAdjustedTicketAccellerationRate { get; private set; }

            //Score
            private readonly Queue<KeyValuePair<Double, DateTime>> TeamTotalScores;
            public Boolean TeamTotalScoresFull { get; private set; }
            public Double TeamScoreDifferenceRate { get; private set; }
            public Double TeamTotalScore { get; private set; }
            public DateTime TeamTotalScoresTime { get; private set; }
            public Boolean TeamTotalScoresAdded { get; private set; }

            public AdKatsTeam(AdKats plugin, Int32 teamID, String teamKey, String teamName, String teamDesc)
            {
                Plugin = plugin;
                TeamID = teamID;
                TeamKey = teamKey;
                TeamName = teamName;
                TeamDesc = teamDesc;
                TeamTotalScores = new Queue<KeyValuePair<Double, DateTime>>();
                TeamTotalScoresFull = false;
                TeamTicketCounts = new Queue<KeyValuePair<Double, DateTime>>();
                TeamTicketCountsFull = false;
                TeamAdjustedTicketCounts = new Queue<KeyValuePair<Double, DateTime>>();
                TeamAdjustedTicketDifferenceRates = new Queue<KeyValuePair<Double, DateTime>>();
            }

            public Int32 TeamID { get; private set; }
            public String TeamKey { get; private set; }
            public String TeamName { get; private set; }
            public String TeamDesc { get; private set; }

            //Live Vars
            public Boolean Populated { get; private set; }
            public Int32 TeamPlayerCount { get; set; }

            public Double GetTicketDifferenceRate()
            {
                return TeamTicketDifferenceRate >= 0 ? TeamTicketDifferenceRate : TeamAdjustedTicketDifferenceRate;
            }

            public void UpdatePlayerCount(Int32 playerCount)
            {
                Populated = true;
                TeamPlayerCount = playerCount;
            }

            public void IncrementTeamTicketAdjustment()
            {
                Interlocked.Increment(ref TeamTicketAdjustment);
            }

            public void UpdateTicketCount(Double newTicketCount)
            {
                try
                {
                    UpdateAdjustedTicketCount(newTicketCount);
                    //Get rounded time (floor)
                    DateTime newTicketTime = Plugin.UtcNow();
                    newTicketTime = newTicketTime.AddTicks(-(newTicketTime.Ticks % TimeSpan.TicksPerSecond));
                    if (!TeamTicketsAdded)
                    {
                        TeamTicketDifferenceRate = 0;
                        TeamTicketCount = (Int32)newTicketCount;
                        TeamTicketsTime = newTicketTime;
                        TeamTicketCounts.Enqueue(new KeyValuePair<double, DateTime>(newTicketCount, newTicketTime));
                        TeamTicketsAdded = true;
                        return;
                    }

                    //Interpolation
                    DateTime oldTicketTime = TeamTicketsTime;
                    Double oldTicketValue = TeamTicketCount;
                    Double interTimeOldSeconds = 0;
                    Double interTimeNewSeconds = (newTicketTime - oldTicketTime).TotalSeconds;
                    Double m = (newTicketCount - oldTicketValue) / (interTimeNewSeconds);
                    Double b = oldTicketValue;
                    for (Int32 sec = (Int32)interTimeOldSeconds; sec < interTimeNewSeconds; sec++)
                    {
                        DateTime subTicketTime = oldTicketTime.AddSeconds(sec);
                        Double subTicketValue = (m * sec) + b;
                        TeamTicketCounts.Enqueue(new KeyValuePair<double, DateTime>(subTicketValue, subTicketTime));
                    }

                    //Remove old values (more than 90 seconds ago)
                    Boolean removed = false;
                    do
                    {
                        removed = false;
                        if (TeamTicketCounts.Any() && (Plugin.UtcNow() - TeamTicketCounts.Peek().Value).TotalSeconds > 90)
                        {
                            TeamTicketCounts.Dequeue();
                            TeamTicketCountsFull = true;
                            removed = true;
                        }
                    } while (removed);

                    //Set instance vars
                    TeamTicketCount = (Int32)newTicketCount;
                    TeamTicketsTime = newTicketTime;

                    List<Double> values = TeamTicketCounts.Select(pair => pair.Key).ToList();
                    List<double> differences = new List<Double>();
                    for (int i = 0; i < values.Count - 1; i++)
                    {
                        differences.Add(values[i + 1] - values[i]);
                    }
                    differences.Sort();
                    //Convert to tickets/min
                    TeamTicketDifferenceRate = (differences.Sum() / differences.Count) * 60;
                    if (Double.IsNaN(TeamTicketDifferenceRate))
                    {
                        TeamTicketDifferenceRate = 0;
                    }
                }
                catch (Exception e)
                {
                    Plugin.HandleException(new AdKatsException("Error while updating team ticket count.", e));
                }
            }

            private void UpdateAdjustedTicketCount(Double newRealTicketCount)
            {
                try
                {
                    //Calculate adjusted ticket count
                    Double newAdjustedTicketCount = newRealTicketCount + TeamTicketAdjustment;
                    //Get rounded time (floor)
                    DateTime newAdjustedTicketTime = Plugin.UtcNow();
                    newAdjustedTicketTime = newAdjustedTicketTime.AddTicks(-(newAdjustedTicketTime.Ticks % TimeSpan.TicksPerSecond));
                    if (!TeamAdjustedTicketsAdded)
                    {
                        TeamAdjustedTicketDifferenceRate = 0;
                        TeamAdjustedTicketAccellerationRate = 0;
                        TeamAdjustedTicketCount = (Int32)newAdjustedTicketCount;
                        TeamAdjustedTicketsTime = newAdjustedTicketTime;
                        TeamAdjustedTicketCounts.Enqueue(new KeyValuePair<double, DateTime>(newAdjustedTicketCount, newAdjustedTicketTime));
                        TeamAdjustedTicketsAdded = true;
                        return;
                    }

                    //Remove old values (more than 90 seconds ago)
                    Boolean removed = false;
                    do
                    {
                        removed = false;
                        if (TeamAdjustedTicketCounts.Any() && (Plugin.UtcNow() - TeamAdjustedTicketCounts.Peek().Value).TotalSeconds > 90)
                        {
                            TeamAdjustedTicketCounts.Dequeue();
                            removed = true;
                        }
                        if (TeamAdjustedTicketDifferenceRates.Any() && (Plugin.UtcNow() - TeamAdjustedTicketDifferenceRates.Peek().Value).TotalSeconds > 90)
                        {
                            TeamAdjustedTicketDifferenceRates.Dequeue();
                            removed = true;
                        }
                    } while (removed);

                    Double oldAdjustedDifferenceRate = TeamAdjustedTicketDifferenceRate;

                    //Interpolation
                    DateTime oldTicketTime = TeamAdjustedTicketsTime;
                    Double oldTicketValue = TeamAdjustedTicketCount;
                    Double interTimeOldSeconds = 0;
                    Double interTimeNewSeconds = (newAdjustedTicketTime - oldTicketTime).TotalSeconds;
                    Double m = (newAdjustedTicketCount - oldTicketValue) / (interTimeNewSeconds);
                    Double b = oldTicketValue;
                    for (Int32 sec = (Int32)interTimeOldSeconds; sec < interTimeNewSeconds; sec++)
                    {
                        //Calculate time this datapoint occured
                        DateTime subTicketTime = oldTicketTime.AddSeconds(sec);

                        //Caclulate and enqueue the new adjusted ticket count
                        Double subTicketValue = (m * sec) + b;
                        TeamAdjustedTicketCounts.Enqueue(new KeyValuePair<double, DateTime>(subTicketValue, subTicketTime));

                        //Calculate and enqueue the new adjusted ticket difference rate
                        List<Double> ticketValues = TeamAdjustedTicketCounts.Select(pair => pair.Key).ToList();
                        List<double> ticketDifferences = new List<Double>();
                        for (int i = 0; i < ticketValues.Count - 1; i++)
                        {
                            ticketDifferences.Add(ticketValues[i + 1] - ticketValues[i]);
                        }
                        ticketDifferences.Sort();
                        //Convert to tickets/min
                        TeamAdjustedTicketDifferenceRate = (ticketDifferences.Sum() / ticketDifferences.Count) * 60;
                        if (Double.IsNaN(TeamAdjustedTicketDifferenceRate) || TeamAdjustedTicketDifferenceRate > 0)
                        {
                            TeamAdjustedTicketDifferenceRate = 0;
                        }
                        TeamAdjustedTicketDifferenceRates.Enqueue(new KeyValuePair<double, DateTime>(TeamAdjustedTicketDifferenceRate, subTicketTime));

                        //Calculate new ticket acceleration
                        List<Double> accelerationValues = TeamAdjustedTicketDifferenceRates.Select(pair => pair.Key).ToList();
                        List<double> accelerationDifferences = new List<Double>();
                        for (int i = 0; i < accelerationValues.Count - 1; i++)
                        {
                            accelerationDifferences.Add(accelerationValues[i + 1] - accelerationValues[i]);
                        }
                        accelerationDifferences.Sort();
                        //Convert to tickets/min/min
                        TeamAdjustedTicketAccellerationRate = (accelerationDifferences.Sum() / accelerationDifferences.Count) * 60;
                        if (Double.IsNaN(TeamAdjustedTicketAccellerationRate))
                        {
                            TeamAdjustedTicketAccellerationRate = 0;
                        }
                    }

                    if (false && Plugin._isTestingAuthorized && Plugin._serverInfo.InfoObject.GameMode == "ConquestLarge0" && Plugin._gameVersion == GameVersion.BF4)
                    {
                        //On conquest large, only allow the value to change by 
                        //2.5t/m away from zero with each tick, and 
                        //10.0t/m toward zero with each tick, helps with auto-nuke
                        var outChange = 2.5;
                        var inChange = 10.0;

                        //Grab the new rate
                        var newAdjustedRate = TeamAdjustedTicketDifferenceRate;

                        var maxOut = Math.Max(oldAdjustedDifferenceRate - outChange, -999);
                        var maxIn = Math.Min(oldAdjustedDifferenceRate + inChange, 0);

                        if (newAdjustedRate < oldAdjustedDifferenceRate)
                        {
                            newAdjustedRate = Math.Max(newAdjustedRate, maxOut);
                        }
                        else
                        {
                            newAdjustedRate = Math.Min(newAdjustedRate, maxIn);
                        }
                        double diff = newAdjustedRate - oldAdjustedDifferenceRate;

                        //Set the new rate
                        TeamAdjustedTicketDifferenceRate = newAdjustedRate;

                        if (TeamID == 1 || TeamID == 2)
                        {
                            Plugin.Log.Success(TeamKey + TeamID + " new rate: " + Math.Round(TeamAdjustedTicketDifferenceRate, 1) + " diff: " + Math.Round(diff, 1));
                        }
                    }

                    //Set instance vars
                    TeamAdjustedTicketCount = (Int32)newAdjustedTicketCount;
                    TeamAdjustedTicketsTime = newAdjustedTicketTime;
                }
                catch (Exception e)
                {
                    Plugin.HandleException(new AdKatsException("Error while updating team adjusted ticket count.", e));
                }
            }

            public void UpdateTotalScore(Double newTotalScore)
            {
                try
                {
                    //Get rounded time (floor)
                    DateTime newScoreTime = Plugin.UtcNow();
                    newScoreTime = newScoreTime.AddTicks(-(newScoreTime.Ticks % TimeSpan.TicksPerSecond));
                    if (!TeamTotalScoresAdded)
                    {
                        TeamScoreDifferenceRate = 0;
                        TeamTotalScore = newTotalScore;
                        TeamTotalScoresTime = newScoreTime;
                        TeamTotalScores.Enqueue(new KeyValuePair<double, DateTime>(newTotalScore, newScoreTime));
                        TeamTotalScoresAdded = true;
                        return;
                    }

                    //Interpolation
                    DateTime oldScoreTime = TeamTotalScoresTime;
                    Double oldScoreValue = TeamTotalScore;
                    Double interTimeOldSeconds = 0;
                    Double interTimeNewSeconds = (newScoreTime - oldScoreTime).TotalSeconds;
                    Double m = (newTotalScore - oldScoreValue) / (interTimeNewSeconds);
                    Double b = oldScoreValue;
                    for (Int32 sec = (Int32)interTimeOldSeconds; sec < interTimeNewSeconds; sec++)
                    {
                        DateTime subScoreTime = oldScoreTime.AddSeconds(sec);
                        Double subScoreValue = (m * sec) + b;
                        TeamTotalScores.Enqueue(new KeyValuePair<double, DateTime>(subScoreValue, subScoreTime));
                    }

                    //Remove old values (more than 60 seconds ago)
                    Boolean removed = false;
                    do
                    {
                        removed = false;
                        if (TeamTotalScores.Any() && (Plugin.UtcNow() - TeamTotalScores.Peek().Value).TotalSeconds > 60)
                        {
                            TeamTotalScores.Dequeue();
                            TeamTotalScoresFull = true;
                            removed = true;
                        }
                    } while (removed);

                    //Set instance vars
                    TeamTotalScore = newTotalScore;
                    TeamTotalScoresTime = newScoreTime;

                    List<Double> values = TeamTotalScores.Select(pair => pair.Key).ToList();
                    List<double> differences = new List<Double>();
                    for (int i = 0; i < values.Count - 1; i++)
                    {
                        differences.Add(values[i + 1] - values[i]);
                    }
                    differences.Sort();
                    //Convert to tickets/min
                    TeamScoreDifferenceRate = (differences.Sum() / differences.Count) * 60;
                    if (Double.IsNaN(TeamScoreDifferenceRate))
                    {
                        TeamScoreDifferenceRate = 0;
                    }
                }
                catch (Exception e)
                {
                    Plugin.HandleException(new AdKatsException("Error while updating team ticket total score.", e));
                }
            }

            public Double getTeamPower()
            {
                return getTeamPower(null, null);
            }

            public Double getTeamPower(AdKatsPlayer ignorePlayer, AdKatsPlayer includePlayer) {
                try {
                    if (!Plugin._PlayerDictionary.Any() || !Plugin._UseTopPlayerMonitor) {
                        return 0;
                    }
                    List<AdKatsPlayer> teamPlayers = Plugin._PlayerDictionary.Values.ToList()
                        .Where(aPlayer =>
                            aPlayer.player_type == PlayerType.Player
                            &&
                            (ignorePlayer == null || aPlayer.player_id != ignorePlayer.player_id)
                            &&
                            (
                                (aPlayer.RequiredTeam != null && aPlayer.RequiredTeam.TeamID == TeamID)
                                ||
                                (aPlayer.RequiredTeam == null && aPlayer.frostbitePlayerInfo.TeamID == TeamID)
                            )).ToList();
                    if (includePlayer != null && !teamPlayers.Contains(includePlayer))
                    {
                        teamPlayers.Add(includePlayer);
                    }
                    var teamTopPlayers = teamPlayers.Where(aPlayer => aPlayer.TopStats.TopRoundRatio != 0);
                    var topPowerSum = teamTopPlayers.Select(aPlayer => aPlayer.TopStats.getTopPower()).Sum();
                    var kdPowerSum = 1.0;
                    if (Plugin._roundState == RoundState.Playing && Plugin._serverInfo.GetRoundElapsedTime().TotalMinutes >= 4.0) {
                        var teamFInfo = teamPlayers.Where(aPlayer => aPlayer.frostbitePlayerInfo != null);
                        if (teamFInfo.Any()) {
                            var teamTotalKills = teamFInfo.Sum(aPlayer => aPlayer.frostbitePlayerInfo.Kills);
                            var teamTotalDeaths = teamFInfo.Sum(aPlayer => aPlayer.frostbitePlayerInfo.Deaths);
                            //Calculate total team K/D
                            kdPowerSum = (teamTotalKills / Math.Max(teamTotalDeaths, 1.0));
                            //Coerce to 0.75-3.5
                            kdPowerSum = Math.Min(Math.Max(kdPowerSum, 0.75), 3.5);
                        }
                    }
                    var playerSum = Math.Sqrt(teamPlayers.Count());
                    var ticketPower = 1.0;
                    Double current = TeamTicketCount;
                    Double start = Plugin._startingTicketCount;
                    if (start > 0 && current < start)
                    {
                        Double remainingPerc = current / start;
                        Double lostPerc = (start - current) / start;
                        ticketPower = remainingPerc + (lostPerc / 3.0);
                    }
                    var totalPower = Math.Round(topPowerSum * kdPowerSum * playerSum * ticketPower);
                    if (Plugin._isTestingAuthorized) {
                        //Plugin.Log.Info(TeamKey + " Power: " + totalPower + " = (top)" + Math.Round(topPowerSum, 2) + " * (kd)" + Math.Round(kdPowerSum, 2) + " * (count)" + Math.Round(playerSum, 2) + " * (ticket)" + Math.Round(ticketPower, 2));
                    }
                    return totalPower;
                }
                catch (Exception e) {
                    Plugin.HandleException(new AdKatsException("Error while fetching team power.", e));
                }
                return 0;
            }

            public void Reset()
            {
                try
                {
                    TeamTicketCount = 0;
                    TeamAdjustedTicketCount = 0;
                    TeamTicketCounts.Clear();
                    TeamAdjustedTicketCounts.Clear();
                    TeamAdjustedTicketDifferenceRates.Clear();
                    TeamTicketDifferenceRate = 0;
                    TeamAdjustedTicketDifferenceRate = 0;
                    TeamAdjustedTicketAccellerationRate = 0;
                    TeamTicketsAdded = false;
                    TeamAdjustedTicketsAdded = false;
                    TeamTicketAdjustment = 0;
                    TeamTotalScore = 0;
                    TeamTotalScores.Clear();
                    TeamScoreDifferenceRate = 0;
                    TeamTotalScoresAdded = false;
                    TeamTotalScoresFull = false;
                    TeamTicketCountsFull = false;
                }
                catch (Exception e)
                {
                    Plugin.HandleException(new AdKatsException("Error while resetting team.", e));
                }
            }
        }

        public class AdKatsUser
        {
            //No reference to player table made here, plain String id access
            public Dictionary<long, AdKatsPlayer> soldierDictionary = null;
            public String user_email = null;
            public Int64 user_id = -1;
            public String user_name = null;
            public String user_phone = null;
            public AdKatsRole user_role = null;
            public DateTime user_expiration;
            public String user_notes = "";

            public AdKatsUser()
            {
                soldierDictionary = new Dictionary<long, AdKatsPlayer>();
            }
        }

        public class AdKatsWeaponStat
        {
            //serviceStars
            public Double ServiceStars = 0;
            //serviceStarsProgress
            public Double ServiceStarsProgress = 0;
            //category
            public String Category;
            //categorySID
            public String CategorySID;
            //slug
            public String ID;
            //name
            public String WarsawID;
            //shotsFired
            public Double Shots = 0;
            //shotsHit
            public Double Hits = 0;
            //accuracy
            public Double Accuracy = 0;
            //headshots
            public Double Headshots = 0;
            //kills
            public Double Kills = 0;
            //timeEquipped
            public TimeSpan Time = TimeSpan.FromSeconds(0);

            //Calculated Values
            public Double HSKR = 0;
            public Double KPM = 0;
            public Double DPS = 0;
        }

        public class AdKatsVehicleStat {
            //serviceStars
            public Double ServiceStars = 0;
            //serviceStarsProgress
            public Double ServiceStarsProgress = 0;
            //slug
            public String ID;
            //name
            public String WarsawID;
            //kills
            public Double Kills = 0;
            //timeIn
            public TimeSpan TimeIn = TimeSpan.FromSeconds(0);
            //category
            public String Category;
            //destroyXinY
            public Double DestroyXInY;

            //Calculated Values
            public Double KPM = 0;
        }

        public class AdKatsSQLUpdate
        {
            public String update_id;
            public String version_minimum;
            public String version_maximum;
            public String message_name;
            public String message_success;
            public String message_failure;
            public Boolean update_checks_hasResults = true;
            public List<String> update_checks;
            public Boolean update_execute_requiresModRows;
            public List<String> update_execute;
            public List<String> update_success;
            public List<String> update_failure;

            public AdKatsSQLUpdate()
            {
                update_checks = new List<string>();
                update_execute = new List<string>();
                update_success = new List<string>();
                update_failure = new List<string>();
            }
        }

        internal enum AssessmentTypes
        {
            none,
            black,
            white,
            watch
        }

        public class BBM5108Ban
        {
            public DateTime ban_duration;
            public String ban_length = null;
            public String ban_reason = null;
            public String eaguid = null;
            public String soldiername = null;
        }

        public class PushBulletHandler {
            public enum Target {
                Private,
                Channel
            }

            public AdKats Plugin;
            public String AccessToken;
            public Target DefaultTarget = Target.Private;
            public String DefaultChannelTag;

            public PushBulletHandler(AdKats plugin) {
                Plugin = plugin;
            }

            public void PushReport(AdKatsRecord record) {
                if (record.target_player == null) {
                    Plugin.SendMessageToSource(record, "Unable to send report email. No target player found.");
                    return;
                }
                Plugin.Log.Debug(() => "Sending PushBullet report [" + record.command_numeric + "] on " + record.GetTargetNames(), 3);
                String title = record.GetTargetNames() + " reported in [" + Plugin._gameVersion + "] " + Plugin._serverInfo.ServerName.Substring(0, Math.Min(15, Plugin._serverInfo.ServerName.Length - 1));
                StringBuilder bb = new StringBuilder();
                bb.Append("AdKats Round Report [" + record.command_numeric + "]");
                bb.AppendLine();
                bb.AppendLine();
                bb.Append(record.GetSourceName() + " reported " + record.GetTargetNames() + " for " + record.record_message);
                bb.AppendLine();
                bb.AppendLine();
                bb.Append(Plugin._serverInfo.ServerName);
                PushDefault(title, bb.ToString());
            }

            public void PushDefault(String title, String body) {
                switch (DefaultTarget) {
                    case Target.Private:
                        PushPrivate(title, body);
                        break;
                    case Target.Channel:
                        PushChannel(title, body, DefaultChannelTag);
                        break;
                    default:
                        Plugin.Log.Error("Pushbullet configured with invalid target.");
                        break;
                }
            }

            public void PushPrivate(String title, String body)
            {
                WebResponse response = null;
                try {
                    if (String.IsNullOrEmpty(AccessToken)) {
                        Plugin.Log.Error("PushBullet token empty! Unable to push private note.");
                        return;
                    }
                    if (String.IsNullOrEmpty(title)) {
                        Plugin.Log.Error("PushBullet note title empty! Unable to push private note.");
                        return;
                    }
                    if (String.IsNullOrEmpty(body)) {
                        Plugin.Log.Error("PushBullet note body empty! Unable to push private note.");
                        return;
                    }
                    WebRequest request = WebRequest.Create("https://api.pushbullet.com/v2/pushes");
                    request.Method = "POST";
                    request.Headers.Add("Access-Token", AccessToken);
                    request.ContentType = "application/json";
                    String jsonBody = JSON.JsonEncode(new Hashtable {
                        {"active", true},
                        {"type", "note"},
                        {"sender_name", "AdKats-" + Plugin._serverInfo.ServerID},
                        {"title", title},
                        {"body", body}
                    });
                    byte[] byteArray = Encoding.UTF8.GetBytes(jsonBody);
                    request.ContentLength = byteArray.Length;
                    Stream requestStream = request.GetRequestStream();
                    requestStream.Write(byteArray, 0, byteArray.Length);
                    requestStream.Close();
                }
                catch (WebException e)
                {
                    response = e.Response;
                    Plugin.Log.Info("RESPONSE: " + new StreamReader(response.GetResponseStream()).ReadToEnd());
                    Plugin.HandleException(new AdKatsException("Error sending private PushBullet note.", e));
                }
            }

            public void PushChannel(String title, String body, String channelTag)
            {
                WebResponse response = null;
                try
                {
                    if (String.IsNullOrEmpty(AccessToken))
                    {
                        Plugin.Log.Error("PushBullet token empty! Unable to push channel note.");
                        return;
                    }
                    if (String.IsNullOrEmpty(channelTag))
                    {
                        Plugin.Log.Error("PushBullet channel tag empty! Unable to push channel note.");
                        return;
                    }
                    if (String.IsNullOrEmpty(title))
                    {
                        Plugin.Log.Error("PushBullet note title empty! Unable to push channel note.");
                        return;
                    }
                    if (String.IsNullOrEmpty(body))
                    {
                        Plugin.Log.Error("PushBullet note body empty! Unable to push channel note.");
                        return;
                    }
                    WebRequest request = WebRequest.Create("https://api.pushbullet.com/v2/pushes");
                    request.Method = "POST";
                    request.Headers.Add("Access-Token", AccessToken);
                    request.ContentType = "application/json";
                    String jsonBody = JSON.JsonEncode(new Hashtable {
                        {"active", true},
                        {"type", "note"},
                        {"sender_name", "AdKats-" + Plugin._serverInfo.ServerID},
                        {"channel_tag", channelTag},
                        {"title", title},
                        {"body", body}
                    });
                    byte[] byteArray = Encoding.UTF8.GetBytes(jsonBody);
                    request.ContentLength = byteArray.Length;
                    Stream requestStream = request.GetRequestStream();
                    requestStream.Write(byteArray, 0, byteArray.Length);
                    requestStream.Close();
                }
                catch (WebException e)
                {
                    response = e.Response;
                    Plugin.Log.Info("RESPONSE: " + new StreamReader(response.GetResponseStream()).ReadToEnd());
                    Plugin.HandleException(new AdKatsException("Error sending private PushBullet note.", e));
                }
            }
        }

        public class EmailHandler
        {
            private readonly Queue<MailMessage> _EmailProcessingQueue = new Queue<MailMessage>();
            public readonly EventWaitHandle _EmailProcessingWaitHandle = new EventWaitHandle(false, EventResetMode.ManualReset);
            public String CustomHTMLAddition;
            public AdKats Plugin;
            public List<String> RecipientEmails = new List<string>();
            public String SMTPPassword = "paqwjboqkbfywapu";
            public Int32 SMTPPort = 587;
            public String SMTPServer = "smtp.gmail.com";
            public String SMTPUser = "adkatsbattlefield@gmail.com";
            public String SenderEmail = "adkatsbattlefield@gmail.com";
            public Boolean UseSSL = true;
            private Thread _EmailProcessingThread;

            public EmailHandler(AdKats plugin)
            {
                Plugin = plugin;
                switch (Plugin._gameVersion)
                {
                    case GameVersion.BF3:
                        CustomHTMLAddition = @"<br><a href='http://battlelog.battlefield.com/bf3/user/%player_name%/'>BF3 Battlelog Profile</a><br>
<br><a href='http://bf3stats.com/stats_pc/%player_name%'>BF3Stats Profile</a><br>
<br><a href='http://history.anticheatinc.com/bf3/?searchvalue=%player_name%'>AntiCheat, INC. Search</a><br>
<br><a href='http://metabans.com/search/%player_name%'>Metabans Search</a><br>
<br><a href='http://i-stats.net/index.php?action=pcheck&game=BF3&player=%player_name%'>I-Stats Search</a><br>
<br><a href='http://www.team-des-fra.fr/CoM/bf3.php?p=%player_name%'>TeamDes Search</a><br>
<br><a href='http://cheatometer.hedix.de/?p=%player_name%'>Hedix Search</a><br>";
                        break;
                    case GameVersion.BF4:
                        CustomHTMLAddition = @"<br><a href='http://battlelog.battlefield.com/bf4/de/user/%player_name%/'>BF4 Battlelog Profile</a><br>
<br><a href='http://bf4stats.com/pc/%player_name%'>BF4Stats Profile</a><br>
<br><a href='http://history.anticheatinc.com/bf4/?searchvalue=%player_name%'>AntiCheat, INC. Search</a><br>
<br><a href='http://metabans.com/search/%player_name%'>Metabans Search</a><br>";
                        break;
                    default:
                        CustomHTMLAddition = "";
                        break;
                }
            }

            public void SendReport(AdKatsRecord record)
            {
                try
                {
                    if (Plugin.FetchOnlineAdminSoldiers().Any() && false)
                    {
                        Plugin.Log.Warn("Online admins detected, report email aborted.");
                        return;
                    }
                    if (record.target_player == null)
                    {
                        Plugin.SendMessageToSource(record, "Unable to send report email. No target player found.");
                        return;
                    }
                    //Create a new thread to handle keep-alive
                    //This thread will remain running for the duration the layer is online
                    Thread emailSendingThread = new Thread(new ThreadStart(delegate
                    {
                        try
                        {
                            Thread.CurrentThread.Name = "EmailSending";
                            String subject = String.Empty;
                            String body = String.Empty;

                            StringBuilder sb = new StringBuilder();
                            if (String.IsNullOrEmpty(Plugin._serverInfo.ServerName))
                            {
                                //Unable to send report email, server id unknown
                                return;
                            }
                            subject = record.GetTargetNames() + " reported in [" + Plugin._gameVersion + "] " + Plugin._serverInfo.ServerName;
                            sb.Append("<h1>AdKats " + Plugin._gameVersion + " Player Report [" + record.command_numeric + "]</h1>");
                            sb.Append("<h2>" + Plugin._serverInfo.ServerName + "</h2>");
                            sb.Append("<h3>" + DateTime.Now + " ProCon Time</h3>");
                            sb.Append("<h3>" + record.GetSourceName() + " has reported " + record.GetTargetNames() + " for " + record.record_message + "</h3>");
                            sb.Append("<p>");
                            CPlayerInfo playerInfo = record.target_player.frostbitePlayerInfo;
                            //sb.Append("<h4>Current Information on " + record.target_name + ":</h4>");
                            int numReports = Plugin._RoundReports.Values.Count(aRecord => aRecord.target_name == record.target_name);
                            sb.Append("Reported " + numReports + " times during the current round.<br/>");
                            sb.Append("Has " + Plugin.FetchPoints(record.target_player, false, true) + " infraction points on this server.<br/>");
                            sb.Append("Score: " + playerInfo.Score + "<br/>");
                            sb.Append("Kills: " + playerInfo.Kills + "<br/>");
                            sb.Append("Deaths: " + playerInfo.Deaths + "<br/>");
                            sb.Append("Kdr: " + playerInfo.Kdr + "<br/>");
                            sb.Append("Ping: " + playerInfo.Ping + "<br/>");
                            sb.Append("</p>");
                            sb.Append("<p>");
                            sb.Append("SoldierName: " + playerInfo.SoldierName + "<br/>");
                            sb.Append("EA GUID: " + playerInfo.GUID + "<br/>");
                            if (record.target_player.PBPlayerInfo != null)
                            {
                                sb.Append("PB GUID: " + record.target_player.PBPlayerInfo.GUID + "<br/>");
                                sb.Append("IP: " + record.target_player.PBPlayerInfo.Ip.Split(':')[0] + "<br/>");
                                sb.Append("Country: " + record.target_player.PBPlayerInfo.PlayerCountry + "<br/>");
                            }
                            String processedCustomHTML = Plugin.ReplacePlayerInformation(CustomHTMLAddition, record.target_player);
                            processedCustomHTML = processedCustomHTML.Replace("%map_name%", Plugin.GetCurrentReadableMap());
                            processedCustomHTML = processedCustomHTML.Replace("%mode_name%", Plugin.GetCurrentReadableMode());
                            sb.Append(processedCustomHTML);
                            sb.Append("</p>");
                            //TODO: Add chat back for ADK usage.
                            if (record.target_player != null && !Plugin._isTestingAuthorized)
                            {
                                sb.Append("<table>");
                                sb.Append(@"<thead><td>Time</td><td>Player</td><td>Message</td></thead>");
                                sb.Append("<tbody>");
                                if (record.source_player != null)
                                {
                                    foreach (KeyValuePair<DateTime, KeyValuePair<string, string>> chatLine in Plugin.FetchConversation(record.source_player.player_id, record.target_player.player_id, 30, 7))
                                    {
                                        sb.Append("<tr>");
                                        sb.Append("<td>" + chatLine.Key.ToShortDateString() + " " + chatLine.Key.ToShortTimeString() + "</td>");
                                        sb.Append("<td>" + chatLine.Value.Key + "</td>");
                                        sb.Append("<td>" + chatLine.Value.Value + "</td>");
                                        sb.Append("</tr>");
                                    }
                                }
                                else
                                {
                                    foreach (KeyValuePair<DateTime, string> chatLine in Plugin.FetchChat(record.target_player.player_id, 30, 7))
                                    {
                                        sb.Append("<tr>");
                                        sb.Append("<td>" + chatLine.Key.ToShortDateString() + " " + chatLine.Key.ToShortTimeString() + "</td>");
                                        sb.Append("<td>" + record.GetTargetNames() + "</td>");
                                        sb.Append("<td>" + chatLine.Value + "</td>");
                                        sb.Append("</tr>");
                                    }
                                }
                                sb.Append("</tbody>");
                                sb.Append("</table>");
                            }

                            body = sb.ToString();


                            EmailWrite(subject, body);
                        }
                        catch (Exception e)
                        {
                            Plugin.HandleException(new AdKatsException("Error in email sending thread.", e));
                        }
                        Plugin.LogThreadExit();
                    }));
                    //Start the thread
                    Plugin.StartAndLogThread(emailSendingThread);
                }
                catch (Exception e)
                {
                    Plugin.HandleException(new AdKatsException("Error when sending email.", e));
                }
            }

            private void EmailWrite(String subject, String body)
            {
                try
                {
                    MailMessage email = new MailMessage();

                    email.From = new MailAddress(SenderEmail, "AdKats Report System");

                    Boolean someAdded = false;
                    lock (Plugin._userCache)
                    {
                        foreach (AdKatsUser aUser in Plugin._userCache.Values)
                        {
                            //Check for not null and default values
                            if (Plugin.UserIsAdmin(aUser) && !String.IsNullOrEmpty(aUser.user_email))
                            {
                                if (Regex.IsMatch(aUser.user_email, @"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$"))
                                {
                                    email.Bcc.Add(new MailAddress(aUser.user_email));
                                    someAdded = true;
                                }
                                else
                                {
                                    Plugin.Log.Error("Error in user email address: " + aUser.user_email);
                                }
                            }
                        }
                        foreach (String extraEmail in RecipientEmails)
                        {
                            if (String.IsNullOrEmpty(extraEmail.Trim()))
                            {
                                continue;
                            }

                            if (Regex.IsMatch(extraEmail, @"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$"))
                            {
                                email.Bcc.Add(new MailAddress(extraEmail));
                                someAdded = true;
                            }
                            else
                            {
                                Plugin.Log.Error("Error in extra email address: " + extraEmail);
                            }
                        }
                    }
                    if (!someAdded)
                    {
                        Plugin.Log.Error("Unable to send email. No users with emails have access to player interaction commands.");
                        return;
                    }

                    email.Subject = subject;
                    email.Body = body;
                    email.IsBodyHtml = true;
                    email.BodyEncoding = Encoding.UTF8;

                    QueueEmailForSending(email);
                }
                catch (Exception e)
                {
                    Plugin.Log.Error("Error while sending email: " + e);
                }
            }

            private void QueueEmailForSending(MailMessage email)
            {
                Plugin.Log.Debug(() => "Entering QueueEmailForSending", 7);
                try
                {
                    if (Plugin._pluginEnabled)
                    {
                        Plugin.Log.Debug(() => "Preparing to queue email for processing", 6);
                        lock (_EmailProcessingQueue)
                        {
                            _EmailProcessingQueue.Enqueue(email);
                            Plugin.Log.Debug(() => "Email queued for processing", 6);
                            //Start the processing thread if not already running
                            if (_EmailProcessingThread == null || !_EmailProcessingThread.IsAlive)
                            {
                                _EmailProcessingThread = new Thread(EmailProcessingThreadLoop)
                                {
                                    IsBackground = true
                                };
                                Plugin.StartAndLogThread(_EmailProcessingThread);
                            }
                            _EmailProcessingWaitHandle.Set();
                        }
                    }
                }
                catch (Exception e)
                {
                    Plugin.HandleException(new AdKatsException("Error while queueing email for processing.", e));
                }
                Plugin.Log.Debug(() => "Exiting QueueEmailForSending", 7);
            }

            public void EmailProcessingThreadLoop()
            {
                try
                {
                    Plugin.Log.Debug(() => "Starting Email Handling Thread", 1);
                    Thread.CurrentThread.Name = "EmailProcessing";
                    DateTime loopStart = Plugin.UtcNow();
                    while (true)
                    {
                        try
                        {
                            Plugin.Log.Debug(() => "Entering Email Handling Thread Loop", 7);
                            if (!Plugin._pluginEnabled)
                            {
                                Plugin.Log.Debug(() => "Detected AdKats not enabled. Exiting thread " + Thread.CurrentThread.Name, 6);
                                break;
                            }

                            //Get all unprocessed inbound emails
                            Queue<MailMessage> inboundEmailMessages = new Queue<MailMessage>();
                            if (_EmailProcessingQueue.Any())
                            {
                                Plugin.Log.Debug(() => "Preparing to lock inbound mail queue to retrive new mail", 7);
                                lock (_EmailProcessingQueue)
                                {
                                    Plugin.Log.Debug(() => "Inbound mail found. Grabbing.", 6);
                                    //Grab all mail in the queue
                                    inboundEmailMessages = new Queue<MailMessage>(_EmailProcessingQueue.ToArray());
                                    //Clear the queue for next run
                                    _EmailProcessingQueue.Clear();
                                }
                            }
                            else
                            {
                                Plugin.Log.Debug(() => "No inbound mail. Waiting for Input.", 6);
                                //Wait for input
                                if ((Plugin.UtcNow() - loopStart).TotalMilliseconds > 1000)
                                {
                                    Plugin.Log.Debug(() => "Warning. " + Thread.CurrentThread.Name + " thread processing completed in " + ((int)((Plugin.UtcNow() - loopStart).TotalMilliseconds)) + "ms", 4);
                                }
                                _EmailProcessingWaitHandle.Reset();
                                _EmailProcessingWaitHandle.WaitOne(TimeSpan.FromSeconds(5));
                                loopStart = Plugin.UtcNow();
                                continue;
                            }

                            //Loop through all mails in order that they came in
                            while (inboundEmailMessages.Any())
                            {
                                if (!Plugin._pluginEnabled)
                                {
                                    break;
                                }
                                Plugin.Log.Debug(() => "begin reading mail", 6);
                                MailMessage message = inboundEmailMessages.Dequeue();
                                if (Plugin.Log.DebugLevel >= 5)
                                {
                                    Plugin.Log.Write("server: " + SMTPServer);
                                    Plugin.Log.Write("port: " + SMTPPort);
                                    Plugin.Log.Write("user/pass: " + ((!String.IsNullOrEmpty(SMTPUser) && !String.IsNullOrEmpty(SMTPPassword)) ? "OK" : "INVALID"));
                                    Plugin.Log.Write("details sender: " + message.Sender);
                                    Plugin.Log.Write("details from: " + message.From);
                                    Plugin.Log.Write("details to: " + message.To);
                                    Plugin.Log.Write("details cc: " + message.CC);
                                    Plugin.Log.Write("details bcc: " + message.Bcc);
                                    Plugin.Log.Write("details subject: " + message.Subject);
                                    Plugin.Log.Write("details body: " + message.Body);
                                }
                                //Dequeue the first/next mail
                                SmtpClient smtp = new SmtpClient(SMTPServer, SMTPPort)
                                {
                                    EnableSsl = UseSSL,
                                    Timeout = 10000,
                                    DeliveryMethod = SmtpDeliveryMethod.Network,
                                    UseDefaultCredentials = false,
                                    Credentials = new NetworkCredential(SMTPUser, SMTPPassword)
                                };
                                smtp.SendCompleted += new SendCompletedEventHandler(smtp_SendCompleted);

                                Plugin.Log.Debug(() => "Sending notification email. Please wait.", 1);

                                smtp.Send(message);

                                Plugin.Log.Debug(() => "A notification email has been sent.", 1);

                                if (inboundEmailMessages.Any())
                                {
                                    //Wait 5 seconds between loops
                                    Plugin._threadMasterWaitHandle.WaitOne(5000);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            if (e is ThreadAbortException)
                            {
                                Plugin.HandleException(new AdKatsException("mail processing thread aborted. Exiting."));
                                break;
                            }
                            Plugin.HandleException(new AdKatsException("Error occured in mail processing thread. skipping loop.", e));
                        }
                    }
                    Plugin.Log.Debug(() => "Ending mail Processing Thread", 1);
                    Plugin.LogThreadExit();
                }
                catch (Exception e)
                {
                    Plugin.HandleException(new AdKatsException("Error occured in mail processing thread.", e));
                }
            }

            private void smtp_SendCompleted(object sender, AsyncCompletedEventArgs e)
            {
                if (e.Cancelled == true || e.Error != null)
                {
                    Plugin.HandleException(new AdKatsException("Error occured in mail processing. Sending Canceled.", e.Error));
                }
            }
        }

        public class IPAPILocation
        {
            public String IP;
            public String city;
            public String country;
            public String countryCode;
            public String isp;
            public Double lat;
            public Double lon;
            public String message;
            public String org;
            public String query;
            public String region;
            public String regionName;
            public String status;
            public String timezone;
            public String zip;

            public IPAPILocation(String ip)
            {
                if (String.IsNullOrEmpty(ip))
                {
                    throw new NoNullAllowedException("Location IP must not be null.");
                }
                IP = ip;
            }
        }

        internal class MetabansAPI {

            private static string METABANS_API_HREF = "http://metabans.com/mb-api.php";

            private ArrayList m_requests;
            private string Username;
            private string ApiKey;
            private enumBoolOnOff Debug;

            // You must have this event registered to see output of the Debug.
            public delegate void ExecuteCommandHandler(params string[] commands);
            public event ExecuteCommandHandler ExecuteCommand;

            public delegate void RequestSuccessHandler(Hashtable request, Hashtable data);
            public event RequestSuccessHandler mb_sight_player_ok;
            public event RequestSuccessHandler mb_assess_player_ok;

            public MetabansAPI(string Username, string ApiKey, enumBoolOnOff Debug) {
                this.m_requests = new ArrayList();

                // if username + apikey == "", load from xml file.

                this.Username = Username;
                this.ApiKey = ApiKey;
                this.Debug = Debug;
            }



            public MetabansAPI mb_assess_player(int player_id, AssessmentTypes assessment_type, string reason, int assessment_length) {
                Hashtable hash = new Hashtable();
                hash.Add("action", "mb_assess_player");
                hash.Add("player_id", player_id.ToString());
                hash.Add("assessment_type", assessment_type.ToString());
                hash.Add("reason", reason);
                hash.Add("assessment_length", assessment_length.ToString());

                this.m_requests.Add(hash);

                return this;
            }

            public MetabansAPI mb_assess_player(SupportedGames game_name, string player_uid, AssessmentTypes assessment_type, string reason, int assessment_length) {
                Hashtable hash = new Hashtable();
                hash.Add("action", "mb_assess_player");
                hash.Add("game_name", game_name.ToString());
                hash.Add("player_uid", player_uid);
                hash.Add("assessment_type", assessment_type.ToString());
                hash.Add("reason", reason);
                hash.Add("assessment_length", assessment_length.ToString());

                this.m_requests.Add(hash);

                return this;
            }

            // You shouldn't ever need to sight a player.  Only the main Metabans plugin should ever need to do this.
            public MetabansAPI mb_sight_player(SupportedGames game_name, string player_uid, string player_name, string group_name, string player_ip, string alternate_uid) {

                Hashtable hash = new Hashtable();
                hash.Add("action", "mb_sight_player");
                hash.Add("game_name", game_name.ToString());
                hash.Add("player_uid", player_uid);
                hash.Add("player_name", player_name);
                hash.Add("group_name", group_name);

                if (player_ip != null) {
                    hash.Add("player_ip", ((string) player_ip).Split(':')[0]);
                }

                hash.Add("alternate_uid", alternate_uid);

                this.m_requests.Add(hash);

                return this;
            }

            private static string GenerateSalt() {
                Random random = new Random();
                byte[] salt = new byte[random.Next(24, 48)];

                for (int i = 0; i < salt.Length; i++) {
                    salt[i] = (byte) random.Next(1, 254);
                }

                return SHA1.Data(salt);
            }

            private string GeneratePostData() {

                StringBuilder postBuilder = new StringBuilder();

                postBuilder.AppendFormat("&username={0}", Uri.EscapeUriString(this.Username));

                string salt = MetabansAPI.GenerateSalt();
                postBuilder.AppendFormat("&salt={0}", Uri.EscapeUriString(salt));
                postBuilder.AppendFormat("&apikey={0}", Uri.EscapeUriString(SHA1.String(salt + this.ApiKey)));
                postBuilder.Append("&options=mirror");

                for (int offset = 0; offset < this.m_requests.Count; offset++) {

                    if (this.m_requests[offset] is Hashtable) {

                        foreach (DictionaryEntry entry in (Hashtable) this.m_requests[offset]) {
                            if (entry.Value != null) {
                                postBuilder.AppendFormat("&{0}={1}", Uri.EscapeUriString(String.Format("requests[{0}][{1}]", offset, entry.Key.ToString())), Uri.EscapeUriString(entry.Value.ToString()));
                            }
                        }

                    }
                }

                return postBuilder.ToString();
            }

            private void request_RequestComplete(MetabansRequest sender) {
                Hashtable table = (Hashtable) JSON.JsonDecode(Encoding.UTF8.GetString(sender.CompleteFileData));

                try {
                    if (this.Debug == enumBoolOnOff.On && this.ExecuteCommand != null) {
                        this.ExecuteCommand("procon.protected.pluginconsole.write", "^4Metabans API: Received sync response, beginning parse");
                    }

                    foreach (Hashtable response in (ArrayList) table["responses"]) {
                        if (response.ContainsKey("status") == true && (string) response["status"] == "OK") {
                            if (response.ContainsKey("request") == true && response.ContainsKey("data") == true) {

                                Hashtable request = (Hashtable) response["request"];
                                Hashtable data = (Hashtable) response["data"];

                                if (request.ContainsKey("action") == true) {
                                    switch ((string) request["action"]) {
                                        case "mb_sight_player":
                                            if (this.mb_sight_player_ok != null) {
                                                this.mb_sight_player_ok(request, data);
                                            }
                                            break;
                                        case "mb_assess_player":
                                            if (this.mb_assess_player_ok != null) {
                                                this.mb_assess_player_ok(request, data);
                                            }
                                            break;
                                    }
                                }
                            }
                        } else if (response.ContainsKey("error") == true) {
                            if (/*this.Debug == enumBoolOnOff.On && */this.ExecuteCommand != null) {
                                // This is an error because of information sent to the metabans (like api key error or something)
                                // not an actual problem that requires debugging.
                                this.ExecuteCommand("procon.protected.pluginconsole.write", "^1Metabans API: Response error; " + (string) ((Hashtable) response["error"])["message"]);
                            }
                        }
                    }

                    if (this.Debug == enumBoolOnOff.On && this.ExecuteCommand != null) {
                        this.ExecuteCommand("procon.protected.pluginconsole.write", "^4Metabans API: Received sync and parse completed");
                    }
                } catch (Exception e) {
                    if (this.Debug == enumBoolOnOff.On && this.ExecuteCommand != null) {
                        this.ExecuteCommand("procon.protected.pluginconsole.write", "^1Metabans API (request_RequestComplete): " + e.Message);
                    }
                }
            }

            private void request_RequestError(MetabansRequest sender) {
                if (this.Debug == enumBoolOnOff.On && this.ExecuteCommand != null) {
                    this.ExecuteCommand("procon.protected.pluginconsole.write", "^1Metabans API request_RequestError: " + sender.Error);
                }
            }

            public MetabansAPI Post() {

                MetabansRequest request = new MetabansRequest(MetabansAPI.METABANS_API_HREF);
                request.RequestComplete += new MetabansRequest.RequestEventDelegate(request_RequestComplete);
                request.RequestError += new MetabansRequest.RequestEventDelegate(request_RequestError);
                request.Method = "POST";
                request.RequestContent = this.GeneratePostData();

                if (this.Debug == enumBoolOnOff.On && this.ExecuteCommand != null) {
                    this.ExecuteCommand("procon.protected.pluginconsole.write", "^4Metabans API: Post " + Uri.EscapeUriString(request.RequestContent));
                }

                request.BeginRequest();

                return this;
            }
        }

        internal static class SHA1 {
            private static System.Security.Cryptography.SHA1 HASHER = System.Security.Cryptography.SHA1.Create();

            public static string Data(byte[] data) {
                StringBuilder stringifyHash = new StringBuilder();
                byte[] hash = SHA1.HASHER.ComputeHash(data);

                for (int x = 0; x < hash.Length; x++) {
                    stringifyHash.Append(hash[x].ToString("x2"));
                }

                return stringifyHash.ToString();
            }

            public static string String(string data) {
                return SHA1.Data(Encoding.UTF8.GetBytes(data));
            }
        }

        // This is similar to CDownloadFile but has some POST options included
        internal class MetabansRequest {

            public delegate void RequestEventDelegate(MetabansRequest sender);
            public event RequestEventDelegate RequestComplete;
            public event RequestEventDelegate RequestError;
            public event RequestEventDelegate RequestDiscoveredFileSize;
            public event RequestEventDelegate RequestProgressUpdate;

            private HttpWebRequest m_webRequest;
            private WebResponse m_webResponse;
            private Stream m_responseStream;

            public string DownloadSource;

            private const int INT_BUFFER_SIZE = UInt16.MaxValue;
            private byte[] ma_bBufferStream;

            private System.Timers.Timer m_progressTimer;

            public bool FileDownloading;

            public int BytesDownloaded;

            public int FileSize;

            public byte[] CompleteFileData;

            public bool UnknownSize;

            public object AdditionalData;

            public string Error;

            /// <summary>
            /// Optional range to include in the request header
            /// </summary>
            public int? Range;

            /// <summary>
            /// Optional referrer to include in the request header
            /// </summary>
            public string Referrer = "PRoCon Metabans Plugin/1.1.0.0";

            /// <summary>
            /// The WebRequestMethods.Http string representing the type of
            /// method to use in the request.  Default is Get.
            /// </summary>
            public string Method;

            /// <summary>
            /// The contents of a POST request
            /// </summary>
            public string RequestContent;

            private int m_timeout;
            /// <summary>
            /// ReadTimeout of the stream in milliseconds.  Default is 10 seconds.
            /// </summary>
            public int Timeout {
                get {
                    return this.m_timeout;
                }
                set {
                    this.m_timeout = value;

                    if (this.m_responseStream != null) {
                        this.m_responseStream.ReadTimeout = value;
                    }
                }
            }

            public string FileName {
                get {
                    string strReturnFileName = String.Empty;

                    if (this.DownloadSource.Length > 0) {
                        strReturnFileName = this.DownloadSource.Substring(this.DownloadSource.LastIndexOf("/") + 1, (this.DownloadSource.Length - this.DownloadSource.LastIndexOf("/") - 1));
                    }

                    return strReturnFileName;
                }
            }

            public MetabansRequest(string downloadSource) {
                this.DownloadSource = downloadSource;

                this.m_timeout = 30000;
                this.Method = WebRequestMethods.Http.Get;
            }

            public void EndDownload() {
                this.FileDownloading = false;
            }

            private void RequestTimeoutCallback(object state, bool timedOut) {
                if (timedOut == true) {
                    MetabansRequest cdfParent = (MetabansRequest) state;

                    if (cdfParent != null) {
                        try {
                            cdfParent.m_webRequest.Abort();
                        } catch (Exception e) {
                            if (this.RequestError != null) {
                                this.Error = e.Message;

                                this.RequestError(this);
                            }
                        }
                    }
                }
            }

            public void BeginRequest() {
                try {
                    new Thread(new ThreadStart(this.BeginRequestCallback)).Start();
                } catch (Exception e) {
                    if (this.RequestError != null) {
                        this.Error = e.Message;

                        this.RequestError(this);
                    }
                }
            }

            private void BeginRequestCallback() {

                this.UnknownSize = true;

                this.BytesDownloaded = 0;
                this.FileSize = 1;

                this.FileDownloading = true;

                this.ma_bBufferStream = new byte[MetabansRequest.INT_BUFFER_SIZE];

                try {
                    this.m_webRequest = (HttpWebRequest) HttpWebRequest.Create(this.DownloadSource);
                    this.m_webRequest.Method = this.Method;

                    if (this.Range != null) {
                        this.m_webRequest.AddRange((int) this.Range);
                    }

                    if (this.Referrer != null) {
                        this.m_webRequest.UserAgent = this.Referrer;
                    }

                    this.m_webRequest.Headers.Add(System.Net.HttpRequestHeader.AcceptEncoding, "gzip");

                    try {
                        this.m_webRequest.Proxy = null;
                    } catch (Exception) { }

                    if (this.RequestContent != null && this.RequestContent.Length > 0) {
                        this.m_webRequest.ContentType = "application/x-www-form-urlencoded";
                        this.m_webRequest.ContentLength = this.RequestContent.Length;

                        Stream newStream = this.m_webRequest.GetRequestStream();
                        // Send the data.
                        newStream.Write(Encoding.UTF8.GetBytes(this.RequestContent), 0, this.RequestContent.Length);
                        newStream.Close();
                    }

                    if (this.m_webRequest != null) {
                        IAsyncResult arResult = this.m_webRequest.BeginGetResponse(new AsyncCallback(this.ResponseCallback), this);
                        ThreadPool.RegisterWaitForSingleObject(arResult.AsyncWaitHandle, new WaitOrTimerCallback(this.RequestTimeoutCallback), this, this.m_timeout, true);
                    }
                } catch (Exception e) {
                    Console.WriteLine(this.DownloadSource);
                    Console.WriteLine(e.StackTrace);

                    if (this.RequestError != null) {
                        this.Error = e.Message;

                        this.RequestError(this);
                    }
                }
            }

            private void ResponseCallback(IAsyncResult ar) {
                //Request cdfParent = (Request)ar.AsyncState;

                try {
                    this.m_webResponse = this.m_webRequest.EndGetResponse(ar);

                    string strContentLength = null;
                    if ((strContentLength = this.m_webResponse.Headers["Content-Length"]) != null) {
                        this.FileSize = Convert.ToInt32(strContentLength);
                        this.CompleteFileData = new byte[this.FileSize];

                        this.UnknownSize = false;

                        if (this.RequestDiscoveredFileSize != null) {
                            this.RequestDiscoveredFileSize(this);
                        }
                    } else {
                        this.CompleteFileData = new byte[0];
                    }

                    this.m_responseStream = this.m_webResponse.GetResponseStream();

                    if (this.m_webResponse.Headers.Get("Content-Encoding") != null && this.m_webResponse.Headers.Get("Content-Encoding").ToLower() == "gzip") {
                        this.m_responseStream = new GZipStream(this.m_responseStream, CompressionMode.Decompress);
                    }

                    IAsyncResult arResult = this.m_responseStream.BeginRead(this.ma_bBufferStream, 0, MetabansRequest.INT_BUFFER_SIZE, new AsyncCallback(this.ReadCallBack), this);

                    ThreadPool.RegisterWaitForSingleObject(arResult.AsyncWaitHandle, new WaitOrTimerCallback(this.ReadTimeoutCallback), this, this.m_timeout, true);
                } catch (Exception e) {
                    this.FileDownloading = false;
                    if (this.RequestError != null) {
                        this.Error = e.Message;

                        this.RequestError(this);
                    }
                }
            }

            private void ReadTimeoutCallback(object state, bool timedOut) {
                if (timedOut == true) {
                    MetabansRequest cdfParent = (MetabansRequest) state;
                    if (cdfParent != null && cdfParent.m_responseStream != null) {
                        cdfParent.m_responseStream.Close();

                        if (cdfParent.RequestError != null) {
                            cdfParent.Error = "Read Timeout";

                            cdfParent.RequestError(cdfParent);
                        }
                    }
                }
            }

            private void ReadCallBack(IAsyncResult ar) {

                if (this.FileDownloading == true) {
                    try {

                        int iBytesRead = -1;
                        if ((iBytesRead = this.m_responseStream.EndRead(ar)) > 0) {

                            if (this.UnknownSize == true) {
                                byte[] resizedFileData = new byte[this.CompleteFileData.Length + iBytesRead];

                                this.CompleteFileData.CopyTo(resizedFileData, 0);

                                this.CompleteFileData = resizedFileData;

                                // Array.Resize<byte>(ref cdfParent.CompleteFileData, cdfParent.CompleteFileData.Length + iBytesRead);
                            }

                            Array.Copy(this.ma_bBufferStream, 0, this.CompleteFileData, this.BytesDownloaded, iBytesRead);
                            this.BytesDownloaded += iBytesRead;

                            IAsyncResult arResult = this.m_responseStream.BeginRead(this.ma_bBufferStream, 0, MetabansRequest.INT_BUFFER_SIZE, new AsyncCallback(this.ReadCallBack), this);

                            ThreadPool.RegisterWaitForSingleObject(arResult.AsyncWaitHandle, new WaitOrTimerCallback(this.ReadTimeoutCallback), this, this.m_timeout, true);
                        } else {

                            this.FileDownloading = false;
                            if (this.RequestComplete != null) {
                                //FrostbiteConnection.RaiseEvent(cdfParent.DownloadComplete.GetInvocationList(), cdfParent);
                                this.RequestComplete(this);
                            }

                            this.m_responseStream.Close();
                            this.m_responseStream.Dispose();
                            this.m_responseStream = null;
                        }
                    } catch (Exception e) {
                        this.FileDownloading = false;
                        if (this.RequestError != null) {
                            this.Error = e.Message;

                            //FrostbiteConnection.RaiseEvent(cdfParent.DownloadError.GetInvocationList(), cdfParent);
                            this.RequestError(this);
                        }
                    }
                }
            }
        }

        public class StatLibrary
        {
            private readonly AdKats Plugin;
            public Dictionary<String, StatLibraryWeapon> Weapons;

            public StatLibrary(AdKats plugin)
            {
                Plugin = plugin;
            }

            public Boolean PopulateWeaponStats()
            {
                try
                {
                    //Get Weapons
                    Hashtable statTable = FetchWeaponDefinitions();
                    Hashtable gameTable = (Hashtable)statTable[Plugin._gameVersion.ToString()];
                    if (gameTable != null && gameTable.Count > 0)
                    {
                        Dictionary<string, StatLibraryWeapon> tempWeapons = new Dictionary<String, StatLibraryWeapon>();
                        foreach (String currentCategory in gameTable.Keys)
                        {
                            Hashtable categoryTable = (Hashtable)gameTable[currentCategory];
                            foreach (String currentWeapon in categoryTable.Keys)
                            {
                                Hashtable weaponTable = (Hashtable)categoryTable[currentWeapon];
                                StatLibraryWeapon weapon = new StatLibraryWeapon
                                {
                                    ID = currentWeapon,
                                    Category = currentCategory,
                                    DamageMax = (Double)weaponTable["max"],
                                    DamageMin = (Double)weaponTable["min"]
                                };
                                tempWeapons.Add(weapon.ID, weapon);
                            }
                        }
                        if (tempWeapons.Count > 0)
                        {
                            Weapons = tempWeapons;
                            return true;
                        }
                    }
                    else
                    {
                        Plugin.Log.Error("Unable to find current game in weapon stats library.");
                    }
                }
                catch (Exception e)
                {
                    Plugin.HandleException(new AdKatsException("Error while fetching weapon stats for " + Plugin._gameVersion, e));
                }
                return false;
            }

            private Hashtable FetchWeaponDefinitions()
            {
                Hashtable statTable = null;
                using (WebClient client = new WebClient())
                {
                    String weaponInfo;
                    Plugin.Log.Debug(() => "Fetching weapon statistic definitions...", 2);
                    try
                    {
                        weaponInfo = Plugin.ClientDownloadTimer(client, "https://raw.github.com/AdKats/AdKats/master/adkatsblweaponstats.json" + "?cacherand=" + Environment.TickCount);
                        Plugin.Log.Debug(() => "Weapon statistic definitions fetched.", 1);
                    }
                    catch (Exception)
                    {
                        try
                        {
                            weaponInfo = Plugin.ClientDownloadTimer(client, "http://api.gamerethos.net/adkats/fetch/weapons" + "?cacherand=" + Environment.TickCount);
                            Plugin.Log.Debug(() => "Weapon statistic definitions fetched from backup location.", 1);
                        }
                        catch (Exception)
                        {
                            return null;
                        }
                    }
                    try
                    {
                        statTable = (Hashtable)JSON.JsonDecode(weaponInfo);
                    }
                    catch (Exception e)
                    {
                        Plugin.HandleException(new AdKatsException("Error while parsing weapon statistic definitions.", e));
                        return null;
                    }
                }
                return statTable;
            }
        }

        public class StatLibraryWeapon
        {
            public String Category = null;
            public Double DamageMax = -1;
            public Double DamageMin = -1;
            public String ID = null;
        }

        public List<T> Shuffle<T>(List<T> list)
        {
            RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider();
            int n = list.Count;
            while (n > 1)
            {
                byte[] box = new byte[1];
                do
                    provider.GetBytes(box);
                while (!(box[0] < n * (Byte.MaxValue / n)));
                int k = (box[0] % n);
                n--;
                T value = list[k];
                list[k] = list[n];
                list[n] = value;
            }
            return list;
        }

        //Directly pulled from TeamSpeak3Sync and adapted into inline library
        public class TeamSpeakClientViewer
        {
            public TeamSpeakClientViewer(AdKats plugin)
            {
                _plugin = plugin;

                try
                {
                    Thread mThreadMain = new Thread(EntryMain);
                    Thread mThreadSynchronize = new Thread(EntrySynchronization);
                    mThreadMain.Start();
                    mThreadSynchronize.Start();
                }
                catch (Exception e)
                {
                    ConsoleWrite("^8A fatal error occurred on load! Procon must be restarted for TSCV to work correctly.");
                    ConsoleWrite("^8^bMessage:^n^0 " + e.Message);
                    ConsoleWrite("^8^bStack Trace:^n^0 " + e.StackTrace);
                }

                Ts3QueryNickname = "TeamSpeakClientViewer";
                Ts3SubChannelNames = new String[] { };
            }

            public Boolean Enabled()
            {
                return _mEnabled;
            }

            public void Enable()
            {
                ConsoleWrite("^2^bTSCV credit to Teamspeak3Sync by Imisnew2^n");
                ConsoleWrite("[Enabled] ^2^bRequesting TSCV start...^n");
                AddToActionQueue(Commands.ClientEnabled);
            }

            public void Disable()
            {
                ConsoleWrite("[Disabled] ^8^bRequesting TSCV stop...^n");
                AddToActionQueue(Commands.ClientDisabled);
                if (_mTsReconnecting)
                {
                    _mTsReconnEvent.Set();
                }
            }

            public List<TeamspeakClient> GetPlayersOnTs()
            {
                return _mClientTsInfo.ToList();
            }

            private readonly AdKats _plugin;

            private Boolean _mEnabled;

            public String Ts3ServerIp { get; set; }
            public UInt16 Ts3ServerPort { get; set; }
            public UInt16 Ts3QueryPort { get; set; }
            public String Ts3QueryUsername { get; set; }
            public String Ts3QueryPassword { get; set; }
            public String Ts3QueryNickname { get; set; }
            public String Ts3MainChannelName { get; set; }
            public String[] Ts3SubChannelNames { get; set; }
            public Boolean DbgClients { get; set; }
            private Object _teamspeakLocker = new Object();

            public enum JoinDisplayType {
                Disabled,
                Say,
                Yell,
                Tell
            }

            public JoinDisplayType JoinDisplay = JoinDisplayType.Disabled;
            public String JoinDisplayMessage = "%player% joined teamspeak! Welcome!";
            public Int32 UpdateIntervalSeconds = 30;
            public Boolean UseWebService = false;
            public String WebServiceURL = "";

            private const Int32 SynDelayQueriesAmount = 1000;
            private const Int32 ErrReconnectOnErrorAttempts = 20;
            private const Int32 ErrReconnectOnErrorInterval = 30000;

            public enum Commands
            {
                ClientEnabled,
                ClientDisabled,
                UpdateTsClientInfo,
            }

            public enum Queries
            {
                OpenConnectionEstablish,
                OpenConnectionLogin,
                OpenConnectionUse,
                OpenConnectionMain,
                OpenConnectionNickname,

                TsInfoClientList,
                TsInfoChannelList,
                TsInfoClientInfo
            }

            private readonly Mutex _mActionMutex = new Mutex();
            private readonly Semaphore _mActionSemaphore = new Semaphore(0, Int32.MaxValue);
            private Queue<ActionEvent> _mActions = new Queue<ActionEvent>();
            private readonly TeamspeakConnection _mTsConnection = new TeamspeakConnection();
            private TeamspeakResponse _mTsResponse = new TeamspeakResponse("error id=0 msg=ok");
            private Boolean _mTsReconnecting;
            private DateTime _mTsPrevSendTime = DateTime.Now;
            private readonly AutoResetEvent _mTsReconnEvent = new AutoResetEvent(false);
            private List<TeamspeakClient> _mClientTsInfo = new List<TeamspeakClient>();
            private readonly TeamspeakChannel _mMainChannel = new TeamspeakChannel();
            private readonly List<TeamspeakChannel> _mPickupChannels = new List<TeamspeakChannel>();
            private ActionEvent _mCurrentAction;

            public class TeamspeakConnection
            {
                private static readonly TeamspeakResponse TsrOk = new TeamspeakResponse("error id=0 msg=ok");
                private static readonly TeamspeakResponse TsrOpenErr1 = new TeamspeakResponse("error id=-1 msg=The\\sconnection\\swas\\sreopened\\swhen\\sthe\\sprevious\\sconnection\\swas\\sstill\\sopen.");
                private static readonly TeamspeakResponse TsrOpenErr2 = new TeamspeakResponse("error id=-2 msg=Invalid\\sIP\\sAddress.");
                private static readonly TeamspeakResponse TsrOpenErr3 = new TeamspeakResponse("error id=-3 msg=Invalid\\sPort.");
                private static readonly TeamspeakResponse TsrOpenErr4 = new TeamspeakResponse("error id=-4 msg=An\\serror\\soccurred\\swhen\\strying\\sto\\sestablish\\sa\\sconnection.");
                private static readonly TeamspeakResponse TsrSendErr1 = new TeamspeakResponse("error id=-5 msg=The\\sconnection\\swas\\sclosed\\swhen\\sa\\squery\\swas\\stried\\sto\\sbe\\ssent.");
                private static readonly TeamspeakResponse TsrSendErr2 = new TeamspeakResponse("error id=-6 msg=The\\squery\\sto\\sbe\\ssent\\swas\\snull.");
                private static readonly TeamspeakResponse TsrSendErr3 = new TeamspeakResponse("error id=-7 msg=An\\serror\\soccurred\\swhen\\sthe\\squery\\swas\\ssent.");
                private static readonly TeamspeakResponse TsrSendErr4 = new TeamspeakResponse("error id=-8 msg=An\\serror\\soccurred\\swhen\\sthe\\sresponse\\swas\\sreceived.");
                public Socket Socket;

                public TeamspeakConnection()
                {
                    Socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)
                    {
                        SendTimeout = 5000,
                        ReceiveTimeout = 5000
                    };
                }

                public TeamspeakResponse Open(String ip, UInt16 port)
                {
                    if (Socket.Connected)
                    {
                        return TsrOpenErr1;
                    }
                    if (String.IsNullOrEmpty(ip))
                    {
                        return TsrOpenErr2;
                    }
                    if (port == 0)
                    {
                        return TsrOpenErr3;
                    }

                    String rBuffer = String.Empty;
                    Byte[] sBuffer = new Byte[2048];
                    try
                    {
                        Socket.Connect(ip, port);

                        Thread.Sleep(1000);
                        Int32 size = Socket.Receive(sBuffer, sBuffer.Length, SocketFlags.None);
                        rBuffer += Encoding.Default.GetString(sBuffer, 0, size);

                        if (!rBuffer.Contains("TS3"))
                        {
                            throw new Exception();
                        }
                    }
                    catch (Exception)
                    {
                        Close();
                        return TsrOpenErr4;
                    }
                    OnDataReceived(rBuffer);

                    return rBuffer.Contains("error id=") ? new TeamspeakResponse(rBuffer) : TsrOk;
                }

                public TeamspeakResponse Close()
                {
                    Socket.Close();
                    Socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)
                    {
                        SendTimeout = 5000,
                        ReceiveTimeout = 5000
                    };
                    return TsrOk;
                }

                public TeamspeakResponse Send(TeamspeakQuery query)
                {
                    if (!Socket.Connected)
                    {
                        return TsrSendErr1;
                    }
                    if (query == null)
                    {
                        return TsrSendErr2;
                    }

                    String rBuffer = null;
                    Byte[] sBuffer = null;

                    try
                    {
                        rBuffer = query.RawQuery();
                        sBuffer = Encoding.Default.GetBytes(rBuffer);
                        Socket.Send(sBuffer, rBuffer.Length, SocketFlags.None);
                    }
                    catch (Exception)
                    {
                        Close();
                        return TsrSendErr3;
                    }
                    OnDataSent(rBuffer);

                    rBuffer = String.Empty;
                    sBuffer = new Byte[65536];
                    DateTime start = DateTime.Now;
                    while (!rBuffer.Contains("error id=") || !rBuffer.EndsWith("\n\r"))
                    {
                        try
                        {
                            Int32 size = Socket.Receive(sBuffer, sBuffer.Length, SocketFlags.None);
                            rBuffer += Encoding.Default.GetString(sBuffer, 0, size);
                            if ((DateTime.Now - start).TotalMilliseconds > 5500)
                            {
                                break;
                            }
                        }
                        catch (Exception)
                        {
                            Close();
                            return TsrSendErr4;
                        }
                    }
                    OnDataReceived(rBuffer);

                    return new TeamspeakResponse(rBuffer);
                }

                public delegate void DataHandler(String data);

                public event DataHandler DataSent;
                public event DataHandler DataReceived;

                private void OnDataSent(String data)
                {
                    if (DataSent != null)
                    {
                        DataSent(data.Trim());
                    }
                }

                private void OnDataReceived(String data)
                {
                    if (DataReceived != null)
                    {
                        DataReceived(data.Trim());
                    }
                }
            }

            public class TeamspeakResponse
            {
                private String _tsRaw;
                private TeamspeakResponseGroup _tsError;
                private List<TeamspeakResponseSection> _tsSections;

                public String RawResponse
                {
                    get { return _tsRaw; }
                }

                public String Id
                {
                    get { return _tsError["id"]; }
                }

                public String Message
                {
                    get { return _tsError["msg"]; }
                }

                public String ExtraMessage
                {
                    get { return _tsError["extra_msg"]; }
                }

                public Boolean HasSections
                {
                    get { return _tsSections.Count != 0; }
                }

                public ReadOnlyCollection<TeamspeakResponseSection> Sections
                {
                    get { return _tsSections.AsReadOnly(); }
                }

                public TeamspeakResponse(String rawResponse)
                {
                    Parse(rawResponse);
                }

                private void Parse(string raw)
                {
                    _tsRaw = raw.Replace("\n", @"\n").Replace("\r", @"\r");
                    _tsError = new TeamspeakResponseGroup("empty");
                    _tsSections = new List<TeamspeakResponseSection>();

                    foreach (String section in raw.Replace("\n\r", "\n").Split('\n'))
                    {
                        if (section.Contains("error id="))
                        {
                            _tsError = new TeamspeakResponseGroup(section.Trim());
                        }
                        else if (!String.IsNullOrEmpty(section.Trim()))
                        {
                            _tsSections.Add(new TeamspeakResponseSection(section.Trim()));
                        }
                    }
                }
            }

            public class TeamspeakResponseSection
            {
                private String _tsRaw;
                private List<TeamspeakResponseGroup> _tsGroups = new List<TeamspeakResponseGroup>();

                public String RawSection
                {
                    get { return _tsRaw; }
                }

                public Boolean HasGroups
                {
                    get { return _tsGroups.Count != 0; }
                }

                public ReadOnlyCollection<TeamspeakResponseGroup> Groups
                {
                    get { return _tsGroups.AsReadOnly(); }
                }

                public TeamspeakResponseSection(String rawSection)
                {
                    Parse(rawSection);
                }

                private void Parse(String raw)
                {
                    _tsRaw = raw;
                    _tsGroups = new List<TeamspeakResponseGroup>();

                    foreach (String group in raw.Split('|'))
                    {
                        _tsGroups.Add(new TeamspeakResponseGroup(group.Trim()));
                    }
                }
            }

            public class TeamspeakResponseGroup
            {
                private String _tsRaw;
                private Dictionary<String, String> _tsPairs = new Dictionary<String, String>();

                public String RawGroup
                {
                    get { return _tsRaw; }
                }

                public String this[String key]
                {
                    get { return (_tsPairs.ContainsKey(key)) ? _tsPairs[key] : null; }
                }

                public TeamspeakResponseGroup(String rawGroup)
                {
                    Parse(rawGroup);
                }

                private void Parse(String raw)
                {
                    _tsRaw = raw;
                    _tsPairs = new Dictionary<String, String>();

                    foreach (string element in raw.Split(' '))
                    {
                        if (element.Contains("="))
                        {
                            String[] pair = element.Split('=');
                            if (_tsPairs.ContainsKey(pair[0]))
                            {
                                _tsPairs[pair[0]] = TeamspeakHelper.ts_UnescapeString(pair[1]);
                            }
                            else
                            {
                                _tsPairs.Add(pair[0], TeamspeakHelper.ts_UnescapeString(pair[1]));
                            }
                        }
                    }
                }
            }

            public class TeamspeakQuery
            {
                private readonly String tsCommand;
                private readonly Dictionary<String, String> tsParameters;
                private readonly List<String> tsOptions;

                public String Command
                {
                    get { return tsCommand; }
                }

                public TeamspeakQuery(String command)
                {
                    tsCommand = command;
                    tsParameters = new Dictionary<String, String>();
                    tsOptions = new List<String>();
                }

                public void AddParameter(String key, String value)
                {
                    String tKey = key.Trim();
                    String tValue = value.Trim();
                    if (!String.IsNullOrEmpty(tKey) && !String.IsNullOrEmpty(tValue))
                    {
                        if (!tsParameters.ContainsKey(tKey))
                        {
                            tsParameters.Add(TeamspeakHelper.ts_EscapeString(tKey), TeamspeakHelper.ts_EscapeString(tValue));
                        }
                    }
                }

                public void AddOption(String option)
                {
                    String tOption = option.Trim();
                    if (!String.IsNullOrEmpty(tOption))
                    {
                        tsOptions.Add(TeamspeakHelper.ts_EscapeString(tOption));
                    }
                }

                public void RemoveParameter(String key)
                {
                    String tKey = key.Trim();
                    if (!String.IsNullOrEmpty(tKey))
                    {
                        tsParameters.Remove(tKey);
                    }
                }

                public void RemoveOption(String option)
                {
                    String tOption = option.Trim();
                    if (!String.IsNullOrEmpty(tOption))
                    {
                        tsOptions.Remove(tOption);
                    }
                }

                public String RawQuery()
                {
                    StringBuilder rawQuery = new StringBuilder();

                    rawQuery.Append(tsCommand);

                    foreach (KeyValuePair<String, String> p in tsParameters)
                    {
                        rawQuery.AppendFormat(" {0}={1}", p.Key, p.Value);
                    }

                    foreach (String o in tsOptions)
                    {
                        rawQuery.AppendFormat(" -{0}", o);
                    }

                    rawQuery.Append("\n");

                    return rawQuery.ToString();
                }

                public static TeamspeakQuery BuildLoginQuery(String username, String password)
                {
                    TeamspeakQuery tsLogin = new TeamspeakQuery("login");
                    tsLogin.AddParameter("client_login_name", username);
                    tsLogin.AddParameter("client_login_password", password);
                    return tsLogin;
                }

                public static TeamspeakQuery BuildChangeNicknameQuery(String newNickname)
                {
                    TeamspeakQuery tsClientUpdate = new TeamspeakQuery("clientupdate");
                    tsClientUpdate.AddParameter("client_nickname", newNickname);
                    return tsClientUpdate;
                }

                public static TeamspeakQuery BuildServerListQuery()
                {
                    return new TeamspeakQuery("serverlist");
                }

                public static TeamspeakQuery BuildUseVIdQuery(Int32 virtualId)
                {
                    TeamspeakQuery tsUse = new TeamspeakQuery("use");
                    tsUse.AddParameter("sid", virtualId.ToString(CultureInfo.InvariantCulture));
                    return tsUse;
                }

                public static TeamspeakQuery BuildUsePortQuery(Int32 port)
                {
                    TeamspeakQuery tsUse = new TeamspeakQuery("use");
                    tsUse.AddParameter("port", port.ToString(CultureInfo.InvariantCulture));
                    return tsUse;
                }

                public static TeamspeakQuery BuildChannelListQuery()
                {
                    return new TeamspeakQuery("channellist");
                }

                public static TeamspeakQuery BuildChannelFindQuery(String channelName)
                {
                    TeamspeakQuery tsChannelFind = new TeamspeakQuery("channelfind");
                    tsChannelFind.AddParameter("pattern", channelName);
                    return tsChannelFind;
                }

                public static TeamspeakQuery BuildChannelInfoQuery(Int32 channelId)
                {
                    TeamspeakQuery tsChannelInfo = new TeamspeakQuery("channelinfo");
                    tsChannelInfo.AddParameter("cid", channelId.ToString(CultureInfo.InvariantCulture));
                    return tsChannelInfo;
                }

                public static TeamspeakQuery BuildClientListQuery()
                {
                    return new TeamspeakQuery("clientlist");
                }

                public static TeamspeakQuery BuildClientFindQuery(String clientName)
                {
                    TeamspeakQuery tsClientFind = new TeamspeakQuery("clientfind");
                    tsClientFind.AddParameter("pattern", clientName);
                    return tsClientFind;
                }

                public static TeamspeakQuery BuildClientInfoQuery(Int32 clientId)
                {
                    TeamspeakQuery tsClientInfo = new TeamspeakQuery("clientinfo");
                    tsClientInfo.AddParameter("clid", clientId.ToString(CultureInfo.InvariantCulture));
                    return tsClientInfo;
                }

                public static TeamspeakQuery BuildClientMoveQuery(Int32 clientId, Int32 channelId)
                {
                    TeamspeakQuery tsClientMove = new TeamspeakQuery("clientmove");
                    tsClientMove.AddParameter("clid", clientId.ToString(CultureInfo.InvariantCulture));
                    tsClientMove.AddParameter("cid", channelId.ToString(CultureInfo.InvariantCulture));
                    return tsClientMove;
                }
            }

            public class TeamspeakServer
            {
                public String TsName = null; //virtualserver_name
                public Int32? TsId = null; //virtualserver_id
                public Int32? TsPort = null; //virtualserver_port
                public Int32? TsMachineId = null; //virtualserver_machine_id

                public String TsStatus = null; //virtualserver_status
                public Int32? TsUpTime = null; //virtualserver_uptime
                public Int32? TsClientsOnline = null; //virtualserver_clientsonline
                public Int32? TsQueryClientsOnline = null; //virtualserver_queryclientsonline

                public Int32? TsQueryMaxClients = null; //virtualserver_maxclients
                public Boolean? TsAutoStart = null; //virtualserver_autostart

                public TeamspeakServer()
                {
                }

                public TeamspeakServer(TeamspeakResponseGroup serverInfo)
                {
                    SetBasicData(serverInfo);
                }

                public void SetBasicData(TeamspeakResponseGroup serverInfo)
                {
                    String value;
                    Int32 iValue;
                    Boolean bValue;

                    TsName = serverInfo["virtualserver_name"];
                    if ((value = serverInfo["virtualserver_id"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsId = iValue;
                        }
                        else
                        {
                            TsId = null;
                        }
                    }
                    else
                    {
                        TsId = null;
                    }
                    if ((value = serverInfo["virtualserver_port"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsPort = iValue;
                        }
                        else
                        {
                            TsPort = null;
                        }
                    }
                    else
                    {
                        TsPort = null;
                    }
                    if ((value = serverInfo["virtualserver_machine_id"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsMachineId = iValue;
                        }
                        else
                        {
                            TsMachineId = null;
                        }
                    }
                    else
                    {
                        TsMachineId = null;
                    }

                    TsStatus = serverInfo["virtualserver_status"];
                    if ((value = serverInfo["virtualserver_uptime"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsUpTime = iValue;
                        }
                        else
                        {
                            TsUpTime = null;
                        }
                    }
                    else
                    {
                        TsUpTime = null;
                    }
                    if ((value = serverInfo["virtualserver_clientsonline"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsClientsOnline = iValue;
                        }
                        else
                        {
                            TsClientsOnline = null;
                        }
                    }
                    else
                    {
                        TsClientsOnline = null;
                    }
                    if ((value = serverInfo["virtualserver_queryclientsonline"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsQueryClientsOnline = iValue;
                        }
                        else
                        {
                            TsQueryClientsOnline = null;
                        }
                    }
                    else
                    {
                        TsQueryClientsOnline = null;
                    }

                    if ((value = serverInfo["virtualserver_maxclients"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsQueryMaxClients = iValue;
                        }
                        else
                        {
                            TsQueryMaxClients = null;
                        }
                    }
                    else
                    {
                        TsQueryMaxClients = null;
                    }
                    if ((value = serverInfo["virtualserver_autostart"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            TsAutoStart = bValue;
                        }
                        else
                        {
                            TsAutoStart = null;
                        }
                    }
                    else
                    {
                        TsAutoStart = null;
                    }
                }
            }

            public class TeamspeakChannel
            {
                public String TsName = null; //channel_name
                public Int32? TsId = null; //cid

                public Int32? MedPId = null; //pid
                public Int32? MedOrder = null; //channel_order
                public Int32? MedTotalClients = null; //total_clients
                public Int32? MedPowerNeededToSub = null; //channel_needed_subscribe_power

                public String AdvTopic = null; //channel_topic
                public String AdvDescription = null; //channel_description
                public String AdvPassword = null; //channel_password
                public String AdvFilepath = null; //channel_filepath
                public String AdvPhoneticName = null; //channel_name_phonetic
                public Int32? AdvCodec = null; //channel_codec
                public Int32? AdvCodecQuality = null; //channel_codec_quality
                public Int32? AdvCodecLatencyFactor = null; //channel_codec_latency_factor
                public Int32? AdvMaxClients = null; //channel_maxclients
                public Int32? AdvMaxFamilyClients = null; //channel_maxfamilyclients
                public Int32? AdvNeededTalkPower = null; //channel_needed_talk_power
                public Int32? AdvIconId = null; //channel_icon_id
                public Boolean? AdvFlagPermanent = null; //channel_flag_permanent
                public Boolean? AdvFlagSemiPermanent = null; //channel_flag_semi_permanent
                public Boolean? AdvFlagDefault = null; //channel_flag_default
                public Boolean? AdvFlagPassword = null; //channel_flag_password
                public Boolean? AdvFlagMaxClientsUnlimited = null; //channel_flag_maxclients_unlimited
                public Boolean? AdvFlagMaxFamilyClientsUnlimited = null; //channel_flag_maxfamilyclients_unlimited
                public Boolean? AdvFlagMaxFamilyClientsInherited = null; //channel_flag_maxfamilyclients_inherited
                public Boolean? AdvForcedSilence = null; //channel_forced_silence

                public TeamspeakChannel()
                {
                }

                public TeamspeakChannel(TeamspeakResponseGroup channelInfo)
                {
                    SetBasicData(channelInfo);
                    SetMediumData(channelInfo);
                    SetAdvancedData(channelInfo);
                }

                public void SetBasicData(TeamspeakResponseGroup channelInfo)
                {
                    String value;
                    Int32 iValue;

                    TsName = channelInfo["channel_name"];
                    if ((value = channelInfo["cid"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsId = iValue;
                        }
                        else
                        {
                            TsId = null;
                        }
                    }
                    else
                    {
                        TsId = null;
                    }
                }

                public void SetMediumData(TeamspeakResponseGroup channelInfo)
                {
                    String value;
                    Int32 iValue;

                    if ((value = channelInfo["pid"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            MedPId = iValue;
                        }
                        else
                        {
                            MedPId = null;
                        }
                    }
                    else
                    {
                        MedPId = null;
                    }
                    if ((value = channelInfo["channel_order"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            MedOrder = iValue;
                        }
                        else
                        {
                            MedOrder = null;
                        }
                    }
                    else
                    {
                        MedOrder = null;
                    }
                    if ((value = channelInfo["total_clients"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            MedTotalClients = iValue;
                        }
                        else
                        {
                            MedTotalClients = null;
                        }
                    }
                    else
                    {
                        MedTotalClients = null;
                    }
                    if ((value = channelInfo["channel_needed_subscribe_power"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            MedPowerNeededToSub = iValue;
                        }
                        else
                        {
                            MedPowerNeededToSub = null;
                        }
                    }
                    else
                    {
                        MedPowerNeededToSub = null;
                    }
                }

                public void SetAdvancedData(TeamspeakResponseGroup channelInfo)
                {
                    String value;
                    Int32 iValue;
                    Boolean bValue;

                    AdvTopic = channelInfo["channel_topic"];
                    AdvDescription = channelInfo["channel_description"];
                    AdvPassword = channelInfo["channel_password"];
                    AdvFilepath = channelInfo["channel_filepath"];
                    AdvPhoneticName = channelInfo["channel_name_phonetic"];
                    if ((value = channelInfo["channel_codec"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvCodec = iValue;
                        }
                        else
                        {
                            AdvCodec = null;
                        }
                    }
                    else
                    {
                        AdvCodec = null;
                    }
                    if ((value = channelInfo["channel_codec_quality"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvCodecQuality = iValue;
                        }
                        else
                        {
                            AdvCodecQuality = null;
                        }
                    }
                    else
                    {
                        AdvCodecQuality = null;
                    }
                    if ((value = channelInfo["channel_codec_latency_factor"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvCodecLatencyFactor = iValue;
                        }
                        else
                        {
                            AdvCodecLatencyFactor = null;
                        }
                    }
                    else
                    {
                        AdvCodecLatencyFactor = null;
                    }
                    if ((value = channelInfo["channel_maxclients"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvMaxClients = iValue;
                        }
                        else
                        {
                            AdvMaxClients = null;
                        }
                    }
                    else
                    {
                        AdvMaxClients = null;
                    }
                    if ((value = channelInfo["channel_maxfamilyclients"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvMaxFamilyClients = iValue;
                        }
                        else
                        {
                            AdvMaxFamilyClients = null;
                        }
                    }
                    else
                    {
                        AdvMaxFamilyClients = null;
                    }
                    if ((value = channelInfo["channel_needed_talk_power"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvNeededTalkPower = iValue;
                        }
                        else
                        {
                            AdvNeededTalkPower = null;
                        }
                    }
                    else
                    {
                        AdvNeededTalkPower = null;
                    }
                    if ((value = channelInfo["channel_icon_id"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvIconId = iValue;
                        }
                        else
                        {
                            AdvIconId = null;
                        }
                    }
                    else
                    {
                        AdvIconId = null;
                    }
                    if ((value = channelInfo["channel_flag_permanent"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvFlagPermanent = bValue;
                        }
                        else
                        {
                            AdvFlagPermanent = null;
                        }
                    }
                    else
                    {
                        AdvFlagPermanent = null;
                    }
                    if ((value = channelInfo["channel_flag_semi_permanent"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvFlagSemiPermanent = bValue;
                        }
                        else
                        {
                            AdvFlagSemiPermanent = null;
                        }
                    }
                    else
                    {
                        AdvFlagSemiPermanent = null;
                    }
                    if ((value = channelInfo["channel_flag_default"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvFlagDefault = bValue;
                        }
                        else
                        {
                            AdvFlagDefault = null;
                        }
                    }
                    else
                    {
                        AdvFlagDefault = null;
                    }
                    if ((value = channelInfo["channel_flag_password"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvFlagPassword = bValue;
                        }
                        else
                        {
                            AdvFlagPassword = null;
                        }
                    }
                    else
                    {
                        AdvFlagPassword = null;
                    }
                    if ((value = channelInfo["channel_flag_maxclients_unlimited"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvFlagMaxClientsUnlimited = bValue;
                        }
                        else
                        {
                            AdvFlagMaxClientsUnlimited = null;
                        }
                    }
                    else
                    {
                        AdvFlagMaxClientsUnlimited = null;
                    }
                    if ((value = channelInfo["channel_flag_maxfamilyclients_unlimited"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvFlagMaxFamilyClientsUnlimited = bValue;
                        }
                        else
                        {
                            AdvFlagMaxFamilyClientsUnlimited = null;
                        }
                    }
                    else
                    {
                        AdvFlagMaxFamilyClientsUnlimited = null;
                    }
                    if ((value = channelInfo["channel_flag_maxfamilyclients_inherited"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvFlagMaxFamilyClientsInherited = bValue;
                        }
                        else
                        {
                            AdvFlagMaxFamilyClientsInherited = null;
                        }
                    }
                    else
                    {
                        AdvFlagMaxFamilyClientsInherited = null;
                    }
                    if ((value = channelInfo["channel_forced_silence"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvForcedSilence = bValue;
                        }
                        else
                        {
                            AdvForcedSilence = null;
                        }
                    }
                    else
                    {
                        AdvForcedSilence = null;
                    }
                }
            }

            public class TeamspeakClient
            {
                public String TsName = null; //client_nickname
                public Int32? TsId = null; //clid

                public Int32? MedDatabaseId = null; //client_database_id
                public Int32? MedChannelId = null; //cid
                public String MedChannelName = null;
                public Int32? MedType = null; //client_type

                public String AdvLoginName = null; //client_login_name
                public String AdvUniqueId = null; //client_unique_identifier
                public String AdvIpAddress = null; //connection_client_ip

                public String AdvVersion = null; //client_version
                public String AdvPlatform = null; //client_platform
                public String AdvDescription = null; //client_description
                public String AdvCountry = null; //client_country
                public String AdvMetaData = null; //client_meta_data

                public Int32? AdvChannelGroupId = null; //client_channel_group_id
                public Int32? AdvServerGroupId = null; //client_servergroups
                public Boolean? AdvIsChannelCommander = null; //client_is_channel_commander

                public String AdvDefaultChannel = null; //client_default_channel
                public Int32? AdvConnectionTime = null; //connection_connected_time
                public Int32? AdvIdleTime = null; //client_idle_time
                public Int32? AdvCreationTime = null; //client_created
                public Int32? AdvLastConnected = null; //client_lastconnected
                public Int32? AdvTotalConnections = null; //client_totalconnections

                public Boolean? AdvInputMuted = null; //client_input_muted
                public Boolean? AdvOutputMuted = null; //client_output_muted
                public Boolean? AdvOutputMutedOnly = null; //client_outputonly_muted
                public Boolean? AdvInputHardware = null; //client_input_hardware
                public Boolean? AdvOutputHardware = null; //client_output_hardware
                public Boolean? AdvIsRecording = null; //client_is_recording

                public String AdvFlagAvatar = null; //client_flag_avatar
                public String AdvAwayMessage = null; //client_away_message
                public String AdvTalkMessage = null; //client_talk_request_msg
                public String AdvPhoneticNick = null; //client_nickname_phonetic
                public String AdvDefaultToken = null; //client_default_token
                public String AdvBase64Hash = null; //client_base64HashClientUID
                public Int32? AdvTalkPower = null; //client_talk_power
                public Int32? AdvQueryViewPower = null; //client_needed_serverquery_view_power
                public Int32? AdvUnreadMessages = null; //client_unread_messages
                public Int32? AdvIconId = null; //client_icon_id
                public Boolean? AdvIsAway = null; //client_away
                public Boolean? AdvTalkRequest = null; //client_talk_request
                public Boolean? AdvIsTalker = null; //client_is_talker
                public Boolean? AdvIsPriority = null; //client_is_priority_speaker

                public Int32? AdvBytesUpMonth = null; //client_month_bytes_uploaded
                public Int32? AdvBytesDownMonth = null; //client_month_bytes_downloaded
                public Int32? AdvBytesUpTotal = null; //client_total_bytes_uploaded
                public Int32? AdvBytesDownTotal = null; //client_total_bytes_downloaded
                public Int32? AdvFileBandwidthSent = null; //connection_filetransfer_bandwidth_sent
                public Int32? AdvFileBandwidthRec = null; //connection_filetransfer_bandwidth_received
                public Int32? AdvPacketsTotalSent = null; //connection_packets_sent_total
                public Int32? AdvPacketsTotalRec = null; //connection_packets_received_total
                public Int32? AdvBytesTotalSent = null; //connection_bytes_sent_total
                public Int32? AdvBytesTotalRec = null; //connection_bytes_received_total
                public Int32? AdvBndwdthSecondSent = null; //connection_bandwidth_sent_last_second_total
                public Int32? AdvBndwdthSecondRec = null; //connection_bandwidth_received_last_second_total
                public Int32? AdvBndwdthMinuteSent = null; //connection_bandwidth_sent_last_minute_total
                public Int32? AdvBndwdthMinuteRec = null; //connection_bandwidth_received_last_minute_total

                public TeamspeakClient()
                {
                }

                public TeamspeakClient(TeamspeakResponseGroup clientInfo)
                {
                    SetBasicData(clientInfo);
                    SetMediumData(clientInfo);
                    SetAdvancedData(clientInfo);
                }

                public void SetBasicData(TeamspeakResponseGroup clientInfo)
                {
                    String value;
                    Int32 iValue;

                    TsName = clientInfo["client_nickname"];
                    if ((value = clientInfo["clid"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            TsId = iValue;
                        }
                        else
                        {
                            TsId = null;
                        }
                    }
                    else
                    {
                        TsId = null;
                    }
                }

                public void SetMediumData(TeamspeakResponseGroup clientInfo)
                {
                    String value;
                    Int32 iValue;

                    if ((value = clientInfo["client_database_id"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            MedDatabaseId = iValue;
                        }
                        else
                        {
                            MedDatabaseId = null;
                        }
                    }
                    else
                    {
                        MedDatabaseId = null;
                    }
                    if ((value = clientInfo["cid"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            MedChannelId = iValue;
                        }
                        else
                        {
                            MedChannelId = null;
                        }
                    }
                    else
                    {
                        MedChannelId = null;
                    }
                    if ((value = clientInfo["client_type"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            MedType = iValue;
                        }
                        else
                        {
                            MedType = null;
                        }
                    }
                    else
                    {
                        MedType = null;
                    }
                }

                public void SetAdvancedData(TeamspeakResponseGroup clientInfo)
                {
                    String value;
                    Int32 iValue;
                    Boolean bValue;

                    AdvLoginName = clientInfo["client_login_name"];
                    AdvUniqueId = clientInfo["client_unique_identifier"];
                    AdvIpAddress = clientInfo["connection_client_ip"];

                    AdvVersion = clientInfo["client_version"];
                    AdvPlatform = clientInfo["client_platform"];
                    AdvDescription = clientInfo["client_description"];
                    AdvCountry = clientInfo["client_country"];
                    AdvMetaData = clientInfo["client_meta_data"];

                    if ((value = clientInfo["client_channel_group_id"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvChannelGroupId = iValue;
                        }
                        else
                        {
                            AdvChannelGroupId = null;
                        }
                    }
                    else
                    {
                        AdvChannelGroupId = null;
                    }
                    if ((value = clientInfo["client_servergroups"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvServerGroupId = iValue;
                        }
                        else
                        {
                            AdvServerGroupId = null;
                        }
                    }
                    else
                    {
                        AdvServerGroupId = null;
                    }
                    if ((value = clientInfo["client_is_channel_commander"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvIsChannelCommander = bValue;
                        }
                        else
                        {
                            AdvIsChannelCommander = null;
                        }
                    }
                    else
                    {
                        AdvIsChannelCommander = null;
                    }

                    AdvDefaultChannel = clientInfo["client_default_channel"];
                    if ((value = clientInfo["connection_connected_time"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvConnectionTime = iValue;
                        }
                        else
                        {
                            AdvConnectionTime = null;
                        }
                    }
                    else
                    {
                        AdvConnectionTime = null;
                    }
                    if ((value = clientInfo["client_idle_time"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvIdleTime = iValue;
                        }
                        else
                        {
                            AdvIdleTime = null;
                        }
                    }
                    else
                    {
                        AdvIdleTime = null;
                    }
                    if ((value = clientInfo["client_created"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvCreationTime = iValue;
                        }
                        else
                        {
                            AdvCreationTime = null;
                        }
                    }
                    else
                    {
                        AdvCreationTime = null;
                    }
                    if ((value = clientInfo["client_lastconnected"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvLastConnected = iValue;
                        }
                        else
                        {
                            AdvLastConnected = null;
                        }
                    }
                    else
                    {
                        AdvLastConnected = null;
                    }
                    if ((value = clientInfo["client_totalconnections"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvTotalConnections = iValue;
                        }
                        else
                        {
                            AdvTotalConnections = null;
                        }
                    }
                    else
                    {
                        AdvTotalConnections = null;
                    }

                    if ((value = clientInfo["client_input_muted"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvInputMuted = bValue;
                        }
                        else
                        {
                            AdvInputMuted = null;
                        }
                    }
                    else
                    {
                        AdvInputMuted = null;
                    }
                    if ((value = clientInfo["client_output_muted"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvOutputMuted = bValue;
                        }
                        else
                        {
                            AdvOutputMuted = null;
                        }
                    }
                    else
                    {
                        AdvOutputMuted = null;
                    }
                    if ((value = clientInfo["client_outputonly_muted"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvOutputMutedOnly = bValue;
                        }
                        else
                        {
                            AdvOutputMutedOnly = null;
                        }
                    }
                    else
                    {
                        AdvOutputMutedOnly = null;
                    }
                    if ((value = clientInfo["client_input_hardware"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvInputHardware = bValue;
                        }
                        else
                        {
                            AdvInputHardware = null;
                        }
                    }
                    else
                    {
                        AdvInputHardware = null;
                    }
                    if ((value = clientInfo["client_output_hardware"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvOutputHardware = bValue;
                        }
                        else
                        {
                            AdvOutputHardware = null;
                        }
                    }
                    else
                    {
                        AdvOutputHardware = null;
                    }
                    if ((value = clientInfo["client_is_recording"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvIsRecording = bValue;
                        }
                        else
                        {
                            AdvIsRecording = null;
                        }
                    }
                    else
                    {
                        AdvIsRecording = null;
                    }

                    AdvFlagAvatar = clientInfo["client_flag_avatar"];
                    AdvAwayMessage = clientInfo["client_away_message"];
                    AdvTalkMessage = clientInfo["client_talke_request_msg"];
                    AdvPhoneticNick = clientInfo["client_nickname_phonetic"];
                    AdvDefaultToken = clientInfo["client_default_token"];
                    AdvBase64Hash = clientInfo["client_base64HashClientUID"];
                    if ((value = clientInfo["client_talk_power"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvTalkPower = iValue;
                        }
                        else
                        {
                            AdvTalkPower = null;
                        }
                    }
                    else
                    {
                        AdvTalkPower = null;
                    }
                    if ((value = clientInfo["client_needed_serverquery_view_power"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvQueryViewPower = iValue;
                        }
                        else
                        {
                            AdvQueryViewPower = null;
                        }
                    }
                    else
                    {
                        AdvQueryViewPower = null;
                    }
                    if ((value = clientInfo["client_unread_messages"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvUnreadMessages = iValue;
                        }
                        else
                        {
                            AdvUnreadMessages = null;
                        }
                    }
                    else
                    {
                        AdvUnreadMessages = null;
                    }
                    if ((value = clientInfo["client_icon_id"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvIconId = iValue;
                        }
                        else
                        {
                            AdvIconId = null;
                        }
                    }
                    else
                    {
                        AdvIconId = null;
                    }
                    if ((value = clientInfo["client_away"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvIsAway = bValue;
                        }
                        else
                        {
                            AdvIsAway = null;
                        }
                    }
                    else
                    {
                        AdvIsAway = null;
                    }
                    if ((value = clientInfo["client_talk_request"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvTalkRequest = bValue;
                        }
                        else
                        {
                            AdvTalkRequest = null;
                        }
                    }
                    else
                    {
                        AdvTalkRequest = null;
                    }
                    if ((value = clientInfo["client_is_talker"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvIsTalker = bValue;
                        }
                        else
                        {
                            AdvIsTalker = null;
                        }
                    }
                    else
                    {
                        AdvIsTalker = null;
                    }
                    if ((value = clientInfo["client_is_priority_speaker"]) != null)
                    {
                        if (Boolean.TryParse(value, out bValue))
                        {
                            AdvIsPriority = bValue;
                        }
                        else
                        {
                            AdvIsPriority = null;
                        }
                    }
                    else
                    {
                        AdvIsPriority = null;
                    }

                    if ((value = clientInfo["client_month_bytes_uploaded"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBytesUpMonth = iValue;
                        }
                        else
                        {
                            AdvBytesUpMonth = null;
                        }
                    }
                    else
                    {
                        AdvBytesUpMonth = null;
                    }
                    if ((value = clientInfo["client_month_bytes_downloaded"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBytesDownMonth = iValue;
                        }
                        else
                        {
                            AdvBytesDownMonth = null;
                        }
                    }
                    else
                    {
                        AdvBytesDownMonth = null;
                    }
                    if ((value = clientInfo["client_total_bytes_uploaded"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBytesUpTotal = iValue;
                        }
                        else
                        {
                            AdvBytesUpTotal = null;
                        }
                    }
                    else
                    {
                        AdvBytesUpTotal = null;
                    }
                    if ((value = clientInfo["client_total_bytes_downloaded"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBytesDownTotal = iValue;
                        }
                        else
                        {
                            AdvBytesDownTotal = null;
                        }
                    }
                    else
                    {
                        AdvBytesDownTotal = null;
                    }
                    if ((value = clientInfo["connection_filetransfer_bandwidth_sent"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvFileBandwidthSent = iValue;
                        }
                        else
                        {
                            AdvFileBandwidthSent = null;
                        }
                    }
                    else
                    {
                        AdvFileBandwidthSent = null;
                    }
                    if ((value = clientInfo["connection_filetransfer_bandwidth_received"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvFileBandwidthRec = iValue;
                        }
                        else
                        {
                            AdvFileBandwidthRec = null;
                        }
                    }
                    else
                    {
                        AdvFileBandwidthRec = null;
                    }
                    if ((value = clientInfo["connection_packets_sent_total"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvPacketsTotalSent = iValue;
                        }
                        else
                        {
                            AdvUnreadMessages = null;
                        }
                    }
                    else
                    {
                        AdvUnreadMessages = null;
                    }
                    if ((value = clientInfo["connection_packets_received_total"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvPacketsTotalSent = iValue;
                        }
                        else
                        {
                            AdvPacketsTotalSent = null;
                        }
                    }
                    else
                    {
                        AdvPacketsTotalSent = null;
                    }
                    if ((value = clientInfo["connection_bytes_sent_total"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBytesTotalSent = iValue;
                        }
                        else
                        {
                            AdvBytesTotalSent = null;
                        }
                    }
                    else
                    {
                        AdvBytesTotalSent = null;
                    }
                    if ((value = clientInfo["connection_bytes_received_total"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBytesTotalRec = iValue;
                        }
                        else
                        {
                            AdvBytesTotalRec = null;
                        }
                    }
                    else
                    {
                        AdvBytesTotalRec = null;
                    }
                    if ((value = clientInfo["connection_bandwidth_sent_last_second_total"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBndwdthSecondSent = iValue;
                        }
                        else
                        {
                            AdvBndwdthSecondSent = null;
                        }
                    }
                    else
                    {
                        AdvBndwdthSecondSent = null;
                    }
                    if ((value = clientInfo["connection_bandwidth_received_last_second_total"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBndwdthSecondRec = iValue;
                        }
                        else
                        {
                            AdvBndwdthSecondRec = null;
                        }
                    }
                    else
                    {
                        AdvBndwdthSecondRec = null;
                    }
                    if ((value = clientInfo["connection_bandwidth_sent_last_minute_total"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBndwdthMinuteSent = iValue;
                        }
                        else
                        {
                            AdvBndwdthMinuteSent = null;
                        }
                    }
                    else
                    {
                        AdvBndwdthMinuteSent = null;
                    }
                    if ((value = clientInfo["connection_bandwidth_received_last_minute_total"]) != null)
                    {
                        if (Int32.TryParse(value, out iValue))
                        {
                            AdvBndwdthMinuteRec = iValue;
                        }
                        else
                        {
                            AdvBndwdthMinuteRec = null;
                        }
                    }
                    else
                    {
                        AdvBndwdthMinuteRec = null;
                    }
                }
            }

            private static class TeamspeakHelper
            {
                public static String ts_EscapeString(String text)
                {
                    String escaped = text.Replace("\\", @"\\");
                    escaped = escaped.Replace("/", @"\/");
                    escaped = escaped.Replace(" ", @"\s");
                    escaped = escaped.Replace("|", @"\p");
                    escaped = escaped.Replace("\a", @"\a");
                    escaped = escaped.Replace("\b", @"\b");
                    escaped = escaped.Replace("\f", @"\f");
                    escaped = escaped.Replace("\n", @"\n");
                    escaped = escaped.Replace("\r", @"\r");
                    escaped = escaped.Replace("\t", @"\t");
                    escaped = escaped.Replace("\v", @"\v");
                    return escaped;
                }

                public static String ts_UnescapeString(String text)
                {
                    String unescaped = text.Replace(@"\\", "\\");
                    unescaped = unescaped.Replace(@"\/", "/");
                    unescaped = unescaped.Replace(@"\s", " ");
                    unescaped = unescaped.Replace(@"\p", "|");
                    unescaped = unescaped.Replace(@"\a", "\a");
                    unescaped = unescaped.Replace(@"\b", "\b");
                    unescaped = unescaped.Replace(@"\f", "\f");
                    unescaped = unescaped.Replace(@"\n", "\n");
                    unescaped = unescaped.Replace(@"\r", "\r");
                    unescaped = unescaped.Replace(@"\t", "\t");
                    unescaped = unescaped.Replace(@"\v", "\v");
                    return unescaped;
                }
            }

            public class ActionEvent
            {
                private readonly Commands command = 0;
                private Int32 _argsIndex;
                private readonly List<Object> args = new List<Object>();

                public Commands Command
                {
                    get { return command; }
                }

                public Object Argument
                {
                    get { return args[(_argsIndex == args.Count) ? (_argsIndex = 1) - 1 : _argsIndex++]; }
                }

                public ActionEvent(Commands command, Object[] args)
                {
                    this.command = command;
                    foreach (Object arg in args)
                    {
                        this.args.Add(arg);
                    }
                }
            }

            private void SetPluginState(Boolean state)
            {
                if (state)
                {
                    Enable();
                }
                else
                {
                    Disable();
                }
            }

            private void ConsoleWrite(String message, params Object[] args)
            {
                _plugin.ExecuteCommand("procon.protected.pluginconsole.write", String.Format("[TSCV] " + message, args));
            }

            private void DebugWrite(Boolean debug, String message, params Object[] args)
            {
                if (debug)
                {
                    ConsoleWrite(message, args);
                }
            }

            private void DataSent(String data)
            {
            }

            private void DataReceived(String data)
            {
            }

            private void EntryMain()
            {
                _mTsConnection.DataSent += DataSent;
                _mTsConnection.DataReceived += DataReceived;

                while (true)
                {
                    _mActionSemaphore.WaitOne();
                    _mActionMutex.WaitOne();
                    _mCurrentAction = _mActions.Dequeue();
                    _mActionMutex.ReleaseMutex();

                    // If we are disabled, and the incoming command can't change that, skip processing
                    if (!_mEnabled && _mCurrentAction.Command != Commands.ClientEnabled && _mCurrentAction.Command != Commands.ClientDisabled)
                    {
                        continue;
                    }

                    try
                    {
                        switch (_mCurrentAction.Command)
                        {
                            case Commands.ClientEnabled:
                                PerformOpenConnection();
                                break;
                            case Commands.ClientDisabled:
                                PerformCloseConnection();
                                break;
                            case Commands.UpdateTsClientInfo:
                                if (UseWebService)
                                {
                                    UpdateTsInfoFromService();
                                }
                                else
                                {
                                    UpdateTsInfo();
                                }
                                break;
                        }
                    }
                    catch (Exception e)
                    {
                        ConsoleWrite("^8A fatal error occurred during processing a command!");
                        ConsoleWrite("^8^bMessage:^n^0 " + e.Message);
                        ConsoleWrite("^8^bStack Trace:^n^0 " + e.StackTrace);
                        SetPluginState(false);
                    }
                }
            }

            private void EntrySynchronization()
            {
                while (true)
                {
                    if (_mEnabled && !_mTsReconnecting)
                    {
                        AddToActionQueue(Commands.UpdateTsClientInfo);
                    }
                    Thread.Sleep(UpdateIntervalSeconds * 1000);
                }
            }

            private void PerformOpenConnection()
            {
                if (!UseWebService)
                {
                    for (int secondsSlept = 0; secondsSlept < 10 && Ts3ServerIp == "Teamspeak Ip"; secondsSlept++)
                    {
                        Thread.Sleep(1000);
                    }

                    ConsoleWrite("[Connection] Establishing a connection to a Teamspeak 3 Server.");
                    _mTsResponse = _mTsConnection.Open(Ts3ServerIp, Ts3QueryPort);
                    if (!PerformResponseHandling(Queries.OpenConnectionEstablish))
                    {
                        return;
                    }
                    ConsoleWrite("[Connection] ^2Established a connection to {0}:{1}.", Ts3ServerIp, Ts3QueryPort);

                    ConsoleWrite("[Connection] Attempting to login as a Server Query Client.");
                    SendTeamspeakQuery(TeamspeakQuery.BuildLoginQuery(Ts3QueryUsername, Ts3QueryPassword));
                    if (!PerformResponseHandling(Queries.OpenConnectionLogin))
                    {
                        return;
                    }
                    ConsoleWrite("[Connection] ^2Logged in as {0}.", Ts3QueryUsername);

                    ConsoleWrite("[Connection] Attempting to select the correct virtual server.");
                    SendTeamspeakQuery(TeamspeakQuery.BuildUsePortQuery(Ts3ServerPort));
                    if (!PerformResponseHandling(Queries.OpenConnectionUse))
                    {
                        return;
                    }
                    ConsoleWrite("[Connection] ^2Selected the virtual server using port {0}.", Ts3ServerPort);

                    ConsoleWrite("[Connection] Attempting to find the main channel.");
                    SendTeamspeakQuery(TeamspeakQuery.BuildChannelFindQuery(Ts3MainChannelName));
                    if (!PerformResponseHandling(Queries.OpenConnectionMain))
                    {
                        return;
                    }
                    _mMainChannel.SetBasicData(_mTsResponse.Sections[0].Groups[0]);
                    ConsoleWrite("[Connection] ^2Found the channel named {0}.", _mMainChannel.TsName);

                    ConsoleWrite("[Connection] Attempting to alter the Server Query Client's name.");
                    SendTeamspeakQuery(TeamspeakQuery.BuildChangeNicknameQuery(Ts3QueryNickname));
                    if (!PerformResponseHandling(Queries.OpenConnectionNickname))
                    {
                        return;
                    }
                    if (_mTsResponse.Id != "513")
                    {
                        ConsoleWrite("[Connection] ^2Changed the Server Query Client's name to {0}.", Ts3QueryNickname);
                    }
                    _mTsResponse = new TeamspeakResponse("error id=0 msg=ok");

                    ConsoleWrite("[Connection] Attempting to find existing pickup, team, and squad channels.");
                    SendTeamspeakQuery(TeamspeakQuery.BuildChannelListQuery());
                    List<TeamspeakChannel> tsChannels = new List<TeamspeakChannel>();
                    foreach (TeamspeakResponseSection tsResponseSection in _mTsResponse.Sections)
                    {
                        foreach (TeamspeakResponseGroup tsResponseGroup in tsResponseSection.Groups)
                        {
                            tsChannels.Add(new TeamspeakChannel(tsResponseGroup));
                        }
                    }
                    foreach (TeamspeakChannel tsChannel in tsChannels)
                    {
                        foreach (String tsName in Ts3SubChannelNames)
                        {
                            if (tsChannel.TsName == tsName)
                            {
                                _mPickupChannels.Add(tsChannel);
                                ConsoleWrite("[Connection] ^2Found ^bPickup^n Channel: {0} ({1}).", tsChannel.TsName, tsChannel.TsId);
                                break;
                            }
                        }
                    }
                }

                ConsoleWrite("[Connection] TSCV started.");
                _mEnabled = true;
            }

            private void PerformCloseConnection()
            {
                ConsoleWrite("[Closing] Shutting down TSCV.");

                if (!UseWebService)
                {
                    _mTsConnection.Close();
                }

                ConsoleWrite("[Closing] Cleaning up resources.");
                _mClientTsInfo.Clear();
                _mPickupChannels.Clear();
                _mTsResponse = new TeamspeakResponse("error id=0 msg=ok");
                _mCurrentAction = null;

                ConsoleWrite("[Closing] TSCV stopped.");
                _mEnabled = false;
            }

            private Boolean PerformResponseHandling(Queries queryCode)
            {
                if (_mTsResponse.Id == "0")
                {
                    return true;
                }

                switch (_mTsResponse.Id)
                {
                    case "-1": // Socket was open and we tried to re-establish a connection.
                    case "-5": // Socket was closed and we tried to send a query.
                    case "-6": // The query we tried to send was null.
                        ConsoleWrite("[Error] ^3Minor Error:");
                        ConsoleWrite("[Error] ^3{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        return true;

                    case "-2": // Invalid IP Address.
                    case "-3": // Invalid Port.
                    case "-4": // Error occurred when trying to establish a connection.
                        ConsoleWrite("[Error] ^8Fatal Error:");
                        ConsoleWrite("[Error] ^8An error occurred during establishing a connection to the Teamspeak 3 Server.");
                        ConsoleWrite("[Error] ^8Make sure your ^b\"Server Ip\"^n and ^b\"Query Port\"^n are correct.");
                        ConsoleWrite("[Error] ^8{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        if (!_mTsReconnecting && PerformReconnect())
                        {
                            return true;
                        }
                        SetPluginState(false);
                        return false;

                    case "-7": // Error occurred during sending the query.
                    case "-8": // Error occurred during receiving the response.
                        ConsoleWrite("[Error] ^8Fatal Error:");
                        ConsoleWrite("[Error] ^8An error occurred during sending and receiving data to the Teamspeak 3 Server.");
                        ConsoleWrite("[Error] ^8{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        if (!_mTsReconnecting && PerformReconnect())
                        {
                            break;
                        }
                        SetPluginState(false);
                        return false;

                    case "3329": // You are temp banned from the server for flooding.
                    case "3331": // You are temp banned from the server for 'x' seconds.
                        ConsoleWrite("[Error] ^8Fatal Error:");
                        ConsoleWrite("[Error] ^8You were temporarily banned from the Teamspeak 3 Server for flooding.");
                        ConsoleWrite("[Error] ^8Make sure your ^bProcon's Ip^n is in your ^bTeamspeak 3 Server's Whitelist^n.");
                        ConsoleWrite("[Error] ^8{0}: {1} ({2})", _mTsResponse.Id, _mTsResponse.Message, _mTsResponse.ExtraMessage);
                        SetPluginState(false);
                        return false;
                }

                switch (queryCode)
                {
                    case Queries.OpenConnectionEstablish:
                        ConsoleWrite("[Error] ^8Fatal Error:");
                        ConsoleWrite("[Error] ^8An error occurred during establishing a connection to the Teamspeak 3 Server.");
                        ConsoleWrite("[Error] ^8Make sure your ^b\"Server Ip\"^n and ^b\"Query Port\"^n are correct.");
                        ConsoleWrite("[Error] ^8{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        SetPluginState(false);
                        return false;
                    case Queries.OpenConnectionLogin:
                        ConsoleWrite("[Error] ^8Fatal Error:");
                        ConsoleWrite("[Error] ^8An error occurred during logging into the Teamspeak 3 Server.");
                        ConsoleWrite("[Error] ^8Make sure your ^b\"Query Username\"^n and ^b\"Query Password\"^n are correct.");
                        ConsoleWrite("[Error] ^8{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        SetPluginState(false);
                        return false;
                    case Queries.OpenConnectionUse:
                        ConsoleWrite("[Error] ^8Fatal Error:");
                        ConsoleWrite("[Error] ^8An error occurred during finding the virtual server.");
                        ConsoleWrite("[Error] ^8Make sure your ^b\"Server Port\"^n is correct.");
                        ConsoleWrite("[Error] ^8{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        SetPluginState(false);
                        return false;
                    case Queries.OpenConnectionMain:
                        ConsoleWrite("[Error] ^8Fatal Error:");
                        ConsoleWrite("[Error] ^8An error occurred during finding the main channel.");
                        ConsoleWrite("[Error] ^8Make sure your ^b\"Main Channel Name\"^n is correct and that the channel exists in the Teamspeak 3 Server.");
                        ConsoleWrite("[Error] ^8{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        SetPluginState(false);
                        return false;
                    case Queries.OpenConnectionNickname:
                        ConsoleWrite("[Error] ^3Minor Error:");
                        ConsoleWrite("[Error] ^3An error occurred during changing the server query nickname.");
                        ConsoleWrite("[Error] ^3Make sure your ^b\"Query Nickname\"^n is not already in use.");
                        ConsoleWrite("[Error] ^3{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        return true;
                    case Queries.TsInfoClientList:
                        ConsoleWrite("[Error] ^3Minor Error - Update Teamspeak Information:");
                        ConsoleWrite("[Error] ^3An error occurred during obtaining the Teamspeak Client List.");
                        ConsoleWrite("[Error] ^3{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        return false;
                    case Queries.TsInfoChannelList:
                        ConsoleWrite("[Error] ^3Minor Error - Update Teamspeak Information:");
                        ConsoleWrite("[Error] ^3An error occurred during obtaining the Teamspeak Channel List.");
                        ConsoleWrite("[Error] ^3{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        return false;
                    case Queries.TsInfoClientInfo:
                        ConsoleWrite("[Error] ^3Minor Error - Update Teamspeak Information:");
                        ConsoleWrite("[Error] ^3An error occurred during obtaining an Advanced Client Information.");
                        ConsoleWrite("[Error] ^3{0}: {1}", _mTsResponse.Id, _mTsResponse.Message);
                        return true;
                }
                return true;
            }

            private Boolean PerformReconnect()
            {
                ConsoleWrite("[Reconnect] Attempting to establish a new connection to the Teamspeak 3 Server.");
                _mTsReconnecting = true;
                for (int attempt = 1; attempt <= ErrReconnectOnErrorAttempts; attempt++)
                {
                    if (attempt != 1)
                    {
                        _mTsReconnEvent.WaitOne(ErrReconnectOnErrorInterval);
                    }

                    _mActionMutex.WaitOne();
                    ActionEvent tAction = (_mActions.Count == 0) ? null : _mActions.Peek();
                    _mActionMutex.ReleaseMutex();

                    if (tAction == null || tAction.Command != Commands.ClientDisabled)
                    {
                        _mTsConnection.Close();
                        PerformOpenConnection();
                        if (_mTsResponse.Id == "0")
                        {
                            _mTsReconnecting = false;
                            return true;
                        }

                        ConsoleWrite("[Reconnect] Failed {0}.", (attempt < ErrReconnectOnErrorAttempts) ? ("attempt " + attempt + " out of " + ErrReconnectOnErrorAttempts) : ("the last attempt."));
                    }
                    else
                    {
                        attempt = ErrReconnectOnErrorAttempts + 1;
                    }
                }
                _mTsReconnecting = false;
                return false;
            }

            public void UpdateTsInfoFromService()
            {
                _plugin.Log.Debug(() => "Preparing to fetch information from teamspeak web service.", 7);
                if (String.IsNullOrEmpty(WebServiceURL))
                {
                    _plugin.Log.Error("Cannot fetch from teamspeak web service, no URL provided.");
                    return;
                }

                using (WebClient client = new WebClient())
                {
                    try
                    {
                        List<TeamspeakClient> clientInfo = new List<TeamspeakClient>();
                        String clientResponse = _plugin.ClientDownloadTimer(client, WebServiceURL);
                        ArrayList tsClientList = (ArrayList)JSON.JsonDecode(clientResponse);
                        foreach (Hashtable tsClient in tsClientList)
                        {
                            TeamspeakClient parsedTsClient = new TeamspeakClient();
                            parsedTsClient.TsName = (String)tsClient["client_nickname"];
                            parsedTsClient.AdvIpAddress = (String)tsClient["connection_client_ip"];
                            parsedTsClient.MedChannelId = Int32.Parse((String)tsClient["cid"]);
                            parsedTsClient.MedChannelName = (String)tsClient["channel_name"];

                            // Only add the client to the list of online clients if they are in a monitored channel
                            if (parsedTsClient.MedChannelName == Ts3MainChannelName || 
                                Ts3SubChannelNames.Contains(parsedTsClient.MedChannelName))
                            {
                                clientInfo.Add(parsedTsClient);
                            }
                        }
                        _mClientTsInfo = clientInfo;
                    }
                    catch (Exception e)
                    {
                        if (e is WebException)
                        {
                            _plugin.Log.Warn("Issue connecting to teamspeak web service.");
                            return;
                        }
                        _plugin.HandleException(new AdKatsException("Error while parsing teamspeak web service data.", e));
                        return;
                    }
                }
            }

            private void UpdateTsInfo()
            {
                List<TeamspeakClient> clientInfo = new List<TeamspeakClient>();

                SendTeamspeakQuery(TeamspeakQuery.BuildClientListQuery());
                if (!PerformResponseHandling(Queries.TsInfoClientList))
                {
                    return;
                }

                foreach (TeamspeakResponseSection sec in _mTsResponse.Sections)
                {
                    foreach (TeamspeakResponseGroup grp in sec.Groups)
                    {
                        clientInfo.Add(new TeamspeakClient(grp));
                    }
                }

                List<TeamspeakChannel> channelInfo = new List<TeamspeakChannel>();

                SendTeamspeakQuery(TeamspeakQuery.BuildChannelListQuery());
                if (!PerformResponseHandling(Queries.TsInfoChannelList))
                {
                    return;
                }

                foreach (TeamspeakResponseSection sec in _mTsResponse.Sections)
                {
                    foreach (TeamspeakResponseGroup grp in sec.Groups)
                    {
                        channelInfo.Add(new TeamspeakChannel(grp));
                    }
                }

                for (int i = 0; i < clientInfo.Count; i++)
                {
                    Boolean inChannel = false;

                    if (clientInfo[i].MedChannelId == _mMainChannel.TsId)
                    {
                        inChannel = true;
                    }

                    foreach (TeamspeakChannel pickupChannel in _mPickupChannels)
                    {
                        if (clientInfo[i].MedChannelId == pickupChannel.TsId)
                        {
                            inChannel = true;
                        }
                    }

                    if (!inChannel)
                    {
                        clientInfo.RemoveAt(i--);
                    }
                }

                for (int i = 0; i < clientInfo.Count; i++)
                {
                    int? tsId = clientInfo[i].TsId;
                    if (tsId != null)
                    {
                        SendTeamspeakQuery(TeamspeakQuery.BuildClientInfoQuery(tsId.Value));
                    }

                    if (!PerformResponseHandling(Queries.TsInfoClientInfo))
                    {
                        return;
                    }

                    if (_mTsResponse.Id != "0")
                    {
                        continue;
                    }

                    if (!_mTsResponse.HasSections || !_mTsResponse.Sections[0].HasGroups)
                    {
                        continue;
                    }


                    clientInfo[i].SetAdvancedData(_mTsResponse.Sections[0].Groups[0]);
                }

                for (int i = 0; i < clientInfo.Count; i++)
                {
                    if (clientInfo[i].AdvIpAddress == null)
                    {
                        clientInfo.RemoveAt(i--);
                    }
                }

                _mClientTsInfo = clientInfo;

                //Log.Debug(() => DbgClients, "[Clients] Result of Teamspeak Client Update:");
                //foreach (TeamspeakClient tsClient in _mClientTsInfo)
                //Log.Debug(() => DbgClients, "- TS Client [Ip: {0}, Channel: {1}, Name: {2}]", tsClient.AdvIpAddress, tsClient.MedChannelId, tsClient.TsName);
            }

            private void AddToActionQueue(Commands command, params Object[] arguments)
            {
                _mActionMutex.WaitOne();
                if (command == Commands.ClientEnabled || command == Commands.ClientDisabled)
                {
                    Queue<ActionEvent> tNew = new Queue<ActionEvent>();
                    while (_mActions.Count > 0 && (_mActions.Peek().Command == Commands.ClientEnabled || _mActions.Peek().Command == Commands.ClientDisabled))
                    {
                        tNew.Enqueue(_mActions.Dequeue());
                    }
                    
                    Boolean tRelease = tNew.Count == 0;

                    tNew.Clear();
                    tNew.Enqueue(new ActionEvent(command, arguments));
                    while (_mActions.Count > 0)
                    {
                        tNew.Enqueue(_mActions.Dequeue());
                    }
                    _mActions = tNew;

                    if (tRelease)
                    {
                        _mActionSemaphore.Release();
                    }
                }
                else
                {
                    _mActions.Enqueue(new ActionEvent(command, arguments));
                    _mActionSemaphore.Release();
                }
                _mActionMutex.ReleaseMutex();
            }

            private void SendTeamspeakQuery(TeamspeakQuery query)
            {
                TimeSpan delay = TimeSpan.FromMilliseconds(SynDelayQueriesAmount);
                TimeSpan delta = DateTime.Now - _mTsPrevSendTime;
                if (delta <= delay)
                {
                    Thread.Sleep(delay - delta);
                }
                _mTsResponse = _mTsConnection.Send(query);
                _mTsPrevSendTime = DateTime.Now;
            }
        }
    }
}